quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,// Rewrite the operand of all jumps to this label.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeEmitter.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the operation as a COPY.; // Get rid of the sub-register index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite the problematic successors for every block that wants to reach; // the bad blocks. For simplicity, we just introduce a new block for every; // edge we need to rewrite. (Fancier things are possible.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,2,"['Rewrite', 'rewrite']","['Rewrite', 'rewrite']"
Modifiability,// Rewrite the public symbol indices into symbol offsets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/Native/GSIStreamBuilder.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the relevant PHI nodes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the size as needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite the store with the new form of stored value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite this with.overflow intrinsic as non-overflowing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite to -MD/-MMD along with -MF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite to the mapped register at Idx.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite to unconditional branch,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIPreEmitPeephole.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIPreEmitPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIPreEmitPeephole.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite unassigned dbg_values to use the stack slot.; // TODO We can potentially do this for list debug values as well if we know; // how the dbg_values are getting unassigned.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocFast.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite unconditionally.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite unless -nostdlib is present.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite uses and update the map. The actions depend upon whether; // we generating code for the kernel or epilog blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite uses of F in global initializers, etc. to uses of a wrapper; // function that dynamically resolves the calls to F via our JIT API",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/Miscompilation.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite uses of input valus to parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite uses that are outside of the original def's block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TailDuplicator.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite uses that have been scheduled already to use the new; // Phi register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Rewrite uses within kernel to the new struct,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite virtual registers, possibly extending ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,2,"['Rewrite', 'extend']","['Rewrite', 'extending']"
Modifiability,// Rewrite virtual registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite. Note we could have used MachineOperand::substPhysReg(), but; // we need the inlining here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Rewrite:; // Xd = LOAD Xb, off; // to:; // Xc = MOV Xb; // Xd = LOAD Xc, off",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:3,Rewrite,Rewrite,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// RewriteGEPAsOffset has replaced RHS and all of its uses with a re-written; // GEP having PtrBase as the pointer base, and has returned in NewRHS the; // offset. Since Index is the offset of LHS to the base pointer, we will now; // compare the offsets instead of comparing the pointers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3,Rewrite,RewriteGEPAsOffset,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Rewrite'],['RewriteGEPAsOffset']
Modifiability,// RewriteObjCMethodsMetaData - Rewrite methods metadata for instance or; /// class methods.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,RewriteObjCMethodsMetaData,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,['Rewrite'],"['Rewrite', 'RewriteObjCMethodsMetaData']"
Modifiability,// Rewrites I to (LHS op RHS) if LHS is computed already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h:3,Rewrite,Rewrites,3,interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Scalar/NaryReassociate.h,1,['Rewrite'],['Rewrites']
Modifiability,// Rewrites candidate C with respect to Basis.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:3,Rewrite,Rewrites,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['Rewrite'],['Rewrites']
Modifiability,// Rewrites the PHI Nodes in a cleanuppad.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:3,Rewrite,Rewrites,3,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['Rewrite'],['Rewrites']
Modifiability,// Rewrites the following builtins:; // - llvm.bpf.getelementptr.and.load; // - llvm.bpf.getelementptr.and.store; // As (load (getelementptr ...)) or (store (getelementptr ...)).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFCheckAndAdjustIR.cpp:3,Rewrite,Rewrites,3,interpreter/llvm-project/llvm/lib/Target/BPF/BPFCheckAndAdjustIR.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFCheckAndAdjustIR.cpp,1,['Rewrite'],['Rewrites']
Modifiability,"// Rewrites the imported local variable V with external storage; // (static, extern, etc.) as *V; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:3,Rewrite,Rewrites,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,4,"['Rewrite', 'variab']","['Rewrites', 'variable']"
Modifiability,"// Right now we handle the case when Ptr1/Ptr2 are both GEPs with an identical; // base. After that base, they may have some number of common (and; // potentially variable) indices. After that they handle some constant; // offset, which determines their offset from each other. At this point, we; // handle no other case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp:163,variab,variable,163,interpreter/llvm-project/llvm/lib/IR/Value.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Value.cpp,1,['variab'],['variable']
Modifiability,"// Right now, DstMO has the extended register, since it comes from an; // extended opcode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,2,['extend'],['extended']
Modifiability,"// RooAbsMinimizerFcn config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,config,config,22,roofit/roofitcore/inc/RooMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h,4,['config'],['config']
Modifiability,"// RooAbsMinimizerFcn config; // RooAbsMinimizerFcn config that can only be set in constructor, 0 means no parallelization (default),; // -1 is parallelization with the number of workers controlled by RooFit::MultiProcess which; // defaults to the number of available processors, n means parallelization with n CPU's",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,config,config,22,roofit/roofitcore/inc/RooMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h,2,['config'],['config']
Modifiability,"// RootShower environment variables; // MenuBar Frame",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h:26,variab,variables,26,test/RootShower/RootShower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/RootShower/RootShower.h,1,['variab'],['variables']
Modifiability,"// Run all cleanups for a block scope, and non-lifetime-extended cleanups; // for a full-expression scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:56,extend,extended,56,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['extend'],['extended']
Modifiability,"// Run through the blocks one more time, and report uninitialized variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:66,variab,variables,66,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variables']
Modifiability,"// Rustem: please find a solution that does not use distance (it does not exist on solaris); // Log() << kINFO << ""Variable "" << vit->first; // << "" included "" << distance(beg_it, end_it) + 1; // << "" events: width = "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos - lpos; // << "", (min, max) = ("" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << lpos; // << "", "" << std::setfill(' ') << std::setw(5) << std::setprecision(3) << rpos << "")"" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:115,Variab,Variable,115,tmva/tmva/src/ModulekNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx,1,['Variab'],['Variable']
Modifiability,"// S a m e w i t h c u s t o m c o n f i g u r a t i o n; // -----------------------------------------------------------; // Construct a custom configuration which uses the adaptive Gauss-Kronrod technique; // for closed 1D integrals",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:144,config,configuration,144,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,2,"['adapt', 'config']","['adaptive', 'configuration']"
Modifiability,"// S e t u p m o d e l; // ---------------------; // Declare variables x,mean,sigma with associated name, title, initial value and allowed range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:61,variab,variables,61,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variables']
Modifiability,"// S u m e x t e n d e d c o m p o n e n t s w i t h o u t c o e f s; // -------------------------------------------------------------------------; // Construct sum of two extended p.d.f. (no coefficients required)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:172,extend,extended,172,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['extend'],['extended']
Modifiability,"// S u m e x t e n d e d c o m p o n e n t s; // ---------------------------------------------; // Construct sum of two extended p.d.f. (no coefficients required)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:120,extend,extended,120,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['extend'],['extended']
Modifiability,// SCRATCH_RSRC_DWORD[01] is a special global variable that represents; // the scratch buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUELFObjectWriter.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUELFObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUELFObjectWriter.cpp,1,['variab'],['variable']
Modifiability,"// SEHExceptStmt are treated like labels, so they are the first statement in a; // block.; // Save local scope position because in case of exception variable ScopePos; // won't be restored when traversing AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:149,variab,variable,149,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// SEI CERT ENV31-C; // If set to true, consider getenv calls as invalidating operations on the; // environment variable buffer. This is implied in the standard, but in; // practice does not cause problems (in the commonly used environments).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/cert/InvalidPtrChecker.cpp:112,variab,variable,112,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/cert/InvalidPtrChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/cert/InvalidPtrChecker.cpp,1,['variab'],['variable']
Modifiability,"// SELECT_CC - Operand 0 and operand 1 are selection variable, operand 3; // is condition code and operand 4 is flag operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.h:53,variab,variable,53,interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Lanai/LanaiISelLowering.h,1,['variab'],['variable']
Modifiability,"// SEXT_INREG has the same src reg size as dst, the size of the value to be; // extended is encoded in the imm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:80,extend,extended,80,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extended']
Modifiability,"// SExtIdx gives the index of the result of the load pair that must be; // extended. The value of SExtIdx assumes that the paired load produces the; // value in this order: (I, returned iterator), i.e., -1 means no value has; // to be extended, 0 means I, and 1 means the returned iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:75,extend,extended,75,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,2,['extend'],['extended']
Modifiability,// SIMD-specific configuration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:17,config,configuration,17,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['config'],['configuration']
Modifiability,"// SLT fits well with 2 of our 4 pseudo-branches:; // BLT, where $rs < $rt, translates into ""slt $at, $rs, $rt"" and; // BGT, where $rs > $rt, translates into ""slt $at, $rt, $rs"".; // If the result of the SLT is 1, we branch, and if it's 0, we don't.; // This is accomplished by using a BNEZ with the result of the SLT.; //; // The other 2 pseudo-branches are opposites of the above 2 (BGE with BLT; // and BLE with BGT), so we change the BNEZ into a BEQZ.; // Because only BGE and BLE branch on equality, we can use the; // AcceptsEquality variable to decide when to emit the BEQZ.; // Note that the order of the SLT arguments doesn't change between; // opposites.; //; // The same applies to the unsigned variants, except that SLTu is used; // instead of SLT.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:540,variab,variable,540,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['variab'],['variable']
Modifiability,"// SMLALBB, SMLALBT, SMLALTB, SMLALTT multiply two 16-bit values and; // accumulates the product into a 64-bit value. The 16-bit values will; // be sign extended somehow or SRA'd into 32-bit values; // (addc (adde (mul 16bit, 16bit), lo), hi)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:153,extend,extended,153,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// SMULL(2), UMULL(2); // Both operands need to be extends of the same type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:51,extend,extends,51,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extends']
Modifiability,"// SMin/SMax reduction over the vector with (potentially-extended); // i1 element type is actually a (potentially-extended); // logical `and`/`or` reduction over the original non-extended value:; // vector_reduce_s{min,max}(<n x i1>); // -->; // vector_reduce_{or,and}(<n x i1>); // and; // vector_reduce_s{min,max}(sext(<n x i1>)); // -->; // sext(vector_reduce_{or,and}(<n x i1>)); // and; // vector_reduce_s{min,max}(zext(<n x i1>)); // -->; // zext(vector_reduce_{and,or}(<n x i1>))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:57,extend,extended,57,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,3,['extend'],['extended']
Modifiability,// SPIR-V Code Generator Pass Configuration Options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVTargetMachine.cpp:30,Config,Configuration,30,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVTargetMachine.cpp,1,['Config'],['Configuration']
Modifiability,// SPIR: standard portable IR for OpenCL 32-bit version,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:18,portab,portable,18,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['portab'],['portable']
Modifiability,// SPIR: standard portable IR for OpenCL 64-bit version,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:18,portab,portable,18,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['portab'],['portable']
Modifiability,"// SSE41 also has vector sign/zero extending loads, PMOV[SZ]X",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:35,extend,extending,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// SSE41 brings specific instructions for doing vector sign extend even in; // cases where we don't have SRA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// START: SubclassID for recipes that inherit VPHeaderPHIRecipe.; // VPHeaderPHIRecipe need to be kept together.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h:38,inherit,inherit,38,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanValue.h,1,['inherit'],['inherit']
Modifiability,// STD the extended value into the stack slot.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:11,extend,extended,11,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,// STMicroelectronics STxP7x family of configurable; // and extensible RISC processors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:39,config,configurable,39,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['config'],['configurable']
Modifiability,"// SVE load instructions perform an implicit zero-extend, which makes them; // perfect candidates for combining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:50,extend,extend,50,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// SVM always uses normalised input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:36,variab,variables,36,tmva/tmva/src/MethodSVM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx,1,['variab'],['variables']
Modifiability,"// S_CONSTANT is preceded by an APSInt, which has a variable length. So we; // have to do a full deserialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/RecordName.cpp:52,variab,variable,52,interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/RecordName.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/CodeView/RecordName.cpp,1,['variab'],['variable']
Modifiability,"// Same as above, but the shift amount may be extended after masking:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:46,extend,extended,46,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extended']
Modifiability,"// Sample entire extended range (N2 samples)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx:17,extend,extended,17,roofit/roofitcore/src/RooFFTConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx,1,['extend'],['extended']
Modifiability,"// Sampler initialization have 5 cases:; // 1. function argument passing; // 1a. argument is a file-scope variable; // 1b. argument is a function-scope variable; // 1c. argument is one of caller function's parameters; // 2. variable initialization; // 2a. initializing a file-scope variable; // 2b. initializing a function-scope variable; //; // For file-scope variables, since they cannot be initialized by function; // call of __translate_sampler_initializer in LLVM IR, their references; // need to be replaced by a cast from their literal initializers to; // sampler type. Since sampler variables can only be used in function; // calls as arguments, we only need to replace them when handling the; // argument passing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,7,['variab'],"['variable', 'variables']"
Modifiability,"// Sampling grid definition; // control variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.h:40,variab,variables,40,roofit/roofitcore/src/RooMCIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMCIntegrator.h,1,['variab'],['variables']
Modifiability,// Sandbox SP change.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,"// Sandbox calls by aligning call and branch delay to the bundle end.; // For indirect calls, emit the mask before the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,// Sandbox indirect branch or return instruction by inserting mask operation; // before it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,// Sandbox indirect jumps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,"// Sandbox loads, stores and SP changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,// Sandbox memory access or SP change. Insert mask operation before and/or; // after the instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,// Sandbox memory access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:3,Sandbox,Sandbox,3,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['Sandbox'],['Sandbox']
Modifiability,// Save (non-extended) type source info pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:13,extend,extended,13,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,3,['extend'],['extended']
Modifiability,"// Save configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:8,config,configuration,8,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,2,['config'],['configuration']
Modifiability,"// Save copy of original histX binning and make alternate binning; // for extended range scanning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx:74,extend,extended,74,roofit/roofitcore/src/RooFFTConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFFTConvPdf.cxx,1,['extend'],['extended']
Modifiability,"// Save filename in static variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:27,variab,variable,27,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['variab'],['variable']
Modifiability,"// Save live-ins to output vector. Ignore any that are still marked as being; // VPHIs with no location -- those are variables that we know the value of,; // but are not actually available in the register file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:117,variab,variables,117,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// Save local scope position because in case of condition variable ScopePos; // won't be restored when traversing AST.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,3,['variab'],['variable']
Modifiability,"// Save some useful variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx:20,variab,variables,20,io/io/src/TStreamerInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfo.cxx,1,['variab'],['variables']
Modifiability,// Save the DBG_VALUE instruction that defined this stackified; // variable since later we need it to construct another one on; // pop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp:67,variab,variable,67,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp,1,['variab'],['variable']
Modifiability,// Save the arguments to be passed to the inherited constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:42,inherit,inherited,42,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['inherit'],['inherited']
Modifiability,"// Save the config parameters in the dedicated list so that they will be saved; // in the outputlist and therefore in the relevant TQueryResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerAdaptive.cxx:12,config,config,12,proof/proofplayer/src/TPacketizerAdaptive.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerAdaptive.cxx,2,['config'],['config']
Modifiability,// Save the current loop name in a variable so that we can report it even; // after it has been deleted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['variab'],['variable']
Modifiability,// Save the variable arguments that were passed in registers.; // The caller is required to reserve stack space for 6 arguments regardless; // of how many arguments were actually passed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Save variable definition expression if any.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,// Saves a shortcut pointing from entry to exit.; // This function may extend this shortcut if possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h:71,extend,extend,71,interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/RegionInfo.h,1,['extend'],['extend']
Modifiability,"// Scalable vectors cannot be global variables, since we don't know; // the runtime size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,1,['variab'],['variables']
Modifiability,// Scalar evolution does not propagate the non-wrapping flags to values that; // are derived from a non-wrapping induction variable because non-wrapping; // could be flow-sensitive.; //; // Look through the potentially overflowing instruction to try to prove; // non-wrapping for the *specific* value of Ptr.; // The arithmetic implied by an inbounds GEP can't overflow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:123,variab,variable,123,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Scalar extend can use 64-bit BFE, but VGPRs require extending to; // 32-bits, and then to 64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:10,extend,extend,10,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,// Scalar i8 / i16 operations will typically be made after first extending; // the operands to i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:65,extend,extending,65,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['extend'],['extending']
Modifiability,"// Scalar integer and FP values smaller than 64 bits are implicitly extended; // up to 64 bits. At the very least, we have to increase the striding of the; // vaargs list to match this, and for FP values we need to introduce; // FP_ROUND nodes as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:68,extend,extended,68,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Scalar load widening needs running after load-store-vectorizer as that pass; // doesn't handle overlapping cases. In addition, this pass enhances the; // widening to handle cases where scalar sub-dword loads are naturally aligned; // only but not dword aligned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULateCodeGenPrepare.cpp:140,enhance,enhances,140,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULateCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULateCodeGenPrepare.cpp,1,['enhance'],['enhances']
Modifiability,// Scaled variable (non-constant) indices.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Scaling factors are not free at all.; // Operands | Rt Latency; // -------------------------------------------; // Rt, [Xn, Xm] | 4; // -------------------------------------------; // Rt, [Xn, Xm, lsl #imm] | Rn: 4 Rm: 5; // Rt, [Xn, Wm, <extend> #imm] |",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:242,extend,extend,242,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// Scan all the physical registers. When a register is defined in the current; // function set it and all the aliasing registers as defined in the regmask.; // FIXME: Rewrite to use regunits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegUsageInfoCollector.cpp:167,Rewrite,Rewrite,167,interpreter/llvm-project/llvm/lib/CodeGen/RegUsageInfoCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegUsageInfoCollector.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// Scan for variable values that can never be resolved: if they have; // different DIExpressions, different indirectness, or are mixed constants /; // non-constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Scan the Config file to find installed GCC libraries path.; // Typical content of the GCC config file:; // LDPATH=""/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.x:/usr/lib/gcc/; // (continued from previous line) x86_64-pc-linux-gnu/4.9.x/32""; // MANPATH=""/usr/share/gcc-data/x86_64-pc-linux-gnu/4.9.x/man""; // INFOPATH=""/usr/share/gcc-data/x86_64-pc-linux-gnu/4.9.x/info""; // STDCXX_INCDIR=""/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.x/include/g++-v4""; // We are looking for the paths listed in LDPATH=... .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:12,Config,Config,12,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,2,"['Config', 'config']","['Config', 'config']"
Modifiability,// Scan the GEP. We check it if it contains constant offsets and at most; // one variable offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// Scan the frontier, looking for blocks where the variable was; // uninitialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,// Scan the instructions looking for stores to local variables' storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:53,variab,variables,53,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variables']
Modifiability,// Scan the memory operations on the chain and find the first; // non-consecutive load memory address. These variables hold the index in; // the store node array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:109,variab,variables,109,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variables']
Modifiability,// Scope information. Contains a parent scope and related variable; // declaration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:58,variab,variable,58,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,1,['variab'],['variable']
Modifiability,"// Search for config files in the following order:; // 1. <triple>-<mode>.cfg using real driver mode; // (e.g. i386-pc-linux-gnu-clang++.cfg).; // 2. <triple>-<mode>.cfg using executable suffix; // (e.g. i386-pc-linux-gnu-clang-g++.cfg for *clang-g++).; // 3. <triple>.cfg + <mode>.cfg using real driver mode; // (e.g. i386-pc-linux-gnu.cfg + clang++.cfg).; // 4. <triple>.cfg + <mode>.cfg using executable suffix; // (e.g. i386-pc-linux-gnu.cfg + clang-g++.cfg for *clang-g++).; // Try loading <triple>-<mode>.cfg, and return if we find a match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:14,config,config,14,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,"// Search for cygpath in PATH environment variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/cygpath.h:42,variab,variable,42,core/dictgen/res/cygpath.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/cygpath.h,1,['variab'],['variable']
Modifiability,"// Search for live-in variables. They are factored into the register pressure; // from the begining. Live-in variables used by every iteration should be; // considered as alive throughout the loop. For example, the variable `c` in; // following code. \code; // int c = ...;; // for (int i = 0; i < n; i++); // a[i] += b[i] + c;; // \endcode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp:22,variab,variables,22,interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachinePipeliner.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Search for parent configs starting from the parent directory of; // ConfigFile.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp:21,config,configs,21,interpreter/llvm-project/clang/lib/Format/Format.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/Format.cpp,2,"['Config', 'config']","['ConfigFile', 'configs']"
Modifiability,"// Search for the closest inheritable default namespace, starting on (and; // including) the Node and traveling upwards through parent nodes. Returns; // nullptr if there are no inheritable default namespaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:26,inherit,inheritable,26,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,2,['inherit'],['inheritable']
Modifiability,"// Second pass for regular mode - Trim/Extend dataset to exact number of entries; // Calculate difference between what is generated so far and what is requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:39,Extend,Extend,39,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,2,['Extend'],['Extend']
Modifiability,"// Second write variable info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:16,variab,variable,16,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variable']
Modifiability,"// Second, create a gc.relocate for every live variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:47,variab,variable,47,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['variab'],['variable']
Modifiability,"// Second, rewrite the instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp:11,rewrite,rewrite,11,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/RegBankSelect.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Second, we rewrite all of the split stores. At this point, we know that; // all loads from this alloca have been split already. For stores of such; // loads, we can simply look up the pre-existing split loads. For stores of; // other loads, we split those loads first and then write split stores of; // them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:14,rewrite,rewrite,14,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,// See BenchmarkKey.::Config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h:22,Config,Config,22,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/CodeTemplate.h,1,['Config'],['Config']
Modifiability,// See HaveGVs variable comment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h:15,variab,variable,15,interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ModuleSummaryIndex.h,1,['variab'],['variable']
Modifiability,"// See if in the VariableSelectionRules there are attributes and names with; // which we can annotate.; // We may look for a smarter algorithm.; // Nothing to do then ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:17,Variab,VariableSelectionRules,17,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['Variab'],['VariableSelectionRules']
Modifiability,"// See if the expression we're interested refers to a variable.; // If so, we can track both its contents and constraints on its value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,"// See if the shift amount is already masked (e.g. for rotation modulo),; // then we can zero-extend it by setting all the other mask elements to; // zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:94,extend,extend,94,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// See if the value being truncated is already sign extended. If so, just; // eliminate the trunc/sext pair.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:52,extend,extended,52,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// See if there is a relocation to a valid debug map entry inside this; // variable's location. The order is important here. We want to always check; // if the variable has a valid relocation, so that the DIEInfo is filled.; // However, we don't want a static variable in a function to force us to keep; // the enclosing function, unless requested explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,3,['variab'],['variable']
Modifiability,"// See if there is a relocation to a valid debug map entry inside this; // variable's location. The order is important here. We want to always; // check if the variable has a location expression address. However, we; // don't want a static variable in a function to force us to keep the; // enclosing function, unless requested explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp:75,variab,variable,75,interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Parallel/DependencyTracker.cpp,3,['variab'],['variable']
Modifiability,"// See if this has been extended from a smaller/equal size to; // the truncation size, allowing a truncation to combine with the extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// See if this is a redefinition of a variable in the same scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:38,variab,variable,38,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// See if this is an auto-typed variable whose initializer we are parsing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,"// See if we can constant fold this builtin. If so, don't emit it at all.; // TODO: Extend this handling to all builtin calls that we can constant-fold.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:84,Extend,Extend,84,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['Extend'],['Extend']
Modifiability,// See if we can get away with nuking some of the global variable initializers; // in the program...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp:57,variab,variable,57,interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/CrashDebugger.cpp,1,['variab'],['variable']
Modifiability,"// See if we can peek through to a vector with a wider element type, if the; // signbits extend down to all the sub-elements as well.; // Calling MOVMSK with the wider type, avoiding the bitcast, helps expose; // potential SimplifyDemandedBits/Elts cases.; // If we looked through a truncate that discard bits, we can't do this; // transform.; // FIXME: We could do this transform for truncates that discarded bits by; // inserting an AND mask between the new MOVMSK and the CMP.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:89,extend,extend,89,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// See if we can recurse into each shuffle source op (if it's a target; // shuffle). The source op should only be generally combined if it either has; // a single use (i.e. current Op) or all its users have already been combined,; // if not then we can still combine but should prevent generation of variable; // shuffles to avoid constant pool bloat.; // Don't recurse if we already have more source ops than we can combine in; // the remaining recursion depth.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:300,variab,variable,300,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// See if we can use a TBZ to fold in an AND as well.; // TBZ has a smaller branch displacement than CBZ. If the offset is; // out of bounds, a late MI-layer pass rewrites branches.; // 403.gcc is an example that hits this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:163,rewrite,rewrites,163,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['rewrite'],['rewrites']
Modifiability,"// See if we can use the 8-bit immediate form. Note that some instructions; // will sign extend the immediate operand, so to be conservative we only; // accept the range [0,128).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp:89,extend,extend,89,interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86Subtarget.cpp,1,['extend'],['extend']
Modifiability,"// See if we have a reason to emit a line-0 record now.; // Reasons to emit a line-0 record include:; // - User asked for it (UnknownLocations).; // - Instruction has a label, so it's referenced from somewhere else,; // possibly debug information; we want it to have a source location.; // - Instruction is at the top of a block; we don't want to inherit the; // location from the physically previous (maybe unrelated) block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:347,inherit,inherit,347,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['inherit'],['inherit']
Modifiability,// Select UMULL if we can replace the other operand with an extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Selecting between two integer or vector splat integer constants?; //; // Note that we don't handle a scalar select of vectors:; // select i1 %c, <2 x i8> <1, 1>, <2 x i8> <0, 0>; // because that may need 3 instructions to splat the condition value:; // extend, insertelement, shufflevector.; //; // Do not handle i1 TrueVal and FalseVal otherwise would result in; // zext/sext i1 to i1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:256,extend,extend,256,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['extend'],['extend']
Modifiability,"// Selects can't be promoted on their own, but often can be speculated. We; // check the speculation outside of the rewriter so that we see the; // fully-rewritten alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:116,rewrite,rewriter,116,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewriter']
Modifiability,// Self is passed along as an implicit non-arg variable in a; // block. Mark it as the object pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['variab'],['variable']
Modifiability,// Sema follows a sequence of complex rules to determine whether the; // variable should be captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:73,variab,variable,73,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['variab'],['variable']
Modifiability,// Sema generates anonymous array variables for copying array struct fields.; // Don't warn if we're in an implicitly-generated constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UndefinedArraySubscriptChecker.cpp:34,variab,variables,34,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UndefinedArraySubscriptChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UndefinedArraySubscriptChecker.cpp,1,['variab'],['variables']
Modifiability,"// Send multiple GET requests with a single range of bytes; // Adapted from original version by Wang Lu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:63,Adapt,Adapted,63,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['Adapt'],['Adapted']
Modifiability,"// Send ordinal (and config) info to slave (or master)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx:21,config,config,21,net/auth/src/TAuthenticate.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/auth/src/TAuthenticate.cxx,1,['config'],['config']
Modifiability,"// Send the file to the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:24,sandbox,sandbox,24,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,1,['sandbox'],['sandbox']
Modifiability,// Separate shift/extend operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:18,extend,extend,18,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['extend'],['extend']
Modifiability,// Sequential Maps extend the last colors given out of range inputs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp:19,extend,extend,19,interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-xray/xray-color-helper.cpp,1,['extend'],['extend']
Modifiability,"// Set Axis attributes.; // The variable SCALE rescales the VSIZ; // in order to have the same label size for all angles.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx:32,variab,variable,32,hist/histpainter/src/THistPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histpainter/src/THistPainter.cxx,1,['variab'],['variable']
Modifiability,"// Set High-Water-Mark or max on the sandbox size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:37,sandbox,sandbox,37,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['sandbox'],['sandbox']
Modifiability,"// Set S3-specific data members. If the access and secret keys are not; // provided in the 'options' argument we look in the environmental; // variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:143,variab,variables,143,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['variab'],['variables']
Modifiability,// Set attributes which are particular to an alias; this is a; // specialization of the attributes which may be set on a global; // variable/function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:132,variab,variable,132,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variable']
Modifiability,// Set error mode to not display any message boxes. The child process inherits; // this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp:70,inherit,inherits,70,interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/KillTheDoctor/KillTheDoctor.cpp,1,['inherit'],['inherits']
Modifiability,"// Set isVRegCycle for a node with only live in opers and live out uses. Also; // set isVRegCycle for its CopyFromReg operands.; //; // This is only relevant for single-block loops, in which case the VRegCycle; // node is likely an induction variable in which the operand and target virtual; // registers should be coalesced (e.g. pre/post increment values). Setting the; // isVRegCycle flag helps the scheduler prioritize other uses of the same; // CopyFromReg so that this node becomes the virtual register ""kill"". This; // avoids interference between the values live in and out of the block and; // eliminates a copy inside the loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:242,variab,variable,242,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,1,['variab'],['variable']
Modifiability,// Set number of variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp:17,variab,variables,17,interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineDebugify.cpp,1,['variab'],['variables']
Modifiability,// Set of variables which were bypassed by some jump.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:10,variab,variables,10,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,1,['variab'],['variables']
Modifiability,// Set our bit in the guard variable and emit the initializer and add a global; // destructor if appropriate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,// Set ourselves up for the next variable by resetting visited state.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/MemorySSAUpdater.cpp,1,['variab'],['variable']
Modifiability,"// Set ranges for the variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBernstein.cxx:22,variab,variable,22,roofit/roofit/test/testRooBernstein.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBernstein.cxx,1,['variab'],['variable']
Modifiability,"// Set the ""complementarity"" component of the residuals; // to the pairwise products of the complementary variables; // plus a constant alpha",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpResidual.h:106,variab,variables,106,math/quadp/inc/TQpResidual.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpResidual.h,1,['variab'],['variables']
Modifiability,// Set the 'extended' attribute to indicate its associated attributes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp:12,extend,extended,12,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVOptions.cpp,1,['extend'],['extended']
Modifiability,// Set the EscapingByref flag of __block variables captured by; // escaping blocks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:41,variab,variables,41,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variables']
Modifiability,// Set the MS inheritance model. There is no flag for the unspecified model.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:14,inherit,inheritance,14,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['inherit'],['inheritance']
Modifiability,// Set the captured variables on the block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:20,variab,variables,20,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// Set the default debuginfod URL list, override the environment variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp:65,variab,variable,65,interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/Debuginfod.cpp,1,['variab'],['variable']
Modifiability,"// Set the free variables to be minimized!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/demoMinimizer.cxx:16,variab,variables,16,math/minuit2/test/MnSim/demoMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/demoMinimizer.cxx,1,['variab'],['variables']
Modifiability,"// Set the histogram coordinate axis labels from the titles of each variable, adding units if necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:68,variab,variable,68,roofit/roofitcore/src/RooAbsRealLValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx,1,['variab'],['variable']
Modifiability,// Set the index of the variable to compare on; /**; * @param iVar - index of the variable in fEvent to use; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:24,variab,variable,24,tmva/tmva/inc/TMVA/BDTEventWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h,2,['variab'],['variable']
Modifiability,// Set the insertion point properly. Folding the load can cause generation of; // other random instructions (like sign extends) for addressing modes; make; // sure they get inserted in a logical place before the new instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:119,extend,extends,119,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['extend'],['extends']
Modifiability,"// Set the relevant variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:20,variab,variables,20,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,2,['variab'],['variables']
Modifiability,"// Set the value of a scale factor to modify the bandwidth by. The default value for this is unity.; // Modification of 'normal' bandwidths is useful when the data are not 'normally distributed',; // otherwise one expects little departure from that behavior. Note that both the normal and adaptive; // bandwidth selections are modified by this factor. Useful for systematic studies.; // ***********; // *IMPORTANT* The kernel is proportional to 1/widthScaleFactor.; // ***********",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/Roo2DKeysPdf.h:289,adapt,adaptive,289,roofit/roofit/inc/Roo2DKeysPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/Roo2DKeysPdf.h,1,['adapt'],['adaptive']
Modifiability,"// Set the variable values and ""const"" ness with the workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:11,variab,variable,11,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['variab'],['variable']
Modifiability,"// Set the variables constant, if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:11,variab,variables,11,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['variab'],['variables']
Modifiability,"// Set to false if wants to enable only some branch in the tree; // 1) the input variable formulas",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:81,variab,variable,81,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variable']
Modifiability,"// Set to kTRUE if the config file contains master info; // Create workers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofResourcesStatic.cxx:23,config,config,23,proof/proof/src/TProofResourcesStatic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofResourcesStatic.cxx,1,['config'],['config']
Modifiability,// Set to non-zero if extended const is used (i.e. more than; // one instruction),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Wasm.h:22,extend,extended,22,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Wasm.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/Wasm.h,1,['extend'],['extended']
Modifiability,// Set up methods... these methods are used to copy information about the; // command line arguments into instance variables of BugDriver.; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h:115,variab,variables,115,interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/bugpoint/BugDriver.h,1,['variab'],['variables']
Modifiability,"// Set up the SVE loop preheader, i.e. calculate initial loop predicate,; // zero-extend MaxLen to 64-bits, determine the number of vector elements; // processed in each iteration, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoopIdiomTransform.cpp:82,extend,extend,82,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoopIdiomTransform.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoopIdiomTransform.cpp,1,['extend'],['extend']
Modifiability,"// Set user defined and default _fcn config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:37,config,config,37,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['config'],['config']
Modifiability,"// Set user variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h:12,variab,variable,12,tmva/tmva/inc/TMVA/PDEFoamCell.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoamCell.h,1,['variab'],['variable']
Modifiability,"// Set whether we're in the scope of a condition variable, where 'continue'; // is disallowed despite being a continue scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h:49,variab,variable,49,interpreter/llvm-project/clang/include/clang/Sema/Scope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Scope.h,1,['variab'],['variable']
Modifiability,// SetCC on x86 zero extends so only act on this if it's a logical shift.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:21,extend,extends,21,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// SetInsertPoint also updates the Builder's debug location, but we want to; // keep the one the Builder was configured to use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:109,config,configured,109,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,3,['config'],['configured']
Modifiability,"// Sets User option for fixed or adaptive iteration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:33,adapt,adaptive,33,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// Setting CanUseUndef to true might extend value liveness, set it to false; // to achieve better register pressure.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp:37,extend,extend,37,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StructurizeCFG.cpp,1,['extend'],['extend']
Modifiability,"// Setting both GLC and SLC configures L1 cache policy to MISS_EVICT; // for both loads and stores, and the L2 cache policy to STREAM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp:28,config,configures,28,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIMemoryLegalizer.cpp,2,['config'],['configures']
Modifiability,"// Setting up an extended maximum likelihood fit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:17,extend,extended,17,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['extend'],['extended']
Modifiability,// Setup a SymbolGraphSerializer to write out collected API information in; // the Symbol Graph format.; // FIXME: Make the kind of APISerializer configurable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp:146,config,configurable,146,interpreter/llvm-project/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ExtractAPI/ExtractAPIConsumer.cpp,1,['config'],['configurable']
Modifiability,// Setup the LDR_CNTRL variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTOCodeGenerator.cpp,1,['variab'],['variable']
Modifiability,"// Several specific use cases require extra data in a CPPInstance, but can not; // be a new type. E.g. cross-inheritance derived types are by definition added; // a posterio, and caching of datamembers is up to the datamember, not the; // instance type. To not have normal use of CPPInstance take extra memory, this; // extended data can slot in place of fObject for those use cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx:109,inherit,inheritance,109,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx,2,"['extend', 'inherit']","['extended', 'inheritance']"
Modifiability,"// Shadow variables and their properties must be registered with CUDA; // runtime. Skip Extern global variables, which will be registered in; // the TU where they are defined.; //; // Don't register a C++17 inline variable. The local symbol can be; // discarded and referencing a discarded local symbol from outside the; // comdat (__cuda_register_globals) is disallowed by the ELF spec.; //; // HIP managed variables need to be always recorded in device and host; // compilations for transformation.; //; // HIP managed variables and variables in CUDADeviceVarODRUsedByHost are; // added to llvm.compiler-used, therefore they are safe to be registered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:10,variab,variables,10,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,6,['variab'],"['variable', 'variables']"
Modifiability,// Shadows of initialized device-side global variables are also left; // undefined.; // Managed Variables should be initialized on both host side and device side.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:45,variab,variables,45,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"// Shift left Imm <S> bits, then sign-extend the number in the bottom <N+S>; // bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/Disassembler/LoongArchDisassembler.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/Target/LoongArch/Disassembler/LoongArchDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/Disassembler/LoongArchDisassembler.cpp,1,['extend'],['extend']
Modifiability,"// Shift mean of independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:29,variab,variables,29,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// Shift min and max of dependent variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:34,variab,variable,34,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variable']
Modifiability,// Shift right or sign-extend it if the two operands have different types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,3,['extend'],['extend']
Modifiability,"// Shifts must zero-extend the RHS to preserve the unsigned quantity, and; // must not left shift the RHS to preserve the shift amount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,"// Short-circuit the type check by checking tp_new which all generated subclasses; // of CPPInstance inherit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.h:101,inherit,inherit,101,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.h,1,['inherit'],['inherit']
Modifiability,"// Short-circuit the type check by checking tp_new which all generated subclasses; // of CPPScope inherit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.h:98,inherit,inherit,98,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.h,1,['inherit'],['inherit']
Modifiability,// Should the interval be extended or shrunk?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:26,extend,extended,26,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['extend'],['extended']
Modifiability,"// Should this be extended to include the call to TTree::SetName?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx:18,extend,extended,18,tree/tree/src/TChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TChain.cxx,2,['extend'],['extended']
Modifiability,// Should we allow the configuration of the module file to differ from; // the configuration of the current translation unit in a compatible; // way?; //; // FIXME: Allow this for files explicitly specified with -include-pch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp:23,config,configuration,23,interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReader.cpp,2,['config'],['configuration']
Modifiability,// Should we invert the strings if the LHS is not a variable name?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,// Shrink any sign/zero extends from 32 or smaller to larger than 32 if; // there are sufficient sign bits. Only do this before legalize types to; // avoid creating illegal types in truncate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,extend,extends,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extends']
Modifiability,// Sign bits must extend down to the lowest i16.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:18,extend,extend,18,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Sign extend high part.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,// Sign extend inreg,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/ARC/ARCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Sign extend is zmm vpternlogd+vptruncdb.; // Zero extend is zmm broadcast load+vptruncdw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,// Sign extend is zmm vpternlogd+vptruncdw.; // Zero extend is zmm vpternlogd+vptruncdw+vpsrlw.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,// Sign extend negative numbers if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h:8,extend,extend,8,interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/LEB128.h,1,['extend'],['extend']
Modifiability,// Sign extend of an unsigned unpack -> signed unpack,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Sign extend one more time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the 16-bit chunk to 64-bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,1,['extend'],['extend']
Modifiability,"// Sign extend the LHS and perform an unsigned compare with the ADDW; // result. Since the inputs are sign extended from i32, this is equivalent; // to comparing the lower 32 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// Sign extend the args to 64-bit, so that we can use the same handler for; // all types of overflow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:8,extend,extend,8,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the constant and replace the And operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVCodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the extracted value using shift left and arithmetic shift; // right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/GISelKnownBits.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the last word since there may be unused bits in the input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the last word to fill in the unused bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the low part into the high part.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the most significant register into ShrExtendReg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Sign extend the value if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:8,extend,extend,8,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['extend'],['extend']
Modifiability,// Sign extend to a new width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extend']
Modifiability,"// Sign extend up to 64-bit so that the predicates match the hardware; // behaviour. In particular, isInt<16>(0xffff8000) and similar should be; // true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/AsmParser/MipsAsmParser.cpp,1,['extend'],['extend']
Modifiability,// Sign extended 32 bit addresses (e.g 0xFFFFFFFF80000000) are ok,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:8,extend,extended,8,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['extend'],['extended']
Modifiability,// Sign extends are legal only when extending a vector extract,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:8,extend,extends,8,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,2,['extend'],"['extending', 'extends']"
Modifiability,// Sign or zero extend the most significant register into a new register.; // The HighByte is the byte that still has one (or two) bits from the; // original value. The ExtByte is purely a zero/sign extend byte (all bits; // are either 0 or 1).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// Sign- and any-extending of a vector predicate to a vector register is; // equivalent to Q2V. For zero-extensions, generate a vmux between 0 and; // a vector of 1s (where the 1s are of type matching the vector type).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:17,extend,extending,17,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,1,['extend'],['extending']
Modifiability,// Sign- and zero-extends are for integer types only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:18,extend,extends,18,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extends']
Modifiability,// Sign- and zero-extends are legal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp:18,extend,extends,18,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLoweringHVX.cpp,1,['extend'],['extends']
Modifiability,"// Sign-extend ""inreg"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/BitTracker.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend 14-bit immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend 19-bit immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend Dst to widestType,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend Src to widestType,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend all constants to a multiple of 64-bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,// Sign-extend and shift operand of ADDiu and see if it still fits in 16-bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAnalyzeImmediate.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/Mips/MipsAnalyzeImmediate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsAnalyzeImmediate.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend bit that was shifted out last.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend from IPM.Bit using a pair of shifts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend negative constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend the 21-bit immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend the 24-bit to 64-bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h:8,extend,extend,8,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/Targets/RuntimeDyldMachOAArch64.h,1,['extend'],['extend']
Modifiability,// Sign-extend the 26-bit immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend the immediate if necessary.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/Disassembler/X86Disassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/Disassembler/X86Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/Disassembler/X86Disassembler.cpp,1,['extend'],['extend']
Modifiability,"// Sign-extend the new bits, and continue the assertion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend the number in the bottom N bits of Imm,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/Disassembler/CSKYDisassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/CSKY/Disassembler/CSKYDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/CSKY/Disassembler/CSKYDisassembler.cpp,2,['extend'],['extend']
Modifiability,// Sign-extend the number in the bottom N bits of Imm after accounting for; // the fact that the N bit immediate is stored in N-1 bits (the LSB is; // always zero),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/Disassembler/RISCVDisassembler.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend to 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extend']
Modifiability,// Sign-extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,"// Sign-extending LHS does not change its sign, so TrueVal/FalseVal can; // match against either LHS or sext(LHS).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:8,extend,extending,8,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extending']
Modifiability,"// Sign-extending value can be zero-extended if we `sub`tract it,; // or sign-extended otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:8,extend,extending,8,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,3,['extend'],"['extended', 'extending']"
Modifiability,// Sign/zero extend the argument if the libcall takes a larger type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,2,['extend'],['extend']
Modifiability,// Signed comparisons of byte or halfword values must be sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:62,extend,extended,62,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Signed comparisons. The immediates are assumed to be sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:61,extend,extended,61,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// Signed overflow occurred if the high part does not sign extend the low.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:59,extend,extend,59,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,// Silence the warning about unused variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,5,['variab'],['variable']
Modifiability,// Silence unused variable warning in release builds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETPAndVPTOptimisationsPass.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Target/ARM/MVETPAndVPTOptimisationsPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVETPAndVPTOptimisationsPass.cpp,1,['variab'],['variable']
Modifiability,// Silence unused variable warning without asserts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['variab'],['variable']
Modifiability,// Silence unused variable warning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,2,['variab'],['variable']
Modifiability,// Silence unused variables in non-asserts mode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ModuloSchedule.cpp,1,['variab'],['variables']
Modifiability,"// Similar to FunctionDecls, handle VarDecl's initializer here and write it; // after all other Stmts/Exprs. We will not read the initializer until after; // we have finished recursive deserialization, because it can recursively; // refer back to the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:251,variab,variable,251,interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,1,['variab'],['variable']
Modifiability,"// Similar to above, but the shift amount may be extended after masking,; // so return the extended value as the parameter for the intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,2,['extend'],['extended']
Modifiability,"// Similar to above: if the mask matches the zext input width, then the; // 'and' can be eliminated, so we can truncate the other variable op:; // and (bo (zext X), Y), C --> zext (bo X, (trunc Y))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:130,variab,variable,130,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['variab'],['variable']
Modifiability,"// Similar to int2ptr above, we can look through ptr2int here if the cast; // is a no-op or an extend and not a truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:95,extend,extend,95,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extend']
Modifiability,"// Similarly, imm is an operator in TreePatternNode's view but must be; // rendered as operands.; // FIXME: The target should be able to choose sign-extended when appropriate; // (e.g. on Mips).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp:149,extend,extended,149,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelEmitter.cpp,1,['extend'],['extended']
Modifiability,"// Simple call to draw a canvas on the fly from applications loading; // this plug-in dynamically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofDraw.cxx:78,plug-in,plug-in,78,proof/proofplayer/src/TProofDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofDraw.cxx,1,['plug-in'],['plug-in']
Modifiability,"// Simple call to parse arguments on the fly from applications loading; // this plug-in dynamically",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofDraw.cxx:80,plug-in,plug-in,80,proof/proofplayer/src/TProofDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofDraw.cxx,1,['plug-in'],['plug-in']
Modifiability,// Simple case no variable type tags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:18,variab,variable,18,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable']
Modifiability,"// Simple form of widening. If a range is extended multiple times, go to; // overdefined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h:42,extend,extended,42,interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ValueLattice.h,1,['extend'],['extended']
Modifiability,// Simple getSymbolOffset helper for the non-variable case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCFragment.cpp,1,['variab'],['variable']
Modifiability,// Simple value types that aren't explicitly part of this enumeration; // are considered extended value types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:89,extend,extended,89,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,1,['extend'],['extended']
Modifiability,// Simple variable ref.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,18,['variab'],['variable']
Modifiability,// Simple wrapper to add the name of a variable or (if no variable is; // available) a DeclarationName into a diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// Simple wrapper to separate, time-wise, the call to the; // TROOT destructor and the actual free-ing of the memory.; //; // Since the interpreter implementation (currently TCling) is; // loaded via dlopen by libCore, the destruction of its global; // variable (i.e. in particular clang's) is scheduled before; // those in libCore so we need to schedule the call to the TROOT; // destructor before that *but* we want to make sure the memory; // stay around until libCore itself is unloaded so that code; // using gROOT can 'properly' check for validity.; //; // The order of loading for is:; // libCore.so; // libRint.so; // ... anything other library hard linked to the executable ...; // ... for example libEvent; // libCling.so; // ... other libraries like libTree for example ....; // and the destruction order is (of course) the reverse.; // By default the unloading of the dictionary, does use; // the service of the interpreter ... which of course; // fails if libCling is already unloaded by that information; // has not been registered per se.; //; // To solve this problem, we now schedule the destruction; // of the TROOT object to happen _just_ before the; // unloading/destruction of libCling so that we can; // maximize the amount of clean-up we can do correctly; // and we can still allocate the TROOT object's memory; // statically.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:253,variab,variable,253,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['variab'],['variable']
Modifiability,"// Simplify X & Y == Y to X & Y != 0 if Y has exactly one bit set.; // Note that where Y is variable and is known to have at most one bit set; // (for example, if it is Z & 1) we cannot do this; the expressions are not; // equivalent when Y == 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:92,variab,variable,92,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['variab'],['variable']
Modifiability,// Simplify any new induction variables in the partially unrolled loop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp:30,variab,variables,30,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,1,['variab'],['variables']
Modifiability,// Simplify variable target shuffle masks based on the demanded elements.; // TODO: Handle DemandedBits in mask indices as well?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Simultaneous PDF and model config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testHS3SimultaneousFit.cxx:30,config,config,30,roofit/hs3/test/testHS3SimultaneousFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testHS3SimultaneousFit.cxx,1,['config'],['config']
Modifiability,"// Since LI is split into two instructions, NLI and NSI both inherit the; // same DebugLoc",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:61,inherit,inherit,61,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['inherit'],['inherit']
Modifiability,"// Since ROOT 6.28, the RooPlot doesn't clone the plot variable by default; // anymore. This is a problem for registering the RooPlots, because they; // need to survive without dangling pointers even after the RooUnitTest is; // done. For that reason, we ask the RooPlot to create an internal plot; // variable clone for itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx:55,variab,variable,55,roofit/roofitcore/src/RooUnitTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooUnitTest.cxx,2,['variab'],['variable']
Modifiability,"// Since a __block variable cannot be captured by lambdas, its type and; // the capture field type should always match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// Since explicit specializations do not inherit '=delete' from their; // primary function template - check if the 'specialization' that was; // implicitly generated (during template argument deduction for partial; // ordering) from the most specialized of all the function templates that; // 'FD' could have been specializing, has a 'deleted' definition. If so,; // first check that it was implicitly generated during template argument; // deduction by making sure it wasn't referenced, and then reset the deleted; // flag to not-deleted, so that we can inherit that information from 'FD'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:41,inherit,inherit,41,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,['inherit'],['inherit']
Modifiability,"// Since function prototypes don't have ParmDecl's, we check the function; // prototype. This enables us to rewrite function declarations and; // definitions using the same code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:108,rewrite,rewrite,108,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Since info is not null, fReadActionSequence is not null either.; // Note, we could (possibly) save some more, by configuring the action; // based on the value of fOnfileObject rather than pushing in on a stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:116,config,configuring,116,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,1,['config'],['configuring']
Modifiability,"// Since some of the sign extended bits are demanded, we know that the sign; // bit is demanded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:26,extend,extended,26,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extended']
Modifiability,"// Since the existing branches that use this relocation cannot be; // extended, they should only be fixed up if the target is within range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:70,extend,extended,70,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,1,['extend'],['extended']
Modifiability,"// Since the only prior variable template specialization with these; // arguments was referenced but not declared, reuse that; // declaration node as our own, updating its source location and; // the list of outer template parameters to reflect our new declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// Since the sign extended bits are demanded, we know that the sign; // bit is demanded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,extend,extended,18,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extended']
Modifiability,"// Since the storage mapping class is specified per csect,; // without using data sections, it is less effective to use read-only; // pointers. Using read-only pointers may cause other RO variables in the; // same csect to become RW when the linker acts upon `-bforceimprw`;; // therefore, we require that separate data sections are used in the; // presence of ReadOnlyPointers. We respect the setting of data-sections; // since we have not found reasons to do otherwise that overcome the user; // surprise of not respecting the setting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/llc.cpp:188,variab,variables,188,interpreter/llvm-project/llvm/tools/llc/llc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llc/llc.cpp,1,['variab'],['variables']
Modifiability,"// Since the storage mapping class is specified per csect,; // without using data sections, it is less effective to use read-only; // pointers. Using read-only pointers may cause other RO variables in the; // same csect to become RW when the linker acts upon `-bforceimprw`;; // therefore, we require that separate data sections; // are used when `-mxcoff-roptr` is in effect. We respect the setting of; // data-sections since we have not found reasons to do otherwise that; // overcome the user surprise of not respecting the setting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:188,variab,variables,188,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['variab'],['variables']
Modifiability,"// Since this is after type legalization and ShlVal is extended to MVT::i64,; // expect VT to be MVT::i32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:55,extend,extended,55,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// Since we are moving the instructions out of its basic block, we do not; // retain their original debug locations (DILocations) and debug intrinsic; // instructions.; //; // Doing so would degrade the debugging experience and adversely affect the; // accuracy of profiling information.; //; // Currently, when hoisting the instructions, we take the following actions:; // - Remove their debug intrinsic instructions.; // - Set their debug locations to the values from the insertion point.; //; // As per PR39141 (comment #8), the more fundamental reason why the dbg.values; // need to be deleted, is because there will not be any instructions with a; // DILocation in either branch left after performing the transformation. We; // can only insert a dbg.value after the two branches are joined again.; //; // See PR38762, PR39243 for more details.; //; // TODO: Extend llvm.dbg.value to take more than one SSA Value (PR39141) to; // encode predicated DIExpressions that yield different results on different; // code paths.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:863,Extend,Extend,863,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['Extend'],['Extend']
Modifiability,"// Since we can possibly extend register lifetime, clear kill flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp:25,extend,extend,25,interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86OptimizeLEAs.cpp,2,['extend'],['extend']
Modifiability,"// Since we can't introduce illegal i64 types at this stage, we can only; // perform an i64 splat on RV32 if it is its own sign-extended value. That; // way we can use RVV instructions to splat.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:128,extend,extended,128,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Since we emit declarations (DW_AT_members) for static members, place the; // definition of those static members in the namespace they were declared in; // in the source code (the lexical decl context).; // FIXME: Generalize this for even non-member global variables where the; // declaration and definition may have different lexical decl contexts, once; // we have support for emitting declarations of (non-member) global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:259,variab,variables,259,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,2,['variab'],['variables']
Modifiability,"// Since we have a static initializer, this global variable can't; // be constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// Since we may have removed PDFs from the list, the index of the extended; // PDF in the list needs to be updated. The new index might also be -1 if the; // extended PDF got removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:66,extend,extended,66,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,2,['extend'],['extended']
Modifiability,"// Since we need to extend alloca with additional memory to locate; // redzones, and OldSize is number of allocated blocks with; // ElementSize size, get allocated memory size in bytes by; // OldSize * ElementSize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['extend'],['extend']
Modifiability,"// Since we only generate this in 64-bit mode, we can take advantage of; // 64-bit registers. In particular, sign extend the input value into the; // 64-bit register with extsw, store the WHOLE 64-bit value into the stack; // then lfd it and fcfid it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:114,extend,extend,114,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Since we'll be extending the live range of Rt in the following example,; // make sure that is safe. another definition of Rt doesn't exist between 'add'; // and load/store instruction.; //; // Ex: Rx= add(Rt,#10); // memw(Rx+#0) = Rs; // will be replaced with => memw(Rt+#10) = Rs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp,1,['extend'],['extending']
Modifiability,"// Since we're extended the lifetime of RegPair.Reg, clear the; // kill flags to account for that and make RegPair.Reg reaches; // the new PHI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['extend'],['extended']
Modifiability,"// Since we're moving the DefMI load, make sure we're not extending any live; // ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeEdit.cpp:58,extend,extending,58,interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeEdit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeEdit.cpp,1,['extend'],['extending']
Modifiability,"// Since we're moving the extend before the right shift operation, we need; // to clamp the MSB to make sure we don't shift in undefined bits instead of; // the zeros which would get shifted in with the original right shift; // operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:26,extend,extend,26,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Single inheritance class member pointer are represented as scalars instead; // of aggregates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:10,inherit,inheritance,10,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,// Single source offloading languages like CUDA/HIP need to be able to; // access static device variables from host code of the same compilation; // unit. This is done by externalizing the static variable with a shared; // name between the host and device compilation which is the same for the; // same compilation unit whereas different among different compilation; // units.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:96,variab,variables,96,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// Singleton class for global configuration settings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:30,config,configuration,30,tmva/tmva/inc/TMVA/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h,1,['config'],['configuration']
Modifiability,"// Sink a copy of debug users to the insert position. Mark the original; // DBG_VALUE location as 'undef', indicating that any earlier variable; // location should be terminated as we've optimised away the value at this; // point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:135,variab,variable,135,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['variab'],['variable']
Modifiability,// Sink any users that don't pass any other DBG_VALUEs for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:64,variab,variable,64,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['variab'],['variable']
Modifiability,// Sink extends that would allow us to use 32-bit offset vectors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:8,extend,extends,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// Size of the linkage area, parameter list area and the part of the local; // space variable where copies of aggregates which are passed by value are; // stored.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:85,variab,variable,85,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Size of the variable in bytes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:15,variab,variable,15,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,1,['variab'],['variable']
Modifiability,// Size should be preferably set in; // llvm/lib/Target/AArch64/AArch64InstrInfo.td (default case).; // Specific cases handle instructions of variable sizes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:142,variab,variable,142,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['variab'],['variable']
Modifiability,// Skip LLVM intrinsic global variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:30,variab,variables,30,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['variab'],['variables']
Modifiability,// Skip SExt if we are extending an nsw value; // TODO: Allow ZExt too,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:23,extend,extending,23,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['extend'],['extending']
Modifiability,"// Skip analysis of inheriting constructors as top-level functions. These; // constructors don't even have a body written down in the code, so even if; // we find a bug, we won't be able to display it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp:20,inherit,inheriting,20,interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Frontend/AnalysisConsumer.cpp,1,['inherit'],['inheriting']
Modifiability,"// Skip any type qualifiers to find the first identifier. It may be either a; // new type name or a variable name. There can be several type qualifiers; // preceding a variable name, and we can not tell them apart by looking at; // the word alone since a macro can be defined as either a type qualifier or; // a variable name. Thus we use the last word before the dimensions instead; // of the first word as the candidate for the variable or type name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:100,variab,variable,100,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,4,['variab'],['variable']
Modifiability,"// Skip any unused cells or cells that extend down thru; // subsequent rows",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlTable.cxx:39,extend,extend,39,gui/guihtml/src/TGHtmlTable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/src/TGHtmlTable.cxx,1,['extend'],['extend']
Modifiability,// Skip blocks that aren't successors to an indirectbr we're going to; // rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp:74,rewrite,rewrite,74,interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/IndirectBrExpandPass.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Skip complex cases such as when different fragments of a variable have; // been split into different allocas. Skipping in this case means falling; // back to using a list of defs (which could reduce coverage, but is no; // less correct).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:60,variab,variable,60,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,// Skip further diagnostics for this variable. We try to warn only; // on the first point at which a variable is used uninitialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,2,['variab'],['variable']
Modifiability,// Skip if NewElen is not narrower than the original extended type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:53,extend,extended,53,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Skip import for global variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:26,variab,variables,26,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['variab'],['variables']
Modifiability,// Skip inlined variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:16,variab,variables,16,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,2,['variab'],['variables']
Modifiability,// Skip internally declared static variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:35,variab,variables,35,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Skip internally declared variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Skip local variables inside function or method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:14,variab,variables,14,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,1,['variab'],['variables']
Modifiability,// Skip non-global variables in records (struct/union/class) but not static; // members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:19,variab,variables,19,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,1,['variab'],['variables']
Modifiability,"// Skip over DEBUG_VALUE.; // For globals in PIC mode, we can have some LEAs here. Skip them as well.; // TODO: Extend this to something that covers more cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CallFrameOptimization.cpp:112,Extend,Extend,112,interpreter/llvm-project/llvm/lib/Target/X86/X86CallFrameOptimization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CallFrameOptimization.cpp,1,['Extend'],['Extend']
Modifiability,"// Skip over abstract origins, but collect variables; // from it so it can be used for location statistics; // for inlined instancies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,// Skip over an extend of the shift amount.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Skip restriction checking for variable or field declarations,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Skip shifts of shift by constants. It undoes a combine in; // FoldShiftByConstant and is the extend in reg pattern.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:96,extend,extend,96,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,// Skip special artifical variable llvm.global.annotations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp,1,['variab'],['variable']
Modifiability,// Skip this assignment if the affected bits are outside of the; // variable fragment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:68,variab,variable,68,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Skip unnamed declarations, e.g. in; // struct S {; // struct { int i; }; // };; // the inner struct corresponds to an unnamed member variable,; // where only `S::i` should be exposed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingDataMemberInfo.cxx:136,variab,variable,136,core/metacling/src/TClingDataMemberInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingDataMemberInfo.cxx,1,['variab'],['variable']
Modifiability,// Skip variable argument lists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,1,['variab'],['variable']
Modifiability,// Skip variable template specializations when emitting CodeView. MSVC; // doesn't emit them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['variab'],['variable']
Modifiability,// Skip variables from inlined functions - they are not local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:8,variab,variables,8,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,2,['variab'],['variables']
Modifiability,// Skip variables that haven't been promoted - we've dealt with those; // already.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:8,variab,variables,8,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,// Skip zero extend/truncate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['extend'],['extend']
Modifiability,// Skipping a chain of initializing gsl::Pointer annotated objects.; // We are looking only for the final source to find out if it was; // a local or temporary owner or the address of a local variable/param.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:192,variab,variable,192,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,// SkylakeServer inherits all SkylakeClient features except SGX.; // FIXME: That doesn't match gcc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/X86TargetParser.cpp:17,inherit,inherits,17,interpreter/llvm-project/llvm/lib/TargetParser/X86TargetParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/X86TargetParser.cpp,1,['inherit'],['inherits']
Modifiability,"// Slope and offset may not depend on variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinearVar.cxx:38,variab,variable,38,roofit/roofitcore/src/RooLinearVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooLinearVar.cxx,1,['variab'],['variable']
Modifiability,// Slot 1 cannot be extended in duplexes PRM 10.5,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCDuplexInfo.cpp,1,['extend'],['extended']
Modifiability,// Slow case - determine how far the sign extends into each sub-element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:42,extend,extends,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extends']
Modifiability,"// Small helper to match special cases in range-for loops.; //; // It is possible that containers do not provide a const-overload for their; // iterator accessors. If this is the case, the variable is used non-const; // no matter what happens in the loop. This requires special detection as it; // is then faster to find all mutations of the loop variable.; // It aims at a different modification as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp:189,variab,variable,189,interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,2,['variab'],['variable']
Modifiability,"// So far, AllocaSliceRewriter does not support widening split slice tails; // in rewriteIntegerLoad.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:82,rewrite,rewriteIntegerLoad,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewriteIntegerLoad']
Modifiability,"// So far, AllocaSliceRewriter does not support widening split slice tails; // in rewriteIntegerStore.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:82,rewrite,rewriteIntegerStore,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewriteIntegerStore']
Modifiability,// So long as the new type has more bits than the bits we're extending we; // don't need to break it apart.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:61,extend,extending,61,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extending']
Modifiability,"// Solve the machine value dataflow problem using the MLocTransfer function,; // storing the computed live-ins / live-outs into the array-of-arrays. We use; // both live-ins and live-outs for decision making in the variable value; // dataflow problem.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:215,variab,variable,215,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Some `DeclRefExpr`s aren't glvalues, so we can't associate them with a; // `StorageLocation`, and there's also no sensible `Value` that we can; // assign to them. Examples:; // - Non-static member variables; // - Non static member functions; // Note: Member operators are an exception to this, but apparently only; // if the `DeclRefExpr` is used within the callee of a; // `CXXOperatorCallExpr`. In other cases, for example when applying the; // address-of operator, the `DeclRefExpr` is a prvalue.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp:200,variab,variables,200,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/Transfer.cpp,1,['variab'],['variables']
Modifiability,// Some additional rules apply to inheriting constructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:34,inherit,inheriting,34,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheriting']
Modifiability,// Some codegen options depend on language options. Let's provide the expected; // variable name and type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:83,variab,variable,83,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['variab'],['variable']
Modifiability,"// Some compilers generate ranges in the compile unit; other compilers; // only DW_AT_low_pc/DW_AT_high_pc. In order to correctly map global; // variables, we need to generate the map ranges for the compile unit.; // If we use the ranges stored at the scope level, there are cases where; // the address referenced by a symbol location, is not in the enclosing; // scope, but in an outer one. By using the ranges stored in the compile; // unit, we can catch all those addresses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp:145,variab,variables,145,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVBinaryReader.cpp,1,['variab'],['variables']
Modifiability,"// Some function-scope variable does not have static storage but still; // needs to be emitted like a static variable, e.g. a function-scope; // variable in constant address space in OpenCL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,3,['variab'],['variable']
Modifiability,"// Some gather load variants allow unpacked offsets, but only as nxv2i32; // vectors. These are implicitly sign (sxtw) or zero (zxtw) extend to; // nxv2i64. Legalize accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:134,extend,extend,134,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Some initializers may reference the variable we're currently checking. This; // can cause an infinite loop. The Saved[LR]HS ivars can be checked to prevent; // recursing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-diff/lib/DifferenceEngine.cpp,1,['variab'],['variable']
Modifiability,"// Some library functions that read FP state (fegetmode, fegetenv) write the; // state into a region in memory. IR intrinsics that do the same operations; // (get_fpmode, get_fpenv) return the state as integer value. To implement these; // intrinsics via the library functions, we need to use temporary variable,; // for example:; //; // %0:_(s32) = G_GET_FPMODE; //; // is transformed to:; //; // %1:_(p0) = G_FRAME_INDEX %stack.0; // BL &fegetmode; // %0:_(s32) = G_LOAD % 1; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:303,variab,variable,303,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['variab'],['variable']
Modifiability,"// Some of the encoding bit(s) are unspecified. This contributes to; // one additional member of ""Variable"" instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:98,Variab,Variable,98,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['Variab'],['Variable']
Modifiability,"// Some of this is duplicated from DwarfUnit::getOrCreateSubprogramDIE, with; // the important distinction that the debug node is not associated with the; // DIE (since the debug node will be associated with the concrete DIE, if; // any). It could be refactored to some common utility function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:251,refactor,refactored,251,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['refactor'],['refactored']
Modifiability,"// Some scatter store variants allow unpacked offsets, but only as nxv2i32; // vectors. These are implicitly sign (sxtw) or zero (zxtw) extend to; // nxv2i64. Legalize accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:136,extend,extend,136,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Some targets have hard limitation on the maximum requestable alignment in; // aligned attribute for static variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:110,variab,variables,110,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variables']
Modifiability,// Some targets like RISCV prefer to sign extend some types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:42,extend,extend,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extend']
Modifiability,// Some targets require that all access to thread local variables go through; // the thread wrapper. This means that we cannot attempt to create a thread; // wrapper or a thread helper.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:56,variab,variables,56,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variables']
Modifiability,// Some types will need extending as specified by the CC.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:24,extend,extending,24,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['extend'],['extending']
Modifiability,// Something has gone wrong if VarsWithStackSlot doesn't contain a variable; // that is linked to a store.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:67,variab,variable,67,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Sometimes it's necessary that we cast the function we want to call first; // to its explicit function type before calling it. This is supposed to prevent; // that we accidentially ending up in a function that is not the one we're; // supposed to call here (e.g. because the C++ function lookup decides to take; // another function that better fits).; // This method has some problems, e.g. when we call a function with default; // arguments and we don't provide all arguments, we would fail with this pattern.; // Same applies with member methods which seem to cause parse failures even when; // we supply the object parameter.; // Therefore we only use it in cases where we know it works and set this variable; // to true when we do.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx:705,variab,variable,705,core/metacling/src/TClingCallFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallFunc.cxx,1,['variab'],['variable']
Modifiability,// Sometimes pointers are passed zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['extend'],['extended']
Modifiability,// Sometimes we get a nullptr (such as from IfStmts which often have nullptr; // children). We skip such statements as they don't reference any; // variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:148,variab,variables,148,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['variab'],['variables']
Modifiability,"// Sort all objects for short/paired displacements, which should be; // sufficient as it seems like all frame objects typically are within the; // long displacement range. Sorting works by computing the ""density"" as; // Count / ObjectSize. The comparisons of two such fractions are refactored; // by multiplying both sides with A.ObjectSize * B.ObjectSize, in order to; // eliminate the (fp) divisions. A higher density object needs to go after; // in the list in order for it to end up lower on the stack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp:282,refactor,refactored,282,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZFrameLowering.cpp,1,['refactor'],['refactored']
Modifiability,"// Sort the flexible elements in order of decreasing alignment,; // then decreasing size, and then the original order as recorded; // in Scratch. The decreasing-size aspect of this is only really; // important if we get into the gap-filling stage below, but it; // doesn't hurt here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:12,flexible,flexible,12,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible']
Modifiability,"// Sort the paths into buckets, and if any of them are ambiguous, extend all; // paths in ambiguous buckets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:66,extend,extend,66,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['extend'],['extend']
Modifiability,"// Sort variable captures by the order in which they matched the input.; // Ranges shouldn't be overlapping, so we can just compare the start.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,"// Source locations require array (variable-length) abbreviations. The; // abbreviation infrastructure requires that arrays are encoded last, so; // we handle it here in the case of those classes derived from DeclaratorDecl",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:35,variab,variable-length,35,interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,1,['variab'],['variable-length']
Modifiability,// Sparc doesn't have i1 sign extending load,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:30,extend,extending,30,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Special case for __builtin_unreachable.; // FIXME: This should be extended to include other unreachable markers,; // such as llvm_unreachable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UnreachableCodeChecker.cpp:69,extend,extended,69,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UnreachableCodeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UnreachableCodeChecker.cpp,1,['extend'],['extended']
Modifiability,"// Special case, use legal zero extending insert_subvector. This allows; // isel to optimize when bits are known zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:32,extend,extending,32,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Special case: SIGN_EXTEND_INREG is basically truncating to ExtVT then; // extended to VT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,extend,extended,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// Special case: check for comparisons against literals that can be exactly; // represented by APFloat. In such cases, do not emit a warning. This; // is a heuristic: often comparison against such literals are used to; // detect if a value in a variable has not changed. This clearly can; // lead to false negatives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:245,variab,variable,245,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,// Special case: check for initialization from constant; // variables.; //; // e.g. extern const int MyConstant;; // int x = MyConstant;; //,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp:60,variab,variables,60,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,1,['variab'],['variables']
Modifiability,"// Special case: if we have a sign-extend/zero-extend node, insert the; // conversion instruction first, and use that as the value operand to; // the selected StoreParam node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,2,['extend'],['extend']
Modifiability,"// Special case: self-assignments. These are often used to shut up; // ""unused variable"" compiler warnings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp:79,variab,variable,79,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,1,['variab'],['variable']
Modifiability,// Special handling for extended integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,6,['extend'],['extended']
Modifiability,// Special handling of variable named 'main'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Special rules apply for the first dbg.values of parameter variables in a; // function. Identify them by the fact they reference Argument Values, that; // they're parameters, and they are parameters of the current function. We; // need to let them dangle until they get an SDNode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:61,variab,variables,61,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variables']
Modifiability,"// Special type for the hook to the TSlave constructor, needed to avoid; // using the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TSlave.h:86,plugin,plugin,86,proof/proof/inc/TSlave.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TSlave.h,1,['plugin'],['plugin']
Modifiability,"// Special type for the hook to the TXProofServ constructor, needed to avoid; // using the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/main/src/pmain.cxx:91,plugin,plugin,91,main/src/pmain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/main/src/pmain.cxx,1,['plugin'],['plugin']
Modifiability,"// Specially handle ""if (expr1 || ...)"" and ""if (expr1 && ...)"" by; // having these handle the actual control-flow jump. Note that; // if we introduce a condition variable, e.g. ""if (int x = exp1 || exp2)""; // we resort to the old control-flow behavior. This special handling; // removes infeasible paths from the control-flow graph by having the; // control-flow transfer of '&&' or '||' go directly into the then/else; // blocks directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:163,variab,variable,163,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// Specially handle the case where we have uses of an uninitialized; // variable, but the root cause is an idiomatic self-init. We want; // to report the diagnostic at the self-init since that is the root cause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp:72,variab,variable,72,interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/AnalysisBasedWarnings.cpp,1,['variab'],['variable']
Modifiability,// Specifies length of variable length array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShadowStackGCLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/ShadowStackGCLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ShadowStackGCLowering.cpp,1,['variab'],['variable']
Modifiability,"// Specify sampling density on observable and interpolation variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:60,variab,variable,60,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variable']
Modifiability,// Spill LR if Thumb1 function uses variable length argument lists.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Splice the terminator from the original loop and rewrite its; // successors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp:52,rewrite,rewrite,52,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SimpleLoopUnswitch.cpp,1,['rewrite'],['rewrite']
Modifiability,// Split Src into a variable part and a constant suffix.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['variab'],['variable']
Modifiability,// Split header configs into names and prompts,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:16,config,configs,16,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configs']
Modifiability,"// Split illegal MVT::v16i8->i64 vector reductions into two legal v8i16->i64; // reductions. The operands are extended with MVEEXT, but as they are; // reductions the lane orders do not matter. MVEEXT may be combined with; // loads to produce two extending loads, or else they will be expanded to; // VREV/VMOVL.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:110,extend,extended,110,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,"// Split list of components in pdfs, functions and variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx:51,variab,variables,51,roofit/roofitcore/src/RooWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooWorkspace.cxx,7,['variab'],['variables']
Modifiability,// Start of a function or variable for the,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['variab'],['variable']
Modifiability,"// Start out assuming that the address will need to be loaded separately,; // then try to extend it as much as we can.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp:90,extend,extend,90,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// Start out with suggested list of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:36,variab,variables,36,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variables']
Modifiability,// Start the lifetime of any uninitialized variables we encounter. They; // might be used by the selected branch of the switch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variables']
Modifiability,// Start the sandboxing sequence by emitting call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:13,sandbox,sandboxing,13,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Modifiability,"// Starting with a code fragment like:; //; // test %rax, %rax; // jne LblNotNull; //; // LblNull:; // callq throw_NullPointerException; //; // LblNotNull:; // Inst0; // Inst1; // ...; // Def = Load (%rax + <offset>); // ...; //; //; // we want to end up with; //; // Def = FaultingLoad (%rax + <offset>), LblNull; // jmp LblNotNull ;; explicit or fallthrough; //; // LblNotNull:; // Inst0; // Inst1; // ...; //; // LblNull:; // callq throw_NullPointerException; //; //; // To see why this is legal, consider the two possibilities:; //; // 1. %rax is null: since we constrain <offset> to be less than PageSize, the; // load instruction dereferences the null page, causing a segmentation; // fault.; //; // 2. %rax is not null: in this case we know that the load cannot fault, as; // otherwise the load would've faulted in the original program too and the; // original program would've been undefined.; //; // This reasoning cannot be extended to justify hoisting through arbitrary; // control flow. For instance, in the example below (in pseudo-C); //; // if (ptr == null) { throw_npe(); unreachable; }; // if (some_cond) { return 42; }; // v = ptr->field; // LD; // ...; //; // we cannot (without code duplication) use the load marked ""LD"" to null check; // ptr -- clause (2) above does not apply in this case. In the above program; // the safety of ptr->field can be dependent on some_cond; and, for instance,; // ptr could be some non-null invalid reference that never gets loaded from; // because some_cond is always true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp:934,extend,extended,934,interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ImplicitNullChecks.cpp,1,['extend'],['extended']
Modifiability,// Starts by inheriting our parent filter chooser's filter bit values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:13,inherit,inheriting,13,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['inherit'],['inheriting']
Modifiability,"// Stat Error Config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Systematics.cxx:14,Config,Config,14,roofit/histfactory/src/Systematics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Systematics.cxx,1,['Config'],['Config']
Modifiability,"// Statement attributes are a bit different from declarations. With; // declarations, each attribute is added to the declaration as it is; // processed, and so you can look on the Decl * itself to see if there is a; // conflicting attribute. Statement attributes are processed as a group; // because AttributedStmt needs to tail-allocate all of the attribute nodes; // at once. This means we cannot check whether the statement already contains; // an attribute to check for the conflict. Instead, we need to check whether; // the given list of semantic attributes contain any conflicts. It is assumed; // this code will be executed in the context of a function with parameters:; // Sema &S, const SmallVectorImpl<const Attr *> &C. The code will be within a; // loop which loops over the container C with a loop variable named A to; // represent the current attribute to check for conflicts.; //; // FIXME: it would be nice not to walk over the list of potential attributes; // to apply to the statement more than once, but statements typically don't; // have long lists of attributes on them, so re-walking the list should not; // be an expensive operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp:811,variab,variable,811,interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangAttrEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Statements to set the original iteration variable's value from the; // logical iteration number.; // Generated for loop is:; // Original_for_init;; // for (auto .tile.iv = .floor.iv; .tile.iv < min(.floor.iv + DimTileSize,; // NumIterations); ++.tile.iv) {; // Original_Body;; // Original_counter_update;; // }; // FIXME: If the innermost body is an loop itself, inserting these; // statements stops it being recognized as a perfectly nested loop (e.g.; // for applying tiling again). If this is the case, sink the expressions; // further into the inner loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// Static fields do not inherit constness from parents.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:24,inherit,inherit,24,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['inherit'],['inherit']
Modifiability,// Static locals inherit dll attributes from their function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:17,inherit,inherit,17,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inherit'],['inherit']
Modifiability,// Static sampler variables translated to function calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:18,variab,variables,18,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variables']
Modifiability,// Static thread-local variable; // Storage classes used for DWARF symbols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h:23,variab,variable,23,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/XCOFF.h,1,['variab'],['variable']
Modifiability,"// Static upcasts are marked as DerivedToBase casts by Sema, so this will; // only happen when multiple or virtual inheritance is involved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/Store.cpp:115,inherit,inheritance,115,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/Store.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/Store.cpp,1,['inherit'],['inheritance']
Modifiability,// Step #0: Number blocks in depth-first order and initialize variables used; // in later stages of the algorithm.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h:62,variab,variables,62,interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/GenericDomTreeConstruction.h,1,['variab'],['variables']
Modifiability,// Step 2: Adjust the successor basic block to recieve the original; // induction variable's final value instead of the orig. IV itself.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['variab'],['variable']
Modifiability,"// Step 2: Extend live segments to all uses, constructing SSA form as; // necessary.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervalCalc.cpp:11,Extend,Extend,11,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervalCalc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervalCalc.cpp,1,['Extend'],['Extend']
Modifiability,"// Step 2: generate node with bound return value: CEBNode -> BindedRetNode.; // If this variable is set to 'true' the analyzer will evaluate the call; // statement we are about to exit again, instead of continuing the execution; // from the statement after the call. This is useful for non-POD type array; // construction where the CXXConstructExpr is referenced only once in the CFG,; // but we want to evaluate it as many times as many elements the array has.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp:88,variab,variable,88,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,1,['variab'],['variable']
Modifiability,"// Step 3: Rewrite the loop into a countable form, with canonical IV.; // The new canonical induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:11,Rewrite,Rewrite,11,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,2,"['Rewrite', 'variab']","['Rewrite', 'variable']"
Modifiability,"// Step 4: Rewrite the loop into a countable form, with canonical IV.; // The new canonical induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:11,Rewrite,Rewrite,11,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,2,"['Rewrite', 'variab']","['Rewrite', 'variable']"
Modifiability,// Step into CXXDefaultInitExprs so we can diagnose cases where a; // constructor inherits one as an implicit mem-initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:82,inherit,inherits,82,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,2,['inherit'],['inherits']
Modifiability,// Step into the init statement in case it brings an (uninitialized); // variable into scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:73,variab,variable,73,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['variab'],['variable']
Modifiability,// Stop if the chain extends outside of the loop,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp:21,extend,extends,21,interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BranchProbabilityInfo.cpp,1,['extend'],['extends']
Modifiability,// Stop when meeting a different location or an already extended interval.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:56,extend,extended,56,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['extend'],['extended']
Modifiability,"// Storage for the parameter adapters. Since the base class erases the type; // of the parameters, we have to own the storage for the parameters here, and; // have the base class store type-erased pointers into this tuple.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h:29,adapt,adapters,29,interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormatVariadic.h,1,['adapt'],['adapters']
Modifiability,"// Store RD's cell into the map. This will associate the cell with a virtual; // register, and make zero-/sign-extends possible (otherwise we would be ex-; // tending ""self"" bit values, which will have no effect, since ""self"" values; // cannot be references to anything).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:111,extend,extends,111,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,1,['extend'],['extends']
Modifiability,"// Store configuration info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx:9,config,configuration,9,roofit/roofitcore/src/RooMsgService.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMsgService.cxx,1,['config'],['configuration']
Modifiability,"// Store default configuration parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenConfig.cxx:17,config,configuration,17,roofit/roofitcore/src/RooNumGenConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumGenConfig.cxx,2,['config'],['configuration']
Modifiability,// Store deferred function annotations so they can be emitted at the end with; // most up to date ValueDecl that will have all the inherited annotations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:131,inherit,inherited,131,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,1,['inherit'],['inherited']
Modifiability,"// Store integration configuration in registry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:21,config,configuration,21,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,1,['config'],['configuration']
Modifiability,"// Store set of variables analytically integrated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:16,variab,variables,16,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['variab'],['variables']
Modifiability,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,6,['variab'],['variable']
Modifiability,// Store the address of the variable into its own forwarding pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,// Store the load or its truncated or extended value in FoldedValue.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['extend'],['extended']
Modifiability,"// Store the offset of the initializer. Don't deserialize it yet: it might; // not be needed, and might refer back to the variable, for example if it; // contains a lambda.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:122,variab,variable,122,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['variab'],['variable']
Modifiability,// Store the pointer to the variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variable']
Modifiability,// Store the size of the variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variable']
Modifiability,// Store the table header config,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:26,config,config,26,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['config']
Modifiability,"// Store this cache configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:20,config,configuration,20,roofit/roofitcore/src/RooAbsCachedPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx,2,['config'],['configuration']
Modifiability,"// Store this in a variable so it can be later used in `filenames.reserve`; // if it passes the check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/InternalTreeUtils.cxx:19,variab,variable,19,tree/tree/src/InternalTreeUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/InternalTreeUtils.cxx,1,['variab'],['variable']
Modifiability,// Store variable identifiers and Atom of atomic booleans.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:9,variab,variable,9,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,// Stores must share the same source value with different offsets.; // Truncate and extends should be stripped to get the single source value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:84,extend,extends,84,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extends']
Modifiability,// Stores variables for which we can't generate correct lifetime markers; // because of jumps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:10,variab,variables,10,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['variab'],['variables']
Modifiability,// Strategy is a map from variables to the way we plan to emit fixes for; // these variables. It is figured out gradually by trying different fixes; // for different variables depending on gadgets in which these variables; // participate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:26,variab,variables,26,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,4,['variab'],['variables']
Modifiability,// Strict fp extend and trunc are legal,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Stride variable returned by runtime (we initialize it to 1 by default).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// String and character literals don't extend past the end of the line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp:39,extend,extend,39,interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/DependencyDirectivesScanner.cpp,1,['extend'],['extend']
Modifiability,"// String and numeric substitution blocks. Pattern substitution blocks come; // in two forms: [[foo:.*]] and [[foo]]. The former matches .* (or some; // other regex) and assigns it to the string variable 'foo'. The latter; // substitutes foo's value. Numeric substitution blocks recognize the same; // form as string ones, but start with a '#' sign after the double; // brackets. They also accept a combined form which sets a numeric variable; // to the evaluation of an expression. Both string and numeric variable; // names must satisfy the regular expression ""[a-zA-Z_][0-9a-zA-Z_]*"" to be; // valid, as this helps catch some common errors. If there are extra '['s; // before the ""[["", treat them literally.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:195,variab,variable,195,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,3,['variab'],['variable']
Modifiability,// String variable definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,"// String-valued variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:17,variab,variable,17,roofit/roofitcore/inc/RooStringVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h,1,['variab'],['variable']
Modifiability,"// Strip out all debug intrinsics and supporting metadata (subprograms, types,; // variables, etc).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:83,variab,variables,83,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['variab'],['variables']
Modifiability,"// Struct might end with a flexible array or an array of size 0 or 1,; // in which case we don't want to randomize it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp:27,flexible,flexible,27,interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Randstruct.cpp,1,['flexible'],['flexible']
Modifiability,"// Structured bindings cannot be used in lambda captures (until C++20); // so we explicitly define variable names here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFColumnRegister.cxx:99,variab,variable,99,tree/dataframe/src/RDFColumnRegister.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFColumnRegister.cxx,1,['variab'],['variable']
Modifiability,// Structures with flexible arrays are always indirect.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARC.cpp:19,flexible,flexible,19,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARC.cpp,3,['flexible'],['flexible']
Modifiability,// Structures with flexible arrays are always indirect.; // FIXME: This should not be byval!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:19,flexible,flexible,19,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['flexible'],['flexible']
Modifiability,"// Structures with flexible arrays have variable length, so really; // fail the size test above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:19,flexible,flexible,19,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,2,"['flexible', 'variab']","['flexible', 'variable']"
Modifiability,// Sub requires at least operand 1 to be an extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:44,extend,extend,44,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Sub-word ATOMIC_CMP_SWAP need to ensure that the input is zero-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:66,extend,extended,66,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Subclasses of GIDefMatchData should declare that this rule needs to pass; // data from the match stage to the apply stage, and ensure that the; // generated matcher has a suitable variable for it to do so.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:183,variab,variable,183,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Subclasses of SExpr must define the following:; //; // This(const This& E, ...) {; // copy constructor: construct copy of E, with some additional arguments.; // }; //; // template <class V>; // typename V::R_SExpr traverse(V &Vs, typename V::R_Ctx Ctx) {; // traverse all subexpressions, following the traversal/rewriter interface.; // }; //; // template <class C> typename C::CType compare(CType* E, C& Cmp) {; // compare all subexpressions, following the comparator interface; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:315,rewrite,rewriter,315,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['rewrite'],['rewriter']
Modifiability,"// Subpath for this session in the fSandbox (<sandbox>/path-to-working-dir)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:46,sandbox,sandbox,46,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Modifiability,"// Subprogram would have ContainedNodes field which records the debug; // variables it contained. So we need to add __coro_frame to the; // ContainedNodes of it.; //; // If we don't add __coro_frame to the RetainedNodes, user may get; // `no symbol __coro_frame in context` rather than `__coro_frame`; // is optimized out, which is more precise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:74,variab,variables,74,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['variab'],['variables']
Modifiability,"// Subscript the ""from"" and ""to"" expressions with the iteration variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:64,variab,variable,64,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// Subst all known linker variables ($origin, @rpath, etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp:26,variab,variables,26,interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp,1,['variab'],['variables']
Modifiability,// Substitute all string variables and expressions whose values are only; // now known. Use of string variables defined on the same line are handled; // by back-references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:25,variab,variables,25,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,2,['variab'],['variables']
Modifiability,// Substitute and check for failure (e.g. use of undefined variable).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:59,variab,variable,59,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,// Substitute into the template arguments of the variable template partial; // specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:49,variab,variable,49,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Substitute into the template parameters of the variable template partial; // specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:50,variab,variable,50,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Subtract extended integers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:12,extend,extended,12,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Subtract t2 (only 240 bits, so need to extend)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h:42,extend,extend,42,math/mathcore/src/ranluxpp/helpers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h,1,['extend'],['extend']
Modifiability,// Success. All of the directories we stepped through inherit this module; // map file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp:54,inherit,inherit,54,interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/HeaderSearch.cpp,1,['inherit'],['inherit']
Modifiability,// Such conversions on variables are always narrowing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['variab'],['variables']
Modifiability,// Suggest changing from a const variable to a const reference variable; // if doing so will prevent a copy.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,2,['variab'],['variable']
Modifiability,"// Suggest moving the attribute to the type instead, but only for our; // own vendor attributes; moving other vendors' attributes might hurt; // portability.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:145,portab,portability,145,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['portab'],['portability']
Modifiability,"// Sum of the extended terms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:14,extend,extended,14,roofit/roofitcore/src/RooAddModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx,1,['extend'],['extended']
Modifiability,// Sum of two variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h:14,variab,variables,14,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.h,1,['variab'],['variables']
Modifiability,// Sum up the code size costs of non-terminator instructions. Tight coupling; // with \ref getOutliningPenalty is needed to model the costs of terminators.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/HotColdSplitting.cpp:68,coupling,coupling,68,interpreter/llvm-project/llvm/lib/Transforms/IPO/HotColdSplitting.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/HotColdSplitting.cpp,1,['coupling'],['coupling']
Modifiability,"// Super-class methods extended by this class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h:23,extend,extended,23,net/net/inc/TS3WebFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TS3WebFile.h,1,['extend'],['extended']
Modifiability,"// Support allowing the SDKROOT environment variable used by xcrun and other; // Xcode tools to define the default sysroot, by making it the default for; // isysroot.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Darwin.cpp,1,['variab'],['variable']
Modifiability,"// Support for extended maximum likelihood, switched off by default",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:15,extend,extended,15,roofit/roofitcore/inc/RooAbsPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h,1,['extend'],['extended']
Modifiability,// Support vector extending,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Suppose Stride is a power of two, and Start/End are unsigned; // integers. Let UMAX be the largest representable unsigned; // integer.; //; // By the preconditions of this function, we know; // ""(Start + Stride * N) >= End"", and this doesn't overflow.; // As a formula:; //; // End <= (Start + Stride * N) <= UMAX; //; // Subtracting Start from all the terms:; //; // End - Start <= Stride * N <= UMAX - Start; //; // Since Start is unsigned, UMAX - Start <= UMAX. Therefore:; //; // End - Start <= Stride * N <= UMAX; //; // Stride * N is a multiple of Stride. Therefore,; //; // End - Start <= Stride * N <= UMAX - (UMAX mod Stride); //; // Since Stride is a power of two, UMAX + 1 is divisible by Stride.; // Therefore, UMAX mod Stride == Stride - 1. So we can write:; //; // End - Start <= Stride * N <= UMAX - Stride - 1; //; // Dropping the middle term:; //; // End - Start <= UMAX - Stride - 1; //; // Adding Stride - 1 to both sides:; //; // (End - Start) + (Stride - 1) <= UMAX; //; // In other words, the addition doesn't have unsigned overflow.; //; // A similar proof works if we treat Start/End as signed values.; // Just rewrite steps before ""End - Start <= Stride * N <= UMAX"" to; // use signed max instead of unsigned max. Note that we're trying; // to prove a lack of unsigned overflow in either case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:1138,rewrite,rewrite,1138,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewrite']
Modifiability,// Suppress access diagnostics; the access check is instead performed at the; // point of use for an inheriting constructor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:101,inherit,inheriting,101,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inheriting']
Modifiability,// Suppress cleanups for pseudo-strong variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variables']
Modifiability,"// Suppress error dialogs to avoid hangs on build nodes.; // One can use an environment variable (Cling_GuiOnAssert) to enable; // the error dialogs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:88,variab,variable,88,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,2,['variab'],['variable']
Modifiability,"// Suppress the ""unused value"" warning for idiomatic usage of; // '(void)var;' used to suppress ""unused variable"" warnings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:104,variab,variable,104,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['variab'],['variable']
Modifiability,"// Suppress the protected check (C++ [class.protected]) for each of the; // assignment operators we found. This strange dance is required when; // we're assigning via a base classes's copy-assignment operator. To; // ensure that we're getting the right base class subobject (without; // ambiguities), we need to cast ""this"" to that subobject type; to; // ensure that we don't go through the virtual call mechanism, we need; // to qualify the operator= name with the base class (see below). However,; // this means that if the base class has a protected copy assignment; // operator, the protected member access check will fail. So, we; // rewrite ""protected"" access to ""public"" access in this case, since we; // know by construction that we're calling from a derived class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:639,rewrite,rewrite,639,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['rewrite'],['rewrite']
Modifiability,// Suppress this check if any of the following hold:; // 1. this is the translation unit (and thus has no parent); // 2. this is a template parameter (and thus doesn't belong to its context); // 3. this is a non-type template parameter; // 4. the context is not a record; // 5. it's invalid; // 6. it's a C++0x static_assert.; // 7. it's a block literal declaration; // 8. it's a temporary with lifetime extended due to being default value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:404,extend,extended,404,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['extend'],['extended']
Modifiability,"// Suppressing debug info for ThreadPrivateVar parameters, else it hides; // debug info of TLS variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:95,variab,variables,95,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variables']
Modifiability,"// SuspiciousClonePair guarantees that the first clone always has a; // suggested variable associated with it. As we know that one of the two; // clones in the pair always has suggestion, we swap the two clones; // in case the first clone has no suggested variable which means that; // the second clone has a suggested variable and should be first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:82,variab,variable,82,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,3,['variab'],['variable']
Modifiability,"// Swap the operands if it would introduce a profitable folding opportunity.; // (e.g. a shift + extend).; //; // For example:; // lsl w13, w11, #1; // cmp w13, w12; // can be turned into:; // cmp w12, w11, lsl #1; // Don't swap if there's a constant on the RHS, because we know we can fold; // that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp:97,extend,extend,97,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerLowering.cpp,1,['extend'],['extend']
Modifiability,"// SwitchStmt is followed by several trailing objects,; // some of which optional. Note that it would be more convenient to; // put the optional trailing objects at the end but this would change; // the order in children().; // The trailing objects are in order:; //; // * A ""Stmt *"" for the init statement.; // Present if and only if hasInitStorage().; //; // * A ""Stmt *"" for the condition variable.; // Present if and only if hasVarStorage(). This is in fact a ""DeclStmt *"".; //; // * A ""Stmt *"" for the condition.; // Always present. This is in fact an ""Expr *"".; //; // * A ""Stmt *"" for the body.; // Always present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:392,variab,variable,392,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,"// Symbol is a data object (variable, array, etc.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:28,variab,variable,28,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['variab'],['variable']
Modifiability,// Symbol was created as 'variable'; determine its real kind.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,2,['variab'],['variable']
Modifiability,"// System V ABI (1995), page 3-22, specified:; // > A structure or union whose size is less than or equal to 8 bytes; // > shall be returned in r3 and r4, as if it were first stored in the; // > 8-byte aligned memory area and then the low addressed word were; // > loaded into r3 and the high-addressed word into r4. Bits beyond; // > the last member of the structure or union are not defined.; //; // GCC for big-endian PPC32 inserts the pad before the first member,; // not ""beyond the last member"" of the struct. To stay compatible; // with GCC, we coerce the struct to an integer of the same size.; // LLVM will extend it and return i32 in r3, or i64 in r3:r4.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:616,extend,extend,616,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,1,['extend'],['extend']
Modifiability,// TBB generation code in this constant island pass has not been adapted to; // deal with speculation barriers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp:65,adapt,adapted,65,interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMConstantIslandPass.cpp,1,['adapt'],['adapted']
Modifiability,// TBD - This switch may require to be extended for other intrinsics,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp:39,extend,extended,39,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULibFunc.cpp,1,['extend'],['extended']
Modifiability,"// TFoam::GenerCel2; ////////////////////////////////////////////////////////////////////////////////; /// User method.; /// It generates randomly point/vector according to user-defined distribution.; /// Prior initialization with help of Initialize() is mandatory.; /// Generated MC point/vector is available using GetMCvect and the MC weight with GetMCwt.; /// MC point is generated with wt=1 or with variable weight, see OptRej switch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx:403,variab,variable,403,math/foam/src/TFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/foam/src/TFoam.cxx,1,['variab'],['variable']
Modifiability,"// TFormLeafInfoMultiVarDim is a small helper class to implement reading a; // data member on a variable size array inside a TClonesArray object stored in; // a TTree. This is the version used when the data member is inside a; // non-split object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h:96,variab,variable,96,tree/treeplayer/inc/TFormLeafInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h,1,['variab'],['variable']
Modifiability,"// TFormLeafInfoMultiVarDimDirect is a small helper class to implement reading; // a data member on a variable size array inside a TClonesArray object stored; // in a TTree. This is the version used for split access",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h:102,variab,variable,102,tree/treeplayer/inc/TFormLeafInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h,1,['variab'],['variable']
Modifiability,"// TFormula thinks that we have a multi-dimensional formula, e.g. with variables x,y,z,t.; // We have to check now that this is not the case, as RooFit only uses the syntax x[0], x[1], x[2], ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx:71,variab,variables,71,roofit/roofitcore/src/RooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx,1,['variab'],['variables']
Modifiability,"// TList created by TGaxis configured with owner flag; // If TGaxis object from old ROOT file will be read, memory will be leaked",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:27,config,configured,27,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['config'],['configured']
Modifiability,"// TListIter trIt(&fTransformations);; // std::vector< Int_t >::const_iterator rClsIt = fTransformationsReferenceClasses.begin();; // const Event* trEv = ev;; // UInt_t nvars = 0, ntgts = 0, nspcts = 0;; // while (VariableTransformBase *trf = (VariableTransformBase*) trIt() ) { // shouldn't be the transformation called in the inverse order for the inversetransformation?????; // if (trf->IsCreated()) {; // trf->CountVariableTypes( nvars, ntgts, nspcts );; // if( !(suppressIfNoTargets && ntgts==0) ); // trEv = trf->InverseTransform(ev, (*rClsIt) );; // }; // else break;; // rClsIt++;; // }; // return trEv;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:214,Variab,VariableTransformBase,214,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,2,['Variab'],['VariableTransformBase']
Modifiability,// TODO -- handle alpha-renaming of variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h:36,variab,variables,36,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTraverse.h,2,['variab'],['variables']
Modifiability,// TODO Conf.VisibilityScheme can be lto::Config::ELF for ELF.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp:42,Config,Config,42,interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/ThinLTOCodeGenerator.cpp,1,['Config'],['Config']
Modifiability,// TODO refactor RVVIntrinsic class design after support all intrinsic; // combination. This represents an instantiation of an intrinsic with a; // particular type and prototype,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h:8,refactor,refactor,8,interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Support/RISCVVIntrinsicUtils.h,1,['refactor'],['refactor']
Modifiability,// TODO see if there is a more elegant solution to selecting the rewrite; // descriptor type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp:65,rewrite,rewrite,65,interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SymbolRewriter.cpp,1,['rewrite'],['rewrite']
Modifiability,"// TODO should use xRooProjectedPdf here too, because not fixed range and; // extend behaviour of RooProjectedPdf in ROOT yet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:78,extend,extend,78,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extend']
Modifiability,"// TODO(erg): This is technically wrong. So XStoreName and friends expect; // this in Host Portable Character Encoding instead of UTF-8, which I believe; // is Compound Text. This shouldn't matter 90% of the time since this is the; // fallback to the UTF8 property above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler_linux.cxx:91,Portab,Portable,91,gui/cefdisplay/src/gui_handler_linux.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/gui_handler_linux.cxx,1,['Portab'],['Portable']
Modifiability,// TODO(https://github.com/llvm/llvm-project/issues/63873) We would ideally; // return an error as well but that's going to require refactoring of error; // handling in DebuginfodServer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/HTTPServer.cpp:132,refactor,refactoring,132,interpreter/llvm-project/llvm/lib/Debuginfod/HTTPServer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Debuginfod/HTTPServer.cpp,1,['refactor'],['refactoring']
Modifiability,"// TODO(lesimon): In a later version, these variables may be defined by the user or the ideal width may be read out; // from the terminal.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleReader.cxx:44,variab,variables,44,tree/ntuple/v7/src/RNTupleReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RNTupleReader.cxx,1,['variab'],['variables']
Modifiability,"// TODO: 1) Unify delimiter for inline asm, we also meet other delimiters; // for example ""\0A"", "";"".; // 2) Enhance StringRef. Some of the special delimiter (""\0"") can't be; // split in StringRef. Also empty StringRef can not call split (will stuck).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/InlineAsm.cpp:109,Enhance,Enhance,109,interpreter/llvm-project/llvm/lib/IR/InlineAsm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/InlineAsm.cpp,1,['Enhance'],['Enhance']
Modifiability,// TODO: 1-extend would be more precise.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp:11,extend,extend,11,interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ValueTracking.cpp,1,['extend'],['extend']
Modifiability,// TODO: 64-bit operands have extending behavior from 32-bit literal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp:30,extend,extending,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,1,['extend'],['extending']
Modifiability,"// TODO: A better future implementation would be to emit a single variable; // argument, variable return value STATEPOINT node here and then hookup the; // return value of each gc.relocate to the respective output of the; // previously emitted STATEPOINT value. Unfortunately, this doesn't appear; // to actually be possible today.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:66,variab,variable,66,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,2,['variab'],['variable']
Modifiability,// TODO: Adapt to the extra input from the PHINode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:9,Adapt,Adapt,9,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['Adapt'],['Adapt']
Modifiability,"// TODO: Add more AtomicRMWInst that needs to be extended.; // Since floating-point operation requires a non-trivial set of data; // operations, use CmpXChg to expand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp:49,extend,extended,49,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp,1,['extend'],['extended']
Modifiability,// TODO: Add support for global variables on the device after declare target; // support.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variables']
Modifiability,// TODO: Add support for local variables that are expressed in terms of; // parameters entry values.; // TODO: Add support for modified arguments that can be expressed; // by using its entry value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:31,variab,variables,31,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// TODO: Adjust states of args to constructors in the same way that arguments to; // function calls are handled.; // TODO: Use information from tests in for- and while-loop conditional.; // TODO: Add notes about the actual and expected state for; // TODO: Correctly identify unreachable blocks when chaining boolean operators.; // TODO: Adjust the parser and AttributesList class to support lists of; // identifiers.; // TODO: Warn about unreachable code.; // TODO: Switch to using a bitmap to track unreachable blocks.; // TODO: Handle variable definitions, e.g. bool valid = x.isValid();; // if (valid) ...; (Deferred); // TODO: Take notes on state transitions to provide better warning messages.; // (Deferred); // TODO: Test nested conditionals: A) Checking the same value multiple times,; // and 2) Checking different values. (Deferred)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp:537,variab,variable,537,interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/Consumed.cpp,1,['variab'],['variable']
Modifiability,// TODO: Align down to dword alignment and extract bits for extending loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp:60,extend,extending,60,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp,1,['extend'],['extending']
Modifiability,"// TODO: As the result is sign-extended, this is conservatively correct. A; // more precise answer could be calculated for SRAW depending on known; // bits in the shift amount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:31,extend,extended,31,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// TODO: Check VPLiveOuts to see if IV users need fixing instead of checking; // the cost model.; // If we inserted an edge from the middle block to the unique exit block,; // update uses outside the loop (phis) to account for the newly inserted; // edge.; // Fix-up external users of the induction variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:299,variab,variables,299,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,"// TODO: Check checker options too, possibly in CheckerRegistry.; // Leave unknown non-checker configs unclaimed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:95,config,configs,95,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['config'],['configs']
Modifiability,"// TODO: Check with Wouter why he uses copyCache in MPFE; makes it very difficult to extend, because; // copyCache is protected (so must be friend). Moved setting value to if-block below.; // _saveVars[ix].copyCache(&_vars[ix]);; // send message to queue (which will relay to workers)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx:85,extend,extend,85,roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,1,['extend'],['extend']
Modifiability,// TODO: Collect inner loops inside marked outer loops in case; // vectorization fails for the outer loop. Do not invoke; // 'containsIrreducibleCFG' again for inner loops when the outer loop is; // already known to be reducible. We can use an inherited attribute for; // that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:244,inherit,inherited,244,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['inherit'],['inherited']
Modifiability,// TODO: Contents is present in several classes of the hierarchy.; // This needs to be refactored to avoid duplication.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:87,refactor,refactored,87,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,1,['refactor'],['refactored']
Modifiability,// TODO: Could also check for an induction variable containing single; // bit shifted left by 1 in each iteration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['variab'],['variable']
Modifiability,"// TODO: Could handle constant base + variable offset, but a combine; // probably should have commuted it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['variab'],['variable']
Modifiability,// TODO: Currently we only check limited opcode. We probably extend; // it to all binary operation by checking TLI.isBinOp().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:61,extend,extend,61,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// TODO: Currently, only vector and GPR register banks are handled.; // This needs to be extended to handle floating point register; // banks in the future.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/GISel/PPCRegisterBankInfo.cpp,1,['extend'],['extended']
Modifiability,// TODO: Default ctor'd RewriteSymbolPass is no-op.; // addPass(RewriteSymbolPass());,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h:24,Rewrite,RewriteSymbolPass,24,interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CodeGenPassBuilder.h,2,['Rewrite'],['RewriteSymbolPass']
Modifiability,"// TODO: Determine a good default value.; //; // In the LLVM-TS and SPEC2006, 32 seems to not induce compile time overheads; // (when run with the first 5 abstract attributes). The results also indicate; // that we never reach 32 iterations but always find a fixpoint sooner.; //; // This will become more evolved once we perform two interleaved fixpoint; // iterations: bottom-up and top-down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp:306,evolve,evolved,306,interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/Attributor.cpp,1,['evolve'],['evolved']
Modifiability,"// TODO: Enhance how TChains with no names are showed by SaveGraph (and Describe); // see: https://github.com/root-project/root/issues/10928",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx:9,Enhance,Enhance,9,tree/dataframe/test/dataframe_datasetspec.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_datasetspec.cxx,1,['Enhance'],['Enhance']
Modifiability,// TODO: Enhance logic for other BinOps and remove this check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:9,Enhance,Enhance,9,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['Enhance'],['Enhance']
Modifiability,// TODO: Enhance logic for other casts and remove this check.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:9,Enhance,Enhance,9,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['Enhance'],['Enhance']
Modifiability,// TODO: Extend for N use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h:9,Extend,Extend,9,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h,1,['Extend'],['Extend']
Modifiability,// TODO: Extend support for operator<=> to ObjC types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ComparisonCategories.cpp:9,Extend,Extend,9,interpreter/llvm-project/clang/lib/AST/ComparisonCategories.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ComparisonCategories.cpp,1,['Extend'],['Extend']
Modifiability,"// TODO: Extend this function to merge stores of scalable vectors.; // (i.e. two <vscale x 8 x i8> stores can be merged to one <vscale x 16 x i8>; // store since we know <vscale x 16 x i8> is exactly twice as large as; // <vscale x 8 x i8>). Until then, bail out for scalable vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Extend,Extend,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Extend'],['Extend']
Modifiability,// TODO: Extend this to handle switches,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:9,Extend,Extend,9,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['Extend'],['Extend']
Modifiability,// TODO: Extend to allow steps > -1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:9,Extend,Extend,9,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['Extend'],['Extend']
Modifiability,"// TODO: Extend to other opcodes such as mul, and div",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:9,Extend,Extend,9,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Extend'],['Extend']
Modifiability,// TODO: Extend type shouldn't matter (assuming legal types).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:9,Extend,Extend,9,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// TODO: Extending a vector may be expensive, don't do this until heuristics; // are better.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:9,Extend,Extending,9,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['Extend'],['Extending']
Modifiability,// TODO: FP16/BF16 vectors should be converted to integer vectors; // This check is similar to isIllegalVectorType - refactor?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:117,refactor,refactor,117,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,1,['refactor'],['refactor']
Modifiability,"// TODO: Figure out how to handle deref size issues for variadic; // values.; // We're loading a value off the stack that's not the same size as the; // variable. Add / subtract stack offset, explicitly deref with a; // size, and add DW_OP_stack_value if not already present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:153,variab,variable,153,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// TODO: Fold a following sign-/zero-extend into the load instruction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFastISel.cpp:37,extend,extend,37,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFastISel.cpp,1,['extend'],['extend']
Modifiability,"// TODO: For a 32-bit target, we need to adjust the LEA variables with; // something like this:; // Opcode = X86::LEA32r;; // InRegLEA = RegInfo.createVirtualRegister(&X86::GR32_NOSPRegClass);; // OutRegLEA =; // Is8BitOp ? RegInfo.createVirtualRegister(&X86::GR32ABCD_RegClass); // : RegInfo.createVirtualRegister(&X86::GR32RegClass);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:56,variab,variables,56,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['variab'],['variables']
Modifiability,"// TODO: For now, liveness of a memory region is equivalent to liveness of its; // base region. In fact we can do a bit better: say, if a particular FieldDecl; // is not used later in the path, we can diagnose a leak of a value within; // that field earlier than, say, the variable that contains the field dies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SymbolManager.cpp:273,variab,variable,273,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SymbolManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SymbolManager.cpp,1,['variab'],['variable']
Modifiability,// TODO: Handle extended types?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,extend,extended,16,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['extend'],['extended']
Modifiability,// TODO: Handle for extending loads,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,extend,extending,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extending']
Modifiability,"// TODO: Here is the list of the missing matchers, grouped by reason.; //; // Polymorphic + argument overload:; // findAll; //; // Other:; // equalsNode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Registry.cpp:78,Polymorphi,Polymorphic,78,interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Registry.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/Dynamic/Registry.cpp,1,['Polymorphi'],['Polymorphic']
Modifiability,"// TODO: Ideally this would be controlled automatically by detecting that we; // are linking with an allocator that supports these interfaces, rather than; // an internal option (which would still be needed for tests, however). For; // example, if the library exported a symbol like __malloc_hot_cold the linker; // could recognize that and set a flag in the lto::Config.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp:364,Config,Config,364,interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/LTO/LTO.cpp,1,['Config'],['Config']
Modifiability,"// TODO: If we ever want to support v7, this needs to be extended; // to cover all floating point operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp:57,extend,extended,57,interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/DelaySlotFiller.cpp,1,['extend'],['extended']
Modifiability,"// TODO: Implement DPP Strategy and switch based on immediate strategy; // operand. For now, for all the cases (default, Iterative and DPP we use; // iterative approach by default.); // To reduce the VGPR using iterative approach, we need to iterate; // over all the active lanes. Lowering consists of ComputeLoop,; // which iterate over only active lanes. We use copy of EXEC register; // as induction variable and every active lane modifies it using bitset0; // so that we will get the next active lane for next iteration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:403,variab,variable,403,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// TODO: In the regular function, if that local variable in the; // location B is not captured, that argument pointer won't alias to it; // as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUAliasAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// TODO: Initialise the available extensions, extended instruction sets; // based on the environment settings.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.h:46,extend,extended,46,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVSubtarget.h,1,['extend'],['extended']
Modifiability,"// TODO: Is this actually reliable? Maybe improving our MemRegion; // hierarchy to provide typed regions for all non-void pointers would be; // better. For instance, we cannot extend this towards LocAsInteger; // operations, where result type of the expression is integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp:176,extend,extend,176,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/SimpleSValBuilder.cpp,1,['extend'],['extend']
Modifiability,"// TODO: Looking at the user(s) to determine if this insert is a; // fold-to-shuffle opportunity does not match the usual instcombine; // constraints. We should decide if the transform is worthy based only; // on this instruction and its operands, but that may not work currently.; //; // Here, we are trying to avoid creating shuffles before reaching; // the end of a chain of extract-insert pairs. This is complicated because; // we do not generally form arbitrary shuffle masks in instcombine; // (because those may codegen poorly), but collectShuffleElements() does; // exactly that.; //; // The rules for determining what is an acceptable target-independent; // shuffle mask are fuzzy because they evolve based on the backend's; // capabilities and real-world impact.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:703,evolve,evolve,703,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['evolve'],['evolve']
Modifiability,// TODO: Make BaseEnumName prefix configurable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CXXPredicates.cpp:34,config,configurable,34,interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CXXPredicates.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISel/CXXPredicates.cpp,1,['config'],['configurable']
Modifiability,"// TODO: Make SCEV use Attributor assumption.; // We may be able to bound a variable range via assumptions in; // Attributor. ex.) If x is assumed to be in [1, 3] and y is known to; // evolve to x^2 + x, then we can say that y is in [2, 12].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:76,variab,variable,76,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,"['evolve', 'variab']","['evolve', 'variable']"
Modifiability,"// TODO: Model for NF > 2; // We'll need to enhance getShuffleCost to model shuffles that are just; // inserts and extracts into subvectors, since they won't have the full cost; // of a vrgather.; // An interleaved store for 3 vectors of 4 lanes will look like; // %11 = shufflevector <4 x i32> %4, <4 x i32> %6, <8 x i32> <0...7>; // %12 = shufflevector <4 x i32> %9, <4 x i32> poison, <8 x i32> <0...3>; // %13 = shufflevector <8 x i32> %11, <8 x i32> %12, <12 x i32> <0...11>; // %interleaved.vec = shufflevector %13, poison, <12 x i32> <interleave mask>; // store <12 x i32> %interleaved.vec, ptr %10, align 4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:44,enhance,enhance,44,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,1,['enhance'],['enhance']
Modifiability,// TODO: Name.Offset.Offset here and in the all similar places below; // suggests a names refactoring. Maybe StringTableOffset.Value?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFImportFile.cpp:90,refactor,refactoring,90,interpreter/llvm-project/llvm/lib/Object/COFFImportFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFImportFile.cpp,1,['refactor'],['refactoring']
Modifiability,"// TODO: Needs some refactoring, as all other deallocation modeling; // functions are suffering from out parameters and messy code due to how; // realloc is handled.; //; /// Models memory reallocation.; ///; /// \param [in] Call The expression that reallocated memory; /// \param [in] ShouldFreeOnFail Whether if reallocation fails, the supplied; /// memory should be freed.; /// \param [in] State The \c ProgramState right before reallocation.; /// \param [in] SuffixWithN Whether the reallocation function we're modeling; /// has an '_n' suffix, such as g_realloc_n.; /// \returns The ProgramState right after reallocation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp:20,refactor,refactoring,20,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MallocChecker.cpp,1,['refactor'],['refactoring']
Modifiability,"// TODO: Only the low 4/5/6 bits of the shift amount are observed, so we can; // be more flexible with the shift amount type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:89,flexible,flexible,89,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['flexible'],['flexible']
Modifiability,"// TODO: Portability - check with Rene",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLStopwatch.cxx:9,Portab,Portability,9,graf3d/gl/src/TGLStopwatch.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLStopwatch.cxx,1,['Portab'],['Portability']
Modifiability,// TODO: Portability.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp:9,Portab,Portability,9,interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/libclang/CIndex.cpp,1,['Portab'],['Portability']
Modifiability,// TODO: Potentially extend this to scalable vectors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:21,extend,extend,21,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,// TODO: Refactor ActOnFunctionDeclarator so that we can call only the; // pieces need to verify the typo-corrected C++ declaration and hopefully; // eliminate the need for the parameter pack ExtraArgs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:9,Refactor,Refactor,9,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Refactor'],['Refactor']
Modifiability,// TODO: Refactor parts common with the 'handleExecNameEncodedBEOpts',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FuzzMutate/FuzzerCLI.cpp:9,Refactor,Refactor,9,interpreter/llvm-project/llvm/lib/FuzzMutate/FuzzerCLI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FuzzMutate/FuzzerCLI.cpp,1,['Refactor'],['Refactor']
Modifiability,// TODO: Refactor this to return Expected<...>,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:9,Refactor,Refactor,9,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,1,['Refactor'],['Refactor']
Modifiability,"// TODO: Refactor to Sema::FindCompositePointerType(), and; // Sema::CheckCompareOperands().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h:9,Refactor,Refactor,9,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/SMTConv.h,1,['Refactor'],['Refactor']
Modifiability,// TODO: Refactor to handle more complex cases similar to; // combineBinOp_VLToVWBinOp_VL.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:9,Refactor,Refactor,9,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['Refactor'],['Refactor']
Modifiability,"// TODO: Refactor with the caller (visitEXTRACT_SUBVECTOR), so we can share; // some of these bailouts with other transforms.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Refactor,Refactor,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Refactor'],['Refactor']
Modifiability,// TODO: Refine this. This should avoid cases like turning constant memcpy sizes; // into variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp:90,variab,variables,90,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyCFG.cpp,1,['variab'],['variables']
Modifiability,"// TODO: Review the target OpenCL and GLSL Extended Instruction Set specs to; // tighten these requirements. Many of these math functions are only legal on; // specific bitwidths, so they are not selectable for; // allFloatScalarsAndVectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVLegalizerInfo.cpp:43,Extend,Extended,43,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVLegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVLegalizerInfo.cpp,1,['Extend'],['Extended']
Modifiability,// TODO: Rewrite the signature to return void?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:9,Rewrite,Rewrite,9,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// TODO: Rewrite this to return a new 'AND' instead of using CombineTo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Rewrite,Rewrite,9,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// TODO: Seems to be, to configure window_info.SetAsWindowless,; // one should implement CefRenderHandler",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx:25,config,configure,25,gui/cefdisplay/src/simple_app.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx,1,['config'],['configure']
Modifiability,// TODO: Should be 1-extend,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp:21,extend,extend,21,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSimplifyDemanded.cpp,1,['extend'],['extend']
Modifiability,"// TODO: Should load to s16 be legal? Most loads extend to 32-bits, but we; // handle some operations by just promoting the register during; // selection. There are also d16 loads on GFX9+ which preserve the high bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:49,extend,extend,49,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['extend'],['extend']
Modifiability,// TODO: Support cases with more than 1 variable offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:40,variab,variable,40,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variable']
Modifiability,// TODO: Support in-order reductions based on the recurrence descriptor.; // All ops in the reduction inherit fast-math-flags from the recurrence; // descriptor.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:102,inherit,inherit,102,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['inherit'],['inherit']
Modifiability,"// TODO: The above 4 cases are not exhaustive. In particular, it is possible; // for Current to be incomparable with StaticLowerBound, StaticUpperBound,; // or both.; //; // For example, suppose Foo<T> and Bar<T> are unrelated types.; //; // Foo<T> *f = ...; // Bar<T> *b = ...; //; // id t1 = b;; // f = t1;; // id t2 = f; // StaticLowerBound is Foo<T>, Current is Bar<T>; //; // We should either constrain the callers of this function so that the stated; // preconditions hold (and assert it) or rewrite the function to expicitly; // handle the additional cases.; // Precondition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:498,rewrite,rewrite,498,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['rewrite'],['rewrite']
Modifiability,// TODO: The default logic is inherited from code in CodeGenPrepare.; // The opcode should not make a difference by default?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:30,inherit,inherited,30,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,1,['inherit'],['inherited']
Modifiability,"// TODO: The generated code is pretty poor. Investigate using the; // same ""shift and subtract with carry"" trick that we do for; // extending 8-bit to 16-bit. This may require infrastructure; // improvements in how we treat 16-bit ""registers"" to be feasible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:132,extend,extending,132,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// TODO: The motivating case for this transform is an x86 AVX1 target. That; // target has temptingly almost legal versions of bitwise logic ops in 256-bit; // flavors, but no other 256-bit integer support. This could be extended to; // handle any binop, but that may require fixing/adding other folds to avoid; // codegen regressions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:221,extend,extended,221,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,// TODO: The one-use restrictions for a scalar select could be eased if; // the fold of a select in visitLoadInst() was enhanced to match a pattern; // that includes a cast.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:120,enhance,enhanced,120,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['enhance'],['enhanced']
Modifiability,"// TODO: There's no need to store the entire configtable, it'd be plenty; // enough to store checker options.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:45,config,configtable,45,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['config'],['configtable']
Modifiability,"// TODO: These all require that Y is constant too, so refactor with the above.; // Try to optimize things like ""A[i] & 42 == 0"" to index computations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:54,refactor,refactor,54,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['refactor'],['refactor']
Modifiability,"// TODO: These can be fine-tuned further to consider code size or deopt states; // that are captured by the deoptimize exit block.; // Also, we can extend this to support more cases, if we actually; // know of kinds of multiexit loops that would benefit from unrolling.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp:148,extend,extend,148,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnrollRuntime.cpp,1,['extend'],['extend']
Modifiability,// TODO: These folds could be refactored to be part of the above calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:30,refactor,refactored,30,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['refactor'],['refactored']
Modifiability,// TODO: This can be generalized to compares of non-signbits using; // decomposeBitTestICmp(). It could be enhanced more by using (something like); // foldLogOpOfMaskedICmps().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:107,enhance,enhanced,107,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['enhance'],['enhanced']
Modifiability,// TODO: This code may be extended to handle vectors as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:26,extend,extended,26,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['extend'],['extended']
Modifiability,// TODO: This could be enhanced to handle smaller integer types by peeking; // through an extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:23,enhance,enhanced,23,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['enhance', 'extend']","['enhanced', 'extend']"
Modifiability,// TODO: This could be extended to allow vectors. Datalayout changes might be; // needed to properly support that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:23,extend,extended,23,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extended']
Modifiability,// TODO: This fixup should instead be modeled in VPlan.; // Fix the scalar loop reduction variable with the incoming reduction sum; // from the vector body and from the backedge value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// TODO: This is a workaround to avoid the unmodelled liveness computed with; // whole-wave virtual registers when allocated together with the regular VGPR; // virtual registers. Presently, the liveness computed during the regalloc is; // only uniform (or single lane aware) and it doesn't take account of the; // divergent control flow that exists for our GPUs. Since the WWM registers; // can modify inactive lanes, the wave-aware liveness should be computed for; // the virtual registers to accurately plot their interferences. Without; // having the divergent CFG for the function, it is difficult to implement the; // wave-aware liveness info. Until then, we conservatively extend the liveness; // of the wwm registers into the entire function so that they won't be reused; // without first spilling/splitting their liveranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp:679,extend,extend,679,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SILowerSGPRSpills.cpp,1,['extend'],['extend']
Modifiability,// TODO: This list should be expanded or refactored after all GCC-compatible; // std libcall builtins are implemented.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:41,refactor,refactored,41,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['refactor'],['refactored']
Modifiability,"// TODO: This should be extended to handle other intrinsics like fshl, ctpop,; // etc. Use llvm::isTriviallyVectorizable() and related to determine; // which intrinsics are safe to shuffle?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,1,['extend'],['extended']
Modifiability,"// TODO: This switch could include FNEG and the x86-specific FP logic ops; // (FAND, FANDN, FOR, FXOR). But that may require enhancements to avoid; // missed load folding and fma+fneg combining.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:125,enhance,enhancements,125,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['enhance'],['enhancements']
Modifiability,"// TODO: We can create an inner loop which runs a finite number of; // iterations with an outer loop which contains a safepoint. This would; // not help runtime performance that much, but it might help our ability to; // optimize the inner loop.; // Safepoint insertion would involve creating a new basic block (as the; // target of the current backedge) which does the safepoint (of all live; // variables) and branches to the true header",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp:397,variab,variables,397,interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/PlaceSafepoints.cpp,1,['variab'],['variables']
Modifiability,"// TODO: We could remove the mutex and condition variable and use; // std::atomic::wait() instead, but that isn't available until C++20",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:49,variab,variable,49,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,1,['variab'],['variable']
Modifiability,// TODO: We could sign extend narrower types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['extend'],['extend']
Modifiability,"// TODO: We may want to remove this, since the functionality; // can be achieved using config files.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:87,config,config,87,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['config']
Modifiability,"// TODO: add support for variable templates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingMemberIter.h:25,variab,variable,25,core/metacling/src/TClingMemberIter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingMemberIter.h,1,['variab'],['variable']
Modifiability,"// TODO: address the below limitation to handle GFX11 BVH instructions; // Bail if address is not a VGPR32. That should be possible to extend the; // optimization to work with subregs of a wider register tuples, but the; // logic to find free registers will be much more complicated with much; // less chances for success. That seems reasonable to assume that in most; // cases a tuple is used because a vector variable contains different; // parts of an address and it is either already consecutive or cannot; // be reassigned if not. If needed it is better to rely on register; // coalescer to process such address tuples.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp:135,extend,extend,135,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNNSAReassign.cpp,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"// TODO: change this treatment to keep track of all values so that the threshold; // for adaptive sampling is counted for all distributions and not just the; // first one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:89,adapt,adaptive,89,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['adapt'],['adaptive']
Modifiability,"// TODO: check deep hierarchy for multiple inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:43,inherit,inheritance,43,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,1,['inherit'],['inheritance']
Modifiability,// TODO: check if extended build vector as well.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp:18,extend,extended,18,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,2,['extend'],['extended']
Modifiability,// TODO: convert this to utilise the IRBuilder Config rather than; // a passed down argument.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:47,Config,Config,47,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['Config'],['Config']
Modifiability,"// TODO: currently, ROOT/meta does not properly distinguish between variables of enum; // type, and values of enums. The latter are supposed to be const. This code relies on; // odd features (bugs?) to figure out the difference, but this should really be fixed; // upstream and/or deserves a new API.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:68,variab,variables,68,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['variab'],['variables']
Modifiability,// TODO: determine memory model and source language from the configuratoin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp:61,config,configuratoin,61,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVModuleAnalysis.cpp,1,['config'],['configuratoin']
Modifiability,// TODO: enhance the condition for subtarget before pwr8,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:9,enhance,enhance,9,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['enhance'],['enhance']
Modifiability,// TODO: extend the masked interleaved-group support to reversed access.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:9,extend,extend,9,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['extend'],['extend']
Modifiability,// TODO: extend to support scalable VFs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:9,extend,extend,9,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['extend'],['extend']
Modifiability,"// TODO: handle e.g. store to alloca here - only worth doing if we extend; // to allow reload along used path as described below. Otherwise, this; // is simply a store to a dead allocation which will be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:67,extend,extend,67,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extend']
Modifiability,"// TODO: investigate the appropriate linkage type used for the global; // variable for possibly changing that to internal or private, or maybe; // create different versions of the function for different OMP internal; // variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:74,variab,variable,74,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// TODO: make configurable; // 2. Determine the data (including globs). if more than 1 then exit and tell user they need to flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:14,config,configurable,14,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['config'],['configurable']
Modifiability,"// TODO: make those pre-defined variables read-only.; // Currently there is none suitable machinery in the core llvm-mc for this.; // MCSymbol::isRedefinable is intended for another purpose, and; // AsmParser::parseDirectiveSet() cannot be specialized for specific target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,1,['variab'],['variables']
Modifiability,"// TODO: once Clad has support for higher-order functions (follow also the; // Clad issue #637), we could refactor this code into an actual function; // instead of hardcoding it here as a string.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:106,refactor,refactor,106,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['refactor'],['refactor']
Modifiability,"// TODO: passing a scalar root to toYAML() asserts:; // (PolymorphicTraits<T>::getKind(Val) != NodeKind::Scalar &&; // ""plain scalar documents are not supported""); // To avoid this crash we print the raw data instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp:57,Polymorphi,PolymorphicTraits,57,interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/ELFDumper.cpp,1,['Polymorphi'],['PolymorphicTraits']
Modifiability,"// TODO: provide atomic and non-atomic reduction generators for reduction; // operators defined by the OpenMP specification.; /// Generator for '#omp reduction'.; ///; /// Emits the IR instructing the runtime to perform the specific kind of; /// reductions. Expects reduction variables to have been privatized and; /// initialized to reduction-neutral values separately. Emits the calls to; /// runtime functions as well as the reduction function and the basic blocks; /// performing the reduction atomically and non-atomically.; ///; /// The code emitted for the following:; ///; /// \code; /// type var_1;; /// type var_2;; /// #pragma omp <directive> reduction(reduction-op:var_1,var_2); /// /* body */;; /// \endcode; ///; /// corresponds to the following sketch.; ///; /// \code; /// void _outlined_par() {; /// // N is the number of different reductions.; /// void *red_array[] = {privatized_var_1, privatized_var_2, ...};; /// switch(__kmpc_reduce(..., N, /*size of data in red array*/, red_array,; /// _omp_reduction_func,; /// _gomp_critical_user.reduction.var)) {; /// case 1: {; /// var_1 = var_1 <reduction-op> privatized_var_1;; /// var_2 = var_2 <reduction-op> privatized_var_2;; /// // ...; /// __kmpc_end_reduce(...);; /// break;; /// }; /// case 2: {; /// _Atomic<ReductionOp>(var_1, privatized_var_1);; /// _Atomic<ReductionOp>(var_2, privatized_var_2);; /// // ...; /// break;; /// }; /// default: break;; /// }; /// }; ///; /// void _omp_reduction_func(void **lhs, void **rhs) {; /// *(type *)lhs[0] = *(type *)lhs[0] <reduction-op> *(type *)rhs[0];; /// *(type *)lhs[1] = *(type *)lhs[1] <reduction-op> *(type *)rhs[1];; /// // ...; /// }; /// \endcode; ///; /// \param Loc The location where the reduction was; /// encountered. Must be within the associate; /// directive and after the last local access to the; /// reduction variables.; /// \param AllocaIP An insertion point suitable for allocas usable; /// in reductions.; /// \param ReductionInfos A list of info on each redu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h:276,variab,variables,276,interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h,1,['variab'],['variables']
Modifiability,"// TODO: refactor code below with converters code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx:9,refactor,refactor,9,bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,1,['refactor'],['refactor']
Modifiability,"// TODO: refactor the code below with the class method code",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx:9,refactor,refactor,9,bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,2,['refactor'],['refactor']
Modifiability,// TODO: refactor this to be part of multiple bin case,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:9,refactor,refactor,9,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,1,['refactor'],['refactor']
Modifiability,"// TODO: refactor with Converters.cxx",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx:9,refactor,refactor,9,bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPyCppyyModule.cxx,1,['refactor'],['refactor']
Modifiability,// TODO: rewrite for RPalette functionality,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:9,rewrite,rewrite,9,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['rewrite'],['rewrite']
Modifiability,// TODO: set the version on a min-necessary basis (just like the translator; // does) requires some refactoring of MCAssembler::VersionInfoType.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/SPIRVObjectWriter.cpp:100,refactor,refactoring,100,interpreter/llvm-project/llvm/lib/MC/SPIRVObjectWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/SPIRVObjectWriter.cpp,1,['refactor'],['refactoring']
Modifiability,"// TODO: support variables that are located in spill slots, with non-zero; // offsets from the start of the spill slot. It would require some more; // complex DIExpression calculations. This doesn't seem to be produced by; // LLVM right now, so don't try and support it.; // Accept no-subregister slots and subregisters where the offset is zero.; // The consumer should already have type information to work out how large; // the variable is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:17,variab,variables,17,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// TODO: the symmetric MoreTy works for targets like, e.g. NEON.; // For targets, like e.g. MVE, the result is a predicated vector (i1).; // This will need some refactoring.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:161,refactor,refactoring,161,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['refactor'],['refactoring']
Modifiability,"// TODO: this is an ugly hack.. adapt this to new framework",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:32,adapt,adapt,32,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['adapt'],['adapt']
Modifiability,"// TODO: this simplification may be extended to any speculatable instruction,; // not just binops, and would possibly be handled better in FoldOpIntoSelect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:36,extend,extended,36,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extended']
Modifiability,"// TODO: ugly hack.. adapt to new framework",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:21,adapt,adapt,21,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['adapt'],['adapt']
Modifiability,"// TODO: we are using the size of the first loop variable to the the number; // of iterations, but it should be made sure that all loop vars are either; // scalar or have the same size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:49,variab,variable,49,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variable']
Modifiability,// TODO: we don't rewrite call site argument for now because it will need to; // rewrite the function signature of the callee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:18,rewrite,rewrite,18,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['rewrite'],['rewrite']
Modifiability,// TODO: we don't rewrite function argument for now because it will need to; // rewrite the function signature and all call sites,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:18,rewrite,rewrite,18,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['rewrite'],['rewrite']
Modifiability,// TODO: we don't rewrite function argument for now because it will need to; // rewrite the function signature and all call sites.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp:18,rewrite,rewrite,18,interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/AttributorAttributes.cpp,2,['rewrite'],['rewrite']
Modifiability,"// TODO: when we're ready to make the change at the IR level, we can; // extend convertCmpXchgToInteger for floating point too.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:73,extend,extend,73,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,1,['extend'],['extend']
Modifiability,"// TObject *select = gPad->GetSelected();; // if(!select) return;; // if (!select->InheritsFrom(TGraph::Class())) {gPad->SetUniqueID(0); return;}; // gPad->GetCanvas()->FeedbackMode(true);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx:83,Inherit,InheritsFrom,83,roofit/xroofit/src/xRooNode_interactive.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode_interactive.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// TPrincipal doesn't support PCA transformation for 1 or less variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx:63,variab,variables,63,tmva/tmva/src/VariablePCATransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariablePCATransform.cxx,1,['variab'],['variables']
Modifiability,"// TProofMonSender status/config bits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TProofMonSender.h:26,config,config,26,proof/proofplayer/inc/TProofMonSender.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/inc/TProofMonSender.h,1,['config'],['config']
Modifiability,"// TROOT sets the error ignore level handler, the system error message handler, and the error abort handler on; // construction such that the ""Root.ErrorIgnoreLevel"" environment variable is used for the ignore level; // and gSystem is used to generate a stack trace on abort.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h:178,variab,variable,178,core/foundation/inc/TError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/TError.h,1,['variab'],['variable']
Modifiability,"// TTabCom adapter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/Getline.cxx:11,adapt,adapter,11,core/textinput/src/Getline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/Getline.cxx,1,['adapt'],['adapter']
Modifiability,"// TTreeFormula operands.; // a tree variable (the most used case).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:37,variab,variable,37,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// Tab completion handler / TTabCom adapter; // Config values:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/Getline.cxx:36,adapt,adapter,36,core/textinput/src/Getline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/Getline.cxx,2,"['Config', 'adapt']","['Config', 'adapter']"
Modifiability,// Taint property gets lost if the variable is passed as a; // non-const pointer or reference to a function which is; // not inlined. For matching rules we want to preserve the taintedness.; // TODO: We should traverse all reachable memory regions via the; // escaping parameter. Instead of doing that we simply mark only the; // referred memory region as tainted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['variab'],['variable']
Modifiability,// Tainted lanes would extend beyond the basic block.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:23,extend,extend,23,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extend']
Modifiability,"// Take name of cut variables from pad title if title contains "":""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCutG.cxx:20,variab,variables,20,graf2d/graf/src/TCutG.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCutG.cxx,3,['variab'],['variables']
Modifiability,"// Take out plot variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:17,variab,variable,17,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,"// Take out the sliced variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:23,variab,variables,23,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,2,['variab'],['variables']
Modifiability,"// Take the file kind of the file containing the #line directive. #line; // directives are often used for generated sources from the same codebase, so; // the new file should generally be classified the same way as the current; // file. This is visible in GCC's pre-processed output, which rewrites #line; // to GNU line markers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:290,rewrite,rewrites,290,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['rewrite'],['rewrites']
Modifiability,"// Takes a single uhalf operand. Add to the address register of; // the state machine the value of the (unencoded) operand and set; // the op_index register to 0. This is the only extended opcode that; // takes an argument that is not a variable length number.; // The motivation for DW_LNS_fixed_advance_pc is this: existing; // assemblers cannot emit DW_LNS_advance_pc or special opcodes because; // they cannot encode LEB128 numbers or judge when the computation; // of a special opcode overflows and requires the use of; // DW_LNS_advance_pc. Such assemblers, however, can use; // DW_LNS_fixed_advance_pc instead, sacrificing compression.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp:180,extend,extended,180,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFDebugLine.cpp,2,"['extend', 'variab']","['extended', 'variable']"
Modifiability,// Takes the config and creates a CallDescription for it and associates a Rule; // with that.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:13,config,config,13,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['config'],['config']
Modifiability,"// Taking the address of a void variable is technically illegal, but we; // allow it in cases which are otherwise valid.; // Example: ""extern void x; void* y = &x;"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Tampering with the type of a VarDecl here is a bit of a hack, but we need; // to ensure that the variable is 'const' so that we can error on; // modification, which can otherwise over-release.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:100,variab,variable,100,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,// Targets have to explicitly opt-in for extending vector loads and; // truncating vector stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:41,extend,extending,41,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Targets have to explicitly opt-in for extending vector loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:41,extend,extending,41,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Technically a valid configuration that just wants to use libClangs; // internal header detection, but for now give a hint about why.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:23,config,configuration,23,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['config'],['configuration']
Modifiability,"// Technically, due to ELF symbol interposition semantics, we can't change the; // alignment or size of symbols. If we increase the alignment or size of a; // symbol, the compiler may make optimisations based on this new alignment or; // size. If the symbol is interposed, this optimisation could lead to; // alignment-related or OOB read/write crashes.; //; // This is handled in the linker. When the linker sees multiple declarations of; // a global variable, and some are tagged, and some are untagged, it resolves it; // to be an untagged definition - but preserves the tag-granule-rounded size and; // tag-granule-alignment. This should prevent these kind of crashes intra-DSO.; // For cross-DSO, it's been a reasonable contract that if you're interposing a; // sanitizer-instrumented global, then the interposer also needs to be; // sanitizer-instrumented.; //; // FIXME: In theory, this can be fixed by splitting the size/alignment of; // globals into two uses: an ""output alignment"" that's emitted to the ELF file,; // and an ""optimisation alignment"" that's used for optimisation. Thus, we could; // adjust the output alignment only, and still optimise based on the pessimistic; // pre-tagging size/alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:452,variab,variable,452,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,1,['variab'],['variable']
Modifiability,"// Tell LiveDebugVariables about the new ranges. Ranges not being covered by; // the new regs are kept in LDV (still mapping to the old register), until; // we rewrite spilled locations in LDV at a later stage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:160,rewrite,rewrite,160,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Tell the BugReporterContext to report cases when the tracked symbol is; // assigned to different variables, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.cpp:100,variab,variables,100,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/RetainCountChecker/RetainCountDiagnostics.cpp,1,['variab'],['variables']
Modifiability,// Tell the linker to load the plugin. This has to come before; // AddLinkerInputs as gold requires -plugin and AIX ld requires -bplugin to; // come before any -plugin-opt/-bplugin_opt that -Wl might forward.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:31,plugin,plugin,31,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,3,['plugin'],"['plugin', 'plugin-opt']"
Modifiability,// Tell the rewriter to enter the scope of the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:12,rewrite,rewriter,12,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['rewrite'],['rewriter']
Modifiability,// Tell the rewriter to enter the scope of the let variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:12,rewrite,rewriter,12,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,2,"['rewrite', 'variab']","['rewriter', 'variable']"
Modifiability,// Tell the user to assign it into a variable to force a volatile load if this; // isn't an array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,// Tell transfer tracker that the variable value has changed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Template argument PassT of PassInstrumentation::runBeforePass could be two; // kinds: (1) a regular pass inherited from PassInfoMixin (happen when; // creating a adaptor pass for a regular pass); (2) a type-erased PassConcept; // created from (1). Here we want to make case (1) skippable unconditionally; // since they are regular passes. We call PassConcept::isRequired to decide; // for case (2).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h:108,inherit,inherited,108,interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/PassInstrumentation.h,2,"['adapt', 'inherit']","['adaptor', 'inherited']"
Modifiability,"// Template instantiation of templated function first creates a canonical; // declaration and after the actual template specialization. For example:; // template<typename T> T TemplatedF(T t);; // template<> int TemplatedF(int i) { return i + 1; } creates:; // 1. Canonical decl: int TemplatedF(int i);; // 2. int TemplatedF(int i){ return i + 1; }; //; // The template specialization is attached to the list of specialization of; // the templated function.; // When TemplatedF is looked up it finds the templated function and the; // lookup is extended by the templated function with its specializations.; // In the end we don't need to remove the canonical decl because, it; // doesn't end up in the lookup table.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:545,extend,extended,545,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['extend'],['extended']
Modifiability,// Temporarily holds all instructions that are unlinked (but not deleted) by; // rewriteCandidateWithBasis. These instructions will be actually removed; // after all rewriting finishes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:81,rewrite,rewriteCandidateWithBasis,81,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['rewrite'],['rewriteCandidateWithBasis']
Modifiability,"// Temporarily put parameter variables in the translation unit, not; // the enclosing context. This prevents them from accidentally; // looking like class members in C++.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:29,variab,variables,29,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// Temporary copies of cached variables we will be modifying and replacing if; // sinking succeeds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp:30,variab,variables,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSchedStrategy.cpp,1,['variab'],['variables']
Modifiability,"// Temporary destructors are for temporaries. They die immediately at around; // the location of CXXBindTemporaryExpr. If they are lifetime-extended,; // they'd be dealt with via an AutomaticObjectDtor instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp:140,extend,extended,140,interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/PathDiagnostic.cpp,1,['extend'],['extended']
Modifiability,// Tentative definition of global variables may be initialized with; // non-zero null pointers. In this case they should have weak linkage; // since common linkage must have zero initializer and must not have; // explicit section therefore cannot have non-zero initial value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:34,variab,variables,34,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,// Terminate the location range for variables described by register at; // @I by inserting @ClobberingInstr to their history.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:36,variab,variables,36,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variables']
Modifiability,// Terminate the location range for variables described by register; // @RegNo by inserting @ClobberingInstr to their history.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:36,variab,variables,36,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variables']
Modifiability,"// Test 15; // Merge Tests with extendable axes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:32,extend,extendable,32,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extendable']
Modifiability,"// Test 21; // Histogram extend axis Tests",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:25,extend,extend,25,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extend']
Modifiability,"// Test data is saved as:; // 0 : <N> num of events, type float, 4 bytes; // 1-N : First variable for all events; // N+1-2N : Second variable...; // ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:89,variab,variable,89,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,2,['variab'],['variable']
Modifiability,"// Test for converting a string to a valid C/C++ variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx:49,variab,variable,49,core/clingutils/test/TClingUtilsTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/test/TClingUtilsTests.cxx,1,['variab'],['variable']
Modifiability,"// Test for variable names with numbers and extra whitespaces in it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx:12,variab,variable,12,roofit/hs3/test/testRooFitHS3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/test/testRooFitHS3.cxx,1,['variab'],['variable']
Modifiability,"// Test if the Trunc will be convertable to a VMOVN with a shuffle, and if so; // use the VMOVN over splitting the store. We are looking for patterns of:; // !rev: 0 N 1 N+1 2 N+2 ...; // rev: N 0 N+1 1 N+2 2 ...; // The shuffle may either be a single source (in which case N = NumElts/2) or; // two inputs extended with concat to the same size (in which case N =; // NumElts).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:307,extend,extended,307,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Test streamer field with polymorphic type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/StreamerField.hxx:28,polymorphi,polymorphic,28,tree/ntuple/v7/test/StreamerField.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/StreamerField.hxx,1,['polymorphi'],['polymorphic']
Modifiability,// Test the path based on the version in /etc/env.d/gcc/config-{tuple}.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:56,config,config,56,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['config']
Modifiability,"// Test variable parsing when using form x[N]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:8,variab,variable,8,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['variab'],['variable']
Modifiability,"// Test variable/parameter parsing for parametrized functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:8,variab,variable,8,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['variab'],['variable']
Modifiability,"// Test whether the variable has completed initialization.; //; // Itanium C++ ABI 3.3.2:; // The following is pseudo-code showing how these functions can be used:; // if (obj_guard.first_byte == 0) {; // if ( __cxa_guard_acquire (&obj_guard) ) {; // try {; // ... initialize the object ...;; // } catch (...) {; // __cxa_guard_abort (&obj_guard);; // throw;; // }; // ... queue object destructor with __cxa_atexit() ...;; // __cxa_guard_release (&obj_guard);; // }; // }; //; // If threadsafe statics are enabled, but we don't have inline atomics, just; // call __cxa_guard_acquire unconditionally. The ""inline"" check isn't; // actually inline, and the user might not expect calls to __atomic libcalls.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// Testing and recording whether we already called HasInconstistentTObjectHash; // for this object could save some cpu cycles in some circuntances (at the cost; // of reserving yet another bit).; // For each insert (CheckedHash is called only for insert in THashList/THashTable), it; // cost one memory fetch, one arithmetic operation and one branching.; // This save a virtual function call which itself contains a static variable memory; // fetch, a branching (of whether the static was already set or not).; // Given that a virtual function call is essentially 2 memory fetches (virtual table; // location and then content), one arithmetic operation and one function call/jump),; // we guess-estimate that the version recording-then-testing-prior-check would start; // saving cpu cycle when each object is inserted in average 1.5 times in a THashList/THashTable.; // if ( !fBits & kCheckedHash) {",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h:423,variab,variable,423,core/base/inc/TObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/TObject.h,1,['variab'],['variable']
Modifiability,"// Tests interpolation method for 1D Histogram with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:52,variab,variable,52,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the clone method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:49,variab,variable,49,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the clone method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:47,variab,variable,47,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the copy constructor for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:53,variab,variable,53,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the copy constructor for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:51,variab,variable,51,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the first Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:51,variab,variable,51,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the first Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:56,variab,variable,56,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the first Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:58,variab,variable,58,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the first add method to do scale of 1D Histograms with variable bin width",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:64,variab,variable,64,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the merge method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:49,variab,variable,49,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the merge method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:47,variab,variable,47,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the merge method for diferent 1D Histograms; // when axis can be extended (e.g. for time histograms)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:74,extend,extended,74,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['extend'],['extended']
Modifiability,"// Tests the merge method with fully differently labelled 3D Histograms; // Make the tests such that merge is done withouy using labels for all axis.; // All label sizes are less than number of bins, therefore axis cannot be extended; // and merge is done then numerically and not in label mode; // use smaller numberOfBins to have all labels filled in h4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:225,extend,extended,225,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extended']
Modifiability,"// Tests the operator=() method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:55,variab,variable,55,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the operator=() method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:53,variab,variable,53,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the second Add method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:54,variab,variable,54,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['variab'],['variable']
Modifiability,"// Tests the second Add method for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:52,variab,variable,52,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the second Divide method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:57,variab,variable,57,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the second Multiply method for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:59,variab,variable,59,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the write and read methods for 1D Histograms with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:59,variab,variable,59,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// Tests the write and read methods for 1D Profiles with variable bin size",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:57,variab,variable,57,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// That index is not tracked. This is suprising, and unlikely to ever; // occur, but the safe action is to indicate the variable is optimised out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:120,variab,variable,120,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// The ""counted_by"" attribute must be on a flexible array member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:43,flexible,flexible,43,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['flexible'],['flexible']
Modifiability,"// The ""counted_by"" field can't point to the flexible array member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:45,flexible,flexible,45,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['flexible'],['flexible']
Modifiability,"// The ""evaluator/rewriter"" of machine instructions. This is an abstract; // base class that provides the interface that the propagator will use,; // as well as some helper functions that are target-independent.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:18,rewrite,rewriter,18,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['rewrite'],['rewriter']
Modifiability,"// The 'current element to initialize'. The invariants on this; // variable are complicated. Essentially, after each iteration of; // the loop, it points to the last initialized element, except; // that it points to the beginning of the array before any; // elements have been initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:67,variab,variable,67,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['variab'],['variable']
Modifiability,"// The 16-bit immediate is sign-extended in li/lis.; // If the most significant bit is zero, all higher bits are zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:32,extend,extended,32,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// The ABI does not require i1, i8 or i16 to be extended.; //; // On Darwin, there is code in the wild relying on Clang's old behaviour of; // always extending i8/i16 return values, so keep doing that for now.; // (PR26665).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:48,extend,extended,48,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,"// The ABIs that maintain a TOC pointer accross calls need to have a nop; // immediately following the call instruction if the caller and callee may; // have different TOC bases. At link time if the linker determines the calls; // may not share a TOC base, the call is redirected to a trampoline inserted; // by the linker. The trampoline will (among other things) save the callers; // TOC pointer at an ABI designated offset in the linkage area and the; // linker will rewrite the nop to be a load of the TOC pointer from the; // linkage area into gpr2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:470,rewrite,rewrite,470,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The CC is fine, but we need to rewrite the LHS of the comparison as an; // atomic sub.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,rewrite,rewrite,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The CINT based code was filtering away static variables (they are not part of; // the list starting with field_begin in clang), and const enums (which should; // also not be part of this list).; // It was also filtering out the 'G__virtualinfo' artificial member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:49,variab,variables,49,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['variab'],['variables']
Modifiability,// The Data Variable section is anchored to profile counters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:12,Variab,Variable,12,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['Variab'],['Variable']
Modifiability,"// The DeclRefExpr is not value-dependent, but the variable it refers to; // has a value-dependent initializer. This should only happen in; // constant-folding cases, where the variable is not actually of a suitable; // type for use in a constant expression (otherwise the DeclRefExpr would; // have been value-dependent too), so diagnose that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:51,variab,variable,51,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['variab'],['variable']
Modifiability,"// The FrameFunc string is a small RPN program. It can be broken up into; // statements that end in the '=' operator, which assigns the value on; // the top of the stack to the previously pushed variable. Variables can; // be temporary values ($T0) or physical registers ($esp). Print each; // assignment on its own line to make these programs easier to read.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp:195,variab,variable,195,interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-readobj/COFFDumper.cpp,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,"// The FrontendAction can have lifetime requirements for Compiler or its; // members, and we need to ensure it's deleted earlier than Compiler. So we; // pass it to an std::unique_ptr declared after the Compiler variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Tooling.cpp:212,variab,variable,212,interpreter/llvm-project/clang/lib/Tooling/Tooling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Tooling.cpp,1,['variab'],['variable']
Modifiability,// The GEP is different by more than one input. While this could be; // extended to support GEPs that vary by more than one variable it; // doesn't make sense since it greatly increases the complexity and; // would result in an R+R+R addressing mode which no backend; // directly supports and would need to be broken into several; // simpler instructions anyway.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:72,extend,extended,72,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,2,"['extend', 'variab']","['extended', 'variable']"
Modifiability,// The IBOutlet/IBOutletCollection attributes only apply to instance; // variables or properties of Objective-C classes. The outlet must also; // have an object reference type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:73,variab,variables,73,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variables']
Modifiability,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses and branch; // pointers of the tree will be set.; // It is normally not necessary to make changes to the generated; // code, but the routine can be extended by the user if needed.; // Init() will be called many times when running on PROOF; // (once per file to be processed).; // Set branch addresses and branch pointers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/MySelector.h:280,extend,extended,280,documentation/primer/macros/MySelector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/MySelector.h,2,['extend'],['extended']
Modifiability,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEventGen.h:255,extend,extended,255,proof/proofbench/inc/TSelEventGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEventGen.h,1,['extend'],['extended']
Modifiability,"// The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses of the tree; // will be set. It is normaly not necessary to make changes to the; // generated code, but the routine can be extended by the user if needed.; // Init() will be called many times when running with PROOF.; // Set branch addresses",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h:255,extend,extended,255,proof/proofbench/inc/TSelEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h,5,['extend'],['extended']
Modifiability,"// The LI pattern ADDI rd, X0, imm is sign extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,"// The LLVM shufflevector instruction does not require the shuffle mask; // length to match the operand vector length, but ISD::VECTOR_SHUFFLE does; // have that requirement. When translating to ISD::VECTOR_SHUFFLE, if the; // operands do not match the mask length, they are extended by concatenating; // them with undef vectors. That is probably the right thing for other; // targets, but for NEON it is better to concatenate two double-register; // size vector operands into a single quad-register size vector. Do that; // transformation here:; // shuffle(concat(v1, undef), concat(v2, undef)) ->; // shuffle(concat(v1, v2), undef)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:275,extend,extended,275,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,// The LTO linker doesn't seem to like it when we set an alignment; // on appending variables. Take it off as a workaround.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:84,variab,variables,84,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"// The LinkGraph builder should have created single strings blocks, and all; // plugins should have maintained this invariant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp:80,plugin,plugins,80,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp,1,['plugin'],['plugins']
Modifiability,"// The MSVC compatibility mode doesn't extend to sizeless types,; // so diagnose them separately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp:39,extend,extend,39,interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExceptionSpec.cpp,1,['extend'],['extend']
Modifiability,// The MSVC intrinsic is portable across x86 and x64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp:25,portab,portable,25,interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TargetParser/Host.cpp,1,['portab'],['portable']
Modifiability,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. It is normally not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed. The return value is currently not used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/MySelector.h:266,extend,extended,266,documentation/primer/macros/MySelector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/primer/macros/MySelector.h,2,['extend'],['extended']
Modifiability,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h:323,extend,extended,323,proof/proofbench/inc/TSelEvent.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofbench/inc/TSelEvent.h,3,['extend'],['extended']
Modifiability,"// The Notify() function is called when a new file is opened. This; // can be either for a new TTree in a TChain or when when a new TTree; // is started when using PROOF. Typically here the branch pointers; // will be retrieved. It is normaly not necessary to make changes; // to the generated code, but the routine can be extended by the; // user if needed.; // Get branch pointers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h:323,extend,extended,323,test/ProofBench/EventTree_NoProc.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/ProofBench/EventTree_NoProc.h,3,['extend'],['extended']
Modifiability,// The O32 ABI does not permit a zero-extended i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,1,['extend'],['extended']
Modifiability,// The Objective-C constant 'YES' and 'NO'; // are defined as macros. Do not treat them; // as configuration values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp:95,config,configuration,95,interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ReachableCode.cpp,1,['config'],['configuration']
Modifiability,"// The PAX header is an extended format, so a PAX header needs; // to be followed by a ""real"" header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,1,['extend'],['extended']
Modifiability,"// The Reg operand should be a virtual register, which is defined; // outside the current basic block. DAG combiner has done a pretty; // good job in removing truncating inside a single basic block except; // when the Reg operand comes from bpf_load_[byte | half | word] for; // which the generic optimizer doesn't understand their results are; // zero extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelDAGToDAG.cpp:353,extend,extended,353,interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// The Rewriter may not be used from this point on.; // Loop-invariant instructions in the preheader that aren't used in the; // loop may be sunk below the loop to reduce register pressure.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:7,Rewrite,Rewriter,7,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['Rewrite'],['Rewriter']
Modifiability,"// The Roo2DKeys options available are:; // a = select an adaptive bandwidth [default]; // n = select a normal bandwidth; // m = mirror kernel contributions at edges [fold gaussians back into the x,y plane]; // d = print debug statements [useful for development only; default is off]; // v = print verbose debug statements [useful for development only; default is off]; // vv = print ludicrously verbose debug statements [useful for development only; default is off]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/Roo2DKeysPdf.h:58,adapt,adaptive,58,roofit/roofit/inc/Roo2DKeysPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/Roo2DKeysPdf.h,1,['adapt'],['adaptive']
Modifiability,"// The RooDataHit can be analytically integrated with the RooDataHist::sum(); // member functions. This functionality is used in the analytical; // integration capabilities of RooHistPdf and RooHistFunc. Therefore, to; // test these two classes at the same time, this tests validated; // RooDataHist::sum() via the RooHistPdf and RooHistFunc interfaces.; // The histograms for this example are kept simple such that one can easily; // calculate the expected values with a calculator.; // We first create an easy non-uniform histogram for the x variable so we; // can know what we expect as test results analytically. The histogram will; // have the following bins with contents:; // - bin1 [0.0, 1.0]: 3 counts (bin volume x counts = 3); // - bin2 [1.0, 3.0]: 1 count (bin volume x counts = 2); // - bin3 [3.0, 3.5]: 8 counts (bin volume x counts = 4)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx:544,variab,variable,544,roofit/roofitcore/test/testRooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooDataHist.cxx,1,['variab'],['variable']
Modifiability,"// The RooHistFunc is only used to access this histogram observables in a; // convenient way. That's why this proxy is not ""serving"" this; // RooBinWidthFunction in any way (see proxy constructor arguments in the; // initializer list above).; //; // However, the variables of the histFunc **need to be** value servers,; // because the width of the current bin depends on the values of the; // observables:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:263,variab,variables,263,roofit/roofitcore/src/RooBinWidthFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx,1,['variab'],['variables']
Modifiability,"// The SIGN_EXTEND_INREG to v4i64 is expensive operation on the; // both SSE and AVX2 since there is no sign-extended shift right; // operation on a vector with 64-bit elements.; //(sext_in_reg (v4i64 anyext (v4i32 x )), ExtraVT) ->; // (v4i64 sext (v4i32 sext_in_reg (v4i32 x , ExtraVT)))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:109,extend,extended,109,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// The SSE2 shifts use the lower i64 as the same shift amount for; // all lanes and the upper i64 is ignored. On AVX we're better off; // just zero-extending, but for SSE just duplicating the top 16-bits is; // cheaper and has the same effect for out of range values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:148,extend,extending,148,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// The SSE4A EXTRQ instruction can efficiently extend the first 2 lanes; // to 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// The STRICT_SINT_TO_FP inherits the exception mode from the; // incoming STRICT_UINT_TO_FP node; the STRICT_FADD node can; // never raise any exception.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:25,inherit,inherits,25,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['inherit'],['inherits']
Modifiability,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:347,variab,variable,347,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,1,['variab'],['variable']
Modifiability,// The ShAmt variable is used to indicate that we've consumed a right; // shift. I.e. we want to narrow the width of the load by skipping to load the; // ShAmt least significant bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// The StackHomeValue and DebugValue for this variable do not match. I.e.; // The value currently stored in the stack is not what we'd expect to; // see, so we cannot use emit a stack home location here. Now we will; // look at the live LocKind for the variable and determine an appropriate; // dbg.value to emit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variable']
Modifiability,// The StackHomeValue and DebugValue for this variable match so we can; // emit a stack home location here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// The TPython class allows for access to python objects from Cling. The current; /// functionality is only basic: ROOT objects and builtin types can freely cross; /// the boundary between the two interpreters, python objects can be instantiated; /// and their methods can be called. All other cross-coding is based on strings; /// that are run on the python interpreter.; ///; /// Examples:; ///; /// ~~~{.cpp}; /// $ root -l; /// // Execute a string of python code.; /// root [0] TPython::Exec( ""print('Hello World!')"" );; /// Hello World!; ///; /// // Create a TNamed on the python side, and transfer it back and forth.; /// root [1] std::any res1;; /// root [2] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed']('hello', '')"", &res1);; /// root [3] TPython::Bind(&std::any_cast<TNamed&>(res1), ""n"");; /// root [4] std::any res2;; /// root [5] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed*', 'TNamed*'](n)"", &res2);; /// root [6] (&std::any_cast<TNamed&>(res1) == std::any_cast<TNamed*>(res2)); /// (bool) true; ///; /// // Variables can cross-over by using an `std::any` with a specific name.; /// root [6] TPython::Exec(""_anyresult = ROOT.std.make_any['Int_t'](1 + 1)"", &res1);; /// root [7] std::any_cast<int>(res1); /// (int) 2; /// ~~~; ///; /// And with a python file `MyPyClass.py` like this:; /// ~~~{.py}; /// print 'creating class MyPyClass ... '; ///; /// class MyPyClass:; /// def __init__( self ):; /// print 'in MyPyClass.__init__'; ///; /// def gime( self, what ):; /// return what; /// ~~~; /// one can load a python module, and use the class. Casts are; /// necessary as the type information can not be otherwise derived.; /// ~~~{.cpp}; /// root [6] TPython::LoadMacro( ""MyPyClass.py"" );; /// creating class MyPyClass ...; /// root [7] MyPyClass m;; /// in MyPyClass.__init__; /// root [8] std::string s = (char*)m.gime( ""aap"" );; /// root [9] s; /// (class TString)""aap""; /// ~~~; /// It is possible to switch between interpreters by calling `TPython::Prompt()`; /",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx:1116,Variab,Variables,1116,bindings/tpython/src/TPython.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/tpython/src/TPython.cxx,1,['Variab'],['Variables']
Modifiability,"// The TRACE macro is used to print internal information about the; // HTML layout engine during testing and debugging. The amount of; // information printed is governed by a global variable named; // HtmlTraceMask. If bits in the first argument to the TRACE macro; // match any bits in HtmlTraceMask variable, then the trace message; // is printed.; //; // All of this is completely disabled, of course, if the DEBUG macro; // is not defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:182,variab,variable,182,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,2,['variab'],['variable']
Modifiability,"// The Value is 0 for global variables, and the in-section offset; // for static variables. Write to the immediate field of the inst.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/MCTargetDesc/BPFAsmBackend.cpp:29,variab,variables,29,interpreter/llvm-project/llvm/lib/Target/BPF/MCTargetDesc/BPFAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/MCTargetDesc/BPFAsmBackend.cpp,2,['variab'],['variables']
Modifiability,"// The VarList is an optional `readonly:` followed by a list of a variable; // specifications. Consume something that looks like a 'tag', and diagnose if; // it isn't 'readonly'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp:66,variab,variable,66,interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenACC.cpp,1,['variab'],['variable']
Modifiability,"// The Visual Studio 2017 path is very different than the previous versions,; // and even the registry entries are different, so for now let's try the; // trivial way first (using the 'VCToolsInstallDir' environment variable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp:216,variab,variable,216,interpreter/cling/lib/Utils/PlatformWin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp,1,['variab'],['variable']
Modifiability,"// The __debugbreak intrinsic is supported by MSVC and breaks while; // running under the debugger, and also supports invoking a debugger; // when the OS is configured appropriately.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Compiler.h:157,config,configured,157,interpreter/llvm-project/llvm/include/llvm/Support/Compiler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Compiler.h,1,['config'],['configured']
Modifiability,"// The ability to use vector initializer lists is a GNU vector extension; // and is unrelated to the NEON intrinsics in arm_neon.h. On little; // endian machines it works fine, however on big endian machines it; // exhibits surprising behaviour:; //; // uint32x2_t x = {42, 64};; // return vget_lane_u32(x, 0); // Will return 64.; //; // Because of this, explicitly call out that it is non-portable.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:390,portab,portable,390,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['portab'],['portable']
Modifiability,"// The action table follows the call-site table in the LSDA. The individual; // records are of two types:; //; // * Catch clause; // * Exception specification; //; // The two record kinds have the same format, with only small differences.; // They are distinguished by the ""switch value"" field: Catch clauses; // (TypeInfos) have strictly positive switch values, and exception; // specifications (FilterIds) have strictly negative switch values. Value 0; // indicates a catch-all clause.; //; // Negative type IDs index into FilterIds. Positive type IDs index into; // TypeInfos. The value written for a positive type ID is just the type ID; // itself. For a negative type ID, however, the value written is the; // (negative) byte offset of the corresponding FilterIds entry. The byte; // offset is usually equal to the type ID (because the FilterIds entries are; // written using a variable width encoding, which outputs one byte per entry; // as long as the value written is not too large) but can differ. This kind; // of complication does not occur for positive type IDs because type infos are; // output using a fixed width encoding. FilterOffsets[i] holds the byte; // offset corresponding to FilterIds[i].",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp:883,variab,variable,883,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/EHStreamer.cpp,1,['variab'],['variable']
Modifiability,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:279,variab,variable,279,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['variab'],['variable']
Modifiability,"// The addrec may be folded to a nonrecurrence, for example, if the; // induction variable is multiplied by zero after constant folding. Go; // ahead and return the folded value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['variab'],['variable']
Modifiability,// The address of the thread local variable is the add of the thread; // pointer with the offset of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,6,['variab'],['variable']
Modifiability,"// The address passed to operator() will be the address of the data member.; // If the data member is a variable size array, 'size' is the number of elements; // to read/write",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TMemberStreamer.h:104,variab,variable,104,core/meta/inc/TMemberStreamer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/inc/TMemberStreamer.h,1,['variab'],['variable']
Modifiability,"// The address space of a static local variable (DeclPtr) may be different; // from the address space of the ""this"" argument of the constructor. In that; // case, we need an addrspacecast before calling the constructor.; //; // struct StructWithCtor {; // __device__ StructWithCtor() {...}; // };; // __device__ void foo() {; // __shared__ StructWithCtor s;; // ...; // }; //; // For example, in the above CUDA code, the static local variable s has a; // ""shared"" address space qualifier, but the constructor of StructWithCtor; // expects ""this"" in the ""generic"" address space.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,2,['variab'],['variable']
Modifiability,"// The algorithm first computes the set L of global variables that are; // trivially live. Then it walks the initialization of these variables to; // compute the globals used to initialize them, which effectively builds a; // directed graph where nodes are global variables, and an edge from A to B; // means B is used to initialize A. Finally, it propagates the liveness; // information through the graph starting from the nodes in L. Nodes note; // marked as alive are discarded.; // Remove empty functions from the global ctors list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp:52,variab,variables,52,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalDCE.cpp,3,['variab'],['variables']
Modifiability,"// The algorithm for updating NRVO candidate is as follows:; // 1. All previous candidates become invalid because a new NRVO candidate is; // obtained. Therefore, we need to clear return slots for other; // variables defined before the current return statement in the current; // scope and in outer scopes.; // 2. Store the new candidate if its return slot is available. Otherwise,; // there is no NRVO candidate so far.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Scope.cpp:207,variab,variables,207,interpreter/llvm-project/clang/lib/Sema/Scope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Scope.cpp,1,['variab'],['variables']
Modifiability,"// The algorithm sketch at this point is as follows.; //; // Consider the padding gaps between fixed-offset fields in ascending; // order. Let LastEnd be the offset of the first byte following the; // field before the gap, or 0 if the gap is at the beginning of the; // structure. Find the ""best"" flexible-offset field according to the; // criteria below. If no such field exists, proceed to the next gap.; // Otherwise, add the field at the first properly-aligned offset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:297,flexible,flexible-offset,297,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,3,['flexible'],['flexible-offset']
Modifiability,// The alloca may be larger than the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:37,variab,variable,37,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"// The amount by which the current variables violate the; // non-negativity constraints.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:35,variab,variables,35,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variables']
Modifiability,"// The analysis will generate location definitions for all variables, but we; // only need to perform a dataflow on the set of variables which have a stack; // slot. Find those now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:59,variab,variables,59,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,['variab'],['variables']
Modifiability,"// The analyzeBranch method does not include any implicit operands.; // This is not an issue on PPC but must be handled on other targets.; // For this pass to be made target-independent, the analyzeBranch API; // need to be updated to support implicit operands and there would; // need to be a way to verify that any implicit operands would not be; // clobbered by merging blocks. This would include identifying the; // implicit operands as well as the basic block they are defined in.; // This could be done by changing the analyzeBranch API to have it also; // record and return the implicit operands and the blocks where they are; // defined. Alternatively, the BranchCoalescing code would need to be; // extended to identify the implicit operands. The analysis in canMerge; // must then be extended to prove that none of the implicit operands are; // changed in the blocks that are combined during coalescing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp:708,extend,extended,708,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCBranchCoalescing.cpp,2,['extend'],['extended']
Modifiability,// The args for config files or /clang: flags belong to different InputArgList; // objects than Args. This copies an Arg from one of those other InputArgLists; // to the ownership of Args.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:16,config,config,16,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,// The argument could be a global variable or a getelementptr with base to; // a global variable depending on whether the clang option `opaque-options`; // is set or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,2,['variab'],['variable']
Modifiability,"// The argument will usually have a name in the arguments dag, which goes; // into the variable-name scope that the code gen will refer to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:87,variab,variable-name,87,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable-name']
Modifiability,// The array of stack variables. The elements may get reordered and changed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h:22,variab,variables,22,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ASanStackFrameLayout.h,2,['variab'],['variables']
Modifiability,// The attributes only really makes sense for __strong variables; ignore any; // attempts to annotate a parameter with any other lifetime qualifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:55,variab,variables,55,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variables']
Modifiability,"// The base case of the TrailingObjectsImpl inheritance recursion,; // when there's no more trailing types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:44,inherit,inheritance,44,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,1,['inherit'],['inheritance']
Modifiability,// The base declaration of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// The base is the reference to the variable.; // BP = &Var.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,"// The base of elements of list in a map clause have to be either:; // - a reference to variable or field.; // - a member expression.; // - an array expression.; //; // E.g. if we have the expression 'r.S.Arr[:12]', we want to retrieve the; // reference to 'r'.; //; // If we have:; //; // struct SS {; // Bla S;; // foo() {; // #pragma omp target map (S.Arr[:12]);; // }; // }; //; // We want to retrieve the member expression 'this->S';; // OpenMP 5.0 [2.19.7.1, map Clause, Restrictions, p.2]; // If a list item is an array section, it must specify contiguous storage.; //; // For this restriction it is sufficient that we make sure only references; // to variables or fields and array expressions, and that no array sections; // exist except in the rightmost expression (unless they cover the whole; // dimension of the array). E.g. these would be invalid:; //; // r.ArrS[3:5].Arr[6:7]; //; // r.ArrS[3:5].x; //; // but these would be valid:; // r.ArrS[3].Arr[6:7]; //; // r.ArrS[3].x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:88,variab,variable,88,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// The base version of an inheriting constructor whose constructed base is a; // virtual base is not passed any arguments (because it doesn't actually call; // the inherited constructor).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:26,inherit,inheriting,26,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,2,['inherit'],"['inherited', 'inheriting']"
Modifiability,"// The basic code generated is conceptually straightforward. Pseudo code:; //; // accum = mad_64_32 lhs.lo, rhs.lo, accum; // accum.hi = add (mul lhs.hi, rhs.lo), accum.hi; // accum.hi = add (mul lhs.lo, rhs.hi), accum.hi; //; // The second and third lines are optional, depending on whether the factors; // are {sign,zero}-extended or not.; //; // The actual DAG is noisier than the pseudo code, but only due to; // instructions that disassemble values into low and high parts, and; // assemble the final result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:324,extend,extended,324,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// The bit is set for all the histograms (It's a statistic variable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:59,variab,variable,59,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['variab'],['variable']
Modifiability,"// The bitcode modules to compile, if specified by the LTO Config.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h:59,Config,Config,59,interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/LTO/LTO.h,1,['Config'],['Config']
Modifiability,"// The block has a non-fallthrough conditional branch. If one of its; // successors is its layout successor, rewrite it to a fallthrough; // conditional branch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBasicBlock.cpp:109,rewrite,rewrite,109,interpreter/llvm-project/llvm/lib/CodeGen/MachineBasicBlock.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBasicBlock.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The block literal is emitted as a global variable, and the block invoke; // function has to be extracted from its initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,// The block literal may be assigned to a const variable. Chasing down; // to get the block literal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,1,['variab'],['variable']
Modifiability,"// The boolean content concept here is too inflexible. Compares only ever; // really produce a 1-bit result. Any copy/extend from these will turn into a; // select, and zext/1 or sext/-1 are equally cheap. Arbitrarily choose 0/1, as; // it's what most targets use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:118,extend,extend,118,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// The build vector contains some number of undef elements and exactly; // one other element. That other element must be a zero-extended scalar; // extracted from a vector at a constant index to turn this into a shuffle.; // Also, require that the build vector does not implicitly truncate/extend; // its elements.; // TODO: This could be enhanced to allow ANY_EXTEND as well as ZERO_EXTEND.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:128,extend,extended,128,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,"['enhance', 'extend']","['enhanced', 'extend', 'extended']"
Modifiability,"// The call of findCommutedOpIndices below only checks if BaseOpIdx; // and OtherOpIdx are commutable, it does not really search for; // other commutable operands and does not change the values of passed; // variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:208,variab,variables,208,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['variab'],['variables']
Modifiability,"// The capture logic needs the destructor, so make sure we mark it.; // Usually this is unnecessary because most local variables have; // their destructors marked at declaration time, but parameters are; // an exception because it's technically only the call site that; // actually requires the destructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:119,variab,variables,119,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// The choice of TRotation is arbitrary; it is a simple, existing class that inherits from TObject; // and is supported by RNTuple",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_class.cxx:77,inherit,inherits,77,tree/ntuple/v7/test/rfield_class.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/rfield_class.cxx,1,['inherit'],['inherits']
Modifiability,"// The choice to exclude all things constant here is slightly subtle.; // There are two independent reasons:; // - We assume that things which are constant (from LLVM's definition); // do not move at runtime. For example, the address of a global; // variable is fixed, even though it's contents may not be.; // - Second, we can't disallow arbitrary inttoptr constants even; // if the language frontend does. Optimization passes are free to; // locally exploit facts without respect to global reachability. This; // can create sections of code which are dynamically unreachable and; // contain just about anything. (see constants.ll in tests)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:250,variab,variable,250,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['variab'],['variable']
Modifiability,// The clang declaration for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:34,variab,variable,34,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,// The class type must be parameterized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:26,parameteriz,parameterized,26,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['parameteriz'],['parameterized']
Modifiability,"// The cleanup callback that finalizes all variabels at the given location,; // thus calls destructors etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,variab,variabels,43,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variabels']
Modifiability,"// The code for super is a little tricky to prevent collision with; // the structure definition in the header. The rewriter has it's own; // internal definition (__rw_objc_super) that is uses. This is why; // we need the cast below. For example:; // (struct __rw_objc_super *)&__rw_objc_super((id)self, (id)objc_getClass(""SUPER"")); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:115,rewrite,rewriter,115,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewriter']
Modifiability,"// The code for super is a little tricky to prevent collision with; // the structure definition in the header. The rewriter has it's own; // internal definition (__rw_objc_super) that is uses. This is why; // we need the cast below. For example:; // (struct objc_super *)&__rw_objc_super((id)self, (id)objc_getClass(""SUPER"")); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:115,rewrite,rewriter,115,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,2,['rewrite'],['rewriter']
Modifiability,"// The code generated here calculates the size of a struct with a flexible; // array member that uses the counted_by attribute. There are two instances; // we handle:; //; // struct s {; // unsigned long flags;; // int count;; // int array[] __attribute__((counted_by(count)));; // }; //; // 1) bdos of the flexible array itself:; //; // __builtin_dynamic_object_size(p->array, 1) ==; // p->count * sizeof(*p->array); //; // 2) bdos of a pointer into the flexible array:; //; // __builtin_dynamic_object_size(&p->array[42], 1) ==; // (p->count - 42) * sizeof(*p->array); //; // 2) bdos of the whole struct, including the flexible array:; //; // __builtin_dynamic_object_size(p, 1) ==; // max(sizeof(struct s),; // offsetof(struct s, array) + p->count * sizeof(*p->array)); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:66,flexible,flexible,66,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,4,['flexible'],['flexible']
Modifiability,"// The combined GEP normally inherits its index inrange attribute from; // the inner GEP, but if the inner GEP's last index was adjusted by the; // outer GEP, any inbounds attribute on that index is invalidated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp:29,inherit,inherits,29,interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ConstantFold.cpp,1,['inherit'],['inherits']
Modifiability,// The complement interval will be extended as needed by LICalc.extend().,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:35,extend,extended,35,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// The computed intervals may extend beyond the range of the debug; // location's lexical scope. In this case, splitting of an interval; // can result in an interval outside of the scope being created,; // causing extra unnecessary DBG_VALUEs to be emitted. To prevent; // this, trim the intervals to the lexical scope in the case of inlined; // variables, since heavy inlining may cause production of dramatically big; // number of DBG_VALUEs to be generated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:30,extend,extend,30,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,2,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"// The condition was potentially zero extended before, but we want a sign; // extended boolean.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['extend'],['extended']
Modifiability,"// The copy might have clobbered variables based on the destination register.; // Tell TTracker about it, passing the old ValueIDNum to search for; // alternative locations (or else terminating those variables).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:33,variab,variables,33,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variables']
Modifiability,// The cost of materializing the constants (defined in; // `TargetTransformInfo::getIntImmCostInst`) for instructions which only; // take constant variables is lower than `TargetTransformInfo::TCC_Basic`.; // So it's safe for us to collect constant candidates from all; // IntrinsicInsts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp:147,variab,variables,147,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstantHoisting.cpp,1,['variab'],['variables']
Modifiability,"// The current loop unroll pass can unroll loops that have; // (1) single latch; and; // (2a) latch is unconditional; or; // (2b) latch is conditional and is an exiting block; // FIXME: The implementation can be extended to work with more complicated; // cases, e.g. loops with multiple latches.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp:212,extend,extended,212,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUnroll.cpp,1,['extend'],['extended']
Modifiability,// The currently active variable for this block is now the PHI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:24,variab,variable,24,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['variab'],['variable']
Modifiability,"// The cycle savings expressed as the sum of InstrCost; // multiplied by the estimated dynamic count of each instruction we can; // avoid. Savings come from the call site cost, such as argument setup and; // the call instruction, as well as the instructions that are folded.; //; // We use 128-bit APInt here to avoid potential overflow. This variable; // should stay well below 10^^24 (or 2^^80) in practice. This ""worst"" case; // assumes that we can avoid or fold a billion instructions, each with a; // profile count of 10^^15 -- roughly the number of cycles for a 24-hour; // period on a 4GHz machine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:343,variab,variable,343,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['variab'],['variable']
Modifiability,// The declaration must be a variable which is not declared 'const'.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:29,variab,variable,29,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// The declaration of an ""errno"" variable or ""errno location"" function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,1,['variab'],['variable']
Modifiability,"// The declaration of the value may rely on a pointer so take its l-value.; // FIXME: As seen in VisitCommonDeclRefExpr, sometimes DeclRefExpr may; // evaluate to a FieldRegion when it refers to a declaration of a lambda; // capture variable. We most likely need to duplicate that logic here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:233,variab,variable,233,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,"// The declaration won't be seen outside of the statement, so we don't; // have to wrap the uses of any declared variables in if (@available).; // Therefore we can avoid setting Scope here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp:113,variab,variables,113,interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAvailability.cpp,1,['variab'],['variables']
Modifiability,"// The default adaptive strategy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerAdaptive.cxx:15,adapt,adaptive,15,proof/proofplayer/src/TPacketizerAdaptive.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerAdaptive.cxx,1,['adapt'],['adaptive']
Modifiability,"// The default implementation of this implements a conservative RISCy, r+r and; // r+i addr mode.; // Allows a sign-extended 16-bit immediate field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:116,extend,extended,116,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['extend'],['extended']
Modifiability,"// The default(none) clause requires that each variable that is referenced; // in the construct, and does not have a predetermined data-sharing; // attribute, must have its data-sharing attribute explicitly determined; // by being listed in a data-sharing attribute clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// The definition of VR is constant-extended, and all candidates have; // empty removable-register sets. Pick the maximum candidate, and remove; // all others. The ""maximum"" does not have any special meaning here, it; // is only so that the candidate that will remain on the list is selec-; // ted deterministically.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:36,extend,extended,36,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['extend'],['extended']
Modifiability,"// The definition of VR is not constant-extended, or there is a candidate; // with a non-empty set. Remove all candidates with empty sets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['extend'],['extended']
Modifiability,"// The dependence distance can be positive/negative, so we sign extend Dist;; // The multiplication of the absolute stride in bytes and the; // backedgeTakenCount is non-negative, so we zero extend Product.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopAccessAnalysis.cpp,2,['extend'],['extend']
Modifiability,"// The destination type should be larger than the element type. If not, get; // the default cost for the extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:105,extend,extend,105,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// The easiest way to get this right-justified in a register; // is to copy the structure into the rightmost portion of a; // local variable slot, then load the whole slot into the; // register.; // FIXME: The memcpy seems to produce pretty awful code for; // small aggregates, particularly for packed ones.; // FIXME: It would be preferable to use the slot in the; // parameter save area instead of a new local variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:132,variab,variable,132,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// The env variable PROOFMOTD allows to put the file in an alternative; // location not overwritten by a new installation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:11,variab,variable,11,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['variab'],['variable']
Modifiability,"// The env variable PROOFNOPROOF allows to put the file in an alternative; // location not overwritten by a new installation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:11,variab,variable,11,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['variab'],['variable']
Modifiability,// The environment variable specifies initial options which can be overridden; // by commnad line options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,2,['variab'],['variable']
Modifiability,// The environment variable specifies initial options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,1,['variab'],['variable']
Modifiability,"// The expression for this variable, OR",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,// The extend of other kinds of load is free,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:7,extend,extend,7,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// The extends the live range of NewVReg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:7,extend,extends,7,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,1,['extend'],['extends']
Modifiability,// The field stores the length of a captured variable-length array.; // These captures don't have initialization expressions; instead we; // get the length from the VLAType size expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:45,variab,variable-length,45,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['variab'],['variable-length']
Modifiability,"// The file implements built-in CUDA variables using __declspec(property).; // https://msdn.microsoft.com/en-us/library/yhfk0thd.aspx; // All read accesses of built-in variable fields get converted into calls to a; // getter function which in turn calls the appropriate builtin to fetch the; // value.; //; // Example:; // int x = threadIdx.x;; // IR output:; // %0 = call i32 @llvm.nvvm.read.ptx.sreg.tid.x() #3; // PTX output:; // mov.u32 %r2, %tid.x;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h:37,variab,variables,37,interpreter/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/__clang_cuda_builtin_vars.h,2,['variab'],"['variable', 'variables']"
Modifiability,// The file system is split into a variable number of fixed size elements.; // These elements are referred to as blocks. The size of a block may vary; // from system to system.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h:35,variab,variable,35,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,1,['variab'],['variable']
Modifiability,// The final value of the loop induction variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:41,variab,variable,41,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,// The first byte of extended opcodes is a zero byte. The next bytes are an; // ULEB128 integer giving the number of bytes in the instruction itself (does; // not include the first zero byte or the size). We serialize the instruction; // itself into the OpBuffer and then write the size of the buffer and the; // buffer to the real output stream.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,1,['extend'],['extended']
Modifiability,"// The first case is the same as selectAddrModeXRO, except we need an extend.; // In this case, we try to find a shift and extend, and fold them into the; // addressing mode.; //; // E.g.; //; // off_reg = G_Z/S/ANYEXT ext_reg; // val = G_CONSTANT LegalShiftVal; // shift = G_SHL off_reg val; // ptr = G_PTR_ADD base_reg shift; // x = G_LOAD ptr; //; // In this case we can get a load like this:; //; // ldr x0, [base_reg, ext_reg, sxtw #LegalShiftVal]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:70,extend,extend,70,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,2,['extend'],['extend']
Modifiability,// The first def of LBZU/LHZU is sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// The first def of LBZU/LHZU/LWZU are zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:44,extend,extended,44,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extended']
Modifiability,// The first entry in the descriptor is a function pointer that we must call; // to obtain the address of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:110,variab,variable,110,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['variab'],['variable']
Modifiability,// The first field is a pointer to the annotated variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp:49,variab,variable,49,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,// The first field of the struct contains a pointer to; // the annotated variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp:73,variab,variable,73,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,// The first operand in a legacy @LINE expression is always the @LINE; // pseudo variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,// The first operand to add.uw/shXadd.uw is implicitly zero extended from; // 32 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:60,extend,extended,60,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// The first token of the instruction is the mnemonic, which must be a; // simple string, not a $foo variable or a singleton register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp:101,variab,variable,101,interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmMatcherEmitter.cpp,1,['variab'],['variable']
Modifiability,"// The fixed allocation may leave unprobed bytes at the top of the; // stack. If we have subsequent alocation (e.g. if we have variable-sized; // objects), we need to issue an extra probe, so these allocations start in; // a known state.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:127,variab,variable-sized,127,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['variab'],['variable-sized']
Modifiability,// The flag variable that lets the classifier know whether we should; // allow branches to be checked for similarity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,// The flag variable that lets the classifier know whether we should; // allow indirect calls to be considered legal instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,// The flag variable that marks whether we should allow branch instructions; // to be outlined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,1,['variab'],['variable']
Modifiability,// The flag variable that marks whether we should allow indirect calls; // to be outlined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,1,['variab'],['variable']
Modifiability,// The flag variable that marks whether we should allow intrinsics; // instructions to be outlined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,1,['variab'],['variable']
Modifiability,// The flag variable that marks whether we should allow musttail calls.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,1,['variab'],['variable']
Modifiability,// The flag variable that marks whether we should allow tailcalls; // to be checked for similarity.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:12,variab,variable,12,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,1,['variab'],['variable']
Modifiability,// The floating-point value is fp-extended in the location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:34,extend,extended,34,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,"// The folds in here may rely on wrapping flags and special constants, so; // they can break up min/max idioms in some cases but not seemingly similar; // patterns.; // FIXME: It may be possible to enhance select folding to make this; // unnecessary. It may also be moot if we canonicalize to min/max; // intrinsics.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:198,enhance,enhance,198,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['enhance'],['enhance']
Modifiability,"// The following callback is the crucial part of clangs cleanup process.; //; // NOTE:; // Once the OpenMPIRBuilder is used to create parallel regions (and; // similar), the cancellation destination (Dest below) is determined via; // IP. That means if we have variables to finalize we split the block at IP,; // use the new block (=BB) as destination to build a JumpDest (via; // getJumpDestInCurrentScope(BB)) which then is fed to; // EmitBranchThroughCleanup. Furthermore, there will not be the need; // to push & pop an FinalizationInfo object.; // The FiniCB will still be needed but at the point where the; // OpenMPIRBuilder is asked to construct a parallel (or similar) construct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:260,variab,variables,260,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,"// The following check extends the definition of `isConvergent` to; // assume a convergent instruction is dependent not only on additional; // conditions, but also on fewer conditions. LLVM does not have a; // MachineInstr attribute which expresses this extended definition, so; // it's necessary to use `isConvergent` to prevent illegally PRE-ing the; // subset of `isConvergent` instructions which do fall into this; // extended definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp:23,extend,extends,23,interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCSE.cpp,3,['extend'],"['extended', 'extends']"
Modifiability,"// The following code pattern is handled:; // %3 = call i8* @llvm.stacksave(); // store i8* %3, i8** %saved_stack, align 8; // ...; // %4 = load i8*, i8** %saved_stack, align 8; // call void @llvm.stackrestore(i8* %4); // ...; // The goal is to remove the above four instructions,; // so we won't have instructions with r11 (stack pointer); // if eventually there is no variable length stack allocation.; // InstrCombine also tries to remove the above instructions,; // if it is proven safe (constant alloca etc.), but depending; // on code pattern, it may still miss some.; //; // With unconditionally removing these instructions, if alloca is; // constant, we are okay then. Otherwise, SelectionDag will complain; // since BPF does not support dynamic allocation yet.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFIRPeephole.cpp:370,variab,variable,370,interpreter/llvm-project/llvm/lib/Target/BPF/BPFIRPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFIRPeephole.cpp,1,['variab'],['variable']
Modifiability,"// The following extend from a legal type to an illegal type, so need to; // split the load. This introduced an extra load operation, but the; // extend is still ""free"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,// The following functions have no effect if their respective profiling; // support wasn't enabled in the build configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp:112,config,configuration,112,interpreter/llvm-project/llvm/tools/lli/lli.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/lli/lli.cpp,1,['config'],['configuration']
Modifiability,"// The frontend adds zero-initializer to device and constant variables; // that don't have an initial value, and UndefValue to shared; // variables, so skip warning for this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:61,variab,variables,61,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,2,['variab'],['variables']
Modifiability,"// The frontend helps out GDB by emitting the members of local anonymous; // unions as artificial local variables with shared storage. When SROA splits; // the storage for artificial local variables that are smaller than the entire; // union, the overhang piece will be outside of the allotted space for the; // variable and this check fails.; // FIXME: Remove this check as soon as clang stops doing this; it hides bugs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:104,variab,variables,104,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// The general strategy of the algorithm implemented below is to map each; // of the sub-values in `Vals` to a unique variable and use these variables in; // the resulting CNF expression to avoid exponential blow up. The number of; // literals in the resulting formula is guaranteed to be linear in the number; // of sub-formulas in `Vals`.; // Map each sub-formula in `Vals` to a unique variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:118,variab,variable,118,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// The general structure here is inspired by VarLocBasedImpl.cpp; // (LiveDebugValues).; // Build the variable fragment overlap map.; // Note that this pass doesn't handle partial overlaps correctly (FWIW; // neither does LiveDebugVariables) because that is difficult to do and; // appears to be rare occurance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:102,variab,variable,102,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// The global variable is not defined yet, define it ourselves.; // We use the initial-exec TLS model because we do not support the; // variable living anywhere other than in the main executable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,2,['variab'],['variable']
Modifiability,"// The goal is to rewrite the cmov from:; //; // MBB:; // %A = CMOVcc %B (tied), (mem); //; // to; //; // MBB:; // %A = CMOVcc %B (tied), %C; // FalseMBB:; // %C = MOV (mem); //; // Which will allow the next loop to rewrite the CMOV in terms of a PHI:; //; // MBB:; // JMP!cc SinkMBB; // FalseMBB:; // %C = MOV (mem); // SinkMBB:; // %A = PHI [ %C, FalseMBB ], [ %B, MBB]; // Get a fresh register to use as the destination of the MOV.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp:18,rewrite,rewrite,18,interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86CmovConversion.cpp,2,['rewrite'],['rewrite']
Modifiability,"// The gro variable has to outlive coroutine frame and coroutine promise, but,; // it can only be initialized after coroutine promise was created, thus, we; // split its emission in two parts. EmitGroAlloca emits an alloca and sets up; // cleanups. Later when coroutine promise is available we initialize the gro; // and sets the flag that the cleanup is now active.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:11,variab,variable,11,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,1,['variab'],['variable']
Modifiability,// The guard variable can't ever change again.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// The handle is a global variable, replace with the global variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXReplaceImageHandles.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXReplaceImageHandles.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXReplaceImageHandles.cpp,2,['variab'],['variable']
Modifiability,// The high bits are not guaranteed to be anything. Insert an extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:62,extend,extend,62,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// The highest bit of the original value is the same as the zero-extend; // byte, so HighByte and ExtByte are the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:65,extend,extend,65,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// The identity constant for a binop leaves a variable operand unchanged. For; // a vector, this is a splat of something like 0, -1, or 1.; // If there's no identity constant for this binop, we're done.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['variab'],['variable']
Modifiability,"// The imm operand of ADDS is an unsigned immediate, in the range 0 to 4095.; // For the i8 operand, the largest immediate is 255, so this can be easily; // encoded in the compare instruction. For the i16 operand, however, the; // largest immediate cannot be encoded in the compare.; // Therefore, use a sign extending load and cmn to avoid materializing the; // -1 constant. For example,; // movz w1, #65535; // ldrh w0, [x0, #0]; // cmp w0, w1; // >; // ldrsh w0, [x0, #0]; // cmn w0, #1; // Fundamental, we're relying on the property that (zext LHS) == (zext RHS); // if and only if (sext LHS) == (sext RHS). The checks are in place to; // ensure both the LHS and RHS are truly zero extended and to make sure the; // transformation is profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:309,extend,extending,309,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,// The immediate operand must be a 24-bit zero-extended immediate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:47,extend,extended,47,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// The implementation of this function is adapted from X86FastISel.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp:42,adapt,adapted,42,interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/GISel/X86InstructionSelector.cpp,1,['adapt'],['adapted']
Modifiability,"// The incoming type is a template parameter; we have 3 kinds of parameters:; // - type parameter: resolve the instance (type);; // - value parameter: resolve the constant value; // - template parameter: resolve the name of the template.; // If the parameter type is a template instance (STL sample), we need to; // expand the type (template template case). For the following variable; // declarations:; // std::type<float> a_float;; // std::type<int> a_int;; // We must generate names like:; // ""std::type<float,std::less<float>,std::allocator<float>,false>""; // ""std::type<int,std::less<int>,std::allocator<int>,false>""; // Instead of the incomplete names:; // ""type<float,less,allocator,false>""; // ""type<int,less,allocator,false>""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp:376,variab,variable,376,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp,1,['variab'],['variable']
Modifiability,"// The incompatibility function (taking mu_hat as an input) is defined by its transitions; // it takes values of -1, 0, or 1 ... when it 0 that means mu_hat is compatible with the hypothesis; // Standard incompatibility functions are parameterized by mu; // Note: the default value is taken to be 1, so an empty vector is function=1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h:234,parameteriz,parameterized,234,roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooFit.h,1,['parameteriz'],['parameterized']
Modifiability,// The index into the files structure is our loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp:60,variab,variable,60,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/GCOVProfiling.cpp,1,['variab'],['variable']
Modifiability,// The index of this Variable in Instruction.Variables and its associated; // Value in InstructionBuilder.VariableValues.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:21,Variab,Variable,21,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,3,['Variab'],"['Variable', 'VariableValues', 'Variables']"
Modifiability,// The index variable is different.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InterleavedLoadCombinePass.cpp,1,['variab'],['variable']
Modifiability,// The indexed reference is 'consecutive' if the only coefficient that uses; // the loop induction variable is the last one...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:99,variab,variable,99,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['variab'],['variable']
Modifiability,// The indexed reference is loop invariant if none of the coefficients use; // the loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp:98,variab,variable,98,interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LoopCacheAnalysis.cpp,1,['variab'],['variable']
Modifiability,// The indices of the entries we're going to remove for each variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:61,variab,variable,61,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,1,['variab'],['variable']
Modifiability,// The indices of the operands tied to this Variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:44,Variab,Variable,44,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,1,['Variab'],['Variable']
Modifiability,// The induction variable and its update instruction will remain scalar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,// The induction variable and its update instruction will remain uniform.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// The induction variable's postinc expansion does not dominate this use.; // IVUsers tries to prevent this case, so it is rare. However, it can; // happen when an IVUser outside the loop is not dominated by the latch; // block. Adjusting IVIncInsertPos before expansion begins cannot handle; // all cases. Consider a phi outside whose operand is replaced during; // expansion with the value of the postinc user. Without fundamentally; // changing the way postinc users are tracked, the only remedy is; // inserting an extra IV increment. StepV might fold into PostLoopOffset,; // but hopefully expandCodeFor handles that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['variab'],['variable']
Modifiability,// The induction variables generated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h:17,variab,variables,17,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/ScalarEvolutionExpander.h,1,['variab'],['variables']
Modifiability,"// The inheritance attribute might only be present on the most recent; // CXXRecordDecl, use that one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:7,inherit,inheritance,7,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['inherit'],['inheritance']
Modifiability,// The inheriting constructor was inlined; just inject its arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:7,inherit,inheriting,7,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['inherit'],['inheriting']
Modifiability,// The inheriting constructor was not inlined. Emit delegating arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp:7,inherit,inheriting,7,interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGClass.cpp,1,['inherit'],['inheriting']
Modifiability,// The initial value of the loop induction variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:43,variab,variable,43,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,"// The initialized entity has lifetime beyond the full-expression,; // and the local entity does too, so don't warn.; //; // FIXME: We should consider warning if a static / thread storage; // duration variable retains an automatic storage duration local.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:201,variab,variable,201,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,"// The initializer may differ in type from the global. Rewrite; // the global to match the initializer. (We have to do this; // because some types, like unions, can't be completely represented; // in the LLVM type system.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:55,Rewrite,Rewrite,55,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// The initializer of a constexpr variable or of the first declaration of a; // static data member is not syntactically a constant evaluated constant,; // but nonetheless is always required to be a constant expression, so we; // can skip diagnosing.; // FIXME: Using the mangling context here is a hack.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,// The initializer of a global variable may change to something arbitrary; // at link time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:31,variab,variable,31,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,1,['variab'],['variable']
Modifiability,// The initializer of a global variable with the externally_initialized; // marker may change at runtime before C++ initializers are evaluated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h:31,variab,variable,31,interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/GlobalVariable.h,1,['variab'],['variable']
Modifiability,"// The inlined code is currently at the end of the function, scan from the; // start of the inlined code to its end, checking for stuff we need to; // rewrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:151,rewrite,rewrite,151,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The inner add was the result of the narrow add, zero extended to the; // wider type. Replace it with the result computed by the intrinsic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:56,extend,extended,56,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['extend'],['extended']
Modifiability,// The input is a load that doesn't sign-extend (it will be zero-extended).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// The input is a sign-extending load. All ppc sign-extending loads; // sign-extend to the full 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:23,extend,extending,23,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,3,['extend'],"['extend', 'extending']"
Modifiability,"// The input is first sign-extended to 64 bits, then the output; // is truncated back to 32 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp:27,extend,extended,27,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitTracker.cpp,1,['extend'],['extended']
Modifiability,"// The input list should contain info about the variables and; // selection cuts: save them into the macro title",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx:48,variab,variables,48,tree/tree/src/TQueryResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TQueryResult.cxx,1,['variab'],['variables']
Modifiability,// The input value must be properly sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,extend,extended,41,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extended']
Modifiability,// The input value must be properly zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,extend,extended,41,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extended']
Modifiability,// The input values are both sign-extended.; // TODO non-MUL case?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:34,extend,extended,34,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extended']
Modifiability,// The inputs are both sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelLowering.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/XCore/XCoreISelLowering.cpp,1,['extend'],['extended']
Modifiability,// The inputs are both zero-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['extend'],['extended']
Modifiability,// The insertion point instruction may have been deleted; clear it out; // so that the rewriter doesn't trip over it later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:87,rewrite,rewriter,87,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['rewrite'],['rewriter']
Modifiability,// The instruction that updates the loop induction variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:51,variab,variable,51,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,"// The instruction this candidate corresponds to. It helps us to rewrite a; // candidate with respect to its immediate basis. Note that one instruction; // can correspond to multiple candidates depending on how you associate the; // expression. For instance,; //; // (a + 1) * (b + 2); //; // can be treated as; //; // <Base: a, Index: 1, Stride: b + 2>; //; // or; //; // <Base: b, Index: 2, Stride: a + 1>",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:65,rewrite,rewrite,65,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['rewrite'],['rewrite']
Modifiability,// The integer extend has already been emitted - delete all the instructions; // that have been emitted by the integer extend lowering code and use the; // result from the load instruction directly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,2,['extend'],['extend']
Modifiability,// The integer extend hasn't been emitted yet. FastISel or SelectionDAG; // could select it. Emit a copy to subreg if necessary. FastISel will remove; // it when it selects the integer extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,extend,extend,15,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,2,['extend'],['extend']
Modifiability,"// The interesting things begin when you have virtual inheritance.; // The final overrider will use a static adjustment equal to the offset; // of the vbase in the final overrider class.; // For example, if the final overrider is in a vbase B of the most; // derived class and it overrides a method of the B's own vbase A,; // it uses A* as ""this"". In its prologue, it can cast A* to B* with; // a static offset. This offset is used regardless of the actual; // offset of A from B in the most derived class, requiring an; // this-adjusting thunk in the vftable if A and B are laid out; // differently in the most derived class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:54,inherit,inheritance,54,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['inherit'],['inheritance']
Modifiability,// The intrinsic supports having a -1 argument for variable sized objects; // so we should check for that here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp:51,variab,variable,51,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LICM.cpp,1,['variab'],['variable']
Modifiability,"// The kernel uses explicit sections for mostly special global variables; // that we should not instrument. E.g. the kernel may rely on their layout; // without redzones, or remove them at link time (""discard.*""), etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:63,variab,variables,63,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variables']
Modifiability,"// The key paths of codegen options defined in Options.td start with; // ""CodeGenOpts."". Let's provide the expected variable name and type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:116,variab,variable,116,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['variab'],['variable']
Modifiability,"// The key paths of codegen options defined in Options.td start with; // ""LangOpts->"". Let's provide the expected variable name and type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:114,variab,variable,114,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['variab'],['variable']
Modifiability,"// The key paths of diagnostic options defined in Options.td start with; // ""DiagnosticOpts->"". Let's provide the expected variable name and type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:123,variab,variable,123,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,1,['variab'],['variable']
Modifiability,"// The largest constant describeable in the StackMap format is 64 bits.; // Potential Optimization: Constants values are sign extended by consumer,; // and thus there are many constants of static type > 64 bits whose value; // happens to be sext(Con64) and could thus be lowered directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:126,extend,extended,126,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,1,['extend'],['extended']
Modifiability,// The last copy may be partial. Do an extending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:39,extend,extending,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extending']
Modifiability,// The last fixed operand along with any variadic operands that follow; // are part of the variable value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/MCTargetDesc/SPIRVInstPrinter.cpp:91,variab,variable,91,interpreter/llvm-project/llvm/lib/Target/SPIRV/MCTargetDesc/SPIRVInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/MCTargetDesc/SPIRVInstPrinter.cpp,1,['variab'],['variable']
Modifiability,// The last store may be partial. Do a truncating store. On big-endian; // machines this requires an extending load from the stack slot to ensure; // that the bits are in the right place.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:101,extend,extending,101,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extending']
Modifiability,"// The leftover reg is smaller than NarrowTy, so we need to extend it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,"// The list of variables to normalize over when calculating PDF values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx:15,variab,variables,15,roofit/roostats/src/SPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/SPlot.cxx,1,['variab'],['variables']
Modifiability,"// The llvm.amdgcn.module.lds instance is implicitly used by all kernels; // that might call a function which accesses a field within it. This is; // presently approximated to 'all kernels' if there are any such functions; // in the module. This implicit use is redefined as an explicit use here so; // that later passes, specifically PromoteAlloca, account for the required; // memory without any knowledge of this transform.; // An operand bundle on llvm.donothing works because the call instruction; // survives until after the last pass that needs to account for LDS. It is; // better than inline asm as the latter survives until the end of codegen. A; // totally robust solution would be a function with the same semantics as; // llvm.donothing that takes a pointer to the instance and is lowered to a; // no-op after LDS is allocated, but that is not presently necessary.; // This intrinsic is eliminated shortly before instruction selection. It; // does not suffice to indicate to ISel that a given global which is not; // immediately used by the kernel must still be allocated by it. An; // equivalent target specific intrinsic which lasts until immediately after; // codegen would suffice for that, but one would still need to ensure that; // the variables are allocated in the anticpated order.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:1256,variab,variables,1256,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,// The load must be an extending one and the constant must be within the; // range of the unextended value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:23,extend,extending,23,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extending']
Modifiability,// The local variable comes into scope immediately.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,// The location at which a spilled variable resides. It consists of a; // register and an offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// The loop body, consisting of the specified body and the loop variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:64,variab,variable,64,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variable']
Modifiability,// The loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,"// The loop manager is never null, except when its construction failed.; // This can happen e.g. if the constructor of RLoopManager that expects; // a file name is used and that file doesn't exist. This point is usually; // not even reached in that situation, since the exception thrown by the; // constructor will also stop execution of the program. But it can still; // be reached at the prompt, if the user tries to print the RDataFrame; // variable after an incomplete initialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx:444,variab,variable,444,tree/dataframe/src/RDataFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDataFrame.cxx,1,['variab'],['variable']
Modifiability,"// The low bits are unchanged, and extend in the high bits.; // No freeze required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:35,extend,extend,35,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extend']
Modifiability,"// The main memset sequence is a byte store followed by an MVC.; // Two STC or MV..I stores win over that, but the kind of fused stores; // generated by target-independent code don't when the byte value is; // variable. E.g. ""STC <reg>;MHI <reg>,257;STH <reg>"" is not better; // than ""STC;MVC"". Handle the choice in target-specific code instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:210,variab,variable,210,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['variab'],['variable']
Modifiability,// The map that maps each variable `v` to fix-its for the whole group where; // `v` is in:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// The mapping from OriginalId to GUID may return a GUID; // that corresponds to a static variable. Filter it out here.; // This can happen when; // 1) There is a call to a library function which is not defined; // in the index.; // 2) There is a static variable with the OriginalGUID identical; // to the GUID of the library function in 1);; // When this happens the static variable in 2) will be found,; // which needs to be filtered out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,3,['variab'],['variable']
Modifiability,// The mask is constant or extended from a bool vector. Convert this x86; // intrinsic to the LLVM intrinsic to allow target-independent optimizations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp:27,extend,extended,27,interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstCombineIntrinsic.cpp,2,['extend'],['extended']
Modifiability,"// The mask may not be larger than the in-memory type, as it might cover sign; // extended bits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:82,extend,extended,82,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extended']
Modifiability,"// The matched variable name has to be surrounded by word boundaries; // std::cout << pos << "" "" << next << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx:15,variab,variable,15,roofit/roofitcore/src/RooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx,1,['variab'],['variable']
Modifiability,"// The maximum value for given (m0,alpha,n,sigma) is 1./ Integral in the variable range; // For the crystal ball, the maximum is 1.0 in the current implementation,; // but it's maybe better to keep this general in case the implementation changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooCrystalBall.cxx:73,variab,variable,73,roofit/roofit/src/RooCrystalBall.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooCrystalBall.cxx,1,['variab'],['variable']
Modifiability,"// The maximum value for given (m0,alpha,n,sigma); // is 1./ Integral in the variable range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooCBShape.cxx:77,variab,variable,77,roofit/roofit/src/RooCBShape.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooCBShape.cxx,1,['variab'],['variable']
Modifiability,"// The model is to be extended below with new fields every 10000 entries",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_modelext.cxx:22,extend,extended,22,tree/ntuple/v7/test/ntuple_modelext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/test/ntuple_modelext.cxx,1,['extend'],['extended']
Modifiability,"// The modifyPassConfig callback gives us a chance to inspect the; // MaterializationResponsibility and target triple for the object being; // linked, then add any JITLink passes that we would like to run on the; // link graph. A pass is just a function object that is callable as; // Error(jitlink::LinkGraph&). In this case we will add two passes; // defined as lambdas that call the printLinkerGraph method on our; // plugin: One to run before the linker applies fixups and another to; // run afterwards.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp:421,plugin,plugin,421,interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/OrcV2Examples/LLJITWithObjectLinkingLayerPlugin/LLJITWithObjectLinkingLayerPlugin.cpp,1,['plugin'],['plugin']
Modifiability,// The module exists but cannot be imported due to a configuration mismatch.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h:53,config,configuration,53,interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Lex/ModuleLoader.h,1,['config'],['configuration']
Modifiability,"// The more common cases of a phi with no constant operands or just one; // variable operand are handled by FoldPHIArgOpIntoPHI() and foldOpIntoPhi(); // respectively. foldOpIntoPhi() wants to do the opposite transform that is; // performed here. It tries to replicate a cast in the phi operand's basic; // block to expose other folding opportunities. Thus, InstCombine will; // infinite loop without this check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp:76,variab,variable,76,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombinePHI.cpp,1,['variab'],['variable']
Modifiability,// The name of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,"// The name, size, and initialization pattern of this variable is part; // of HIP ABI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variable']
Modifiability,"// The named return value optimization: allocate this variable in the; // return slot, so that we can elide the copy when returning this; // variable (C++0x [class.copy]p34).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:54,variab,variable,54,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],['variable']
Modifiability,"// The names for the weight variables that the RooNLLVarNew expects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.h:28,variab,variables,28,roofit/roofitcore/src/RooNLLVarNew.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.h,1,['variab'],['variables']
Modifiability,"// The new alloca might not be valid in a llvm.dbg.declare for this; // variable, so undef out the use to make the verifier happy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp:72,variab,variable,72,interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackColoring.cpp,1,['variab'],['variable']
Modifiability,"// The next line is appropriate only for variables (Val) with the; // data-sharing attribute ""shared"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:41,variab,variables,41,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['variab'],['variables']
Modifiability,"// The next variable is used to filter out functions that have been processed,; // leaving FnsWithAbstractOriginToBeProcessed with just CrossCU references.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:12,variab,variable,12,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variable']
Modifiability,"// The node we are looking at matches with the pattern, check if we can; // replace it with a single (possibly zero-extended) load and bswap + shift if; // needed.; // If the load needs byte swap check if the target supports it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,extend,extended,116,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,// The nullptr is for DIScope's File operand. This should be refactored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfoMetadata.cpp:61,refactor,refactored,61,interpreter/llvm-project/llvm/lib/IR/DebugInfoMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfoMetadata.cpp,2,['refactor'],['refactored']
Modifiability,"// The number of instructions that a specific live range might have is variable,; // but we're passing in a single matrix of instructions and tensorflow saved; // models only support a fixed input size, so we have to cap the number of; // instructions that can be passed along. The specific value was derived from; // experimentation such that the majority of eviction problems would be; // completely covered.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h:71,variab,variable,71,interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MLRegAllocEvictAdvisor.h,1,['variab'],['variable']
Modifiability,// The number of spaces in front of the token or broken part of the token.; // This will be adapted when aligning tokens.; // Can be negative to retain information about the initial relative offset; // of the lines in a block comment. This is used when aligning trailing; // comments. Uncompensated negative offset is truncated to 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.h:92,adapt,adapted,92,interpreter/llvm-project/clang/lib/Format/WhitespaceManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.h,1,['adapt'],['adapted']
Modifiability,"// The offset calculation does not include sandboxing instructions; // that will be added later in the MC layer. Since at this point we; // don't know the exact amount of code that ""sandboxing"" will add, we; // conservatively estimate that code will not grow more than 100%.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp:43,sandbox,sandboxing,43,interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsBranchExpansion.cpp,2,['sandbox'],['sandboxing']
Modifiability,"// The offset is the bin number of the adjusted lower limit of the RooFit; // variable in the original TH1 histogram, starting from zero.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:78,variab,variable,78,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['variab'],['variable']
Modifiability,// The offset of this object from the stack pointer on entry to; // the function. This field has no meaning for a variable sized element.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:114,variab,variable,114,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['variab'],['variable']
Modifiability,"// The old condition may be dead now, and may have even created a dead PHI; // (the original induction variable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp:103,variab,variable,103,interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/HardwareLoops.cpp,2,['variab'],['variable']
Modifiability,"// The only case a 256-bit wide vector could be used is when the array; // contains a single 256-bit element. Since Lo and Hi logic isn't extended; // to work for sizes wider than 128, early check and fallback to memory.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:138,extend,extended,138,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,1,['extend'],['extended']
Modifiability,// The only case where `D` is not a `NamedDecl` is when `D` is a; // `BlockDecl`. Let's not fix variables in blocks for now,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:96,variab,variables,96,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,// The only condition under which we can omit the actual extend instruction:; // - The value is a positive constant; // - The value comes from a load that isn't a sign-extending load; // An ISD::TRUNCATE needs to be zero-extended unless it is fed by a zext.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:57,extend,extend,57,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,3,['extend'],"['extend', 'extended', 'extending']"
Modifiability,"// The only new-placement list we support is of the form (std::nothrow).; //; // FIXME: There is no restriction on this, but it's not clear that any; // other form makes any sense. We get here for cases such as:; //; // new (std::align_val_t{N}) X(int); //; // (which should presumably be valid only if N is a multiple of; // alignof(int), and in any case can't be deallocated unless N is; // alignof(X) and X has new-extended alignment).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:418,extend,extended,418,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['extend'],['extended']
Modifiability,// The only source we can rewrite is the input register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:26,rewrite,rewrite,26,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The operand is expected to be zero extended from i8; // (verified in detectZextAbsDiff).; // In order to convert to i64 and above, additional any/zero/sign; // extend is expected.; // The zero extend from 32 bit has no mathematical effect on the result.; // Also the sign extend is basically zero extend; // (extends the sign bit which is zero).; // So it is correct to skip the sign/zero extend instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,7,['extend'],"['extend', 'extended', 'extends']"
Modifiability,"// The operand registers of the ""sunk"" instruction have their live range; // extended and their kill flags may no longer be correct. Conservatively; // clear the kill flags.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:77,extend,extended,77,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['extend'],['extended']
Modifiability,"// The operand to A2_tfrsi can only have 32 significant bits. Immediate; // values in MachineOperand are stored as 64-bit integers, and so the; // value -1 may be represented either as 64-bit -1, or 4294967295. Both; // will have the 32 higher bits truncated in the end, but -1 will remain; // as -1, while the latter may appear to be a large unsigned value; // requiring a constant extender. The casting to int32_t will select the; // former representation. (The same reasoning applies to all 32-bit; // values.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSplitDouble.cpp:383,extend,extender,383,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSplitDouble.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSplitDouble.cpp,1,['extend'],['extender']
Modifiability,// The operand1 should be signed extend,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:33,extend,extend,33,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// The operands and final result all have the same number of bits. If; // operands need to be extended, they can be extended with garbage. The; // resulting garbage in the high bits of the mad_[iu]64_[iu]32 result is; // truncated away in the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:94,extend,extended,94,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,2,['extend'],['extended']
Modifiability,// The optimizer may remove local variables. If there is an interest; // to preserve variable info in such situation then stash it in a; // named mdnode.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DIBuilder.cpp:34,variab,variables,34,interpreter/llvm-project/llvm/lib/IR/DIBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DIBuilder.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// The option ""ICE"" is used when extending the histogram (in ExtendAxis, LabelInflate, etc..); // The option ""ICES is used in combination with the buffer (see BufferEmpty and BufferFill)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:33,extend,extending,33,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,2,"['Extend', 'extend']","['ExtendAxis', 'extending']"
Modifiability,// The option meta-variable name (unused).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,1,['variab'],['variable']
Modifiability,// The option meta-variable name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/OptParserEmitter.cpp,1,['variab'],['variable']
Modifiability,// The original declaration for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"// The original definition (or at least its debug info - if the variable is; // internalized and optimized away) will remain in the source module, so; // there's no need to import them.; // If LLVM ever does more advanced optimizations on global variables; // (removing/localizing write operations, for instance) that can track; // through debug info, this decision may need to be revisited - but do so; // with care when it comes to debug info size. Emitting small CUs containing; // only a few imported entities into every destination module may be very; // size inefficient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp:64,variab,variable,64,interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Linker/IRMover.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// The original did not define a default definition, however the new; // default definition still applies to all children, so they must be; // updated to explicitly refer to the namespace they had previously; // been inheriting implicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:217,inherit,inheriting,217,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,1,['inherit'],['inheriting']
Modifiability,// The output variable should be a scalar integer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// The page sink's callback when the data set gets committed will call this method to get the field's extra; // type information. This has to happen at the end of writing because the type information may change depending; // on the data that's written, e.g. for polymorphic types in the streamer field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:262,polymorphi,polymorphic,262,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['polymorphi'],['polymorphic']
Modifiability,"// The physregs aliasing Unit are the roots and their super-registers.; // Create all values as dead defs before extending to uses. Note that roots; // may share super-registers. That's OK because createDeadDefs() is; // idempotent. It is very rare for a register unit to have multiple roots, so; // uniquing super-registers is probably not worthwhile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp:113,extend,extending,113,interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveIntervals.cpp,1,['extend'],['extending']
Modifiability,// The predicate that we need to check that the induction variable lies; // within bounds.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp:58,variab,variable,58,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,2,['variab'],['variable']
Modifiability,"// The prefix that is used to find the variables in the gEnv",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/davix/src/TDavixFile.cxx:39,variab,variables,39,net/davix/src/TDavixFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/davix/src/TDavixFile.cxx,2,['variab'],['variables']
Modifiability,"// The presence of the following lane-sensitive operations in a; // web will kill the optimization, at least for now. For these; // we do nothing, causing the optimization to fail.; // FIXME: Some of these could be permitted with special handling,; // and will be phased in as time permits.; // FIXME: There is no simple and maintainable way to express a set; // of opcodes having a common attribute in TableGen. Should this; // change, this is a prime candidate to use such a mechanism.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp:325,maintainab,maintainable,325,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCVSXSwapRemoval.cpp,1,['maintainab'],['maintainable']
Modifiability,// The printer sets this variable to true if the template diff was used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h:25,variab,variable,25,interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Diagnostic.h,1,['variab'],['variable']
Modifiability,// The probability of us entering the initializer is; // 1 / (total number of times we attempt to initialize the variable).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:113,variab,variable,113,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// The promoted values aren't zero extended, use a sext_inreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:35,extend,extended,35,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extended']
Modifiability,"// The promotion helper does not know how to deal with vector types yet.; // To be able to fix that, we would need to fix the places where we; // statically extend, e.g., constants and such.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:157,extend,extend,157,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"// The python object is null if the base estimator does not support; // variable ranking. Then, return NULL, which disables ranking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx:72,variab,variable,72,tmva/pymva/src/MethodPyAdaBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyAdaBoost.cxx,1,['variab'],['variable']
Modifiability,"// The range always returns a copy, so a temporary is always created.; // Suggest removing the reference from the loop variable.; // If the type is a rvalue reference do not warn since that changes the; // semantic of the code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:119,variab,variable,119,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,"// The re-extended constant changed, partly changed (in the case of a vector),; // or could not be determined to be equal (in the case of a constant; // expression), so the constant cannot be represented in the shorter type.; // All the cases that fold to true or false will have already been handled; // by simplifyICmpInst, so only deal with the tricky case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:10,extend,extended,10,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['extend'],['extended']
Modifiability,"// The record types structurally match, or the ""from"" translation; // unit only had a forward declaration anyway; call it the same; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:135,variab,variable,135,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['variab'],['variable']
Modifiability,"// The reduction variable must be a chain of single-use instructions; // (including the PHI), except for the last value (which is used by the PHI; // and also outside the loop).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,"// The reference of the variable, and not just its value,; // is needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransBlockObjCVariable.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/ARCMigrate/TransBlockObjCVariable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransBlockObjCVariable.cpp,1,['variab'],['variable']
Modifiability,// The registers of the addressing mode may have their live range extended; // and their kill flags may no longer be correct. Conservatively clear the; // kill flags.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp:66,extend,extended,66,interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineSink.cpp,1,['extend'],['extended']
Modifiability,"// The remaining GPRs hold either the beginning of variable-argument; // data, or the beginning of an aggregate passed by value (usually; // byval). Either way, we allocate stack slots adjacent to the data; // provided by our caller, and store the unallocated registers there.; // If this is a variadic function, the va_list pointer will begin with; // these values; otherwise, this reassembles a (byval) structure that; // was split between registers and memory.; // Return: The frame index registers were stored into.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:51,variab,variable-argument,51,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['variab'],['variable-argument']
Modifiability,"// The required interface:; // - A set of three ""evaluate"" functions. Each returns ""true"" if the; // computation succeeded, ""false"" otherwise.; // (1) Given an instruction MI, and the map with input values ""Inputs"",; // compute the set of output values ""Outputs"". An example of when; // the computation can ""fail"" is if MI is not an instruction that; // is recognized by the evaluator.; // (2) Given a register R (as reg:subreg), compute the cell that; // corresponds to the ""subreg"" part of the given register.; // (3) Given a branch instruction BrI, compute the set of target blocks.; // If the branch can fall-through, add null (0) to the list of; // possible targets.; // - A function ""rewrite"", that given the cell map after propagation,; // could rewrite instruction MI in a more beneficial form. Return; // ""true"" if a change has been made, ""false"" otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:690,rewrite,rewrite,690,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,2,['rewrite'],['rewrite']
Modifiability,"// The result of EXTRACT_VECTOR_ELT may be larger than the element type of; // the input vector. If so, extend the elements of the input vector to the; // same bitwidth as the result before expanding.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:104,extend,extend,104,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,1,['extend'],['extend']
Modifiability,"// The result of memcmp is negative, zero, or positive, so produce that by; // subtracting 2 extended compare bits: sub (ugt, ult).; // If a target prefers to use selects to get -1/0/1, they should be able; // to transform this later. The inverse transform (going from selects to math); // may not be possible in the DAG because the selects got converted into; // branches before we got there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp:93,extend,extended,93,interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,1,['extend'],['extended']
Modifiability,// The result type of the extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:26,extend,extend,26,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['extend'],['extend']
Modifiability,"// The rewrite is considered to be unprofitable iff and only iff the; // intrinsic we'll use are not cheap. Note that we are okay with *just*; // making the loop countable, even if nothing else changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The rewrite is considered to be unprofitable iff and only iff the; // intrinsic/shift we'll use are not cheap. Note that we are okay with *just*; // making the loop countable, even if nothing else changes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:7,rewrite,rewrite,7,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The rewriter provides a value for the desired IV expression. This may; // either find an existing phi or materialize a new one. Either way, we; // expect a well-formed cyclic phi-with-increments. i.e. any operand not part; // of the phi-SCC dominates the loop entry.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:7,rewrite,rewriter,7,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['rewrite'],['rewriter']
Modifiability,"// The rewriting could rewrite PHI nodes to non-PHI nodes, causing; // regular instructions to appear in between PHI nodes. Bring all; // the PHI nodes to the beginning of the block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:23,rewrite,rewrite,23,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['rewrite'],['rewrite']
Modifiability,"// The same for the variables:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:20,variab,variables,20,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['variab'],['variables']
Modifiability,"// The sandbox for this session",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:7,sandbox,sandbox,7,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Modifiability,// The scope of the catch variable ends right here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,// The scopes for variables and !dbg attachments must agree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Verifier.cpp,2,['variab'],['variables']
Modifiability,// The second argument is the address of the parameter variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,2,['variab'],['variable']
Modifiability,// The second load can only be eliminated if its extension type matches; // that of the load instruction corresponding to the intrinsic. The user; // can provide an address of an unsigned variable to store the result of; // a sign-extending intrinsic into (or the other way around).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:188,variab,variable,188,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,2,"['extend', 'variab']","['extending', 'variable']"
Modifiability,"// The semantics of RISCVISD::VMV_V_X_VL is that when the operand; // type is wider than the resulting vector element type: an implicit; // truncation first takes place. Therefore, perform a manual; // truncation/sign-extension in order to ignore any truncated bits and catch; // any zero-extended immediate.; // For example, we wish to match (i8 -1) -> (XLenVT 255) as a simm5 by first; // sign-extending to (XLenVT -1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp:289,extend,extended,289,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelDAGToDAG.cpp,2,['extend'],"['extended', 'extending']"
Modifiability,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,7,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,// The set of PHI nodes visited when determining if a variable's reference has; // been taken. This set is maintained to ensure we don't visit the same PHI; // node multiple times.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp:54,variab,variable,54,interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackProtector.cpp,1,['variab'],['variable']
Modifiability,"// The set of all DAG roots, and state tracking of all roots; // for a particular induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:92,variab,variable,92,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,// The set of cc code supported is from; // https://gcc.gnu.org/onlinedocs/gcc/Extended-Asm.html#Flag-Output-Operands,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:79,Extend,Extended-Asm,79,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Extend'],['Extended-Asm']
Modifiability,"// The setcc produces an i8 of 0/1, so extend that to the result width and; // negate to get the final 0/-1 mask value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,extend,extend,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// The setting is for now a global one, must be decided before running the; // program by setting the appropriate environment variable. Make sure that; // option configuration is thread-safe and happens only once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx:126,variab,variable,126,tree/dataframe/src/RNTupleDS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RNTupleDS.cxx,2,"['config', 'variab']","['configuration', 'variable']"
Modifiability,"// The shared variables are packed together as members of structure.; // So the address of each shared variable can be computed by adding; // offset of it (within record) to the base address of record. For each; // shared variable, debug intrinsic llvm.dbg.declare is generated with; // appropriate expressions (DIExpression).; // Ex:; // %12 = load %struct.anon*, %struct.anon** %__context.addr.i; // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar1,; // metadata !DIExpression(DW_OP_deref)); // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar2,; // metadata !DIExpression(DW_OP_plus_uconst, 8, DW_OP_deref))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:14,variab,variables,14,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// The shift amount is a variable, but it is the same for all vector lanes.; // These instructions are defined together with shift-immediate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// The shift must be valid.; // TODO: This restricts the fold to constant shift amounts. Is there a way to; // handle variable shifts safely? PR47012,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:118,variab,variable,118,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['variab'],['variable']
Modifiability,// The sign bit must be a part of the field being extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:50,extend,extended,50,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['extend'],['extended']
Modifiability,"// The sign/zero extend pseudo-instruction does two shifts, with the shift; // amounts dependent on the XLEN.; //; // The expansion looks like this; //; // SLLI rd, rs, XLEN - Width; // SR[A|R]I rd, rd, XLEN - Width",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/AsmParser/RISCVAsmParser.cpp,1,['extend'],['extend']
Modifiability,"// The significant bits are calculated including the sign bit. This may; // add an extra bit for zero-extended values, e.g. (zext i32 to i64) may; // result in 33 significant bits. To avoid extra words, skip the extra; // sign bit, but keep information that the value is to be treated as; // unsigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp:102,extend,extended,102,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVectorCombine.cpp,1,['extend'],['extended']
Modifiability,"// The situation when the type of the lifetime-extending reference; // does not correspond to the type of the object is supposed; // to be handled by now. In particular, 'ty' is now the unwrapped; // record type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:47,extend,extending,47,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['extend'],['extending']
Modifiability,// The size of TLS variables. These constants must be kept in sync with the ones; // in dfsan.cpp.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:19,variab,variables,19,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['variab'],['variables']
Modifiability,"// The size of a dbg.value's value operand should match the size of the; // variable it corresponds to.; //; // TODO: This, along with a check for non-null value operands, should be; // promoted to verifier failures.; // For now, don't try to interpret anything more complicated than an empty; // DIExpression. Eventually we should try to handle OP_deref and fragments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:76,variab,variable,76,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['variab'],['variable']
Modifiability,"// The size of the constant we plan to generate. This is usually just; // the size of the initialized type, but in AllowOversized mode (i.e.; // flexible array init), it can be larger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:145,flexible,flexible,145,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['flexible'],['flexible']
Modifiability,// The size of the gather was already checked in isLegalTypeAndAlignment;; // if it was not a full vector width an appropriate extend should follow.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:127,extend,extend,127,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,1,['extend'],['extend']
Modifiability,"// The size of this object on the stack. 0 means a variable sized object,; // ~0ULL means a dead object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h:51,variab,variable,51,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineFrameInfo.h,1,['variab'],['variable']
Modifiability,"// The special library ordinals have a negative value, but they are encoded in; // an unsigned bitfield, so we need to sign extend the value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:124,extend,extend,124,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,1,['extend'],['extend']
Modifiability,// The special symbol below is absolute and has a *value* that can be; // combined with the frame pointer to signal an extended frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:119,extend,extended,119,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['extend'],['extended']
Modifiability,"// The stack probing code for the dynamically allocated outgoing arguments; // area assumes that the stack is probed at the top - either by the prologue; // code, which issues a probe if `hasVarSizedObjects` return true, or by the; // most recent variable-sized object allocation. Changing the condition here; // may need to be followed up by changes to the probe issuing logic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:247,variab,variable-sized,247,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['variab'],['variable-sized']
Modifiability,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target specific lowering code.; // Instead we perform the call lowering right here.; //; // chain, flag = CALLSEQ_START(chain, 0, 0); // chain, flag = STACKMAP(id, nbytes, ..., chain, flag); // chain, flag = CALLSEQ_END(chain, 0, 0, flag); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:48,variab,variables,48,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variables']
Modifiability,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target-specific lowering code.; // Instead we perform the call lowering right here.; //; // CALLSEQ_START(0, 0...); // STACKMAP(id, nbytes, ...); // CALLSEQ_END(0, 0); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:48,variab,variables,48,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,1,['variab'],['variables']
Modifiability,// The standard attribute cannot be applied to variable declarations such; // as a function pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,// The standard behaviour in the backend for these cases is to split the; // extend up into two parts:; // 1. Perform an extending load or masked load up to the legal type.; // 2. Extend the loaded data to the final type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:77,extend,extend,77,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,3,"['Extend', 'extend']","['Extend', 'extend', 'extending']"
Modifiability,"// The step between extend is too large, split it by creating an intermediate; // extend instruction",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,2,['extend'],['extend']
Modifiability,// The subexpression in which the extender is used (e.g. address; // computation).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:34,extend,extender,34,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extender']
Modifiability,"// The subrange may have ended before FillerStart. If so, extend it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:58,extend,extend,58,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extend']
Modifiability,"// The symbol can be a constant, parameter or variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp:46,variab,variable,46,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVScope.cpp,1,['variab'],['variable']
Modifiability,// The target would prefer to promote the comparison operand with sign; // extension. Honor that unless the promoted values are already zero; // extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:145,extend,extended,145,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extended']
Modifiability,// The taskgroup descriptor variable is always implicit firstprivate and; // privatized already during processing of the firstprivates.; // FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// The template-id must name a variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// The templates are recorded as normal DWARF objects relationships;; // the template parameters are preserved to show the types used during; // the instantiation; however if a compare have been requested, those; // parameters needs to be resolved, so no conflicts are generated.; // The following DWARF illustrates this issue:; //; // a) Template Parameters are preserved:; // {Class} 'ConstArray<AtomTable>'; // {Inherits} -> 'ArrayBase'; // {TemplateType} 'taTYPE' -> 'AtomTable'; // {Member} 'mData' -> '* taTYPE'; //; // b) Template Parameters are resolved:; // {Class} 'ConstArray<AtomTable>'; // {Inherits} -> 'ArrayBase'; // {TemplateType} 'taTYPE' -> 'AtomTable'; // {Member} 'mData' -> '* AtomTable'; //; // In (b), the {Member} type have been resolved to use the real type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp:415,Inherit,Inherits,415,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Core/LVType.cpp,2,['Inherit'],['Inherits']
Modifiability,"// The test 'fMethod[keep] == 0' fails to detect a variable size array; // if the counter happens to have an offset of zero, so let's explicitly; // prevent for here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx:51,variab,variable,51,io/io/src/TStreamerInfoActions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx,1,['variab'],['variable']
Modifiability,"// The three is a much more special case. The steps for; // fitting have to be done manually here until they are; // properly implemented within a FitObject method in; // THFitImpl.cxx; // Retrieve the variables and cuts selected from the current; // tree.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx:202,variab,variables,202,gui/fitpanel/src/TFitEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TFitEditor.cxx,1,['variab'],['variables']
Modifiability,"// The top stack entry should be treated as the actual value of tne; // variable, rather than the address of the variable in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFExpression.cpp:72,variab,variable,72,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFExpression.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFExpression.cpp,2,['variab'],['variable']
Modifiability,"// The transformation from a zero-extending load to a sign-extending; // load is only legal when the displacement is a multiple of 4.; // If the displacement is not at least 4 byte aligned, don't perform; // the transformation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,2,['extend'],['extending']
Modifiability,"// The trip count is the RHS of the compare. If this doesn't match the trip; // count computed by SCEV then this is because the trip count variable; // has been widened so the types don't match, or because it is a constant and; // another transformation has changed the compare (e.g. icmp ult %inc,; // tripcount -> icmp ult %j, tripcount-1), or both.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:139,variab,variable,139,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variable']
Modifiability,// The truncate of a store is free. This is the mirror of extends above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:58,extend,extends,58,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extends']
Modifiability,"// The two addresses refer to our first dependent variable and; // parameter, respectively, as declared in the rdl file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBukinPdf.cxx:50,variab,variable,50,roofit/roofit/src/RooBukinPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooBukinPdf.cxx,2,['variab'],['variable']
Modifiability,"// The two separate variables are only profitable when the LDS module lowering; // pass is disabled. If graphics does not use dynamic LDS, this is never; // profitable. Leaving cleanup for a later change.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineFunction.cpp,1,['variab'],['variables']
Modifiability,// The type arguments might not be forwarded at any point of inheritance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp:61,inherit,inheritance,61,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DynamicTypePropagation.cpp,1,['inherit'],['inheritance']
Modifiability,// The type that was sign-extended to get the AssertSext must be; // narrower than the type of N (so that N has still the same value; // as the original).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:26,extend,extended,26,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// The unversioned loop will not be changed, so we inherit all attributes; // from the original loop, but remove the loop distribution metadata to; // avoid to distribute it again.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp:51,inherit,inherit,51,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopDistribute.cpp,1,['inherit'],['inherit']
Modifiability,// The use is (one of) the uses of the preferred use we chose earlier.; // We're going to update the load to def this value later so just erase; // the old extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:156,extend,extend,156,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,"// The use is in the initialization of a global variable; // that is a function pointer, so print a declaration; // for the original function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,// The use isn't an extend. Truncate back to the type we originally loaded.; // This is free on many targets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:20,extend,extend,20,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,"// The user can annotate variable declarations with cleanup functions, which; // essentially imposes a custom destructor logic on that variable.; // It is possible to use it, however, to call tracked parameters on all exits; // from the function. For this reason, we track the fact that the function; // actually has these.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,2,['variab'],['variable']
Modifiability,"// The users of this class want to replace all function references except; // for aliases and llvm.used/llvm.compiler.used with references to a jump; // table. We avoid replacing aliases in order to avoid introducing a double; // indirection (or an alias pointing to a declaration in ThinLTO mode), and; // we avoid replacing llvm.used/llvm.compiler.used because these global; // variables describe properties of the global, not the jump table (besides,; // offseted references to the jump table in llvm.used are invalid).; // Unfortunately, LLVM doesn't have a ""RAUW except for these (possibly; // indirect) users"", so what we do is save the list of globals referenced by; // llvm.used/llvm.compiler.used and aliases, erase the used lists, let RAUW; // replace the aliasees and then set them back to their original values at; // the end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp:380,variab,variables,380,interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/LowerTypeTests.cpp,1,['variab'],['variables']
Modifiability,// The value from the original loop to which we are mapping the new induction; // variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variable']
Modifiability,// The value is extended with undefined upper bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:16,extend,extended,16,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,// The value is in the upper bits of the location and should be; // extended with undefined upper bits when retrieved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:68,extend,extended,68,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,// The value is in the upper bits of the location and should be; // sign extended when retrieved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:73,extend,extended,73,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,// The value is in the upper bits of the location and should be; // zero extended when retrieved.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:73,extend,extended,73,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,"// The value is loaded into a value with FIELD_BYTE_SIZE size,; // and then zero or sign extended to U64.; // FIELD_LSHIFT_U64 and FIELD_RSHIFT_U64 are operations; // to extract the original value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp:89,extend,extended,89,interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp,1,['extend'],['extended']
Modifiability,// The value is sign extended in the location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:21,extend,extended,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,// The value is zero extended in the location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h:21,extend,extended,21,interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/CallingConvLower.h,1,['extend'],['extended']
Modifiability,"// The value may be live-through even if Kill is set, as can happen when; // we are called from extendRange. In that case LiveOutSeen is true, and; // LiveOut indicates a foreign or missing value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeCalc.cpp:96,extend,extendRange,96,interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeCalc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveRangeCalc.cpp,1,['extend'],['extendRange']
Modifiability,// The value needs to be an enum constant or a constant variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:56,variab,variable,56,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,// The value needs to be stored as the variable is passed by reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:39,variab,variable,39,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['variab'],['variable']
Modifiability,"// The value operand must be sign-extended for signed min/max so that the; // target's signed comparison instructions can be used. Otherwise, just; // zero-ext.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp:34,extend,extended,34,interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AtomicExpandPass.cpp,1,['extend'],['extended']
Modifiability,"// The value printers of TTreeReaderValue and TTreeReaderArray rely on the; // one of TTreeReaderValueBase, from which they both inherit.; // This is why we use RTTI inside the function, avoiding to duplicate code.; // The performance penalty is irrelevant because we are already printing; // the objects in an interactive environment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderValue.cxx:129,inherit,inherit,129,tree/treeplayer/src/TTreeReaderValue.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeReaderValue.cxx,1,['inherit'],['inherit']
Modifiability,// The value that the loop induction variable gets updated by in each loop; // iteration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h:37,variab,variable,37,interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/LoopInfo.h,1,['variab'],['variable']
Modifiability,// The value was sign extended and then truncated to 32-bits. No need to; // sign extend it again.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// The values of weak variables are never usable in constant expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:22,variab,variables,22,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variables']
Modifiability,// The variable can not have an abstract class type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// The variable exists, check its type and attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,1,['variab'],['variable']
Modifiability,// The variable has an entry in the map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,// The variable in a comdat may be discarded by LTO. Ensure the declaration; // will be retained.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['variab'],['variable']
Modifiability,// The variable is a class template argument?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,// The variable is a loop iterator?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,// The variable is a multiclass template argument?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,// The variable is a record field?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,"// The variable is addressable but not captured, so it cannot be; // referenced from a different thread and participate in a data race; // (see llvm/Analysis/CaptureTracking.h for details).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,1,['variab'],['variable']
Modifiability,"// The variable is already at different scope. In order to reflect; // the correct parent, move it to the namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.cpp,1,['variab'],['variable']
Modifiability,"// The variable is also a firstprivate, so initialization sequence; // for private copy is generated already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,// The variable is not private or it is the variable in the directive with; // default(none) clause and not used in any clause.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,// The variable offset and region handle are copied in r4 and r3. The; // copies are followed by GETtlsADDR32AIX/GETtlsADDR64AIX.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCTLSDynamicCall.cpp,1,['variab'],['variable']
Modifiability,"// The variable operand must be all zeros in the top bits to allow using the; // new, negative constant as the mask.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:7,variab,variable,7,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['variab'],['variable']
Modifiability,// The variable should generally be present in the local decl map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,// The variable was not updated in the region - exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,// The variable whose initializer we're evaluating.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:7,variab,variable,7,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// The vbases might be ordered differently in the final overrider object; // and the complete object, so the ""this"" argument may sometimes point to; // memory that has no particular type (e.g. past the complete object).; // In this case, we just use a generic pointer type.; // FIXME: might want to have a more precise type in the non-virtual; // multiple inheritance case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:356,inherit,inheritance,356,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// The vector ABI is different when the vector facility is present and when; // a module e.g. defines an externally visible vector variable, a flag; // indicating a visible vector ABI is added. Eventually this will result in; // a GNU attribute indicating the vector ABI of the module. Ty is the type; // of a variable or function parameter that is globally visible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:131,variab,variable,131,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,2,['variab'],['variable']
Modifiability,"// The vector element size for MVE instructions. 00 = i8, 01 = i16, 10 = i32; // and 11 = i64. This is the largest type if multiple are present, so a; // MVE_VMOVLs8bh is ize 01=i16, as it extends from a i8 to a i16. There are; // some caveats so cannot be used blindly, such as exchanging VMLADAVA's and; // complex instructions, which may use different input lanes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMBaseInfo.h:189,extend,extends,189,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMBaseInfo.h,1,['extend'],['extends']
Modifiability,// The vector enhancements facility 1 has instructions for these.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:14,enhance,enhancements,14,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['enhance'],['enhancements']
Modifiability,// The vector enhancements facility 1 provides v4f32 instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp:14,enhance,enhancements,14,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZTargetTransformInfo.cpp,1,['enhance'],['enhancements']
Modifiability,// The vector originally had a size of OrigTy. It was then extended to ExtTy.; // We expect the ExtTy to be 128-bits total. If the OrigTy is less than; // 64-bits we need to insert a new extension so that it will be 64-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:59,extend,extended,59,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extended']
Modifiability,// The verifier rejects used lists containing an inttoptr of a constant; // so remove the variables from these lists before replaceAllUsesWith,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:90,variab,variables,90,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,// The virtual inheritance model has a quirk: the virtual base table is always; // referenced when dereferencing a member pointer even if the member pointer; // is non-virtual. This is accounted for by adjusting the non-virtual offset; // to point backwards to the top of the MDC from the first VBase. Undo this; // adjustment to normalize the member pointer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:15,inherit,inheritance,15,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// The volatile store here is intended to escape the local variable, to; // prevent the compiler from optimizing CharOnStack into anything other; // than a char on the stack.; //; // Tested on: MSVC 2015 - 2019, GCC 4.9 - 9, Clang 3.2 - 9, ICC 13 - 19.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp:59,variab,variable,59,interpreter/llvm-project/clang/lib/Basic/Stack.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Stack.cpp,1,['variab'],['variable']
Modifiability,"// The widenIVUse avoids generating trunc by evaluating the use as AddRec, this; // will not work when:; // 1) SCEV traces back to an instruction inside the loop that SCEV can not; // expand, eg. add %indvar, (load %addr); // 2) SCEV finds a loop variant, eg. add %indvar, %loopvariant; // While SCEV fails to avoid trunc, we can still try to use instruction; // combining approach to prove trunc is not required. This can be further; // extended with other instruction combining checks, but for now we handle the; // following case (sub can be ""add"" and ""mul"", ""nsw + sext"" can be ""nus + zext""); //; // Src:; // %c = sub nsw %b, %indvar; // %d = sext %c to i64; // Dst:; // %indvar.ext1 = sext %indvar to i64; // %m = sext %b to i64; // %d = sub nsw i64 %m, %indvar.ext1; // Therefore, as long as the result of add/sub/mul is extended to wide type, no; // trunc is required regardless of how %b is generated. This pattern is common; // when calculating address in 64 bit architecture",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:438,extend,extended,438,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,2,['extend'],['extended']
Modifiability,// The wider add is guaranteed to not wrap because both operands are; // sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:78,extend,extended,78,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// The widest scale possible for extending is to a 64-bit integer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:33,extend,extending,33,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// The width of the result has shrunk. Use sign/zero extension to describe; // the source variable's high bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:90,variab,variable,90,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['variab'],['variable']
Modifiability,"// The x32 ABI wants to zero extend 32-bit pointers to 64-bit registers, so; // we have to cast to do the extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:29,extend,extend,29,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['extend'],['extend']
Modifiability,"// The xor input value T is isolated into its own match so that it could; // be checked against an induction variable containing a shifted bit; // (todo).; // For now, check against (Q << i).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:109,variab,variable,109,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['variab'],['variable']
Modifiability,"// The zero-extend must be a multiple of the source size, and we must be; // building a vector of the same size as the source of the extract element.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,// Then load configuration files specified explicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:13,config,configuration,13,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['configuration']
Modifiability,"// Then print the variable name and location of the new live range,; // with box drawing characters joining it to the live range line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp:18,variab,variable,18,interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/SourcePrinter.cpp,1,['variab'],['variable']
Modifiability,"// Then the increment we are looking at is not an increment of the; // induction variable, and we don't want to do a writeback",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVEGatherScatterLowering.cpp,1,['variab'],['variable']
Modifiability,"// Then, collect TLS Variable info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp:21,Variab,Variable,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/TLSVariableHoist.cpp,1,['Variab'],['Variable']
Modifiability,"// There are 4 additional tail-allocated arrays at the end of the class:; // 1. Contains list of pseudo variables with the default initialization for; // each non-firstprivate variables. Used in codegen for initialization of; // lastprivate copies.; // 2. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents private variables; // (for arrays, single array element).; // 3. List of helper expressions for proper generation of assignment operation; // required for lastprivate clause. This list represents original variables; // (for arrays, single array element).; // 4. List of helper expressions that represents assignment operation:; // \code; // DstExprs = SrcExprs;; // \endcode; // Required for proper codegen of final assignment performed by the; // lastprivate clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:104,variab,variables,104,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,4,['variab'],['variables']
Modifiability,"// There are MOVMSK flavors for types v16i8, v32i8, v4f32, v8f32, v4f64 and; // v8f64. So all legal 128-bit and 256-bit vectors are covered except for; // v8i16 and v16i16.; // For these two cases, we can shuffle the upper element bytes to a; // consecutive sequence at the start of the vector and treat the results as; // v16i8 or v32i8, and for v16i8 this is the preferable solution. However,; // for v16i16 this is not the case, because the shuffle is expensive, so we; // avoid sign-extending to this type entirely.; // For example, t0 := (v8i16 sext(v8i1 x)) needs to be shuffled as:; // (v16i8 shuffle <0,2,4,6,8,10,12,14,u,u,...,u> (v16i8 bitcast t0), undef)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:487,extend,extending,487,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:93,extend,extend,93,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,7,['extend'],['extend']
Modifiability,"// There are currently two cases of vector promotion:; // 1) Bitcasting a vector of integers to a different type to a vector of the; // same overall length. For example, x86 promotes ISD::AND v2i32 to v1i64.; // 2) Extending a vector of floats to a vector of the same number of larger; // floats. For example, AArch64 promotes ISD::FADD on v4f16 to v4f32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:215,Extend,Extending,215,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['Extend'],['Extending']
Modifiability,"// There are four ways to lower s_mul_u64:; //; // 1. If all the operands are uniform, then we lower it as it is.; //; // 2. If the operands are divergent, then we have to split s_mul_u64 in 32-bit; // multiplications because there is not a vector equivalent of s_mul_u64.; //; // 3. If the cost model decides that it is more efficient to use vector; // registers, then we have to split s_mul_u64 in 32-bit multiplications.; // This happens in splitScalarSMULU64() in SIInstrInfo.cpp .; //; // 4. If the cost model decides to use vector registers and both of the; // operands are zero-extended/sign-extended from 32-bits, then we split the; // s_mul_u64 in two 32-bit multiplications. The problem is that it is not; // possible to check if the operands are zero-extended or sign-extended in; // SIInstrInfo.cpp. For this reason, here, we replace s_mul_u64 with; // s_mul_u64_u32_pseudo if both operands are zero-extended and we replace; // s_mul_u64 with s_mul_i64_i32_pseudo if both operands are sign-extended.; // If the cost model decides that we have to use vector registers, then; // splitScalarSMulPseudo() (in SIInstrInfo.cpp) split s_mul_u64_u32/; // s_mul_i64_i32_pseudo in two vector multiplications. If the cost model; // decides that we should use scalar registers, then s_mul_u64_u32_pseudo/; // s_mul_i64_i32_pseudo is lowered as s_mul_u64 in expandPostRAPseudo() in; // SIInstrInfo.cpp .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:585,extend,extended,585,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,6,['extend'],['extended']
Modifiability,"// There are global variables, so put it here instead of in; // RuntimeLibcalls.def.; // TODO: Are there similar such variables?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,2,['variab'],['variables']
Modifiability,"// There are multiple offsets at play in this function, so let's break it; // down. Starting with how variables may be stored in allocas:; //; // 1 Simplest case: variable is alloca sized and starts at offset 0.; // 2 Variable is larger than the alloca: the alloca holds just a part of it.; // 3 Variable is smaller than the alloca: the alloca may hold multiple; // variables.; //; // Imagine we have a store to the entire alloca. In case (3) the store; // affects bits outside of the bounds of each variable. In case (2), where; // the alloca holds the Xth bit to the Yth bit of a variable, the; // zero-offset store doesn't represent an assignment at offset zero to the; // variable. It is an assignment to offset X.; //; // # Example 1; // Obviously, not all stores are alloca-sized and have zero offset. Imagine; // the lower 32 bits of this store are dead and are going to be DSEd:; //; // store i64 %v, ptr %dest, !DIAssignID !1; // dbg.assign(..., !DIExpression(fragment, 128, 32), !1, %dest,; // !DIExpression(DW_OP_plus_uconst, 4)); //; // Goal: Given our dead bits at offset:0 size:32 for the store, determine the; // part of the variable, which fits in the fragment expressed by the; // dbg.assign, that has been killed, if any.; //; // calculateFragmentIntersect(..., SliceOffsetInBits=0,; // SliceSizeInBits=32, Dest=%dest, Assign=dbg.assign); //; // Drawing the store (s) in memory followed by the shortened version ($),; // then the dbg.assign (d), with the fragment information on a seperate scale; // underneath:; //; // Memory; // offset; // from; // dest 0 63; // | |; // s[######] - Original stores 64 bits to Dest.; // $----[##] - DSE says the lower 32 bits are dead, to be removed.; // d [##] - Assign's address-modifying expression adds 4 bytes to; // dest.; // Variable | |; // Fragment 128|; // Offsets 159; //; // The answer is achieved in a few steps:; // 1. Add the fragment offset to the store offset:; // SliceOffsetInBits:0 + VarFrag.OffsetInBits:128 = 128; //; // 2. Su",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:102,variab,variables,102,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,8,"['Variab', 'variab']","['Variable', 'variable', 'variables']"
Modifiability,// There are no conversions between extended vector types other than the; // identity conversion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:36,extend,extended,36,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['extend'],['extended']
Modifiability,"// There are no conversions between extended vector types, only identity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:36,extend,extended,36,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['extend'],['extended']
Modifiability,// There are no extending loads or truncating stores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:16,extend,extending,16,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// There are no intrinsic functions that leak arguments.; // If the called function does not return, the current function; // does not return as well, so no possibility of use-after-return.; // Sanitizer function also don't leak or don't return.; // It's safe to both pass pointers to local variables to them; // and to tail-call them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp:291,variab,variables,291,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/SanitizerBinaryMetadata.cpp,1,['variab'],['variables']
Modifiability,"// There are no prior lookup results for the variable itself, because it; // is unnamed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,// There are no remaining unit clauses in the formula! Make a decision; // for one of the active variables at the current level.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:97,variab,variables,97,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variables']
Modifiability,"// There are particular cases where we can conclude no-alias between; // a non-addr-taken global and some other underlying object. Specifically,; // a non-addr-taken global is known to not be escaped from any function. It is; // also incorrect for a transformation to introduce an escape of a global in; // a way that is observable when it was not there previously. One function; // being transformed to introduce an escape which could possibly be observed; // (via loading from a global or the return value for example) within another; // function is never safe. If the observation is made through non-atomic; // operations on different threads, it is a data-race and UB. If the; // observation is well defined, by being observed the transformation would have; // changed program behavior by introducing the observed escape, making it an; // invalid transform.; //; // This property does require that transformations which *temporarily* escape; // a global that was not previously escaped, prior to restoring it, cannot rely; // on the results of GMR::alias. This seems a reasonable restriction, although; // currently there is no way to enforce it. There is also no realistic; // optimization pass that would make this mistake. The closest example is; // a transformation pass which does reg2mem of SSA values but stores them into; // global variables temporarily before restoring the global variable's value.; // This could be useful to expose ""benign"" races for example. However, it seems; // reasonable to require that a pass which introduces escapes of global; // variables in this way to either not trust AA results while the escape is; // active, or to be forced to operate as a module pass that cannot co-exist; // with an alias analysis such as GMR.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp:1344,variab,variables,1344,interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/GlobalsModRef.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// There are quite a few FP16 instructions (e.g. VNMLA, VNMLS, etc.) that; // negate values directly (fneg is free). So, we don't want to let the DAG; // combiner rewrite fneg into xors and some other instructions. For f16 and; // FullFP16 argument passing, some bitcast nodes may be introduced,; // triggering this DAG combine rewrite, so we are avoiding that with this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:163,rewrite,rewrite,163,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,2,['rewrite'],['rewrite']
Modifiability,"// There are several ways we can dereference things, and several inputs; // to consider:; // * NRVO variables will appear with IsIndirect set, but should have; // nothing else in their DIExpressions,; // * Variables with DW_OP_stack_value in their expr already need an; // explicit dereference of the stack location,; // * Values that don't match the variable size need DW_OP_deref_size,; // * Everything else can just become a simple location expression.; // We need to use deref_size whenever there's a mismatch between the; // size of value and the size of variable portion being read.; // Additionally, we should use it whenever dealing with stack_value; // fragments, to avoid the consumer having to determine the deref size; // from DW_OP_piece.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:100,variab,variables,100,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,4,"['Variab', 'variab']","['Variables', 'variable', 'variables']"
Modifiability,"// There are three categories of capture: capturing 'this', capturing; // local variables, and C++1y initialized captures (which can have an; // arbitrary initializer, and don't really capture in the traditional; // sense at all).; //; // There are three ways to capture a local variable:; // - capture by copy in the C++11 sense,; // - capture by reference in the C++11 sense, and; // - __block capture.; // Lambdas explicitly specify capture by copy or capture by reference.; // For blocks, __block capture applies to variables with that annotation,; // variables of reference type are captured by reference, and other; // variables are captured by copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h:80,variab,variables,80,interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/ScopeInfo.h,5,['variab'],"['variable', 'variables']"
Modifiability,"// There are two cases to handle here. 1) scoped lookup could have failed,; // in which case we should look for an ivar. 2) scoped lookup could have; // found a decl, but that decl is outside the current instance method (i.e.; // a global variable). In these two cases, we do a lookup for an ivar with; // this name, if the lookup sucedes, we replace it our current decl.; // If we're in a class method, we don't normally want to look for; // ivars. But if we don't find anything else, and there's an; // ivar, that's an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:239,variab,variable,239,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// There can be multiple <FORM> entries on a single HTML page.; // Each one must be given a unique number for identification purposes,; // and so we can generate unique state variable names for radiobuttons,; // checkbuttons, and entry boxes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:175,variab,variable,175,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['variab'],['variable']
Modifiability,"// There is a combine of two constant extended values into CONST64,; // provided both constants are true immediates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// There is a combine of two constant extended values into CONST64.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// There is a form of VFSGNJ which injects the negated sign of its second; // operand. Try and bubble any FNEG up after the extend/round to produce; // this optimized pattern. Avoid modifying cases where FP_ROUND and; // TRUNC=1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:124,extend,extend,124,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// There is a not-too-uncommon idiom; // where a block passed to dispatch_async captures a semaphore; // and then the thread (which called dispatch_async) is blocked on waiting; // for the completion of the execution of the block; // via dispatch_semaphore_wait. To avoid false-positives (for now); // we ignore all the blocks which have captured; // a variable of the type ""dispatch_semaphore_t"".",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp:353,variab,variable,353,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StackAddrEscapeChecker.cpp,1,['variab'],['variable']
Modifiability,"// There is a possibility that the linker may try to rewrite:; // adrp x0, @sym@PAGE; // add x1, x0, @sym@PAGEOFF; // [x0 = some other def]; // ldr x2, [x1]; // ...into...; // adrp x0, @sym; // nop; // [x0 = some other def]; // ldr x2, [x0]; // ...if the offset to the symbol won't fit within a literal load.; // This causes the load to use the result of the adrp, which in this; // case has already been clobbered.; // FIXME: Implement proper liveness tracking for all registers. For now,; // don't emit the LOH if there are any instructions between the add and; // the ldr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:53,rewrite,rewrite,53,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,1,['rewrite'],['rewrite']
Modifiability,"// There is a scalar version available, but unlike the vector version which; // has a separate operand for the offset and width, the scalar version packs; // the width and offset into a single operand. Try to move to the scalar; // version if the offsets are constant, so that we can try to keep extended; // loads of kernel arguments in SGPRs.; // TODO: Technically we could try to pattern match scalar bitshifts of; // dynamic values, but it's probably not useful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:296,extend,extended,296,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// There is an external 'errno' variable.; // Use its memory region.; // The memory region for an 'errno'-like variable is allocated in system; // space by MemRegionManager.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp:32,variab,variable,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,2,['variab'],['variable']
Modifiability,"// There is an extraneous 'template<>' for this variable. Complain; // about it, but allow the declaration of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:48,variab,variable,48,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// There is no combine of two constant extended values, unless handled above; // Make both 8-bit size checks to allow both combine (#,##) and combine(##,#)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:39,extend,extended,39,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// There is no combine of two constant extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp:39,extend,extended,39,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonCopyToCombine.cpp,1,['extend'],['extended']
Modifiability,// There is no extending load for vXi1.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,extend,extending,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// There is no hardware support for v4f32 (unless we have the vector; // enhancements facility 1), so extend the vector into two v2f64s; // and compare those.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:73,enhance,enhancements,73,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,2,"['enhance', 'extend']","['enhancements', 'extend']"
Modifiability,"// There is no log10 instruction in the GLSL Extended Instruction set, so it; // is implemented as:; // log10(x) = log2(x) * (1 / log2(10)); // = log2(x) * 0.30103",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp:45,Extend,Extended,45,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,1,['Extend'],['Extended']
Modifiability,"// There is no variable by this name in this class, let see; // the base classes!:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:15,variab,variable,15,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['variab'],['variable']
Modifiability,// There is nothing more we need to know about this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// There is some ambiguity in what initializer should be used, if the; // descriptor's subexpression is non-trivial: it can be the entire; // subexpression (which is what has been done so far), or it can be; // the extender's value itself, if all corresponding extenders have the; // exact value of the initializer (i.e. require offset of 0).; // To reduce the number of initializers, merge such special cases.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:215,extend,extender,215,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,2,['extend'],"['extender', 'extenders']"
Modifiability,"// There used to be a warning printed here when:; // obj && isTObject && !((TObject*)obj)->IsA()->InheritsFrom(clReq); // however isTObject was based on clReq (now clCast).; // If the test was to fail, then it is as likely that the object is not a TObject; // and then we have a potential core dump.; // At this point (missing clRef), we do NOT have enough information to really; // answer the question: is the object read of the type I requested.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx:98,Inherit,InheritsFrom,98,io/io/src/TBufferFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TBufferFile.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,// There were no extends,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:17,extend,extends,17,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extends']
Modifiability,"// There you go, next combination is ready.; // We have carry - increment more significant variable next..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h:91,variab,variable,91,interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/CombinationGenerator.h,1,['variab'],['variable']
Modifiability,"// There's a gap in the 4-bit encoded table and actual enum values, so offset; // if it's an extended value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:93,extend,extended,93,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['extend'],['extended']
Modifiability,// There's been an assignment to memory and we currently are; // not tracking a location for the variable. Do not emit anything.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:97,variab,variable,97,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// There's been an assignment to memory that we were using as a; // location for this variable, and the Assignment doesn't match what; // we'd expect to see in memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:86,variab,variable,86,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,// There's no AMX instruction if we didn't find a tile config live in point.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:55,config,config,55,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['config'],['config']
Modifiability,// There's nothing to do if the alloca doesn't have any variables using; // assignment tracking.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp:56,variab,variables,56,interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/PromoteMemoryToRegister.cpp,1,['variab'],['variables']
Modifiability,// These Gadgets are not related to pointer variables (e. g. temporaries).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:44,variab,variables,44,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,// These are legal on both functions and variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:41,variab,variables,41,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,1,['variab'],['variables']
Modifiability,// These are only legal on variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h:27,variab,variables,27,interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/Specifiers.h,1,['variab'],['variables']
Modifiability,"// These are the attributes that are still valid on loads and stores after; // RS4GC.; // The metadata implying dereferenceability and noalias are (conservatively); // dropped. This is because semantically, after RewriteStatepointsForGC runs,; // all calls to gc.statepoint ""free"" the entire heap. Also, gc.statepoint can; // touch the entire heap including noalias objects. Note: The reasoning is; // same as stripping the dereferenceability and noalias attributes that are; // analogous to the metadata counterparts.; // We also drop the invariant.load metadata on the load because that metadata; // implies the address operand to the load points to memory that is never; // changed once it became dereferenceable. This is no longer true after RS4GC.; // Similar reasoning applies to invariant.group metadata, which applies to; // loads within a group.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:213,Rewrite,RewriteStatepointsForGC,213,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['Rewrite'],['RewriteStatepointsForGC']
Modifiability,"// These are the types we expect to return (in order of most to least; // likely):; //; // 1. DeclRefExpr - This is the expression for the base of the structure.; // It's exactly what we want to build an access to the \p counted_by; // field.; // 2. MemberExpr - This is the expression that has the same \p RecordDecl; // as the flexble array member's lexical enclosing \p RecordDecl. This; // allows us to catch things like: ""p->p->array""; // 3. CompoundLiteralExpr - This is for people who create something; // heretical like (struct foo has a flexible array member):; //; // (struct foo){ 1, 2 }.blah[idx];",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:546,flexible,flexible,546,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['flexible'],['flexible']
Modifiability,"// These are type qualifiers in the traditional C sense: they annotate; // something about a specific value/variable of a type. (They aren't; // always part of the canonical type, though.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:108,variab,variable,108,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['variab'],['variable']
Modifiability,"// These bitfields will only ever be set to something non-zero in operator=,; // when setting the -sve-tail-folding option. This option should always be of; // the form (default|simple|all|disable)[+(Flag1|Flag2|etc)], where here; // InitialBits is one of (disabled|all|simple). EnableBits represents; // additional flags we're enabling, and DisableBits for those flags we're; // disabling. The default flag is tracked in the variable NeedsDefault, since; // at the time of setting the option we may not know what the default value; // for the CPU is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:426,variab,variable,426,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['variab'],['variable']
Modifiability,// These can't be represented as floating point!; // FIXME rounding mode needs to be more flexible,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp:90,flexible,flexible,90,interpreter/llvm-project/llvm/lib/IR/Constants.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/Constants.cpp,1,['flexible'],['flexible']
Modifiability,// These extends are also legal,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:9,extend,extends,9,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,1,['extend'],['extends']
Modifiability,"// These files need to be available everywhere, cache and sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:58,sandbox,sandbox,58,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Modifiability,// These five lines (& possibly the above member function pointer; // handling) might be able to be refactored to use similar code in; // CodeGenModule::getMemberPointerConstant,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:100,refactor,refactored,100,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['refactor'],['refactored']
Modifiability,"// These instructions only exist converting from i32 to f32. We can handle; // smaller integers by generating an extra extend, but larger ones would; // be lossy. We also can't handle anything other than 2 or 4 lanes, since; // these intructions only support v2i32/v4i32 types.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:119,extend,extend,119,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// These kinds don't have assigned type IDs (they might be the resources; // of invalid kind, expand to many resource structures in .res files,; // or have variable type ID). In order to avoid ID clashes with IDs above,; // we assign the kinds the values 256 and larger.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h:156,variab,variable,156,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceScriptStmt.h,1,['variab'],['variable']
Modifiability,// These member variables below are used for avoiding being passed; // repeatedly in recursion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CoverageReport.h:16,variab,variables,16,interpreter/llvm-project/llvm/tools/llvm-cov/CoverageReport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-cov/CoverageReport.h,1,['variab'],['variables']
Modifiability,// These operators can all arbitrarily be extended if their inputs can.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:42,extend,extended,42,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extended']
Modifiability,// These operators can all arbitrarily be extended or truncated.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:42,extend,extended,42,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extended']
Modifiability,"// These queries ask for a single size_t result for a given dimension index, e.g; // size_t get_global_id(uint dimindex). In SPIR-V, the builtins corresonding to; // these values are all vec3 types, so we need to extract the correct index or; // return defaultVal (0 or 1 depending on the query). We also handle extending; // or tuncating in case size_t does not match the expected result type's; // bitwidth.; //; // For a constant index >= 3 we generate:; // %res = OpConstant %SizeT 0; //; // For other indices we generate:; // %g = OpVariable %ptr_V3_SizeT Input; // OpDecorate %g BuiltIn XXX; // OpDecorate %g LinkageAttributes ""__spirv_BuiltInXXX""; // OpDecorate %g Constant; // %loadedVec = OpLoad %V3_SizeT %g; //; // Then, if the index is constant < 3, we generate:; // %res = OpCompositeExtract %SizeT %loadedVec idx; // If the index is dynamic, we generate:; // %tmp = OpVectorExtractDynamic %SizeT %loadedVec %idx; // %cmp = OpULessThan %bool %idx %const_3; // %res = OpSelect %SizeT %cmp %tmp %const_0; //; // If the bitwidth of %res does not match the expected return type, we add an; // extend or truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp:312,extend,extending,312,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVBuiltins.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,// These should happen AFTER plugins have been loaded!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp:29,plugin,plugins,29,interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/FrontendTool/ExecuteCompilerInvocation.cpp,1,['plugin'],['plugins']
Modifiability,// These should not have an inheritance path.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp:28,inherit,inheritance,28,interpreter/llvm-project/clang/lib/AST/Expr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Expr.cpp,1,['inherit'],['inheritance']
Modifiability,// These special variables are known to hold values which are not; // reference-counted pointers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h:17,variab,variables,17,interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/ObjCARCAnalysisUtils.h,1,['variab'],['variables']
Modifiability,"// These two computations may sign-overflow. Here is why that is okay:; //; // We know that the induction variable does not sign-overflow on any; // iteration except the last one, and it starts at `Start` and ends at; // `End`, decrementing by one every time.; //; // * if `Smallest` sign-overflows we know `End` is `INT_SMAX`. Since the; // induction variable is decreasing we know that the smallest value; // the loop body is actually executed with is `INT_SMIN` == `Smallest`.; //; // * if `Greatest` sign-overflows, we know it can only be `INT_SMIN`. In; // that case, `Clamp` will always return `Smallest` and; // [`Result.LowLimit`, `Result.HighLimit`) = [`Smallest`, `Smallest`); // will be an empty range. Returning an empty range is always safe.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:106,variab,variable,106,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,2,['variab'],['variable']
Modifiability,"// These two variables are here to redirect the standard output to; // a file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx:13,variab,variables,13,gui/fitpanel/test/UnitTesting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/test/UnitTesting.cxx,1,['variab'],['variables']
Modifiability,"// These two variables differ on x32, which is a 64-bit target with a; // 32-bit alloca.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DynAllocaExpander.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/Target/X86/X86DynAllocaExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86DynAllocaExpander.cpp,1,['variab'],['variables']
Modifiability,// These types are never variably-modified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:25,variab,variably-modified,25,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,2,['variab'],['variably-modified']
Modifiability,// These types can be variably-modified but should never need to; // further decay.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:22,variab,variably-modified,22,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variably-modified']
Modifiability,"// These types can be variably-modified. All these modifications; // preserve structure except as noted by comments.; // TODO: if we ever care about optimizing VLAs, there are no-op; // optimizations available here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:22,variab,variably-modified,22,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variably-modified']
Modifiability,// These types should never be variably-modified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:31,variab,variably-modified,31,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variably-modified']
Modifiability,// These variables are typically set by vcvarsall.bat; // when launching a developer command prompt.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:9,variab,variables,9,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,1,['variab'],['variables']
Modifiability,"// These variables are used for the following forms:; // Addr: (OuterDisp); // RegMask: RegMask (as register mask); // Reg: %OuterReg; // RegIndirect: (%OuterReg); // RegPostIncrement: (%OuterReg)+; // RegPreDecrement: -(%OuterReg); // RegIndirectDisplacement: OuterDisp(%OuterReg); // RegIndirectDisplacementIndex:; // OuterDisp(%OuterReg, %InnerReg.Size * Scale, InnerDisp)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/AsmParser/M68kAsmParser.cpp:9,variab,variables,9,interpreter/llvm-project/llvm/lib/Target/M68k/AsmParser/M68kAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/AsmParser/M68kAsmParser.cpp,1,['variab'],['variables']
Modifiability,// These variables manage the list of processed object files.; // The mutex and condition variable are to ensure that this is thread safe.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp:9,variab,variables,9,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinker.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// They match. We can use the stack home because the debug intrinsics; // state that an assignment happened here, and we know that specific; // assignment was the last one to take place in memory for this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:205,variab,variable,205,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,// Thin wrapper around preserveDebugSections to be used as a standalone plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h:72,plugin,plugin,72,interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ExecutionEngine/Orc/Debugging/DebugInfoSupport.h,1,['plugin'],['plugin']
Modifiability,"// This 'encoding' section relies on font metrics format; // attached to font objects by, among others,; // ""Willow Systems' standard_font_metrics plugin""; // see jspdf.plugin.standard_font_metrics.js for format; // of the font.metadata.encoding Object.; // It should be something like; // .encoding = {'codePages':['WinANSI....'], 'WinANSI...':{code:code, ...}}; // .widths = {0:width, code:width, ..., 'fof':divisor}; // .kerning = {code:{previous_char_code:shift, ..., 'fof':-divisor},...}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:147,plugin,plugin,147,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['plugin'],['plugin']
Modifiability,"// This (complex pattern) function is meant to detect a sign-extension; // i32->i64 on a per-operand basis. This would allow writing single; // patterns that would cover a number of combinations of different ways; // a sign-extensions could be written. For example:; // (mul (DetectUseSxtw x) (DetectUseSxtw y)) -> (M2_dpmpyss_s0 x y); // could match either one of these:; // (mul (sext x) (sext_inreg y)); // (mul (sext-load *p) (sext_inreg y)); // (mul (sext_inreg x) (sext y)); // etc.; //; // The returned value will have type i64 and its low word will; // contain the value being extended. The high bits are not specified.; // The returned type is i64 because the original type of N was i64,; // but the users of this function should only use the low-word of the; // result, e.g.; // (mul sxtw:x, sxtw:y) -> (M2_dpmpyss_s0 (LoReg sxtw:x), (LoReg sxtw:y))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:585,extend,extended,585,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// This CallbackVH updates its ValueMap when the contained Value changes,; // according to the user's preferences expressed through the Config object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h:136,Config,Config,136,interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/ValueMap.h,1,['Config'],['Config']
Modifiability,"// This DBG_VALUE has 'Reg' (the current LiveInterval's register) as; // its operand. If this DBG_VALUE's slot index is within other; // registers' live ranges, this DBG_VALUE should be undefed. For; // example, suppose %0 and %1 are to be coalesced into %0.; // ; %0's live range starts; // %0 = value_0; // DBG_VALUE %0, !""a"", ... (a); // DBG_VALUE %1, !""b"", ... (b); // use %0; // ; %0's live range ends; // ...; // ; %1's live range starts; // %1 = value_1; // DBG_VALUE %0, !""c"", ... (c); // DBG_VALUE %1, !""d"", ... (d); // use %1; // ; %1's live range ends; //; // In this code, (b) and (c) should be set to undef. After the two; // registers are coalesced, (b) will incorrectly say the variable; // ""b""'s value is 'value_0', and (c) will also incorrectly say the; // variable ""c""'s value is value_1. Note it doesn't actually matter; // which register they are coalesced into (%0 or %1); (b) and (c); // should be set to undef as well if they are coalesced into %1.; //; // This happens DBG_VALUEs are not included when computing live; // ranges.; //; // Note that it is not possible for this DBG_VALUE to be; // simultaneously within 'Reg''s live range and one of other coalesced; // registers' live ranges because if their live ranges overlapped they; // would have not been selected as a coalescing candidate in the first; // place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp:693,variab,variable,693,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegColoring.cpp,2,['variab'],['variable']
Modifiability,// This a memory operand or a register. We have some parsing complications; // as a '(' may be part of an immediate expression or the addressing mode; // block. This is complicated by the fact that an assembler-level variable; // may refer either to a register or an immediate expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:217,variab,variable,217,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['variab'],['variable']
Modifiability,// This allows induction variables w/non-constant steps.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:25,variab,variables,25,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variables']
Modifiability,"// This analysis aims to remove redundant DBG_VALUEs by going backward; // in the basic block and removing all but the last DBG_VALUE for any; // given variable in a set of consecutive DBG_VALUE instructions.; // For example:; // (1) DBG_VALUE $edi, !""var1"", ...; // (2) DBG_VALUE $esi, !""var2"", ...; // (3) DBG_VALUE $edi, !""var1"", ...; // ...; // in this case, we can remove (1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:152,variab,variable,152,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['variab'],['variable']
Modifiability,// This anchor is used to force the linker to link in the generated object file; // and thus register the plugin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/AllTUsExecution.cpp:106,plugin,plugin,106,interpreter/llvm-project/clang/lib/Tooling/AllTUsExecution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/AllTUsExecution.cpp,2,['plugin'],['plugin']
Modifiability,// This and only this kind of non-signed ICmpInst is to be replaced with; // the comparing of the value of the created global init bool later in; // optimizeGlobalAddressOfAllocation for the global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp:198,variab,variable,198,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalOpt.cpp,1,['variab'],['variable']
Modifiability,"// This array encodes the indices that the vector sign extend instructions; // extract from when extending from one type to another for both BE and LE.; // The right nibble of each byte corresponds to the LE incides.; // and the left nibble of each byte corresponds to the BE incides.; // For example: 0x3074B8FC byte->word; // For LE: the allowed indices are: 0x0,0x4,0x8,0xC; // For BE: the allowed indices are: 0x3,0x7,0xB,0xF; // For example: 0x000070F8 byte->double word; // For LE: the allowed indices are: 0x0,0x8; // For BE: the allowed indices are: 0x7,0xF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:55,extend,extend,55,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// This block declares the variable (uninitialized), and is reachable; // from a block that initializes the variable. We can't guarantee to; // give an earlier location for the diagnostic (and it appears that; // this code is intended to be reachable) so give a diagnostic here; // and go no further down this path.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,2,['variab'],['variable']
Modifiability,"// This block inevitably leads to the use. If we have an edge from here; // to a post-dominator block, and the variable is uninitialized on that; // edge, we have found a bug.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:111,variab,variable,111,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,// This block initializes the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,"// This can return overflow, underflow, or inexact; we don't care.; // FIXME need to be more flexible about rounding mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,flexible,flexible,93,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,4,['flexible'],['flexible']
Modifiability,// This catches constant members *and* variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:39,variab,variables,39,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"// This catchswitch has no parent to inherit constraints from, and; // none of its descendants can have an unwind edge that exits it and; // targets another funclet in the inlinee. It may or may not have a; // descendant that definitively has an unwind to caller. In either; // case, we'll have to assume that any unwinds out of it may need to; // be routed to the caller, so treat it as though it has a definitive; // unwind to caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:37,inherit,inherit,37,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['inherit'],['inherit']
Modifiability,"// This check is here to avoid asserts in debug mode (LLVMDEV env variable set)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:66,variab,variable,66,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['variab'],['variable']
Modifiability,// This checks the preservation of original debug variable intrinsics.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:50,variab,variable,50,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['variab'],['variable']
Modifiability,// This class can be extended with other tables which will help to reason; // about ranges more precisely.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:21,extend,extended,21,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['extend'],['extended']
Modifiability,"// This class defines the interface for the class registration and; // the TClass creation. To modify the default behavior, one would; // inherit from this class and overload ROOT::DefineBehavior().; // See TQObject.h and table/inc/Ttypes.h for examples.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h:138,inherit,inherit,138,core/base/inc/Rtypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/inc/Rtypes.h,1,['inherit'],['inherit']
Modifiability,// This class extends ScheduleDAGInstrs and overrides the schedule method; // to build the dependence graph.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DFAPacketizer.h:14,extend,extends,14,interpreter/llvm-project/llvm/include/llvm/CodeGen/DFAPacketizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/DFAPacketizer.h,1,['extend'],['extends']
Modifiability,"// This class introduces polymorphism, so we need a vftable to store the; // RTTI information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:25,polymorphi,polymorphism,25,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['polymorphi'],['polymorphism']
Modifiability,// This class stores the memory -> broadcast folding tables. It is instantiated; // as a function scope static variable to lazily init the folding table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrFoldTables.cpp:111,variab,variable,111,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrFoldTables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrFoldTables.cpp,1,['variab'],['variable']
Modifiability,// This class stores the memory unfolding tables. It is instantiated as a; // function scope static variable to lazily init the unfolding table.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrFoldTables.cpp:100,variab,variable,100,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrFoldTables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrFoldTables.cpp,1,['variab'],['variable']
Modifiability,"// This code deals with branches which hold C arrays of variable size. It can happen that the buffers; // associated to those is re-allocated. As a result the value of the pointer can change therewith; // leaving associated to the branch of the output tree an invalid pointer.; // With this code, we set the value of the pointer in the output branch anew when needed.; // Nota bene: the extra "",0"" after the invocation of SetAddress, is because that method returns void and; // we need an int for the expander list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:56,variab,variable,56,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,2,['variab'],['variable']
Modifiability,"// This code essentially performs a ""mark-and-sweep"" of the VariableBindings.; // The roots are any Block-level exprs and Decls that our liveness algorithm; // tells us are live. We then see what Decls they may reference, and keep; // those around. This code more than likely can be made faster, and the; // frequency of which this method is called should be experimented with; // for optimum performance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ProgramState.cpp:60,Variab,VariableBindings,60,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ProgramState.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ProgramState.cpp,1,['Variab'],['VariableBindings']
Modifiability,"// This code is very, very similar to PEI::calculateFrameObjectOffsets().; // It really should be refactored to share code. Until then, changes; // should keep in mind that there's tight coupling between the two.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFrameInfo.cpp:98,refactor,refactored,98,interpreter/llvm-project/llvm/lib/CodeGen/MachineFrameInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFrameInfo.cpp,2,"['coupling', 'refactor']","['coupling', 'refactored']"
Modifiability,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:8,config,configuration,8,roofit/roofitcore/src/RooAbsTestStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx,4,"['config', 'variab']","['configuration', 'variable']"
Modifiability,// This controls whether or not we emit RTTI data for polymorphic types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:54,polymorphi,polymorphic,54,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,1,['polymorphi'],['polymorphic']
Modifiability,"// This corresponds to the NotEligibleToImport being set on the summary,; // which can happen in a few different cases (e.g. local that can't be; // renamed or promoted because it is referenced on a llvm*.used variable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:210,variab,variable,210,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['variab'],['variable']
Modifiability,"// This could be a newly inserted instruction, in which case, we won't; // find a value number, and should give up before we hurt ourselves.; // FIXME: Rewrite the infrastructure to let it easier to value number; // and process newly inserted instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp:152,Rewrite,Rewrite,152,interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/GVN.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// This could be an optional ""shift"" or ""extend"" operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AsmParser/AArch64AsmParser.cpp,1,['extend'],['extend']
Modifiability,// This could still be a sign-extended extract.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp:30,extend,extended,30,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonBitSimplify.cpp,1,['extend'],['extended']
Modifiability,"// This covers the case where the incoming attribute has the higher; // priority. The higher priority namespace is applied in all cases; // EXCEPT when both of the namespaces are default inherited, and the; // closest inherited default is the lower priority one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:187,inherit,inherited,187,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,2,['inherit'],['inherited']
Modifiability,"// This covers the case where the incoming node either has a prefix; // namespace, or an inherited default namespace. Since the namespace; // may not yet be defined in the original tree we do a searchOrDefine; // for it, and then set the namespace equal to it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:89,inherit,inherited,89,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,1,['inherit'],['inherited']
Modifiability,// This creates target external symbol for a function parameter.; // Name of the symbol is composed from its index and the function name.; // Negative index corresponds to special parameter (unsized array) used for; // passing variable arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:227,variab,variable,227,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['variab'],['variable']
Modifiability,// This demonstrates how to force instantiation of some templates in; // -fdelayed-template-parsing mode. (Note: Doing this unconditionally for; // all templates is similar to not using -fdelayed-template-parsig in the; // first place.); // The advantage of doing this in HandleTranslationUnit() is that all; // codegen (when using -add-plugin) is completely finished and this can't; // affect the compiler output.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp:337,plugin,plugin,337,interpreter/llvm-project/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/examples/PrintFunctionNames/PrintFunctionNames.cpp,1,['plugin'],['plugin']
Modifiability,// This designator names a flexible array member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:27,flexible,flexible,27,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['flexible'],['flexible']
Modifiability,"// This doesn't really increase the cost of inlining ever, because; // the stack frame of the inherited constructor is trivial.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp:94,inherit,inherited,94,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCallAndReturn.cpp,1,['inherit'],['inherited']
Modifiability,"// This expr depends in any way on; // - a template parameter, it implies that the resolution of this expr may; // cause instantiation to fail; // - or an error (often in a non-template context); //; // Note that C++ standard doesn't define the instantiation-dependent term,; // we follow the formal definition coming from the Itanium C++ ABI, and; // extend it to errors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:352,extend,extend,352,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['extend'],['extend']
Modifiability,"// This flag indicates whether the current bindings are within the analysis; // that has started from main(). It affects how we perform loads from; // global variables that have initializers: if we have observed the; // program execution from the start and we know that these variables; // have not been overwritten yet, we can be sure that their initializers; // are still relevant. This flag never gets changed when the bindings are; // updated, so it could potentially be moved into RegionStoreManager; // (as if it's the same bindings but a different loading procedure); // however that would have made the manager needlessly stateful.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:158,variab,variables,158,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,2,['variab'],['variables']
Modifiability,// This flag is set by the dyld shared cache.; // A flag indicating that the module has no instances of a @synthesize of a; // superclass variable. This flag used to be consumed by the runtime to work; // around miscompile by gcc.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:138,variab,variable,138,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"// This formatted_raw_ostream inherits from raw_ostream, so it'll do its; // own buffering, and it doesn't need or want TheStream to do another; // layer of buffering underneath. Resize the buffer to what TheStream; // had been using, and tell TheStream not to do its own buffering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h:30,inherit,inherits,30,interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/FormattedStream.h,1,['inherit'],['inherits']
Modifiability,"// This full expression is not instantiation dependent or the variable; // can not be used in a constant expression - which means; // this variable must be odr-used here, so diagnose a; // capture violation early, if the variable is un-captureable.; // This is purely for diagnosing errors early. Otherwise, this; // error would get diagnosed when the lambda becomes capture ready.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,3,['variab'],['variable']
Modifiability,"// This function does roughly the same thing as GenerateThunk, but in a; // very different way, so that va_start and va_end work correctly.; // FIXME: This function assumes ""this"" is the first non-sret LLVM argument of; // a function, and that there is an alloca built in the entry block; // for all accesses to ""this"".; // FIXME: This function assumes there is only one ""ret"" statement per function.; // FIXME: Cloning isn't correct in the presence of indirect goto!; // FIXME: This implementation of thunks bloats codesize by duplicating the; // function definition. There are alternatives:; // 1. Add some sort of stub support to LLVM for cases where we can; // do a this adjustment, then a sibcall.; // 2. We could transform the definition to take a va_list instead of an; // actual variable argument list, then have the thunks (including a; // no-op thunk for the regular definition) call va_start/va_end.; // There's a bit of per-call overhead for this solution, but it's; // better for codesize if the definition is long.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:787,variab,variable,787,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,1,['variab'],['variable']
Modifiability,"// This function emits appropriate linkage directives for; // functions and global variables.; //; // extern function declaration -> .extern; // extern function definition -> .visible; // external global variable with init -> .visible; // external without init -> .extern; // appending -> not allowed, assert.; // for any linkage other than; // internal, private, linker_private,; // linker_private_weak, linker_private_weak_def_auto,; // we emit -> .weak.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:83,variab,variables,83,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// This function emits warning and a corresponding note based on the; // ReadOnlyPlacementAttr attribute. The warning checks that all global variable; // declarations of an annotated type must be const qualified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:141,variab,variable,141,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// This function is copied and adapted from NamedDecl::printQualifiedName(); // By matching each part individually we optimize in a couple of ways:; // - We can exit early on the first failure.; // - We can skip inline/anonymous namespaces without another pass.; // - We print one name at a time, reducing the chance of overflowing the; // inlined space of the SmallString.; // First, match the name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp:31,adapt,adapted,31,interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ASTMatchers/ASTMatchersInternal.cpp,1,['adapt'],['adapted']
Modifiability,// This function replaces all global variables with new variables that have; // trailing redzones. It also creates a function that poisons; // redzones and inserts this function into llvm.global_ctors.; // Sets *CtorComdat to true if the global registration code emitted into the; // asan constructor is comdat-compatible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:37,variab,variables,37,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,2,['variab'],['variables']
Modifiability,// This function returns the environment variable \arg name's value as a UTF-8; // string. \arg Name is assumed to be in UTF-8 encoding too.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h:41,variab,variable,41,interpreter/llvm-project/llvm/include/llvm/Support/Process.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/Process.h,1,['variab'],['variable']
Modifiability,"// This function takes a fully configured measurement; // which may contain several channels and returns; // a workspace holding the combined model; //; // This can be used, for example, within a script to produce; // a combined workspace on-the-fly; //; // This is a static function (for now) to make; // it a one-liner",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:31,config,configured,31,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['config'],['configured']
Modifiability,"// This function takes variable arguments, some of which may have been passed; // in registers %i0-%i5. Variable floating point arguments are never passed; // in floating point registers. They go on %i0-%i5 or on the stack like; // integer arguments.; //; // The va_start intrinsic needs to know the offset to the first variable; // argument.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"// This function takes variable arguments, some of which may have been passed; // in registers %s0-%s8.; //; // The va_start intrinsic needs to know the offset to the first variable; // argument.; // TODO: need to calculate offset correctly once we support f128.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEISelLowering.cpp,2,['variab'],['variable']
Modifiability,"// This function uses goto, so declare all variables up front.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/MicrosoftDemangle.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/lib/Demangle/MicrosoftDemangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Demangle/MicrosoftDemangle.cpp,1,['variab'],['variables']
Modifiability,"// This handles the case when the dereferencing of a member reference; // happens. This is needed, because the AST for dereferencing a; // member reference looks like the following:; // |-MemberExpr; // `-DeclRefExpr; // Without this special case the notes would refer to the whole object; // (struct, class or union variable) instead of just the relevant member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:317,variab,variable,317,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,"// This histo has variable binning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFHistoModels.cxx:18,variab,variable,18,tree/dataframe/src/RDFHistoModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFHistoModels.cxx,1,['variab'],['variable']
Modifiability,// This includes local variables and formal parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:23,variab,variables,23,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"// This insertion will coalesce with the last entry in SibLeaf. We can; // handle it in two ways:; // 1. Extend SibLeaf.stop to b and be done, or; // 2. Extend a to SibLeaf, erase the SibLeaf entry and continue.; // We prefer 1., but need 2 when coalescing to the right as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h:105,Extend,Extend,105,interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/IntervalMap.h,2,['Extend'],['Extend']
Modifiability,"// This is O(|plugins| * |add_plugins|), but since both numbers are; // way below 50 in practice, that's ok.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:14,plugin,plugins,14,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['plugin'],['plugins']
Modifiability,"// This is a ZExt, maybe this is free to extend from one type to another.; // In that case, we would not account for a different use.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:41,extend,extend,41,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"// This is a base cost of 1 for the vadd, plus 3 extract shifts if we; // need to extend the type, as it uses shr(qadd(shl, shl)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:82,extend,extend,82,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// This is a base cost of 1 for the vqadd, plus 3 extract shifts if we; // need to extend the type, as it uses shr(qadd(shl, shl)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:83,extend,extend,83,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,"// This is a bit of a hack because TargetLibraryInfo is a function pass.; // The DFSan pass would need to be refactored to be function pass oriented; // (like MSan is) in order to fit together nicely with TargetLibraryInfo.; // We need this check to prevent them from being instrumented, or wrapped.; // Match on name and number of arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:109,refactor,refactored,109,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['refactor'],['refactored']
Modifiability,// This is a call by-value or some other instruction that takes a; // pointer to the variable. Insert a *value* intrinsic that describes; // the variable by dereferencing the alloca.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:85,variab,variable,85,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,['variab'],['variable']
Modifiability,"// This is a convenience and flag variable that will be null unless the new; // alloca's integer operations should be widened to this integer type due to; // passing isIntegerWideningViable above. If it is non-null, the desired; // integer type will be stored here for easy access during rewriting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,"// This is a dummy method, only here so the ""using"" doesn't fail --; // it will never be called, because this function recurses backwards; // up the inheritance chain to subclasses.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:149,inherit,inheritance,149,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,1,['inherit'],['inheritance']
Modifiability,// This is a global initializer or atexit destructor for a global variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:66,variab,variable,66,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['variab'],['variable']
Modifiability,// This is a global variable. We need to query the main binary; // symbol table to find its address as it might not be in the; // debug map (for common symbols).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dsymutil/MachODebugMapParser.cpp,1,['variab'],['variable']
Modifiability,"// This is a global, non-extern ""C"" declaration, and there is a previous; // non-global extern ""C"" declaration. Diagnose if this is a variable; // declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:134,variab,variable,134,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// This is a host-side global variable. Check that the initializer is; // callable from the host side.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCUDA.cpp,1,['variab'],['variable']
Modifiability,"// This is a pretty light-weight wrapper function; //; // Take a fully configured measurement as well as; // one of its channels; //; // Return a workspace representing that channel; // Do this by first creating a vector of EstimateSummary's; // and this by configuring the workspace with any post-processing; // Get the channel's name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:71,config,configured,71,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,2,['config'],"['configured', 'configuring']"
Modifiability,"// This is a separate function (instead of just in ctor) for historical reasons.; // Its predecessor RooRealMPFE::initVars() was used from multiple ctors, but also; // from RooRealMPFE::constOptimizeTestStatistic at the end, which makes sense,; // because it might change the set of variables. We may at some point want to do; // this here as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx:283,variab,variables,283,roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.cxx,1,['variab'],['variables']
Modifiability,"// This is a sign_extend_inreg. Replace it to take advantage of existing; // DAG Combines. If not eliminated, we will match back to BFE during; // selection.; // TODO: The sext_inreg of extended types ends, although we can could; // handle them in a single BFE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:186,extend,extended,186,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// This is a special case for s_mul_u64. We use; // G_AMDGPU_S_MUL_I64_I32 opcode to represent an s_mul_u64 operation; // where the 33 higher bits are sign-extended and; // G_AMDGPU_S_MUL_U64_U32 opcode to represent an s_mul_u64 operation; // where the 32 higher bits are zero-extended. In case scalar registers are; // selected, both opcodes are lowered as s_mul_u64. If the vector registers; // are selected, then G_AMDGPU_S_MUL_I64_I32 and; // G_AMDGPU_S_MUL_U64_U32 are lowered with a vector mad instruction.; // Insert basic copies.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:156,extend,extended,156,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,2,['extend'],['extended']
Modifiability,// This is a special case of s_mul_u64 where all the operands are either; // zero extended or sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:82,extend,extended,82,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,2,['extend'],['extended']
Modifiability,"// This is a special case, as it does not gather, but at the same time; // we are not extending buildTree_rec() towards the operands.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:86,extend,extending,86,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,2,['extend'],['extending']
Modifiability,// This is a successor we need to rewrite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp:34,rewrite,rewrite,34,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixIrreducibleControlFlow.cpp,1,['rewrite'],['rewrite']
Modifiability,"// This is a template variable, print the expanded template arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// This is a variable declaration, so traverse the definition.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:13,variab,variable,13,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,2,['variab'],['variable']
Modifiability,"// This is a variable shift, so we can't shift the demand mask by a known; // amount. But if we are not demanding high bits, then we are not; // demanding those bits from the pre-shifted operand either.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,variab,variable,13,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['variab'],['variable']
Modifiability,"// This is a vector load that legalizes to a larger type than the vector; // itself. Unless the corresponding extending load or truncating store is; // legal, then this will scalarize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h:110,extend,extending,110,interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/BasicTTIImpl.h,1,['extend'],['extending']
Modifiability,// This is a workaround carried over from Clang which prevents undesired; // optimisation of internal variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:102,variab,variables,102,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variables']
Modifiability,"// This is already sign / zero extended, so try to fold away extra BFEs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:31,extend,extended,31,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['extend'],['extended']
Modifiability,// This is an extended namespace definition.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:14,extend,extended,14,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['extend'],['extended']
Modifiability,"// This is an extended vector subset, use getExtVectorComp",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:14,extend,extended,14,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,1,['extend'],['extended']
Modifiability,// This is an extending load from a sub-dword size. Widen the memory; // access size to 4 bytes and clear the extra high bits appropriately,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:14,extend,extending,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extending']
Modifiability,"// This is an induction PHI. Check that the only users are PHI; // nodes, and induction variable update binary operators.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:88,variab,variable,88,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['variab'],['variable']
Modifiability,// This is for imported module with renamed entities (such as variables and; // subprograms).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:62,variab,variables,62,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['variab'],['variables']
Modifiability,"// This is here to avoid to use the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:36,plugin,plugin,36,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['plugin'],['plugin']
Modifiability,"// This is largely a copy of AsmParser's ParseDirectiveComm extended to; // accept a 3rd argument, AccessAlignment which indicates the smallest; // memory access made to the symbol, expressed in bytes. If no; // AccessAlignment is specified it defaults to the Alignment Value.; // Hexagon's .lcomm:; // .lcomm Symbol, Length, Alignment, AccessAlignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/AsmParser/HexagonAsmParser.cpp:60,extend,extended,60,interpreter/llvm-project/llvm/lib/Target/Hexagon/AsmParser/HexagonAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/AsmParser/HexagonAsmParser.cpp,1,['extend'],['extended']
Modifiability,"// This is not always beneficial to transform. Exts can be incorporated into; // loads, Truncs can be folded into stores.; // Truncs are usually the same number of instructions,; // VSTRH.32(A);VSTRH.32(B) vs VSTRH.16(VMOVNT A, B) with interleaving; // Exts are unfortunately more instructions in the general case:; // A=VLDRH.32; B=VLDRH.32;; // vs with interleaving:; // T=VLDRH.16; A=VMOVNB T; B=VMOVNT T; // But those VMOVL may be folded into a VMULL.; // But expensive extends/truncs are always good to remove. FPExts always; // involve extra VCVT's so are always considered to be beneficial to convert.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp:474,extend,extends,474,interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MVELaneInterleavingPass.cpp,1,['extend'],['extends']
Modifiability,// This is not the right CC for (e.g.) a variable initialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,"// This is often a no-op; instcombine rewrites this for us. No-op; // getUnderlyingObject calls are fast, though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:38,rewrite,rewrites,38,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['rewrite'],['rewrites']
Modifiability,"// This is only really a signed overflow check if the inputs have been; // sign-extended; check for that condition. For example, if CI2 is 2^31 and; // the operands of the add are 64 bits wide, we need at least 33 sign bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:80,extend,extended,80,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['extend'],['extended']
Modifiability,// This is required because the spelling of the function used to determine; // whether inline is specified or not differs between the polymorphic types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h:134,polymorphi,polymorphic,134,interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ASTMatchers/ASTMatchers.h,1,['polymorphi'],['polymorphic']
Modifiability,// This is similar to 'CheckDispatchOnce' in the MacOSXAPIChecker.; // They can possibly be refactored.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UnixAPIChecker.cpp:92,refactor,refactored,92,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UnixAPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UnixAPIChecker.cpp,1,['refactor'],['refactored']
Modifiability,"// This is something like an NRVO variable, where the pointer has been; // spilt to the stack. It should end up being a memory location, with; // the pointer to the variable loaded off the stack with a deref:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variable']
Modifiability,// This is the base class from which the constructor was inherited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:57,inherit,inherited,57,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// This is the first time we have referenced this variable template; // specialization. Create the canonical declaration and add it to; // the set of specializations, based on the closest partial specialization; // that it represents. That is,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:50,variab,variable,50,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,"// This is the initializing declaration. If it would inherit 'constinit',; // that's ill-formed. (Note that we do not apply this to the attribute; // form).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:53,inherit,inherit,53,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inherit'],['inherit']
Modifiability,"// This is used to handle spills for 128/256-bit registers when we have AVX512,; // but not VLX. If it uses an extended register we need to use an instruction; // that loads the lower 128/256-bit, but is available with only AVX512F.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:111,extend,extended,111,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// This is used to handle spills for 128/256-bit registers when we have AVX512,; // but not VLX. If it uses an extended register we need to use an instruction; // that stores the lower 128/256-bit, but is available with only AVX512F.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:111,extend,extended,111,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extended']
Modifiability,// This is useful for variable-length instruction sets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp:22,variab,variable-length,22,interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-mc-assemble-fuzzer/llvm-mc-assemble-fuzzer.cpp,2,['variab'],['variable-length']
Modifiability,"// This load needs splitting into power of 2 sized loads.; //; // Our strategy here is to generate anyextending loads for the smaller; // types up to next power-2 result type, and then combine the two larger; // result values together, before truncating back down to the non-pow-2; // type.; // E.g. v1 = i24 load =>; // v2 = i32 zextload (2 byte); // v3 = i32 load (1 byte); // v4 = i32 shl v3, 16; // v5 = i32 or v4, v2; // v1 = i24 trunc v5; // By doing this we generate the correct truncate which should get; // combined away as an artifact with a matching extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:561,extend,extend,561,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,// This looks like a variable or function declaration. The type is; // probably missing. We're done parsing decl-specifiers.; // But only if we are not in a function prototype scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:21,variab,variable,21,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,1,['variab'],['variable']
Modifiability,"// This loop re-rolling transformation aims to transform loops like this:; //; // int foo(int a);; // void bar(int *x) {; // for (int i = 0; i < 500; i += 3) {; // foo(i);; // foo(i+1);; // foo(i+2);; // }; // }; //; // into a loop like this:; //; // void bar(int *x) {; // for (int i = 0; i < 500; ++i); // foo(i);; // }; //; // It does this by looking for loops that, besides the latch code, are composed; // of isomorphic DAGs of instructions, with each DAG rooted at some increment; // to the induction variable, and where each DAG is isomorphic to the DAG; // rooted at the induction variable (excepting the sub-DAGs which root the; // other induction-variable increments). In other words, we're looking for loop; // bodies of the form:; //; // %iv = phi [ (preheader, ...), (body, %iv.next) ]; // f(%iv); // %iv.1 = add %iv, 1 <-- a root increment; // f(%iv.1); // %iv.2 = add %iv, 2 <-- a root increment; // f(%iv.2); // %iv.scale_m_1 = add %iv, scale-1 <-- a root increment; // f(%iv.scale_m_1); // ...; // %iv.next = add %iv, scale; // %cmp = icmp(%iv, ...); // br %cmp, header, exit; //; // where each f(i) is a set of instructions that, collectively, are a function; // only of i (and other loop-invariant values).; //; // As a special case, we can also reroll loops like this:; //; // int foo(int);; // void bar(int *x) {; // for (int i = 0; i < 500; ++i) {; // x[3*i] = foo(0);; // x[3*i+1] = foo(0);; // x[3*i+2] = foo(0);; // }; // }; //; // into this:; //; // void bar(int *x) {; // for (int i = 0; i < 1500; ++i); // x[i] = foo(0);; // }; //; // in which case, we're looking for inputs like this:; //; // %iv = phi [ (preheader, ...), (body, %iv.next) ]; // %scaled.iv = mul %iv, scale; // f(%scaled.iv); // %scaled.iv.1 = add %scaled.iv, 1; // f(%scaled.iv.1); // %scaled.iv.2 = add %scaled.iv, 2; // f(%scaled.iv.2); // %scaled.iv.scale_m_1 = add %scaled.iv, scale-1; // f(%scaled.iv.scale_m_1); // ...; // %iv.next = add %iv, 1; // %cmp = icmp(%iv, ...); // br %cmp, header, exit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:507,variab,variable,507,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,3,['variab'],['variable']
Modifiability,"// This macro makes available a variable D, the passed-in decl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:32,variab,variable,32,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,1,['variab'],['variable']
Modifiability,"// This macro plots the distributions of the different input variables overlaid on; // the sum of importance per bin.; // The scale goes from violett (no importance) to red (high importance).; // Areas where many important rules are active, will thus be very red.; //; // input: - Input file (result from TMVA),; // - normal/decorrelated/PCA; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/rulevis.cxx:61,variab,variables,61,tmva/tmvagui/src/rulevis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/rulevis.cxx,3,['variab'],['variables']
Modifiability,"// This macro plots the distributions of the different input variables overlaid on; // the sum of importance per bin.; // The scale goes from violett (no importance); to red (high importance).; // Areas where many important rules are active, will thus be very red.; //; // input: - Input file (result from TMVA),; // - normal/decorrelated/PCA; // - use of TMVA plotting TStyle",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/rulevis.h:61,variab,variables,61,tmva/tmvagui/inc/TMVA/rulevis.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/inc/TMVA/rulevis.h,3,['variab'],['variables']
Modifiability,"// This macro unifies the traversal of class, variable and function; // template declarations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:46,variab,variable,46,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,1,['variab'],['variable']
Modifiability,"// This method extends an input value to 64 bit if input is 32-bit integer.; // While selecting instructions in BitPermutationSelector in 64-bit mode,; // an input value can be a 32-bit integer if a ZERO_EXTEND node is included.; // In such case, we extend it to 64 bit to be consistent with other values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:15,extend,extends,15,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,"// This method is much like buildMLocValueMap: but focuses on a single; // LexicalScope at a time. Pick out a set of blocks and variables that are; // to have their value assignments solved, then run our dataflow algorithm; // until a fixedpoint is reached.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:128,variab,variables,128,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// This method lets you pass variables from ROOT to R.; // The template T should be a supported ROOT datatype and; // the TString's name is the name of the variable in the R environment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRInterface.h:29,variab,variables,29,bindings/r/inc/TRInterface.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/r/inc/TRInterface.h,2,['variab'],"['variable', 'variables']"
Modifiability,"// This method tries to turn a variable array into a constant; // array even when the size isn't an ICE. This is necessary; // for compatibility with code that depends on gcc's buggy; // constant expression folding, like struct {char x[(int)(char*)2];}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// This might be an empty base, in which case it could extend outside the; // bounds of the parent class.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyClassLayoutGraphicalDumper.cpp:55,extend,extend,55,interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyClassLayoutGraphicalDumper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-pdbutil/PrettyClassLayoutGraphicalDumper.cpp,1,['extend'],['extend']
Modifiability,"// This might be either aggregate-initialization of a member or; // initialization of a std::initializer_list object. Regardless,; // we should recursively lifetime-extend that initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:165,extend,extend,165,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,// This must come after the check for constants because closure-captured; // constant variables may appear in UnknownSpaceRegion.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp:86,variab,variables,86,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RegionStore.cpp,1,['variab'],['variables']
Modifiability,// This needs to duplicate a small amount of code from; // ParseStructUnionBody() for things that should work in both; // C struct and in Objective-C class instance variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:165,variab,variables,165,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['variab'],['variables']
Modifiability,"// This operation also isn't safe with AND, OR, XOR when the boolean type is; // 0/1 and the select operands aren't also booleans, as we need an all-ones; // vector constant to mask with.; // FIXME: Sign extend 1 to all ones if that's legal on the target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:204,extend,extend,204,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,1,['extend'],['extend']
Modifiability,"// This opt tries to convert the following imm form to an index form to save an; // add for stack variables.; // Return false if no such pattern found.; //; // ADDI instr: ToBeChangedReg = ADDI FrameBaseReg, OffsetAddi; // ADD instr: ToBeDeletedReg = ADD ToBeChangedReg(killed), ScaleReg; // Imm instr: Reg = op OffsetImm, ToBeDeletedReg(killed); //; // can be converted to:; //; // new ADDI instr: ToBeChangedReg = ADDI FrameBaseReg, (OffsetAddi + OffsetImm); // Index instr: Reg = opx ScaleReg, ToBeChangedReg(killed); //; // In order to eliminate ADD instr, make sure that:; // 1: (OffsetAddi + OffsetImm) must be int16 since this offset will be used in; // new ADDI instr and ADDI can only take int16 Imm.; // 2: ToBeChangedReg must be killed in ADD instr and there is no other use; // between ADDI and ADD instr since its original def in ADDI will be changed; // in new ADDI instr. And also there should be no new def for it between; // ADD and Imm instr as ToBeChangedReg will be used in Index instr.; // 3: ToBeDeletedReg must be killed in Imm instr and there is no other use; // between ADD and Imm instr since ADD instr will be eliminated.; // 4: ScaleReg must not be redefined between ADD and Imm instr since it will be; // moved to Index instr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:98,variab,variables,98,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['variab'],['variables']
Modifiability,"// This pass expands branches and takes care about the forbidden slot hazards.; // Expanding branches may potentially create forbidden slot hazards for; // MIPSR6, and fixing such hazard may potentially break a branch by extending; // its offset out of range. That's why this pass combine these two tasks, and; // runs them alternately until one of them finishes without any changes. Only; // then we can be sure that all branches are expanded properly and no hazards; // exists.; // Any new pass should go before this pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetMachine.cpp:221,extend,extending,221,interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetMachine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsTargetMachine.cpp,1,['extend'],['extending']
Modifiability,"// This pass performs the following transformation on LLVM IR level required; // for the following translation to SPIR-V:; // - replaces direct usages of aggregate constants with target-specific; // intrinsics;; // - replaces aggregates-related instructions (extract/insert, ld/st, etc); // with a target-specific intrinsics;; // - emits intrinsics for the global variable initializers since IRTranslator; // doesn't handle them and it's not very convenient to translate them; // ourselves;; // - emits intrinsics to keep track of the string names assigned to the values;; // - emits intrinsics to keep track of constants (this is necessary to have an; // LLVM IR constant after the IRTranslation is completed) for their further; // deduplication;; // - emits intrinsics to keep track of original LLVM types of the values; // to be able to emit proper SPIR-V types eventually.; //; // TODO: consider removing spv.track.constant in favor of spv.assign.type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp:364,variab,variable,364,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVEmitIntrinsics.cpp,1,['variab'],['variable']
Modifiability,// This pass will rewrite the tied-def to meet the RegConstraint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:18,rewrite,rewrite,18,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['rewrite'],['rewrite']
Modifiability,"// This path is currently untestable on GlobalISel, since the only platform; // that needs this seems to be Windows, and we fall back on that currently.; // The code still lives here in case that changes.; // Silence warning about unused variable until the code below that uses; // 'GuardCheckFn' is enabled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp:238,variab,variable,238,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp,1,['variab'],['variable']
Modifiability,"// This plugin locates a nearby compile_command.json file, and also infers; // compile commands for files not present in the database.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/JSONCompilationDatabase.cpp:8,plugin,plugin,8,interpreter/llvm-project/clang/lib/Tooling/JSONCompilationDatabase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/JSONCompilationDatabase.cpp,1,['plugin'],['plugin']
Modifiability,"// This provides a post-order numbering of the reverse control flow graph; // Note that it is incomplete in the presence of infinite loops but we don't; // need numbers blocks which don't reach the end of the functions since; // all branches in those blocks are forced live.; // For each block without successors, extend the DFS from the block; // backward through the graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:314,extend,extend,314,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['extend'],['extend']
Modifiability,// This record also inherits from a regular class (non-multiclass)?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:20,inherit,inherits,20,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['inherit'],['inherits']
Modifiability,"// This region corresponds to a declaration, find out if it's a global/extern; // variable named stdin with the proper type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:82,variab,variable,82,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['variab'],['variable']
Modifiability,// This returns true in two cases:; // - The OP code itself indicates that this is an extended instruction.; // - One of MOs has been marked with HMOTF_ConstExtended flag.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:86,extend,extended,86,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,1,['extend'],['extended']
Modifiability,"// This routine could be enhanced to also support:; //; // testAlloc: if true, we test allocator, if it is not default result is negative; // result: 0 : not stl container; // abs(result): code of container 1=vector,2=list,3=deque,4=map; // 5=multimap,6=set,7=multiset; // positive val: we have a vector or list with default allocator to any depth; // like vector<list<vector<int>>>; // negative val: STL container other than vector or list, or non default allocator; // For example: vector<deque<int>> has answer -1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx:25,enhance,enhanced,25,core/clingutils/src/TClingUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/clingutils/src/TClingUtils.cxx,1,['enhance'],['enhanced']
Modifiability,// This routine is only called for variable references.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:35,variab,variable,35,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,1,['variab'],['variable']
Modifiability,// This scope can be safely ignored and eliminating it will reduce the; // size of the debug information. Be sure to collect any variable and scope; // information from the this scope or any of its children and collapse them; // into the parent scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:129,variab,variable,129,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variable']
Modifiability,"// This should only be used as a static variable, which guarantees that this; // will be zero initialized.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h:40,variab,variable,40,interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ManagedStatic.h,1,['variab'],['variable']
Modifiability,"// This stackified reg is a variable that started life at; // Prev.DebugValue, so now that we're popping it we must insert; // a $noreg DBG_VALUE for the variable to end it, right after; // the current instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp:28,variab,variable,28,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugFixup.cpp,2,['variab'],['variable']
Modifiability,// This store is done here rather than in match() to allow; // parseNumericVariableUse() to get the pointer to the class instance; // of the right variable definition corresponding to a given numeric; // variable use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:147,variab,variable,147,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,2,['variab'],['variable']
Modifiability,// This table describes sign- and zero-extend instructions which can be; // folded into a preceding load. All of these extends have an immediate; // (sometimes a mask and sometimes a shift) that's applied after; // extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp:39,extend,extend,39,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,"// This table summarizes how a given variable should be passed to the device; // given its type and the clauses where it appears. This table is based on; // the description in OpenMP 4.5 [2.10.4, target Construct] and; // OpenMP 4.5 [2.15.5, Data-mapping Attribute Rules and Clauses].; //; // =========================================================================; // | type | defaultmap | pvt | first | is_device_ptr | map | res. |; // | |(tofrom:scalar)| | pvt | |has_dv_adr| |; // =========================================================================; // | scl | | | | - | | bycopy|; // | scl | | - | x | - | - | bycopy|; // | scl | | x | - | - | - | null |; // | scl | x | | | - | | byref |; // | scl | x | - | x | - | - | bycopy|; // | scl | x | x | - | - | - | null |; // | scl | | - | - | - | x | byref |; // | scl | x | - | - | - | x | byref |; //; // | agg | n.a. | | | - | | byref |; // | agg | n.a. | - | x | - | - | byref |; // | agg | n.a. | x | - | - | - | null |; // | agg | n.a. | - | - | - | x | byref |; // | agg | n.a. | - | - | - | x[] | byref |; //; // | ptr | n.a. | | | - | | bycopy|; // | ptr | n.a. | - | x | - | - | bycopy|; // | ptr | n.a. | x | - | - | - | null |; // | ptr | n.a. | - | - | - | x | byref |; // | ptr | n.a. | - | - | - | x[] | bycopy|; // | ptr | n.a. | - | - | x | | bycopy|; // | ptr | n.a. | - | - | x | x | bycopy|; // | ptr | n.a. | - | - | x | x[] | bycopy|; // =========================================================================; // Legend:; // scl - scalar; // ptr - pointer; // agg - aggregate; // x - applies; // - - invalid in this combination; // [] - mapped with an array section; // byref - should be mapped by reference; // byval - should be mapped by value; // null - initialize a local variable to null on the device; //; // Observations:; // - All scalar declarations that show up in a map clause have to be passed; // by reference, because they may have been mapped in the enclosing data; // environment.; // - If the scalar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// This template-id is terminated by a token that starts with a '>'.; // Outside C++11 and Objective-C, this is now error recovery.; //; // C++11 allows this when the token is '>>', and in CUDA + C++11 mode, we; // extend that treatment to also apply to the '>>>' token.; //; // Objective-C allows this in its type parameter / argument lists.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp:215,extend,extend,215,interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseTemplate.cpp,1,['extend'],['extend']
Modifiability,"// This tests that variable-length arrays still work -- make sure various modifications; // haven't messed up this basic case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx:19,variab,variable-length,19,tree/tree/test/TBasket.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/TBasket.cxx,1,['variab'],['variable-length']
Modifiability,"// This ugly hack is brought to you courtesy of constructor/destructor ordering; // being unspecified by C++. Basically the problem is that a Statistic object; // gets destroyed, which ends up calling 'GetLibSupportInfoOutputFile()'; // (below), which calls this function. LibSupportInfoOutputFilename used to be; // a global variable, but sometimes it would get destroyed before the Statistic,; // causing havoc to ensue. We ""fix"" this by creating the string the first time; // it is needed and never destroying it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp:326,variab,variable,326,interpreter/llvm-project/llvm/lib/Support/Timer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp,1,['variab'],['variable']
Modifiability,// This variable (and its dummy usage) is to participate in the assert at; // the end of the function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCAssembler.cpp,1,['variab'],['variable']
Modifiability,// This variable goes into the corresponding lexical scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variable']
Modifiability,// This variable has a role when we negate the constraint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/StdLibraryFunctionsChecker.cpp,2,['variab'],['variable']
Modifiability,"// This variable has discardable linkage, we have to add it to @llvm.used to; // ensure it won't get discarded.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,// This variable holds information about the CU of a function with; // abstract_origin.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variable']
Modifiability,"// This variable holds the list of member files to proecess, as given; // on the command line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,1,['variab'],['variable']
Modifiability,// This variable holds the name of the archive file as given on the; // command line.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-ar/llvm-ar.cpp,1,['variab'],['variable']
Modifiability,"// This variable holds variable information for functions with; // abstract_origin globally, across all CUs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,2,['variab'],['variable']
Modifiability,"// This variable holds variable information for functions with; // abstract_origin, but just for the current CU.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,2,['variab'],['variable']
Modifiability,// This variable may have local implicit instantiations that need to be; // instantiated within this scope.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,2,['variab'],['variable']
Modifiability,// This variable might end up being constexpr. Don't diagnose it yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// This variable only captures *explicitly* written conventions, not those; // applied by default via command line flags or target defaults, such as; // thiscall, aapcs, stdcall via -mrtd, etc. Computing that correctly would; // require knowing if this is a C++ instance method or being able to see; // unprototyped FunctionTypes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCall.cpp,1,['variab'],['variable']
Modifiability,// This variable refers to the size and not index in the array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// This variable stores the instruction that has been emitted this cycle. It; // will be added to EmittedInstrs, when AdvanceCycle() or RecedeCycle() is; // called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h:8,variab,variable,8,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNHazardRecognizer.h,1,['variab'],['variable']
Modifiability,"// This variable stores the section ID of the cluster containing eh_pads (if; // all eh_pads are one cluster). If more than one cluster contain eh_pads, we; // set it equal to ExceptionSectionID.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BasicBlockSections.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/BasicBlockSections.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/BasicBlockSections.cpp,1,['variab'],['variable']
Modifiability,// This variable was inlined. Associate it with the InlineSite.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:8,variab,variable,8,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['variab'],['variable']
Modifiability,// This variable will *NOT* be emitted to the object file. It is used; // to pass the list of names referenced to codegen.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['variab'],['variable']
Modifiability,// This was a variable declaration's initialization for which no initializer; // was specified.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:14,variab,variable,14,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['variab'],['variable']
Modifiability,"// This was already the correct extending load result type, so just adjust; // the memory type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp:32,extend,extending,32,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp,1,['extend'],['extending']
Modifiability,// This was probably an attempt to initialize the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp:50,variab,variable,50,interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseExprCXX.cpp,1,['variab'],['variable']
Modifiability,"// This was the final opportunity to salvage this debug information, and it; // couldn't be done. Place an undef DBG_VALUE at this location to terminate; // any earlier variable location.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:169,variab,variable,169,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['variab'],['variable']
Modifiability,// This was the last active variable. Repeat the process from the; // beginning.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:28,variab,variable,28,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,2,['variab'],['variable']
Modifiability,// This will defend against trying to rewrite synthesized expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:38,rewrite,rewrite,38,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,// This will get lowered later into the correct offsets and registers; // via rewriteXFrameIndex.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp:78,rewrite,rewriteXFrameIndex,78,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,1,['rewrite'],['rewriteXFrameIndex']
Modifiability,// This will hold the smallest this offset among overridees of MD.; // This implies that an offset of a non-virtual base will dominate an offset; // of a virtual base to potentially reduce the number of thunks required; // in the derived classes that inherit this method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:251,inherit,inherit,251,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['inherit'],['inherit']
Modifiability,"// This will result in a trellis after tail duplication, so we don't; // need to copy Succ into this predecessor. In the presence; // of a trellis tail duplication can continue to be profitable.; // For example:; // A A; // |\ |\; // | \ | \; // | C | C+BB; // | / | |; // |/ | |; // BB => BB |; // |\ |\/|; // | \ |/\|; // | D | D; // | / | /; // |/ |/; // Succ Succ; //; // After BB was duplicated into C, the layout looks like the one on the; // right. BB and C now have the same successors. When considering; // whether Succ can be duplicated into all its unplaced predecessors, we; // ignore C.; // We can do this because C already has a profitable fallthrough, namely; // D. TODO(iteratee): ignore sufficiently cold predecessors for; // duplication and for this test.; //; // This allows trellises to be laid out in 2 separate chains; // (A,B,Succ,...) and later (C,D,...) This is a reasonable heuristic; // because it allows the creation of 2 fallthrough paths with links; // between them, and we correctly identify the best layout for these; // CFGs. We want to extend trellises that the user created in addition; // to trellises created by tail-duplication, so we just look for the; // CFG.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp:1070,extend,extend,1070,interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineBlockPlacement.cpp,1,['extend'],['extend']
Modifiability,// Thread-local variables cannot have lifetime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:16,variab,variables,16,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// Thread-safe static variables which aren't thread-specific have a; // per-variable guard.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:22,variab,variables,22,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Threadprivate variables must not be captured.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// Threadprivates cannot be shared between threads, so dignose if the base; // is a threadprivate variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:98,variab,variable,98,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Three arguments, create variable with given initial value and range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:27,variab,variable,27,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['variab'],['variable']
Modifiability,"// Thumb VFP instructions are a special case. Because we share their; // encodings between ARM and Thumb modes, and they are predicable in ARM; // mode, the auto-generated decoder will give them an (incorrect); // predicate operand. We need to rewrite these operands based on the IT; // context as a post-pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp:244,rewrite,rewrite,244,interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Disassembler/ARMDisassembler.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Thumb has trouble with negative offsets from the FP. Thumb2 has a limited; // negative range for ldr/str (255), and Thumb1 is positive offsets only.; //; // It's going to be better to use the SP or Base Pointer instead. When there; // are variable sized objects, we can't reference off of the SP, so we; // reserve a Base Pointer.; //; // For Thumb2, estimate whether a negative offset from the frame pointer; // will be sufficient to reach the whole stack frame. If a function has a; // smallish frame, it's less likely to have lots of spills and callee saved; // space, so it's all more likely to be within range of the frame pointer.; // If it's wrong, the scavenger will still enable access to work, it just; // won't be optimal. (We should always be able to reach the emergency; // spill slot from the frame pointer.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp:242,variab,variable,242,interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMBaseRegisterInfo.cpp,1,['variab'],['variable']
Modifiability,"// Thumb-1 can do a limited post-inc load or store as an updating LDM. It; // must be non-extending/truncating, i32, with an offset of 4.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:90,extend,extending,90,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Tighten the stat. errors of the model, and kick bin 0, so the gammas have to adapt",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx:80,adapt,adapt,80,roofit/histfactory/test/testHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/testHistFactory.cxx,1,['adapt'],['adapt']
Modifiability,"// TimedWaitRelative will release the mutex (i.e. equivalent to fM->Unlock),; // then block on the condition variable. Upon return it will lock the mutex.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TThread.cxx:109,variab,variable,109,core/thread/src/TThread.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/src/TThread.cxx,1,['variab'],['variable']
Modifiability,"// To avoid ""sign extending"" i1 to an arbitrary aggregate type, we just do; // an extra ""select"". This results in much more compact IR.; // Sa = select Sb, poisoned, (select b, Sc, Sd)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['extend'],['extending']
Modifiability,"// To avoid needlessly dropping large volumes of variable locations, propagate; // variables through aritifical blocks, i.e. those that don't have any; // instructions in scope at all. To accurately replicate VarLoc; // LiveDebugValues, this means exploring all artificial successors too.; // Perform a depth-first-search to enumerate those blocks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:49,variab,variable,49,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// To be a got equivalent, at least one of its users need to be a constant; // expression used by another global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:113,variab,variable,113,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// To control potential compile time explosion, we choose to be; // conserviate when we have more than one Phi input. It is important; // that we handle the single phi case as that lets us handle LCSSA; // phi nodes and (combined with the recursive phi handling) simple; // pointer induction variable patterns.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp:292,variab,variable,292,interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/BasicAliasAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// To declare a variable as unused only when compiling for Python 3.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:16,variab,variable,16,bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx,1,['variab'],['variable']
Modifiability,"// To determine if the result overflowed in a larger type, we extend the; // input to the larger type, do the multiply (checking if it overflows),; // then also check the high bits of the result to see if overflow happened; // there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:62,extend,extend,62,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// To determine if the result overflowed in the larger type, we extend the; // input to the larger type, do the multiply (checking if it overflows),; // then also check the high bits of the result to see if overflow happened; // there.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,"// To do a good job, if a noalias variable is captured, we need to know if; // the capture point dominates the particular use we're considering.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp:34,variab,variable,34,interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/InlineFunction.cpp,1,['variab'],['variable']
Modifiability,// To emit type record using Codeview MCStreamer adapter,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp:49,adapt,adapter,49,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/CodeViewDebug.cpp,1,['adapt'],['adapter']
Modifiability,"// To extend a bool, we need to use OpSelect between constants.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp:6,extend,extend,6,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp,1,['extend'],['extend']
Modifiability,"// To flag an abort condition: use a local static variable to avoid; // warnings about problems with longjumps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx:50,variab,variable,50,proof/proofplayer/src/TProofPlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofPlayer.cxx,1,['variab'],['variable']
Modifiability,"// To focus on basic collection protocol, this sample program uses; // simple classes inheriting from TObject. One class, TObjString, is a; // collectable string class (a TString wrapped in a TObject) provided; // by the ROOT system. The other class we define below, is an integer; // wrapped in a TObject, just like TObjString.; // TObjNum is a simple container for an integer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx:86,inherit,inheriting,86,test/tcollex.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/tcollex.cxx,1,['inherit'],['inheriting']
Modifiability,// To format JSON insert a variable to trick the code into thinking its; // JavaScript.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/ClangFormat.cpp:27,variab,variable,27,interpreter/llvm-project/clang/tools/clang-format/ClangFormat.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-format/ClangFormat.cpp,1,['variab'],['variable']
Modifiability,"// To guarantee SectionContrib2 is standard layout, we cannot use inheritance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h:66,inherit,inheritance,66,interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/PDB/Native/RawTypes.h,1,['inherit'],['inheritance']
Modifiability,"// To help with overload selection, methods are given a priority based on the; // affinity of Python and C++ types. Priority only matters for methods that have; // an equal number of arguments and types that are possible substitutes (the; // normal selection mechanisms would simply distinguish them otherwise).; // The following types are ordered, in favor (variants implicit):; //; // bool >> long >> int >> short; // double >> long double >> float; // const char* >> char; //; // Further, all integer types are preferred over floating point b/c int to float; // is allowed implicitly, float to int is not.; //; // Special cases that are disliked include void* and unknown/incomplete types.; // Also, moves are preferred over references. std::initializer_list is not a nice; // conversion candidate either, but needs to be higher priority to mix well with; // implicit conversions.; // TODO: extend this to favour classes that are not bases.; // TODO: profile this method (it's expensive, but should be called too often)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:894,extend,extend,894,bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx,1,['extend'],['extend']
Modifiability,"// To mirror old LiveDebugValues, enumerate variables in RPOT order. Otherwise; // the order is unimportant, it just has to be stable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:44,variab,variables,44,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,"// To mitigate https://github.com/llvm/llvm-project/issues/54732,; // we allow ""Mathematical Notation Characters"" in identifiers.; // This is a proposed profile that extends the XID_Start/XID_continue; // with mathematical symbols, superscipts and subscripts digits; // found in some production software.; // https://www.unicode.org/L2/L2022/22230-math-profile.pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:166,extend,extends,166,interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp,1,['extend'],['extends']
Modifiability,"// To see if the truncation caused an overflow, we will extend; // the result and then compare it to the original result.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:56,extend,extend,56,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['extend'],['extend']
Modifiability,"// To support specializing recursive functions, it is important to propagate; // constant arguments because after a first iteration of specialisation, a; // reduced example may look like this:; //; // define internal void @RecursiveFn(i32* arg1) {; // %temp = alloca i32, align 4; // store i32 2 i32* %temp, align 4; // call void @RecursiveFn.1(i32* nonnull %temp); // ret void; // }; //; // Before a next iteration, we need to propagate the constant like so; // which allows further specialization in next iterations.; //; // @funcspec.arg = internal constant i32 2; //; // define internal void @someFunc(i32* arg1) {; // call void @otherFunc(i32* nonnull @funcspec.arg); // ret void; // }; //; // See if there are any new constant values for the callers of \p F via; // stack variables and promote them to global variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionSpecialization.cpp:778,variab,variables,778,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionSpecialization.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionSpecialization.cpp,2,['variab'],['variables']
Modifiability,// To suppress unused variable warning; remove on use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TableGenBackendSkeleton.cpp:22,variab,variable,22,interpreter/llvm-project/llvm/lib/TableGen/TableGenBackendSkeleton.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TableGenBackendSkeleton.cpp,1,['variab'],['variable']
Modifiability,"// To zero extend, just mask off everything except for the first bit (in the; // i1 case).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:11,extend,extend,11,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// ToDo make class variable _theEffi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:19,variab,variable,19,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['variab'],['variable']
Modifiability,"// Touch the block then extend it. This is done on the opposite side of; // static probe where we allocate then touch, to avoid the need of probing the; // tail of the static alloca. Possible scenarios are:; //; // + ---- <- ------------ <- ------------- <- ------------ +; // | |; // [free probe] -> [page alloc] -> [alloc probe] -> [tail alloc] + -> [dyn probe] -> [page alloc] -> [dyn probe] -> [tail alloc] +; // | |; // + <- ----------- <- ------------ <- ----------- <- ------------ +; //; // The property we want to enforce is to never have more than [page alloc] between two probes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:24,extend,extend,24,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// ToyMCSampler configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:16,config,configuration,16,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['config'],['configuration']
Modifiability,// Track post-rewrite users which are PHI nodes and Selects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:14,rewrite,rewrite,14,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['rewrite'],['rewrite']
Modifiability,// Track set in Config overrides everything.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFGraph.cpp:16,Config,Config,16,interpreter/llvm-project/llvm/lib/CodeGen/RDFGraph.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RDFGraph.cpp,1,['Config'],['Config']
Modifiability,// Track the number of distinct lines and variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp:42,variab,variables,42,interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Debugify.cpp,1,['variab'],['variables']
Modifiability,// Track the updated values in an SSA updater to rewrite into SSA form at the; // end.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp:49,rewrite,rewrite,49,interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86SpeculativeLoadHardening.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Track whether a component of the list should be marked as MEMBER_OF some; // combined entry (for partial structs). Only the first PTR_AND_OBJ entry; // in a component list should be marked as MEMBER_OF, all subsequent entries; // do not belong to the base struct. E.g.; // struct S2 s;; // s.ps->ps->ps->f[:]; // (1) (2) (3) (4); // ps(1) is a member pointer, ps(2) is a pointee of ps(1), so it is a; // PTR_AND_OBJ entry; the PTR is ps(1), so MEMBER_OF the base struct. ps(3); // is the pointee of ps(2) which is not member of struct s, so it should not; // be marked as such (it is still PTR_AND_OBJ).; // The variable is initialized to false so that PTR_AND_OBJ entries which; // are not struct members are not considered (e.g. array of pointers to; // data).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:615,variab,variable,615,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variable']
Modifiability,"// TrailingObjectsImpl is somewhat complicated, because it is a; // recursively inheriting template, in order to handle the template; // varargs. Each level of inheritance picks off a single trailing type; // then recurses on the rest. The ""Align"", ""BaseTy"", and; // ""TopTrailingObj"" arguments are passed through unchanged through the; // recursion. ""PrevTy"" is, at each level, the type handled by the; // level right above it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h:80,inherit,inheriting,80,interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/TrailingObjects.h,2,['inherit'],"['inheritance', 'inheriting']"
Modifiability,"// Training sample, independent variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:32,variab,variables,32,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// Transfer values from proxy variables to internal variables of likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooRealL.cxx:30,variab,variables,30,roofit/roofitcore/src/TestStatistics/RooRealL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooRealL.cxx,2,['variab'],['variables']
Modifiability,"// Transform PTEST_ANY(X=OP(PG,...), X) -> PTEST_ANY(PG, X)).; // Later optimizations may rewrite sequence to use the flag-setting variant; // of instruction X to remove PTEST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:90,rewrite,rewrite,90,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['rewrite'],['rewrite']
Modifiability,// Transform a G_SHL with an extended source into a narrower shift if; // possible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:29,extend,extended,29,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,1,['extend'],['extended']
Modifiability,// Transform exec config.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:18,config,config,18,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['config'],['config']
Modifiability,// Transform extended info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:13,extend,extended,13,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,2,['extend'],['extended']
Modifiability,"// Transform loads and stores to pointers in address space 1 to loads and; // stores to WebAssembly global variables, outside linear memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:107,variab,variables,107,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['variab'],['variables']
Modifiability,// Transform managed variables to pointers to managed variables in device code.; // Each use of the original managed variable is replaced by a load from the; // transformed managed variable. The transformed managed variable contains; // the address of managed memory which will be allocated by the runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,5,['variab'],"['variable', 'variables']"
Modifiability,// Transform the captured variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:26,variab,variable,26,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,2,['variab'],['variable']
Modifiability,"// Transform variable xRand, since Foam boundaries are [0,1] and; // fDistr is filled with events which range in [fXmin,fXmax]; //; // Transformation: [0, 1] --> [xmin, xmax]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx:13,variab,variable,13,tmva/tmva/src/PDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoam.cxx,1,['variab'],['variable']
Modifiability,"// Transform vector add(zext i8 to i32, zext i8 to i32); // into sext(add(zext(i8 to i16), zext(i8 to i16)) to i32); // This allows extra uses of saddl/uaddl at the lower vector widths, and less; // extends.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:199,extend,extends,199,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// Transform: (load ch (add x (and (srl y c) Mask))); // to: (load ch (add x (shl (srl y d) d-c))); // where; // Mask = 00..0 111..1 0.0; // | | +-- d-c 0s, and d-c is 0, 1 or 2.; // | +-------- 1s; // +-------------- at most c 0s; // Motivating example:; // DAG combiner optimizes (add x (shl (srl y 5) 2)); // to (add x (and (srl y 3) 1FFFFFFC)); // which results in a constant-extended and(##...,lsr). This transformation; // undoes this simplification for cases where the shl can be folded into; // an addressing mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp:380,extend,extended,380,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAG.cpp,2,['extend'],['extended']
Modifiability,"// Transform; // %dst:gpr(p0) = \; // G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.aarch64.mops.memset.tag),; // \ %dst:gpr(p0), %val:gpr(s64), %n:gpr(s64); // where %dst is updated, into; // %Rd:GPR64common, %Rn:GPR64) = \; // MOPSMemorySetTaggingPseudo \; // %Rd:GPR64common, %Rn:GPR64, %Rm:GPR64; // where Rd and Rn are tied.; // It is expected that %val has been extended to s64 in legalization.; // Note that the order of the size/value operands are swapped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp:365,extend,extended,365,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp,1,['extend'],['extended']
Modifiability,// Transitively search for more arguments by looking at the users of the; // ones we know already. During the search the GTIdArgs vector is extended; // so we cannot cache the size nor can we use a range based for.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:140,extend,extended,140,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,1,['extend'],['extended']
Modifiability,// Translate a clang statement or expression to a TIL expression.; // Also performs substitution of variables; Ctx provides the context.; // Dispatches on the type of S.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:100,variab,variables,100,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,2,['variab'],['variables']
Modifiability,// Translate a variable reference.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:15,variab,variable,15,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,1,['variab'],['variable']
Modifiability,// Traverse all member variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,4,['variab'],['variables']
Modifiability,"// Traverse the CFG in topological order, so all predecessors of a block; // (excluding back-edges) are visited before the block itself. At; // each point in the code, we calculate a Context, which holds the set of; // variable definitions which are visible at that point in execution.; // Visible variables are mapped to their definitions using an array that; // contains all definitions.; //; // At join points in the CFG, the set is computed as the intersection of; // the incoming sets along each edge, E.g.; //; // { Context | VarDefinitions }; // int x = 0; { x -> x1 | x1 = 0 }; // int y = 0; { x -> x1, y -> y1 | y1 = 0, x1 = 0 }; // if (b) x = 1; { x -> x2, y -> y1 | x2 = 1, y1 = 0, ... }; // else x = 2; { x -> x3, y -> y1 | x3 = 2, x2 = 1, ... }; // ... { y -> y1 (x is unknown) | x3 = 2, x2 = 1, ... }; //; // This is essentially a simpler and more naive version of the standard SSA; // algorithm. Those definitions that remain in the intersection are from blocks; // that strictly dominate the current block. We do not bother to insert proper; // phi nodes, because they are not used in our analysis; instead, wherever; // a phi node would be required, we simply remove that definition from the; // context (E.g. x above).; //; // The initial traversal does not capture back-edges, so those need to be; // handled on a separate pass. Whenever the first pass encounters an; // incoming back edge, it duplicates the context, creating new definitions; // that refer back to the originals. (These correspond to places where SSA; // might have to insert a phi node.) On the second pass, these definitions are; // set to NULL if the variable has changed on the back-edge (i.e. a phi; // node was actually required.) E.g.; //; // { Context | VarDefinitions }; // int x = 0, y = 0; { x -> x1, y -> y1 | y1 = 0, x1 = 0 }; // while (b) { x -> x2, y -> y1 | [1st:] x2=x1; [2nd:] x2=NULL; }; // x = x+1; { x -> x3, y -> y1 | x3 = x2 + 1, ... }; // ... { y -> y1 | x3 = 2, x2 = 1, ... }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:219,variab,variable,219,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// Traverse the contexts of inherited C++ classes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:28,inherit,inherited,28,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['inherit'],['inherited']
Modifiability,"// Traverse the operand, looking for constant vectors. Replace them by a; // load of a global variable of constant vector type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp:94,variab,variable,94,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64PromoteConstant.cpp,1,['variab'],['variable']
Modifiability,"// Traversing through all the layers and passing the Layer object to `AddKerasLayer()`; // for adding the equivalent ROperators into the RModel object.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx:30,layers,layers,30,tmva/pymva/src/RModelParser_Keras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/RModelParser_Keras.cxx,1,['layers'],['layers']
Modifiability,// Treat __kindof as a vendor extended type qualifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:30,extend,extended,30,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['extend'],['extended']
Modifiability,// Treat local variables captured by reference in C++ lambdas as escaped.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp:15,variab,variables,15,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/DeadStoresChecker.cpp,1,['variab'],['variables']
Modifiability,"// Treat parameters as implicit; // loop to replace variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:52,variab,variable,52,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,// Treat the current fragment as covering the whole variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:52,variab,variable,52,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['variab'],['variable']
Modifiability,// Treat the new variable as initialized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UninitializedValues.cpp,1,['variab'],['variable']
Modifiability,// Tries to convert a large EXTEND into two smaller EXTENDs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp:28,EXTEND,EXTEND,28,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64LegalizerInfo.cpp,2,['EXTEND'],"['EXTEND', 'EXTENDs']"
Modifiability,// True if no aliasing configuration is found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h:23,config,configuration,23,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.h,1,['config'],['configuration']
Modifiability,"// True if the roots can be zero-extended back to their original type, rather; // than sign-extended. We know that if the leading bits are not demanded, we; // can safely zero-extend. So we initialize IsKnownPositive to True.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp:33,extend,extended,33,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp,3,['extend'],"['extend', 'extended']"
Modifiability,// Truncate if we had to extend above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,extend,extend,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Truncate if we had to extend i16/i8 above.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,extend,extend,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Truncate or extend a boolean vector to the requested number of elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:15,extend,extend,15,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,1,['extend'],['extend']
Modifiability,// Truncate the result of the extended FP_TO_*INT operation to the desired; // size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:30,extend,extended,30,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extended']
Modifiability,"// Truncate with PACKSS if we are truncating a vector with sign-bits; // that extend all the way to the packed/truncated value.; // e.g. Comparison result, sext_in_reg, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:78,extend,extend,78,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Truncate with PACKUS if we are truncating a vector with leading zero; // bits that extend all the way to the packed/truncated value.; // e.g. Masks, zext_in_reg, etc.; // Pre-SSE41 we can only use PACKUSWB.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:86,extend,extend,86,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Truncating/extending stores/loads are also not supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp:14,extend,extending,14,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Try a bunch of different select configuration until a valid one is found.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp:35,config,configuration,35,interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-stress/llvm-stress.cpp,1,['config'],['configuration']
Modifiability,"// Try combining even if fmul has more than one use as it eliminates; // dependency between fadd(fsub) and fmul. However, it can extend liveranges; // for fmul operands, so reject the transformation in register pressure; // reduction mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp:129,extend,extend,129,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,1,['extend'],['extend']
Modifiability,// Try global variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/echo.cpp,1,['variab'],['variable']
Modifiability,// Try matching (B + i) * S.; // TODO: we could extend SLSR to float and vector types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['extend'],['extend']
Modifiability,// Try parsing configuration file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:15,config,configuration,15,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['configuration']
Modifiability,"// Try to account for the following special case:; // 1. ScaleReg is an inductive variable;; // 2. We use it with non-zero offset;; // 3. IV's increment is available at the point of memory instruction.; //; // In this case, we may reuse the IV increment instead of the IV Phi to; // achieve the following advantages:; // 1. If IV step matches the offset, we will have no need in the offset;; // 2. Even if they don't match, we will reduce the overlap of living IV; // and IV increment, that will potentially lead to better register; // assignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// Try to assume variables are implicit (need all arguments to be; // parameters); // loop to check if all arguments are parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:17,variab,variables,17,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,// Try to capture variable-length arrays types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:18,variab,variable-length,18,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable-length']
Modifiability,// Try to combine sext_in_reg of a cmov of constants by extending the constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:56,extend,extending,56,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Try to convert expressions of the form x < k ? k : x (and similar forms); // into more efficient bit operations, which is possible when k is 0 or -1; // On ARM and Thumb-2 which have flexible operand 2 this will result in; // single instructions. On Thumb the shift and the bit operation will be two; // instructions.; // Only allow this transformation on full-width (32-bit) operations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:186,flexible,flexible,186,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['flexible'],['flexible']
Modifiability,// Try to convert multiply of extended operand to narrow negate and shift; // for better analysis.; // This is valid if the shift amount (trailing zeros in the multiplier; // constant) clears more high bits than the bitwidth difference between; // source and destination types:; // ({z/s}ext X) * (-1<<C) --> (zext (-X)) << C,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp:30,extend,extended,30,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineMulDivRem.cpp,1,['extend'],['extended']
Modifiability,"// Try to convert x ** (1/4) and x ** (3/4) into square roots.; // x ** (1/2) is canonicalized to sqrt, so we do not bother with that case.; // TODO: This could be extended (using a target hook) to handle smaller; // power-of-2 fractional exponents.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:164,extend,extended,164,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,// Try to create a debug constant expression for the global variable; // initializer value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SCCP.cpp:60,variab,variable,60,interpreter/llvm-project/llvm/lib/Transforms/IPO/SCCP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/SCCP.cpp,1,['variab'],['variable']
Modifiability,"// Try to create a valid projection integral. If no variables are to be projected,; // create a null projection anyway to bind our normalization over the dependents; // consistently with the way they would be bound with a non-trivial projection.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:52,variab,variables,52,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variables']
Modifiability,// Try to emit code for scalar constant instead of emitting LValue and; // loading it because we are not guaranteed to have an l-value. One of such; // cases is DeclRefExpr referencing non-odr-used constant-evaluated variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:217,variab,variable,217,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['variab'],['variable']
Modifiability,// Try to emit static variable member expressions as DREs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExpr.cpp,1,['variab'],['variable']
Modifiability,// Try to extend the entire expression tree to the wide destination type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:10,extend,extend,10,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,2,['extend'],['extend']
Modifiability,// Try to extend the interval.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp:10,extend,extend,10,interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegAllocGreedy.cpp,1,['extend'],['extend']
Modifiability,// Try to extend the previous edge if it's at the same level as the source; // context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp:10,extend,extend,10,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporter.cpp,1,['extend'],['extend']
Modifiability,"// Try to find a variable in our own (""to"") context with the same name and; // in the same context as the variable we're importing.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,2,['variab'],['variable']
Modifiability,// Try to find a variable that the receiver is strongly owned by.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:17,variab,variable,17,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,"// Try to find an usable `errno` value.; // It can be an external variable called ""errno"" or a function that returns a; // pointer to the ""errno"" value. This function can have different names.; // The actual case is dependent on the C library implementation, we; // can only search for a match in one of these variations.; // We assume that exactly one of these cases might be true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp:66,variab,variable,66,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/ErrnoModeling.cpp,1,['variab'],['variable']
Modifiability,// Try to find any non-empty variable location. Do not create a concrete; // entity if there are no locations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp,1,['variab'],['variable']
Modifiability,"// Try to fold PACK(EXTEND(X),EXTEND(Y)) -> CONCAT(X,Y) subvectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:20,EXTEND,EXTEND,20,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['EXTEND'],['EXTEND']
Modifiability,"// Try to get an llvm.dbg.declare, which has a DILocalVariable giving us the; // real debug info name and size of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp:118,variab,variable,118,interpreter/llvm-project/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/MemoryOpRemark.cpp,1,['variab'],['variable']
Modifiability,"// Try to get the variable in the workspace",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Asimov.cxx:18,variab,variable,18,roofit/histfactory/src/Asimov.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Asimov.cxx,2,['variab'],['variable']
Modifiability,"// Try to guess which DIEs must go to the accelerator tables. We do that; // just for variables, because functions will be handled depending on; // whether they carry a DW_AT_low_pc attribute or not.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinkerCompileUnit.cpp:86,variab,variables,86,interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinkerCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DWARFLinker/Classic/DWARFLinkerCompileUnit.cpp,1,['variab'],['variables']
Modifiability,// Try to increase alignment to enhance vectorization options.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp:32,enhance,enhance,32,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp,1,['enhance'],['enhance']
Modifiability,// Try to insert for the tile config live in points.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:30,config,config,30,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,1,['config'],['config']
Modifiability,// Try to mark variable as declare target if it is used in capturing; // regions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// Try to match a phi, whose only use is an extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:44,extend,extend,44,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,// Try to match a shifted extend on the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:26,extend,extend,26,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,2,['extend'],['extend']
Modifiability,// Try to match a shifted extend on the RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:26,extend,extend,26,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,2,['extend'],['extend']
Modifiability,// Try to match a sign-extended load/store with a zero-extended load/store.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:23,extend,extended,23,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,2,['extend'],['extended']
Modifiability,// Try to match an unshifted extend on the LHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:29,extend,extend,29,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Try to match an unshifted extend on the RHS.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:29,extend,extend,29,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Try to optimize already sign-/zero-extended values from function arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extended']
Modifiability,// Try to optimize already sign-/zero-extended values from load instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:38,extend,extended,38,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extended']
Modifiability,// Try to optimize sign extends in formal parameters. It's relying on; // callee already sign extending the values. I'm not sure if our ABI; // requires callee to sign extend though.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp:24,extend,extends,24,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,3,['extend'],"['extend', 'extending', 'extends']"
Modifiability,"// Try to optimize v16i16->v16i8 truncating stores when BWI is not; // supported, but avx512f is by extending to v16i32 and truncating.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:100,extend,extending,100,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Try to parse as a numeric variable use.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variable']
Modifiability,// Try to pass driver level flags relevant to LTO code generation down to; // the plugin.; // Handle flags for selecting CPU variants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:82,plugin,plugin,82,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,1,['plugin'],['plugin']
Modifiability,// Try to pre-shift a constant shifted by a variable amount added with a; // negative number:; // C << (X - AddC) --> (C >> AddC) << X; // and; // C >> (X - AddC) --> (C << AddC) >> X,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineShifts.cpp,1,['variab'],['variable']
Modifiability,// Try to produce a fixed cross-128-bit lane permute followed by unpack; // because that should be faster than the variable permute alternatives.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:115,variab,variable,115,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['variab'],['variable']
Modifiability,// Try to promote a chain of computation if it allows to form an extended; // load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:65,extend,extended,65,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extended']
Modifiability,"// Try to prove away overflow by looking at ""nearby"" add recurrences. A; // motivating example for this rule: if we know `{0,+,4}` is `ult` `-1` and it; // does not itself wrap then we can conclude that `{1,+,4}` is `nuw`.; //; // Formally:; //; // {S,+,X} == {S-T,+,X} + T; // => Ext({S,+,X}) == Ext({S-T,+,X} + T); //; // If ({S-T,+,X} + T) does not overflow ... (1); //; // RHS == Ext({S-T,+,X} + T) == Ext({S-T,+,X}) + Ext(T); //; // If {S-T,+,X} does not overflow ... (2); //; // RHS == Ext({S-T,+,X}) + Ext(T) == {Ext(S-T),+,Ext(X)} + Ext(T); // == {Ext(S-T)+Ext(T),+,Ext(X)}; //; // If (S-T)+T does not overflow ... (3); //; // RHS == {Ext(S-T)+Ext(T),+,Ext(X)} == {Ext(S-T+T),+,Ext(X)}; // == {Ext(S),+,Ext(X)} == LHS; //; // Thus, if (1), (2) and (3) are true for some T, then; // Ext({S,+,X}) == {Ext(S),+,Ext(X)}; //; // (3) is implied by (1) -- ""(S-T)+T does not overflow"" is simply ""({S-T,+,X}+T); // does not overflow"" restricted to the 0th iteration. Therefore we only need; // to check for (1) and (2).; //; // In the current context, S is `Start`, X is `Step`, Ext is `ExtendOpTy` and T; // is `Delta` (defined below).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:1086,Extend,ExtendOpTy,1086,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Extend'],['ExtendOpTy']
Modifiability,// Try to re-use an already extended operand of a vector SetCC feeding a; // extended select. Doing so avoids requiring another full extension of the; // SET_CC result when lowering the select.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// Try to read the config file, return on error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:19,config,config,19,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['config'],['config']
Modifiability,// Try to recognise spill and restore instructions that may create a new; // variable location.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:77,variab,variable,77,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Try to reduce index size from 64 bit (default for GEP); // to 32. It is essential for VF 16. If the index can't be reduced to 32, the; // operation will use 16 x 64 indices which do not fit in a zmm and needs; // to split. Also check that the base pointer is the same for all lanes,; // and that there's at most one variable index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:319,variab,variable,319,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['variab'],['variable']
Modifiability,"// Try to remove redundant sext operations on Hexagon. The hardware; // already sign extends many 16 bit intrinsic operations to 32 bits.; // For example:; // %34 = tail call i32 @llvm.hexagon.A2.addh.l16.sat.ll(i32 %x, i32 %y); // %sext233 = shl i32 %34, 16; // %conv52 = ashr exact i32 %sext233, 16",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp:85,extend,extends,85,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptimizeSZextends.cpp,1,['extend'],['extends']
Modifiability,// Try to resolve as a variable text macro,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,1,['variab'],['variable']
Modifiability,// Try to respect gcc-config on Gentoo if --gcc-toolchain is not provided.; // This avoids accidentally enforcing the system GCC version when using a; // custom toolchain.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:22,config,config,22,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['config']
Modifiability,// Try to select instructions to generate a 64 bit immediate using prefix as; // well as non prefix instructions. The function will return the SDNode; // to materialize that constant or it will return nullptr if it does not; // find one. The variable InstCnt is set to the number of instructions that; // were selected.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:242,variab,variable,242,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['variab'],['variable']
Modifiability,// Try to turn a build vector of zero extends of extract vector elts into a; // a vector zero extend and possibly an extract subvector.; // TODO: Support sign extend?; // TODO: Allow undef elements?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,extend,extends,38,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,3,['extend'],"['extend', 'extends']"
Modifiability,// Try to use two fast 24-bit multiplies (one for each half of the result); // instead of one slow extending multiply.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:99,extend,extending,99,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Turn -fplugin-arg-pluginname-key=value into; // -plugin-arg-pluginname key=value; // GCC has an actual plugin_argument struct with key/value pairs that it; // passes to its plugins, but we don't, so just pass it on as-is.; //; // The syntax for -fplugin-arg- is ambiguous if both plugin name and; // argument key are allowed to contain dashes. GCC therefore only; // allows dashes in the key. We do the same.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,plugin,pluginname-key,21,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,4,['plugin'],"['plugin', 'plugin-arg-pluginname', 'pluginname-key', 'plugins']"
Modifiability,"// Turn a RooAbsReal* into a TH1* based; // on a template histogram.; // The 'vars' arg list defines the x (and y and z variables); // Loop over the bins of the Template,; // find the bin centers,; // Scan the input Var over those bin centers,; // and use the value of the function; // to make the new histogram; // Make the new histogram; // Cone and empty the template; // TH1* hist = (TH1*) histTemplate.Clone( name.c_str() );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistFactoryNavigation.cxx:120,variab,variables,120,roofit/histfactory/src/HistFactoryNavigation.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistFactoryNavigation.cxx,1,['variab'],['variables']
Modifiability,"// Turn a v8i8/v16i8 extended vecreduce into a udot/sdot and vecreduce; // vecreduce.add(ext(A)) to vecreduce.add(DOT(zero, A, one)); // vecreduce.add(mul(ext(A), ext(B))) to vecreduce.add(DOT(zero, A, B)); // If we have vectors larger than v16i8 we extract v16i8 vectors,; // Follow the same steps above to get DOT instructions concatenate them; // and generate vecreduce.add(concat_vector(DOT, DOT2, ..)).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Turn icmp (sext X), Cst into a compare of X and Cst if Cst is extended; // too. If not, then try to deduce the result of the comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:65,extend,extended,65,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['extend'],['extended']
Modifiability,"// Turn icmp (zext X), Cst into a compare of X and Cst if Cst is extended; // too. If not, then try to deduce the result of the comparison.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:65,extend,extended,65,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['extend'],['extended']
Modifiability,"// Turn on QFloat if the HVX version is v68+.; // The function ParseSubtargetFeatures will set feature bits and initialize; // subtarget's variables all in one, so there isn't a good way to preprocess; // the feature string, other than by tinkering with it directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp:139,variab,variables,139,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonSubtarget.cpp,1,['variab'],['variables']
Modifiability,// Turn the unsupported load into an EXTLOAD followed by an; // explicit zero/sign extend inreg.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:83,extend,extend,83,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extend']
Modifiability,"// Two arguments, create variable with given range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx:25,variab,variable,25,roofit/roofitcore/src/RooFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFactoryWSTool.cxx,1,['variab'],['variable']
Modifiability,"// Two cases: either the decl could be in the main file, or it could be in a; // #included file. If the former, rewrite it now. If the later, check to see; // if we rewrote the #include/#import.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:112,rewrite,rewrite,112,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// Type II clones ignore variable names and literals, so let's skip them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CloneDetection.cpp,1,['variab'],['variable']
Modifiability,// Type depends on a runtime value (variable-length array).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h:36,variab,variable-length,36,interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/DependenceFlags.h,1,['variab'],['variable-length']
Modifiability,"// Type metadata may be attached one byte after the end of the vtable, for; // classes without virtual methods in Itanium ABI. AFAIK, it is never; // attached to the first byte of a vtable. Subtract one to get the right; // slice.; // This is making an assumption that vtable groups are the only kinds of; // global variables that !type metadata can be attached to, and that they; // are either Itanium ABI vtable groups or contain a single vtable (i.e.; // Microsoft ABI vtables).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp:316,variab,variables,316,interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/GlobalSplit.cpp,1,['variab'],['variables']
Modifiability,// Type must be complete per C99 7.17p3 because a declaring a variable; // with an incomplete type would be ill-formed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:62,variab,variable,62,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Typeid's operand is an unevaluated context, unless it's a polymorphic; // type. We must not unilaterally enter unevaluated context here, as then; // semantic processing can re-transform an already transformed operand.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:61,polymorphi,polymorphic,61,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,1,['polymorphi'],['polymorphic']
Modifiability,"// Types for recording sets of variable fragments that overlap. For a given; // local variable, we record all other fragments of that variable that could; // overlap it, to reduce search time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp:31,variab,variable,31,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/VarLocBasedImpl.cpp,3,['variab'],['variable']
Modifiability,"// Types of valid local variables should be complete, so this should succeed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:24,variab,variables,24,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// Typically, <builtin-type>s are not considered substitution candidates,; // but the exception to that exception is vendor extended types (Itanium C++; // ABI 5.9.1).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:124,extend,extended,124,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,1,['extend'],['extended']
Modifiability,"// UMin/UMax reduction over the vector with (potentially-extended); // i1 element type is actually a (potentially-extended); // logical `and`/`or` reduction over the original non-extended value:; // vector_reduce_u{min,max}(?ext(<n x i1>)); // -->; // ?ext(vector_reduce_{and,or}(<n x i1>))",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp:57,extend,extended,57,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCalls.cpp,3,['extend'],['extended']
Modifiability,"// USUBL(2), SSUBL(2), USUBW(2), SSUBW(2).; // The second operand needs to be an extend",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:81,extend,extend,81,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// USUBSAT can always be promoted as long as we have zero-extended the args.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:58,extend,extended,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extended']
Modifiability,"// USe the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:11,sandbox,sandbox,11,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,1,['sandbox'],['sandbox']
Modifiability,// Unconditionally emit Swift async extended frame info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h:36,extend,extended,36,interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/CodeGenOptions.h,1,['extend'],['extended']
Modifiability,"// UndefValue are typed, so we have to statically sign extend them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:55,extend,extend,55,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['extend'],['extend']
Modifiability,"// Under C++ DR1696, if a mem-initializer (or a default member; // initializer used by the absence of one) would lifetime-extend a; // temporary, the program is ill-formed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:122,extend,extend,122,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"// Under the MS ABI, lock down the inheritance model now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:35,inherit,inheritance,35,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,4,['inherit'],['inheritance']
Modifiability,"// UnfilledBitsInLastUnit is the difference between the end of the; // last allocated bitfield (i.e. the first bit offset available for; // bitfields) and the end of the current data size in bits (i.e. the; // first bit offset available for non-bitfields). The current data; // size in bits is always a multiple of the char size; additionally,; // for ms_struct records it's also a multiple of the; // LastBitfieldStorageUnitSize (if set).; // The struct-layout algorithm is dictated by the platform ABI,; // which in principle could use almost any rules it likes. In; // practice, UNIXy targets tend to inherit the algorithm described; // in the System V generic ABI. The basic bitfield layout rule in; // System V is to place bitfields at the next available bit offset; // where the entire bitfield would fit in an aligned storage unit of; // the declared type; it's okay if an earlier or later non-bitfield; // is allocated in the same storage unit. However, some targets; // (those that !useBitFieldTypeAlignment(), e.g. ARM APCS) don't; // require this storage unit to be aligned, and therefore always put; // the bitfield at the next available bit offset.; // ms_struct basically requests a complete replacement of the; // platform ABI's struct-layout algorithm, with the high-level goal; // of duplicating MSVC's layout. For non-bitfields, this follows; // the standard algorithm. The basic bitfield layout rule is to; // allocate an entire unit of the bitfield's declared type; // (e.g. 'unsigned long'), then parcel it up among successive; // bitfields whose declared types have the same size, making a new; // unit as soon as the last can no longer store the whole value.; // Since it completely replaces the platform ABI's algorithm,; // settings like !useBitFieldTypeAlignment() do not apply.; // A zero-width bitfield forces the use of a new storage unit for; // later bitfields. In general, this occurs by rounding up the; // current size of the struct as if the algorithm were about to;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:604,inherit,inherit,604,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['inherit'],['inherit']
Modifiability,"// Unfortunately, the Instruction Set Architecture Reference Guide is; // misleading about how the inline operands work for (packed) 16-bit; // instructions. In a nutshell, the actual HW behavior is:; //; // - integer encodings (-16 .. 64) are always produced as sign-extended; // 32-bit values; // - float encodings are produced as:; // - for F16 instructions: corresponding half-precision float values in; // the LSBs, 0 in the MSBs; // - for UI16 instructions: corresponding single-precision float value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp:268,extend,extended,268,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp,1,['extend'],['extended']
Modifiability,"// Unfortunately, we have to parse some forwarding options (-Xassembler,; // -Xlinker, -Xpreprocessor) because we either integrate their functionality; // (assembler and preprocessor), or bypass a previous driver ('collect2').; // Rewrite linker options, to replace --no-demangle with a custom internal; // option.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:231,Rewrite,Rewrite,231,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp,1,['Rewrite'],['Rewrite']
Modifiability,// Unimaginative naming scheme for parameter variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:45,variab,variables,45,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variables']
Modifiability,// Unimplemented. S_GDATA and S_LDATA in CodeView (used to describe global; // variables) aren't capable of carrying line information.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBContext.cpp:79,variab,variables,79,interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/PDB/PDBContext.cpp,1,['variab'],['variables']
Modifiability,"// Unitialized max number of workers; ////////////////////////////////////////////////////////////////////////////////; /// Create a PROOF environment. Starting PROOF involves either connecting; /// to a master server, which in turn will start a set of slave servers, or; /// directly starting as master server (if master = """"). Masterurl is of; /// the form: [proof[s]://]host[:port]. Conffile is the name of the config; /// file describing the remote PROOF cluster (this argument alows you to; /// describe different cluster configurations).; /// The default is proof.conf. Confdir is the directory where the config; /// file and other PROOF related files are (like motd and noproof files).; /// Loglevel is the log level (default = 1). User specified custom config; /// files will be first looked for in $HOME/.conffile.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:414,config,config,414,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,4,['config'],"['config', 'configurations']"
Modifiability,"// Unless we're looking at a local variable or argument in a constexpr call,; // the variable we're reading must be const.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,2,['variab'],['variable']
Modifiability,"// Unlike RooAbsArgs (RooAbsPdf,RooFormulaVar,....) datasets are not attached to; // the variables they are constructed from. Instead they are attached to an internal; // clone of the supplied set of arguments; // Fill d with dummy values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:89,variab,variables,89,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variables']
Modifiability,"// Unlike protocol lists, generic parameterizations support; // nested angles:; //; // @interface Foo<ValueType : id <NSCopying, NSSecureCoding>> :; // NSObject <NSCopying, NSSecureCoding>; //; // so we need to count how many open angles we have left.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:34,parameteriz,parameterizations,34,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['parameteriz'],['parameterizations']
Modifiability,"// Unnecessarily extending a 32-bit value to 64, remove it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp:17,extend,extending,17,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyFixBrTableDefaults.cpp,1,['extend'],['extending']
Modifiability,// Unpack the first half of vector operand 0 into double-sized elements.; // UNPACK_HIGH sign-extends and UNPACKL_HIGH zero-extends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:94,extend,extends,94,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,2,['extend'],['extends']
Modifiability,// Unpack/rotate failed - try again with variable blends.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:41,variab,variable,41,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// Unroll, extend the scalars and rebuild the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:11,extend,extend,11,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extend']
Modifiability,"// Unsealing a page zero is a no-op. `RPageRange::ExtendToFitColumnRange()` guarantees that the page zero buffer is; // large enough to hold `sealedPage.fNElements`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorage.cxx:50,Extend,ExtendToFitColumnRange,50,tree/ntuple/v7/src/RPageStorage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/src/RPageStorage.cxx,1,['Extend'],['ExtendToFitColumnRange']
Modifiability,// Unsigned comparison between two sign-extended values is equivalent; // to unsigned comparison between two zero-extended values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,2,['extend'],['extended']
Modifiability,// Unsigned overflow occurred when the high part does not zero-extend the; // low part.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:63,extend,extend,63,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,// Unspecified extending load is selected into zeroExtending load.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp:15,extend,extending,15,interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsInstructionSelector.cpp,1,['extend'],['extending']
Modifiability,// Update CoroId to refer to the promise. We could not do it earlier because; // promise local variable was not emitted yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp:95,variab,variable,95,interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCoroutine.cpp,1,['variab'],['variable']
Modifiability,// Update MemorySSA before the rewrite call below changes the 1:1; // instruction:cloned_instruction_or_value mapping.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp:31,rewrite,rewrite,31,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopRotationUtils.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Update _directVars to only include variables that will actually be directly generated",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:38,variab,variables,38,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['variab'],['variables']
Modifiability,// Update all instances of Src in the variable's tracked values to Dst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:38,variab,variable,38,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Update all uses of the induction variable except the one in the condition; // block that compares it with the actual upper bound, and the increment in; // the latch block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:36,variab,variable,36,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,2,['variab'],['variable']
Modifiability,"// Update column widths, put into NDC units; // block off this section of code to make sure all variables are local:; // don't want to ruin initialisation of these variables later on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx:96,variab,variables,96,graf2d/graf/src/TLegend.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TLegend.cxx,2,['variab'],['variables']
Modifiability,// Update info for all live variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp:28,variab,variables,28,interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,1,['variab'],['variables']
Modifiability,"// Update instantiation-dependent, variably-modified, and error bits.; // If the canonical type exists and is non-dependent, the template; // specialization type can be non-dependent even if one of the type; // arguments is. Given:; // template<typename T> using U = int;; // U<T> is always non-dependent, irrespective of the type T.; // However, U<Ts> contains an unexpanded parameter pack, even though; // its expansion (and thus its desugared type) doesn't.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp:35,variab,variably-modified,35,interpreter/llvm-project/clang/lib/AST/Type.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Type.cpp,1,['variab'],['variably-modified']
Modifiability,// Update live variable information if there is any.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PHIElimination.cpp:15,variab,variable,15,interpreter/llvm-project/llvm/lib/CodeGen/PHIElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PHIElimination.cpp,1,['variab'],['variable']
Modifiability,// Update live variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,3,['variab'],['variables']
Modifiability,// Update live variables for regB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TwoAddressInstructionPass.cpp,1,['variab'],['variables']
Modifiability,// Update live variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:15,variab,variables,15,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['variab'],['variables']
Modifiability,"// Update llvm.compiler.used, adding the new liveness globals. This is; // needed so that during LTO these variables stay alive. The alternative; // would be to have the linker handling the LTO symbols, but libLTO; // current API does not expose access to the section for each symbol.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:107,variab,variables,107,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,1,['variab'],['variables']
Modifiability,"// Update llvm.compiler.used, adding the new metadata globals. This is; // needed so that during LTO these variables stay alive.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp:107,variab,variables,107,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/AddressSanitizer.cpp,2,['variab'],['variables']
Modifiability,// Update local variable definitions in variable map,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,2,['variab'],['variable']
Modifiability,// Update machine locations <=> variable locations maps. Defer updating; // ActiveMLocs to avoid invalidating the ActiveMLocIt iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// Update section content: remove NOPs for R_RISCV_ALIGN and rewrite; // instructions for relaxed relocations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_riscv.cpp:61,rewrite,rewrite,61,interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_riscv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/JITLink/ELF_riscv.cpp,1,['rewrite'],['rewrite']
Modifiability,// Update the DataSize variable to include padding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyld.cpp,1,['variab'],['variable']
Modifiability,"// Update the linear variables.; // In distribute directives only loop counters may be marked as linear, no; // need to generate the code for them.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// Update the map if we found a new value/expression describing the; // variable, or if the variable wasn't mapped already.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:72,variab,variable,72,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,6,['variab'],['variable']
Modifiability,"// Update the offset adjustment, which is mainly used by codeview to translate; // from ESP to VFRAME relative local variable offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:117,variab,variable,117,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['variab'],['variable']
Modifiability,// Update the parameter attributes of the custom call instruction to; // zero extend the shadow parameters. This is required for targets; // which consider PrimitiveShadowTy an illegal type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp:78,extend,extend,78,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/DataFlowSanitizer.cpp,1,['extend'],['extend']
Modifiability,"// Update the phi nodes that were initially created for a back edge; // once the variable definitions have been computed.; // I.e., merge the current variable map into the phi nodes for Blk.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:81,variab,variable,81,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,2,['variab'],['variable']
Modifiability,// Update the type of this variable template specialization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// Update the variable map and current context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:14,variab,variable,14,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,"// Update/Save the config parameters in the dedicated list so that they will be saved; // in the outputlist and therefore in the relevant TQueryResult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerUnit.cxx:19,config,config,19,proof/proofplayer/src/TPacketizerUnit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TPacketizerUnit.cxx,1,['config'],['config']
Modifiability,// Updates a current variable declaration. (E.g. by assignment),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:21,variab,variable,21,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variable']
Modifiability,// Updates a definition only if that definition is already in the map.; // This method should be called when assigning to an existing variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:134,variab,variable,134,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variable']
Modifiability,// Upgrade list of variables attached to the CUs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:19,variab,variables,19,interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,1,['variab'],['variables']
Modifiability,"// Upgrade old metadata, which stored a global variable reference or a; // ConstantInt here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:47,variab,variable,47,interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,1,['variab'],['variable']
Modifiability,// Upgrade variables attached to globals.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp:11,variab,variables,11,interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/MetadataLoader.cpp,1,['variab'],['variables']
Modifiability,"// Upper bound variable, initialized with last iteration number.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],['variable']
Modifiability,"// Use Adaptive Gauss-Kronrod integration by default for the convolution integral",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx:7,Adapt,Adaptive,7,roofit/roofitcore/src/RooNumConvolution.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNumConvolution.cxx,1,['Adapt'],['Adaptive']
Modifiability,"// Use MI's debug location, which describes where Variable was; // declared, rather than whatever is attached to CopyUseMI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:50,Variab,Variable,50,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,1,['Variab'],['Variable']
Modifiability,// Use PACKSSWD if the signbits extend to the lowest 16-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:32,extend,extend,32,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Use SCALAR_TO_VECTOR for lane zero to; // a) Avoid a RMW dependency on the full vector register, and; // b) Allow the register coalescer to fold away the copy if the; // value is already in an S or D register, and we're forced to emit an; // INSERT_SUBREG that we can't fold anywhere.; //; // We also allow types like i8 and i16 which are illegal scalar but legal; // vector element types. After type-legalization the inserted value is; // extended (i32) and it is safe to cast them to the vector type by ignoring; // the upper bits of the lowest lane (e.g. v8i8, v4i16).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:443,extend,extended,443,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// Use SHT_NOTE for section whose name starts with "".note"" to allow; // emitting ELF notes from C variable declaration.; // See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77609",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:98,variab,variable,98,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['variab'],['variable']
Modifiability,"// Use TESTD/Q, extended vector to packed dword/qword.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:16,extend,extended,16,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Use a 'while' to peel off layers of typedefs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:29,layers,layers,29,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['layers'],['layers']
Modifiability,"// Use a InsertPt as our DebugLoc, since MI may be discontinuous from; // the where this local is being inserted, causing non-linear stepping; // in the debugger or function entry points where variables aren't live; // yet. Alternative is previous instruction, but that is strictly worse; // since it can point at the previous statement.; // See crbug.com/1251909, crbug.com/1249745",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp:193,variab,variables,193,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyExplicitLocals.cpp,1,['variab'],['variables']
Modifiability,"// Use a different note for an inheriting constructor, because from the; // user's perspective it's not really a function at all.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.cpp:31,inherit,inheriting,31,interpreter/llvm-project/clang/lib/AST/Interp/State.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/State.cpp,1,['inherit'],['inheriting']
Modifiability,// Use a more useful diagnostic for constexpr variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variables']
Modifiability,// Use a multiplication with 0x010101... to extend the input to the; // required length.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:44,extend,extend,44,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extend']
Modifiability,// Use a profile intrinsic to create the region counters and data variable.; // Also create the data variable based on the MCDCParams.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:66,variab,variable,66,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,2,['variab'],['variable']
Modifiability,"// Use bitfield extract on the lower 32-bit source, and then sign-extend; // or clear the upper 32-bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp:66,extend,extend,66,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp,1,['extend'],['extend']
Modifiability,// Use configured pad range - only when main histogram drawn with SAME draw option,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,config,configured,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configured']
Modifiability,// Use general rotate by variable (per-element).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// Use getGlobalObjectValueTypeID to look up the enumerated type ID for; // Global Variable types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DXILWriter/DXILBitcodeWriter.cpp:83,Variab,Variable,83,interpreter/llvm-project/llvm/lib/Target/DirectX/DXILWriter/DXILBitcodeWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/DirectX/DXILWriter/DXILBitcodeWriter.cpp,1,['Variab'],['Variable']
Modifiability,// Use global_size() to get the total number of global variables.; // Use globals() to get the range of all global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h:55,variab,variables,55,interpreter/llvm-project/llvm/include/llvm/IR/Module.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Module.h,2,['variab'],['variables']
Modifiability,"// Use guarded initialization if the global variable is weak. This; // occurs for, e.g., instantiated static data members and; // definitions explicitly marked weak.; //; // Also use guarded initialization for a variable with dynamic TLS and; // unordered initialization. (If the initialization is ordered, the ABI; // layer will guard the whole-TU initialization for us.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp:44,variab,variable,44,interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDeclCXX.cpp,2,['variab'],['variable']
Modifiability,// Use internal rather than private linkage so the counter variable shows up; // in the symbol table when using debug info for correlation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:59,variab,variable,59,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"// Use of output modifiers forces VOP3 encoding for a VOP2 mac/fmac; // instruction, so we might as well convert it to the more flexible VOP3-only; // mad/fma form.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp:128,flexible,flexible,128,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFoldOperands.cpp,2,['flexible'],['flexible']
Modifiability,// Use special DAG nodes to represent the operation of extending the; // low lanes.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:55,extend,extending,55,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extending']
Modifiability,// Use the base variable (without any DW_OP_piece expressions); // as index into History. The full variables including the; // piece expressions are attached to the MI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:16,variab,variable,16,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// Use the correct record name when the using declaration is used for; // inheriting constructors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclPrinter.cpp:74,inherit,inheriting,74,interpreter/llvm-project/clang/lib/AST/DeclPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclPrinter.cpp,1,['inherit'],['inheriting']
Modifiability,"// Use the default in the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx:26,sandbox,sandbox,26,proof/proof/src/TProofLite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofLite.cxx,2,['sandbox'],['sandbox']
Modifiability,"// Use the default pass pipeline. We also have to map our optimization; // levels into one of the distinct levels used to configure the pipeline.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:122,config,configure,122,interpreter/cling/lib/Interpreter/BackendPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp,1,['config'],['configure']
Modifiability,"// Use the first item in the buildvector/shuffle to get the size of the; // extend, and make sure it looks valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:76,extend,extend,76,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Use the label if the variable is renamed with the asm-label extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,"// Use the phi node with the widest type as induction. Use the last; // one if there are multiple (no good reason for doing this other; // than it is expedient). We've checked that it begins at zero and; // steps by one, so this is a canonical induction variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp:254,variab,variable,254,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorizationLegality.cpp,1,['variab'],['variable']
Modifiability,// Use the zero register for zero extending.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// Used to control the need to emit .generic() in the initializer of; // module scope variables.; // Although ptx supports the hybrid mode like the following,; // .global .u32 a;; // .global .u32 b;; // .global .u32 addr[] = {a, generic(b)}; // we have difficulty representing the difference in the NVVM IR.; //; // Since the address value should always be generic in CUDA C and always; // be specific in OpenCL, we use this simple control here.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h:86,variab,variables,86,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.h,1,['variab'],['variables']
Modifiability,// Used to relax some checks that do not currently work portably,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:56,portab,portably,56,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,1,['portab'],['portably']
Modifiability,"// User iterator plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoNode.h:17,plugin,plugin,17,geom/geom/inc/TGeoNode.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoNode.h,1,['plugin'],['plugin']
Modifiability,"// User iterator plugin for changing pain volume properties",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/inc/TGeoPainter.h:17,plugin,plugin,17,geom/geompainter/inc/TGeoPainter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/inc/TGeoPainter.h,1,['plugin'],['plugin']
Modifiability,"// User requested overwriting a standard element - we need to extend dynamically the support arrays",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoElement.cxx:62,extend,extend,62,geom/geom/src/TGeoElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoElement.cxx,1,['extend'],['extend']
Modifiability,"// User's variable declaration, initialized by *__begin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:10,variab,variable,10,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,// User-provided taint configuration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:23,config,configuration,23,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['config'],['configuration']
Modifiability,// Uses of induction variables in,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variables']
Modifiability,// Using a fixed address is not portable because that address will probably; // not be valid in all environments or platforms.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/FixedAddressChecker.cpp:32,portab,portable,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/FixedAddressChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/FixedAddressChecker.cpp,1,['portab'],['portable']
Modifiability,"// Using the likelihood ratio technique to construct a signal enhanced; // one-dimensional projection of a multi-dimensional p.d.f.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:62,enhance,enhanced,62,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['enhance'],['enhanced']
Modifiability,"// Using the map of values to locations, produce a final set of values for; // this variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:84,variab,variable,84,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// Using the properties listed at the following web page (accessed 06/21/08):; // http://www.numbertheory.org/php/euclid.html; // (especially the properties numbered 3, 4 and 9) it can be proved that; // BitWidth bits suffice for all the computations in the algorithm implemented; // below. More precisely, this number of bits suffice if the multiplicative; // inverse exists, but may not suffice for the general extended Euclidean; // algorithm.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:413,extend,extended,413,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extended']
Modifiability,// Using the same bool variable as below to suppress compiler warnings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,2,['variab'],['variable']
Modifiability,// Using the value of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransBlockObjCVariable.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/ARCMigrate/TransBlockObjCVariable.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransBlockObjCVariable.cpp,1,['variab'],['variable']
Modifiability,"// Usual destructor.; // Idea: the configuration ownership might be moved to a single list so that; // we can shared them between the optimized and non-optimized list of actions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h:35,config,configuration,35,io/io/inc/TStreamerInfoActions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/inc/TStreamerInfoActions.h,1,['config'],['configuration']
Modifiability,"// Usually, `__attribute__((attrib)) class Foo {} var` means that attribute; // applies to var, not the type Foo.; // As an exception to the rule, __declspec(align(...)) before the; // class-key affects the type instead of the variable.; // Also, Microsoft-style [attributes] seem to affect the type instead of the; // variable.; // This function moves attributes that should apply to the type off DS to Attrs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp:227,variab,variable,227,interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseDecl.cpp,2,['variab'],['variable']
Modifiability,// V is a 64-bit sign-extended value. Convert it to APInt of desired; // width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp:22,extend,extended,22,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstPropagation.cpp,1,['extend'],['extended']
Modifiability,// VAArg instructions are not allowed since this could cause difficulty when; // differentiating between different sets of variable instructions in; // the deduplicated outlined regions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h:123,variab,variable,123,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/IROutliner.h,1,['variab'],['variable']
Modifiability,"// VARCHAR(n) - string with variable length upto n",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h:28,variab,variable,28,net/net/inc/TSQLServer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/inc/TSQLServer.h,1,['variab'],['variable']
Modifiability,// VECTOR UNPACK extends half the elements of the source vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:17,extend,extends,17,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extends']
Modifiability,// VMV_X_S matches the semantics of vmv.x.s. The result is always XLenVT sign; // extended from the vector element size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:82,extend,extended,82,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['extend'],['extended']
Modifiability,// VP doesn't support extending loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:22,extend,extending,22,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extending']
Modifiability,// VREPI sign extends the immedate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:14,extend,extends,14,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extends']
Modifiability,"// V_FMAAK_F16_t16 takes VGPR_32_Lo128 operands, so the rewrite; // would also require restricting their register classes. For now; // just bail out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:56,rewrite,rewrite,56,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['rewrite'],['rewrite']
Modifiability,"// V_FMAMK_F16_t16 takes VGPR_32_Lo128 operands, so the rewrite; // would also require restricting their register classes. For now; // just bail out.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:56,rewrite,rewrite,56,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,1,['rewrite'],['rewrite']
Modifiability,// Validate -add-plugin args.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp:17,plugin,plugin,17,interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/FrontendAction.cpp,1,['plugin'],['plugin']
Modifiability,"// Validate part of constraint #1: Only one predecessor; // FIXME: We can extend the number of predecessor, but in that case, we; // would duplicate the call to free in each predecessor and it may; // not be profitable even for code size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:74,extend,extend,74,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extend']
Modifiability,"// Validate that the LHS is allowed to be a variable (either it has not been; // used as a symbol, or it is an absolute symbol).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,1,['variab'],['variable']
Modifiability,"// Validated RooSimWSTool build configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:32,config,configuration,32,roofit/roofitcore/inc/RooSimWSTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h,1,['config'],['configuration']
Modifiability,// ValueBufferType is inherited; // DefaultInterpolation is inherited;,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:22,inherit,inherited,22,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,2,['inherit'],['inherited']
Modifiability,"// Values may need to be fixed so that they will sign extend to be; // within the expected range during ISel. Check whether the value is in; // bounds based on the lane bit width and if it is out of bounds, lop; // off the extra bits and subtract 2^n to reflect giving the high bit; // value -2^(n-1) rather than +2^(n-1). Skip the i64 case because it; // cannot possibly be out of range.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// VarLoc LiveDebugValues tracks variable locations that are defined in; // blocks not in scope. This is something we could legitimately ignore, but; // lets allow it for now for the sake of coverage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// VarRegion appears in unknown space when it's a block variable as seen; // from a block using it, when this block is analyzed at top-level.; // Other block variables appear within block data regions,; // which, unlike everything else on this list, are not memory spaces.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h:56,variab,variable,56,interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h,4,['variab'],"['variable', 'variables']"
Modifiability,// Variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDARuntime.h,1,['Variab'],['Variable']
Modifiability,"// Variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoordEditor.cxx:3,Variab,Variable,3,tree/treeviewer/src/TParallelCoordEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoordEditor.cxx,1,['Variab'],['Variable']
Modifiability,// Variable GEPs will require math and will disable SROA.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InlineCost.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable Permute (VPERM).; // Res = VPERMV MaskV, V0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['Variab'],['Variable']
Modifiability,"// Variable and constant offsets for a chain of GEPs, with base pointer BasePtr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['Variab'],['Variable']
Modifiability,// Variable argument functions are not supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Variable argument lowering.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Variable arguments.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable bin size constructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx:3,Variab,Variable,3,roofit/roofitcore/src/RooBinning.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx,1,['Variab'],['Variable']
Modifiability,// Variable blends are only legal from SSE4.1 onward.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Variable captures.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,1,['Variab'],['Variable']
Modifiability,// Variable category is not specified - mark all categories.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Variab'],['Variable']
Modifiability,// Variable declaration that has type_tag_for_datatype attribute.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['Variab'],['Variable']
Modifiability,// Variable in LDS; symbol encoded like SHN_COMMON,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:3,Variab,Variable,3,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['Variab'],['Variable']
Modifiability,// Variable index.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,2,['Variab'],['Variable']
Modifiability,// Variable initialization is not assignment and should be handled; // separately.; //; // Multiple declarations can be a part of declaration statement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable insertion indices, usually we're better off spilling to stack,; // but AVX512 can use a variable compare+select by comparing against all; // possible vector indices, and FP insertion has less gpr->simd traffic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"// Variable is not in external coordinates. Use current internal value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Variab,Variable,3,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['Variab'],['Variable']
Modifiability,"// Variable is used if it has been marked as an array, array; // section, array shaping or the variable iself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,// Variable is used in assert only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineCombiner.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable keeping track of whether or not we have encountered a component; // in the component list which is a member expression. Useful when we have a; // pointer or a final array section, in which case it is the previous; // component in the list which tells us whether we have a member expression.; // E.g. X.f[:]; // While processing the final array section ""[:]"" it is ""f"" which tells us; // whether we are dealing with a member of a declared struct.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['Variab'],['Variable']
Modifiability,// Variable length,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSelectionDAGInfo.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSelectionDAGInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZSelectionDAGInfo.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable length allocation.; // If the (unknown) allocation size cannot exceed the probe size, decrement; // the stack pointer right away.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Variable length arrays are tricky too.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PaddingChecker.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PaddingChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/PaddingChecker.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable locations at the first instruction of a block should be; // based on the block's SlotIndex, not the first instruction's index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugVariables.cpp,1,['Variab'],['Variable']
Modifiability,// Variable names are composed of alphanumeric characters and underscores.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['Variab'],['Variable']
Modifiability,// Variable pointer template parameters have a value that is the address; // of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDebugInfo.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,// Variable preserved purely for correct name printing.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SpeculativeExecution.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable size arrays are unreliable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx:3,Variab,Variable,3,math/mlp/src/TMultiLayerPerceptron.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mlp/src/TMultiLayerPerceptron.cxx,1,['Variab'],['Variable']
Modifiability,// Variable size is unknown.; // Calculate the difference between Dest and the dbg.assign address +; // address-modifying expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['Variab'],['Variable']
Modifiability,// Variable size. Just use 4.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Variable sized objects are not supported,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/R600InstrInfo.cpp,1,['Variab'],['Variable']
Modifiability,// Variable sized objects have size 0.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRFrameLowering.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Target/AVR/AVRFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRFrameLowering.cpp,1,['Variab'],['Variable']
Modifiability,// Variable sized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h:3,Variab,Variable,3,interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Rewrite/Core/RewriteRope.h,1,['Variab'],['Variable']
Modifiability,"// Variable symbols may not be marked as defined, so check those; // explicitly. If we know it's a variable, we have a definition for; // the purposes of this check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,4,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,"// Variable templates are a feature of C++14, use the older technique of having; // a static member in a template class.; // The coefficients have been determined using Python, and in parts compared to the values given by Sibidanov.; //; // >>> def print_hex(a):; // ... while a > 0:; // ... print('{0:#018x}'.format(a & 0xffffffffffffffff)); // ... a >>= 64; // ...; // >>> m = 2 ** 576 - 2 ** 240 + 1; // >>> a = m - (m - 1) // 2 ** 24; // >>> kA = pow(a, <w>, m); // >>> print_hex(kA)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:3,Variab,Variable,3,math/mathcore/src/RanluxppEngineImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx,1,['Variab'],['Variable']
Modifiability,"// Variable to check",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx:3,Variab,Variable,3,test/stressProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressProof.cxx,2,['Variab'],['Variable']
Modifiability,// Variable to compute the accumulation of the number of components.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h:3,Variab,Variable,3,interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/OpenMPClause.h,1,['Variab'],['Variable']
Modifiability,// Variable to keep last visited store instruction. By the end of the; // algorithm this variable will be either empty or having intermediate; // reduction value stored in invariant address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:3,Variab,Variable,3,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,// Variable to use for 'this'. May be null.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h:3,Variab,Variable,3,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyCommon.h,1,['Variab'],['Variable']
Modifiability,"// Variable transformation: Gauss transformation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h:3,Variab,Variable,3,tmva/tmva/inc/TMVA/VariableGaussTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableGaussTransform.h,1,['Variab'],['Variable']
Modifiability,"// Variable transformation: Principal Value Composition",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h:3,Variab,Variable,3,tmva/tmva/inc/TMVA/VariablePCATransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariablePCATransform.h,1,['Variab'],['Variable']
Modifiability,"// Variable transformation: decorrelation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h:3,Variab,Variable,3,tmva/tmva/inc/TMVA/VariableDecorrTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableDecorrTransform.h,1,['Variab'],['Variable']
Modifiability,"// Variable transformation: identity",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h:3,Variab,Variable,3,tmva/tmva/inc/TMVA/VariableIdentityTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableIdentityTransform.h,1,['Variab'],['Variable']
Modifiability,"// Variable transformation: normalization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h:3,Variab,Variable,3,tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/VariableNormalizeTransform.h,2,['Variab'],['Variable']
Modifiability,// Variable used to diagnose missing default arguments,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['Variab'],['Variable']
Modifiability,// Variable used to diagnose non-final parameter packs,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['Variab'],['Variable']
Modifiability,"// Variable used to note down the DirectiveKind because mapLoopConstruct may; // change ""Kind"" variable, due to mapping of ""omp loop"" to other directives.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variable,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,// Variable with automatic storage duration.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:3,Variab,Variable,3,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,1,['Variab'],['Variable']
Modifiability,// Variable-sized objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:3,Variab,Variable-sized,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['Variab'],['Variable-sized']
Modifiability,// Variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h:3,Variab,Variable,3,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCAsmParser.h,1,['Variab'],['Variable']
Modifiability,// VariableIDs are 1-based so the variable-tracking bitvector needs; // NumVariables plus 1 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:3,Variab,VariableIDs,3,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,2,"['Variab', 'variab']","['VariableIDs', 'variable-tracking']"
Modifiability,"// Variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.h:3,Variab,Variables,3,roofit/roofitcore/src/TestStatistics/LikelihoodJob.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/LikelihoodJob.h,1,['Variab'],['Variables']
Modifiability,"// Variables allocated in module lds must all resolve to that struct,; // not to the per-kernel instance.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['Variab'],['Variables']
Modifiability,// Variables always have simple names.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Index/USRGeneration.cpp,1,['Variab'],['Variables']
Modifiability,// Variables are always narrowings.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['Variab'],['Variables']
Modifiability,// Variables at global scope are not mangled unless they have internal; // linkage or are specializations or are attached to a named module.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['Variab'],['Variables']
Modifiability,// Variables at global scope with internal linkage are not mangled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftMangle.cpp,1,['Variab'],['Variables']
Modifiability,// Variables calculated from multiple locations can't be represented here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DebugHandlerBase.cpp,1,['Variab'],['Variables']
Modifiability,// Variables captured by value must be globalized.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables changed between a setjmp and a longjump can have undefined value; // after the longjmp. This behaviour can be observed if such a variable is; // spilled, so longjmp won't restore the value in the spill slot.; // RegisterCoalescer should not run in functions with a setjmp to avoid; // merging such undefined variables with predictable ones.; //; // TODO: Could specifically disable coalescing registers live across setjmp; // calls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,3,"['Variab', 'variab']","['Variables', 'variable', 'variables']"
Modifiability,"// Variables created by this function are thread local. If the target does not; // support TLS, we depend on CoalesceFeaturesAndStripAtomics to downgrade it; // to non-thread-local ones, in which case we don't allow this object to be; // linked with other objects using shared memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyLowerEmscriptenEHSjLj.cpp,1,['Variab'],['Variables']
Modifiability,// Variables defined in a function are always inaccessible.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables for our state machines.; // FirstTrueElement/SecondTrueElement - Used to emit a comparison of the form; // ""i == 47 | i == 87"", where 47 is the first index the condition is true for,; // and 87 is the second (and last) index. FirstTrueElement is -2 when; // undefined, otherwise set to the first true element. SecondTrueElement is; // -2 when undefined, -3 when overdefined and >= 0 when that index is true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables for storing the memory of the C-string arguments.; // FIXME: We shouldn't use C-strings in the first place, but just use; // std::string for clang arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:3,Variab,Variables,3,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['Variab'],['Variables']
Modifiability,// Variables in other module units shouldn't be forced to be emitted.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['Variab'],['Variables']
Modifiability,// Variables initialization,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,Variab,Variables,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Variab'],['Variables']
Modifiability,// Variables should have implicit tags from its type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables that are valid during spill(), but used by multiple methods.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/InlineSpiller.cpp,1,['Variab'],['Variables']
Modifiability,// Variables that can be needed in other TUs are required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['Variab'],['Variables']
Modifiability,// Variables that have destruction with side-effects are required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['Variab'],['Variables']
Modifiability,// Variables that have initialization with side-effects are required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['Variab'],['Variables']
Modifiability,// Variables to help detecting enclosing problems in data environment nests.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables to hold state when processing an initializer list. When; // InitList is true, special case initialization of FieldDecls matching; // InitListFieldDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables use case-insensitive symbol names; if this is a variable, we; // find the symbol using its canonical name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,2,"['Variab', 'variab']","['Variables', 'variable']"
Modifiability,// Variables will be removed from `FixItsForVariable`:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['Variab'],['Variables']
Modifiability,// Variables with common linkage always get classified as common.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables with const-qualified type having no mutable member may be; // listed in a firstprivate clause, even if they are static data members.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Variab'],['Variables']
Modifiability,// Variables with external linkage are analyzed in FinalizeDeclaratorGroup.; // FIXME: The test for external storage here seems wrong? We still; // need to check for mismatches.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['Variab'],['Variables']
Modifiability,// Variables with higher required alignment than their type's ABI; // alignment cannot use NRVO.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['Variab'],['Variables']
Modifiability,// Variables with the same type and linkage match.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['Variab'],['Variables']
Modifiability,"// Variables, if they aren't definitions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp:3,Variab,Variables,3,interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclBase.cpp,1,['Variab'],['Variables']
Modifiability,// Variables.size() <= Operands.size(); // Assigning Variables to non tied explicit operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp:3,Variab,Variables,3,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/MCInstrDescView.cpp,2,['Variab'],['Variables']
Modifiability,// Variably modified types are not supported for tasks.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variably,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['Variab'],['Variably']
Modifiability,// Variably modified types are not supported.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:3,Variab,Variably,3,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['Variab'],['Variably']
Modifiability,// Various move instructions used to zero or sign extend things. Note that we; // intentionally don't support the _NOREX variants as we can't handle that; // register constraint anyways.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:50,extend,extend,50,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extend']
Modifiability,// Vector FP extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:13,extend,extend,13,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,2,['extend'],['extend']
Modifiability,// Vector parts do not stem from the same variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,variab,variable,42,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variable']
Modifiability,"// Vector reads from a one, scalar from all ones so sign extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:57,extend,extend,57,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extend']
Modifiability,// Vector sign/zero extend with additional mask & VL operands.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h:20,extend,extend,20,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.h,1,['extend'],['extend']
Modifiability,// Vector variable shift,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h:10,variab,variable,10,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.h,1,['variab'],['variable']
Modifiability,"// Vector was scalarized, and the elements extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:43,extend,extended,43,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['extend'],['extended']
Modifiability,"// Vectors that are less than 64 bits get widened to neatly fit a 64 bit; // register, so e.g. <4 x i1> gets lowered to <4 x i16>. Sign extending to; // this element size leads to the best codegen, since e.g. setcc results; // might need to be truncated otherwise.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:136,extend,extending,136,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// Verify that CHECK-LABEL lines do not define or use variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp:54,variab,variables,54,interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FileCheck/FileCheck.cpp,1,['variab'],['variables']
Modifiability,"// Verify that both variables are floating parameters of PDF",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:20,variab,variables,20,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['variab'],['variables']
Modifiability,"// Verify that the range covers exactly the name.; // FIXME: extend this code to support cases like `operator +` or; // `foo<int>` for which this range will be too short. Doing so will; // require subcasing `NamedDecl`, because it doesn't provide virtual; // access to the \c DeclarationNameInfo.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp:61,extend,extend,61,interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Transformer/RangeSelector.cpp,1,['extend'],['extend']
Modifiability,"// Verify that using observable clones -- i.e., variables with the same names; // as the ones in the computation graph -- does not change the client-server; // structure of a RooRealIntegral. Covers GitHub issue #11637.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx:48,variab,variables,48,roofit/roofitcore/test/testRooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooRealIntegral.cxx,1,['variab'],['variables']
Modifiability,// Verify the old decl was also a variable or variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],['variable']
Modifiability,"// Verify we have a legal type before going any further. Currently, we handle; // simple types that will directly fit in a register (i32/f32/i64/f64) or; // those that can be sign or zero-extended to a basic operation (i1/i8/i16).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:188,extend,extended,188,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,2,['extend'],['extended']
Modifiability,"// Veto '[' and ']' as next characters. If the variable is called `x`; // or `0`, this might otherwise replace `x[0]`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx:47,variab,variable,47,roofit/roofitcore/src/RooFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFormula.cxx,1,['variab'],['variable']
Modifiability,"// Veto Variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h:8,Variab,Variable,8,gui/ged/inc/TH1Editor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/ged/inc/TH1Editor.h,1,['Variab'],['Variable']
Modifiability,"// Virtual inheritance case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx:11,inherit,inheritance,11,core/metacling/src/TClingBaseClassInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingBaseClassInfo.cxx,1,['inherit'],['inheritance']
Modifiability,"// Visit all non-def extenders. For each one, determine the offset range; // available for it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:21,extend,extenders,21,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extenders']
Modifiability,"// Visit each global variable, in order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp,1,['variab'],['variable']
Modifiability,"// Visit parameter variable declarations of the implicit function; // if the traverser is visiting implicit code. Parameter variable; // declarations do not have valid TypeSourceInfo, so to visit them; // we need to traverse the declarations explicitly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h:19,variab,variable,19,interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/RecursiveASTVisitor.h,2,['variab'],['variable']
Modifiability,// Visit the IR stream and instrument all select instructions. \p; // Ind is a pointer to the counter index variable; \p TotalNC; // is the total number of counters; \p FNV is the pointer to the; // PGO function name var; \p FHash is the function hash.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp:108,variab,variable,108,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/PGOInstrumentation.cpp,1,['variab'],['variable']
Modifiability,"// W4 temporary variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:16,variab,variables,16,math/mathcore/src/TMath.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx,1,['variab'],['variables']
Modifiability,"// WVE copy values of cached variables here!!!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:29,variab,variables,29,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['variab'],['variables']
Modifiability,"// WVE need to reset TTRee buffers to original datamembers here; //resetBuffers() ;; // Refill regular and cached variables of current tree from clone",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:114,variab,variables,114,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['variab'],['variables']
Modifiability,"// WVE needs adaptation for rangeName feature",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumPdf.cxx:13,adapt,adaptation,13,roofit/roofitcore/src/RooRealSumPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealSumPdf.cxx,1,['adapt'],['adaptation']
Modifiability,"// WVE needs adaptation for rangename feature; // Partial integration scenarios",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:13,adapt,adaptation,13,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['adapt'],['adaptation']
Modifiability,"// WVE needs adaptation to handle new rangeName feature",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:13,adapt,adaptation,13,roofit/roofitcore/src/RooAddPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx,1,['adapt'],['adaptation']
Modifiability,"// WVE needs adaptation to handle new rangeName feature; // Handle trivial passthrough scenario",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:13,adapt,adaptation,13,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,1,['adapt'],['adaptation']
Modifiability,// Walk RewriteRope chunks efficiently using MoveToNextPiece() instead of the; // character iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp:8,Rewrite,RewriteRope,8,interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Rewrite/Rewriter.cpp,1,['Rewrite'],['RewriteRope']
Modifiability,"// Walk back down the scope stack, (e.g. from outer lambda to inner lambda); // computing the type of the capture at each step, checking type-specific; // requirements, and adding captures if requested.; // If the variable had already been captured previously, we start capturing; // at the lambda nested within that one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:214,variab,variable,214,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// Walk over the VLAs for every dimension until a non-VLA is found.; // There is a VariableArrayType for every dimension (fixed or variable) until; // the most inner array that is variably modified.; // Dimension sizes are collected into 'VLASizes'. 'VLALast' is set to the; // innermost VLA that was encountered.; // In ""int vla[x][2][y][3]"" this will be the array for index ""y"" (with type; // int[3]). 'VLASizes' contains 'x', '2', and 'y'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VLASizeChecker.cpp:83,Variab,VariableArrayType,83,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VLASizeChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VLASizeChecker.cpp,3,"['Variab', 'variab']","['VariableArrayType', 'variable', 'variably']"
Modifiability,"// Walk over the flexible-offset fields, tracking MaxAlign and; // assigning them a unique number in order of their appearance.; // We'll use this unique number in the comparison below so that; // we can use array_pod_sort, which isn't stable. We won't use it; // past that point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:17,flexible,flexible-offset,17,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,1,['flexible'],['flexible-offset']
Modifiability,// Walk past any constructs which we can lifetime-extend across.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:50,extend,extend,50,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"// Walk the Runtime list to get all protocols implied via the inclusion of; // this protocol, e.g. all protocols it inherits from including itself.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp:116,inherit,inherits,116,interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjC.cpp,1,['inherit'],['inherits']
Modifiability,"// Walk the blocks of the function in ""physical"" order.; // Every block inherits the frame state (as recorded in the unwind tables); // of the previous block. If the intended frame state is different, insert; // compensating CFI instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CFIFixup.cpp:72,inherit,inherits,72,interpreter/llvm-project/llvm/lib/CodeGen/CFIFixup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CFIFixup.cpp,1,['inherit'],['inherits']
Modifiability,// Walk the captured variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,['variab'],['variables']
Modifiability,"// Walk the flexible-offset fields, optimistically assigning fixed; // offsets. Note that we maintain a strict division between the; // fixed-offset and flexible-offset fields, so if we end up; // discovering padding later in this loop, we can just abandon this; // work and we'll ignore the offsets we already assigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:12,flexible,flexible-offset,12,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,2,['flexible'],['flexible-offset']
Modifiability,"// Walk the users of a variable operand of a compare looking for a subtract or; // add with that same operand. Also match the 2nd operand of the compare to; // the add/sub, but that may be a negated constant operand of an add.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// Walk through a subset of the changes, starting at StartAt, and find; // sequences of matching tokens to align. To do so, keep track of the lines and; // whether or not a matching token was found on a line. If a matching token is; // found, extend the current sequence. If the current line cannot be part of a; // sequence, e.g. because there is an empty line before it or it contains only; // non-matching tokens, finalize the previous sequence.; // The value returned is the token on which we stopped, either because we; // exhausted all items inside Changes, or because we hit a scope level higher; // than our initial scope.; // This function is recursive. Each invocation processes only the scope level; // equal to the initial level, which is the level of Changes[StartAt].; // If we encounter a scope level greater than the initial level, then we call; // ourselves recursively, thereby avoiding the pollution of the current state; // with the alignment requirements of the nested sub-level. This recursive; // behavior is necessary for aligning function prototypes that have one or more; // arguments.; // If this function encounters a scope level less than the initial level,; // it returns the current position.; // There is a non-obvious subtlety in the recursive behavior: Even though we; // defer processing of nested levels to recursive invocations of this; // function, when it comes time to align a sequence of tokens, we run the; // alignment on the entire sequence, including the nested levels.; // When doing so, most of the nested tokens are skipped, because their; // alignment was already handled by the recursive invocations of this function.; // However, the special exception is that we do NOT skip function parameters; // that are split across multiple lines. See the test case in FormatTest.cpp; // that mentions ""split function parameter alignment"" for an example of this.; // When the parameter RightJustify is true, the operator will be; // right-justified. It is used ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp:243,extend,extend,243,interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/WhitespaceManager.cpp,1,['extend'],['extend']
Modifiability,"// Walk through the global variable initializers, and replace any use of; // original global variables in GVMap with a use of the corresponding copies; // in GVMap. The copies need to be bitcast to the original global variable; // types, as we cannot use cvta in global variable initializers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,4,['variab'],"['variable', 'variables']"
Modifiability,"// Walk through the instructions in function defitinions, and replace any use; // of original global variables in GVMap with a use of the corresponding; // copies in GVMap. If necessary, promote constants to instructions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp:101,variab,variables,101,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXGenericToNVVM.cpp,1,['variab'],['variables']
Modifiability,"// Walk through the operands of a given User via worklist iteration and populate; // the set of GlobalValue references encountered. Invoked either on an; // Instruction or a GlobalVariable (which walks its initializer).; // Return true if any of the operands contains blockaddress. This is important; // to know when computing summary for global var, because if global variable; // references basic block address we can't import it separately from function; // containing that basic block. For simplicity we currently don't import such; // global vars at all. When importing function we aren't interested if any; // instruction in it takes an address of any basic block, because instruction; // can only take an address of basic block located in the same function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:369,variab,variable,369,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// Walk up the stack to determine whether we can capture the variable,; // performing the ""simple"" checks that don't depend on type. We stop when; // we've either hit the declared scope of the variable or find an existing; // capture of that variable. We start from the innermost capturing-entity; // (the DC) and ensure that all intervening capturing-entities; // (blocks/lambdas etc.) between the innermost capturer and the variable`s; // declcontext can either capture the variable or have already captured; // the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,6,['variab'],['variable']
Modifiability,"// Warn about externally-visible variables being defined without a; // prior declaration. We only want to do this for global; // declarations, but we also specifically need to avoid doing it for; // class members because the linkage of an anonymous class can; // change if it's later given a typedef name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// Warn about retain cycles where a block captures the LHS, but; // not if the LHS is a simple variable into which the block is; // being stored...unless that variable can be captured by reference!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:95,variab,variable,95,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variable']
Modifiability,// Warn about zero linear step (it would be probably better specified as; // making corresponding variables 'const').,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:98,variab,variables,98,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Warn for reference variables whose initializtion performs lifetime; // extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:22,variab,variables,22,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,// Warn if an already-declared variable is made a weak_import in a subsequent; // declaration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Warn when the loop variable is a const reference that creates a copy.; // Suggest using the non-reference type for copies. If a copy can be prevented; // suggest the const reference type that would do so.; // For instance, given ""for (const &Foo : Range)"", suggest; // ""for (const Foo : Range)"" to denote a copy is made for the loop. If; // possible, also suggest ""for (const &Bar : Range)"" if this type prevents; // the copy altogether.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,"// Warns when the loop variable can be changed to a reference type to; // prevent a copy. For instance, if given ""for (const Foo x : Range)"" suggest; // ""for (const Foo &x : Range)"" if this form does not make a copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,// Wasm specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h:17,config,configuration,17,interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/wasm/WasmConfig.h,1,['config'],['configuration']
Modifiability,// We add +1 here because the LastXXX variables refer to location while; // the NumElem refers to array/index size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,variab,variables,38,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variables']
Modifiability,"// We allow 8 different font families: Normal, Bold, Italic and Bold-Italic; // in either variable or constant width. Within each family there can be up; // to 7 font sizes from 1 (the smallest) up to 7 (the largest). Hence, the; // widget can use a maximum of 56 fonts. The "".font"" field of the style is; // an integer between 0 and 55 which indicates which font to use.; // HP: we further subdivide the .font field into two 3-bit subfields (size; // and family). That makes easier to manipulate the family field.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h:90,variab,variable,90,gui/guihtml/inc/TGHtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guihtml/inc/TGHtml.h,1,['variab'],['variable']
Modifiability,"// We allow for looking for a data member inside a class inside; // a TClonesArray without mentioning the TClonesArrays variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:120,variab,variable,120,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// We allow the ""register"" storage class on exception variables because; // GCC did, but we drop it completely. Any other storage class is an error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp:54,variab,variables,54,interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclObjC.cpp,1,['variab'],['variables']
Modifiability,"// We already have a Phi node in the current block,; // so just add the new variable to the Phi node.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:76,variab,variable,76,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variable']
Modifiability,// We already have a variable template specialization with these template; // arguments.; // FIXME: Check for specialization vs. instantiation errors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:21,variab,variable,21,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,1,['variab'],['variable']
Modifiability,// We already know the block is live; // Mark the variable known alive in this bb,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp:50,variab,variable,50,interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveVariables.cpp,1,['variab'],['variable']
Modifiability,"// We also need to add the weight variable of the original dataset if; // it's not added yet, again to query the error attributes correctly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:34,variab,variable,34,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variable']
Modifiability,"// We also reset the bootstrapping variable - see; // TGLCamera::OfInterest comments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx:35,variab,variable,35,graf3d/gl/src/TGLCamera.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/src/TGLCamera.cxx,1,['variab'],['variable']
Modifiability,"// We always destroy parameters at the end of the call, even if we'd allow; // them to live to the end of the full-expression at runtime, in order to; // give portable results and match other compilers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:159,portab,portable,159,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['portab'],['portable']
Modifiability,"// We are *not* a top-level branch and we are *not* a pointer to an STL container.; // Case of an embedded STL container.; // Note: We test for the kObject and kAny types to support; // the (unwise) choice of inheriting from an STL container.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:209,inherit,inheriting,209,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['inherit'],['inheriting']
Modifiability,// We are able to place the member variable at this offset.; // Make sure to update the empty field subobject map.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,1,['variab'],['variable']
Modifiability,"// We are adding all independent direct servers of the args depending on the; // integration variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:93,variab,variables,93,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['variab'],['variables']
Modifiability,"// We are creating a vector extend. If the original vector extend has another; // use, that would mean we end up with 2 vector extends, so avoid that.; // TODO: We could ease the use-clause to ""if at least one op has one use""; // (assuming that the source types match - see next TODO comment).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:28,extend,extend,28,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,3,['extend'],"['extend', 'extends']"
Modifiability,"// We are extending an element we extract from a vector, so the source type; // of the extend is the element type of the vector.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:10,extend,extending,10,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,// We are going to resume the execution of the scalar loop.; // Go over all of the induction variables that we found and fix the; // PHIs that are left in the scalar version of the loop.; // The starting values of PHI nodes depend on the counter of the last; // iteration in the vectorized loop.; // If we come from a bypass edge then we need to start from the original; // start value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:93,variab,variables,93,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,"// We are going to try to rewrite this load to a larger zero-extending; // load. This is safe if all portions of the 32 bit super-register; // of the original destination register, except for the original destination; // register are dead. getSuperRegDestIfDead checks that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp:26,rewrite,rewrite,26,interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FixupBWInsts.cpp,2,"['extend', 'rewrite']","['extending', 'rewrite']"
Modifiability,// We are just checking source rewrites.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp:31,rewrite,rewrites,31,interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/TransformActions.cpp,1,['rewrite'],['rewrites']
Modifiability,// We are looking for a gep with all loop invariant indices except for one; // which should be an induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:108,variab,variable,108,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// We are looking for something that will have illegal types if left alone,; // but that we can convert to a single instruction under MVE. For example; // vecreduce_add(sext(A, v8i32)) => VADDV.s16 A; // or; // vecreduce_add(mul(zext(A, v16i32), zext(B, v16i32))) => VMLADAV.u8 A, B; // The legal cases are:; // VADDV u/s 8/16/32; // VMLAV u/s 8/16/32; // VADDLV u/s 32; // VMLALV u/s 16/32; // If the input vector is smaller than legal (v4i8/v4i16 for example) we can; // extend it and use v4i32 instead.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:473,extend,extend,473,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// We are merging a variable declaration New into Old. If it has an array; // bound, and that bound differs from Old's bound, we should diagnose the; // mismatch.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:20,variab,variable,20,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// We are merging two blocks - BB, and the block containing PN - and; // as a result we need to redirect edges from the predecessors of BB; // to go to the block containing PN, and update PN; // accordingly. Since we allow merging blocks in the case where the; // predecessor and successor blocks both share some predecessors,; // and where some of those common predecessors might have undef; // values flowing into PN, we want to rewrite those values to be; // consistent with the non-undef values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:431,rewrite,rewrite,431,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['rewrite'],['rewrite']
Modifiability,// We are not able to config tile registers since the shape to config; // is not defined yet. Emit error message and continue. The function; // would not config tile registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp:22,config,config,22,interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86PreTileConfig.cpp,3,['config'],['config']
Modifiability,"// We assign strategies to variables that are 1) in the graph and 2) can be; // fixed. Other variables have the default ""Won't fix"" strategy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:27,variab,variables,27,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,2,['variab'],['variables']
Modifiability,"// We assume only one possible variable length dimension (the left most)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:31,variab,variable,31,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,// We assume that external begin/end symbols that we have created above will; // be defined by the linker. This is done whenever a section name with a; // valid C-identifier is present. We define a dummy variable here to force; // the linker to always provide these symbols.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/Offloading/Utility.cpp:204,variab,variable,204,interpreter/llvm-project/llvm/lib/Frontend/Offloading/Utility.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/Offloading/Utility.cpp,1,['variab'],['variable']
Modifiability,"// We assume that the stack extends from its current address to the end of; // the environment space. In reality, there is another string literal (the; // program name) after the environment, but this is close enough (we only; // need to be within 100K or so).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1_main.cpp:28,extend,extends,28,interpreter/llvm-project/clang/tools/driver/cc1_main.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/driver/cc1_main.cpp,1,['extend'],['extends']
Modifiability,"// We build scalar steps for both integer and floating-point induction; // variables. Here, we determine the kind of arithmetic we will perform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:75,variab,variables,75,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variables']
Modifiability,"// We calculate the interleave count using the following formula.; // Subtract the number of loop invariants from the number of available; // registers. These registers are used by all of the interleaved instances.; // Next, divide the remaining registers by the number of registers that is; // required by the loop, in order to estimate how many parallel instances; // fit without causing spills. All of this is rounded down if necessary to be; // a power of two. We want power of two interleave count to simplify any; // addressing operations or alignment considerations.; // We also want power of two interleave counts to ensure that the induction; // variable of the vector loop wraps to zero, when tail is folded by masking;; // this currently happens when OptForSize, in which case IC is set to 1 above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:655,variab,variable,655,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// We call the function what handles the extended "".help scopeName"" command.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx:41,extend,extended,41,core/base/src/TApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TApplication.cxx,1,['extend'],['extended']
Modifiability,// We can accept extending nodes if the mask is wider or an equal; // width to the original type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,extend,extending,17,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"// We can be asked to zero-initialize a flexible array member; this; // is represented as an ImplicitValueInitExpr of incomplete array; // type. In this case, the array has zero elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:40,flexible,flexible,40,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['flexible'],['flexible']
Modifiability,"// We can convert this to:; // 1. Any extend iN to iM; // 2. SHL by M-N; // 3. [US][ADD|SUB|SHL]SAT; // 4. L/ASHR by M-N; //; // It may be more efficient to lower this to a min and a max operation in; // the higher precision arithmetic if the promoted operation isn't legal,; // but this decision is up to the target's lowering request.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:38,extend,extend,38,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extend']
Modifiability,"// We can do a raw name replacement when we are not inside the namespace for; // the original class/function and it is not in the global namespace. The; // assumption is that outside the original namespace we must have a using; // statement that makes this work out and that other parts of this refactor; // will automatically fix using statements to point to the new class/function.; // However, if the `FromDecl` is a class forward declaration, the reference is; // still considered as referring to the original definition, so we can't do a; // raw name replacement in this case.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Lookup.cpp:295,refactor,refactor,295,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Lookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Lookup.cpp,1,['refactor'],['refactor']
Modifiability,"// We can do better than a generic split operation if the extend is doing; // more than just doubling the width of the elements and the following are; // true:; // - The number of vector elements is even,; // - the source type is legal,; // - the type of a split source is illegal,; // - the type of an extended (by doubling element size) source is legal, and; // - the type of that extended source when split is legal.; //; // This won't necessarily completely legalize the operation, but it will; // more effectively move in the right direction and prevent falling down; // to scalarization in many cases due to the input vector being split too; // far.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:58,extend,extend,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,3,['extend'],"['extend', 'extended']"
Modifiability,// We can eliminate EXTSW if the input is known to be already; // sign-extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:71,extend,extended,71,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,1,['extend'],['extended']
Modifiability,// We can encounter a global variable instead of a function in rare; // situations with SamplePGO. See comments where this failure type is; // set for more details.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h:29,variab,variable,29,interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/IPO/FunctionImport.h,1,['variab'],['variable']
Modifiability,// We can expect to see any number of type ID information records before; // each function summary records; these variables store the information; // collected so far so that it can be used to create the summary object.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp:114,variab,variables,114,interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Bitcode/Reader/BitcodeReader.cpp,1,['variab'],['variables']
Modifiability,"// We can extend to types bigger than f32 in two steps without changing; // the result. Since ""f16 -> f32"" is much more commonly available, give; // CodeGen the option of emitting that before resorting to a libcall.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:10,extend,extend,10,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,2,['extend'],['extend']
Modifiability,// We can get 256-bit 8 element types here without VLX being enabled. When; // this happens we will use 512-bit operations and the mask will not be; // zero extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:157,extend,extended,157,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// We can give up once we have a single item (or have run out of things to; // search) since cyclical inheritance isn't valid.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:102,inherit,inheritance,102,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['inherit'],['inheritance']
Modifiability,"// We can handle cases concerning bit-widening nodes containing setcc_c if; // we carefully interrogate the mask to make sure we are semantics; // preserving.; // The transform is not safe if the result of C1 << C2 exceeds the bitwidth; // of the underlying setcc_c operation if the setcc_c was zero extended.; // Consider the following example:; // zext(setcc_c) -> i32 0x0000FFFF; // c1 -> i32 0x0000FFFF; // c2 -> i32 0x00000001; // (shl (and (setcc_c), c1), c2) -> i32 0x0001FFFE; // (and setcc_c, (c1 << c2)) -> i32 0x0000FFFE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:300,extend,extended,300,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// We can have a list of comma separated config names, e.g:; // '-analyzer-config key1=val1,key2=val2'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp:41,config,config,41,interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInvocation.cpp,2,['config'],['config']
Modifiability,"// We can legally widen the comparison in the following two cases:; //; // - The signedness of the IV extension and comparison match; //; // - The narrow IV is always positive (and thus its sign extension is equal; // to its zero extension). For instance, let's say we're zero extending; // %narrow for the following use; //; // icmp slt i32 %narrow, %val ... (A); //; // and %narrow is always positive. Then; //; // (A) == icmp slt i32 sext(%narrow), sext(%val); // == icmp slt i32 zext(%narrow), sext(%val)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:277,extend,extending,277,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['extend'],['extending']
Modifiability,"// We can narrow (e.g.) 16-bit extending loads on 32-bit target to; // 8 bits, but have to be careful...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:31,extend,extending,31,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,1,['extend'],['extending']
Modifiability,// We can never refer to a variable with local storage.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['variab'],['variable']
Modifiability,// We can only do this if the variable is const.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,// We can only walk across public inheritance edges.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:34,inherit,inheritance,34,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['inherit'],['inheritance']
Modifiability,"// We can perform the conversion between vector types in the following cases:; // 1)vector types are equivalent AltiVec and GCC vector types; // 2)lax vector conversions are permitted and the vector types are of the; // same size; // 3)the destination type does not have the ARM MVE strict-polymorphism; // attribute, which inhibits lax vector conversion for overload resolution; // only",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:290,polymorphi,polymorphism,290,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['polymorphi'],['polymorphism']
Modifiability,// We can perform this optimization only if SrcReg is sign-extending.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:59,extend,extending,59,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extending']
Modifiability,"// We can perform this optimization, equality only, if SrcReg is; // zero-extending.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp:74,extend,extending,74,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCInstrInfo.cpp,1,['extend'],['extending']
Modifiability,// We can realign the stack if we know the maximum call frame size and we; // don't have variable sized objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp:89,variab,variable,89,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,1,['variab'],['variable']
Modifiability,"// We can support a potentially wrapping instruction (I) if:; // - It is only used by an unsigned icmp.; // - The icmp uses a constant.; // - The wrapping value (I) is decreasing, i.e would underflow - wrapping; // around zero to become a larger number than before.; // - The wrapping instruction (I) also uses a constant.; //; // We can then use the two constants to calculate whether the result would; // wrap in respect to itself in the original bitwidth. If it doesn't wrap,; // just underflows the range, the icmp would give the same result whether the; // result has been truncated or not. We calculate this by:; // - Zero extending both constants, if needed, to RegisterBitWidth.; // - Take the absolute value of I's constant, adding this to the icmp const.; // - Check that this value is not out of range for small type. If it is, it; // means that it has underflowed enough to wrap around the icmp constant.; //; // For example:; //; // %sub = sub i8 %a, 2; // %cmp = icmp ule i8 %sub, 254; //; // If %a = 0, %sub = -2 == FE == 254; // But if this is evalulated as a i32; // %sub = -2 == FF FF FF FE == 4294967294; // So the unsigned compares (i8 and i32) would not yield the same result.; //; // Another way to look at it is:; // %a - 2 <= 254; // %a + 2 <= 254 + 2; // %a <= 256; // And we can't represent 256 in the i8 format, so we don't support it.; //; // Whereas:; //; // %sub i8 %a, 1; // %cmp = icmp ule i8 %sub, 254; //; // If %a = 0, %sub = -1 == FF == 255; // As i32:; // %sub = -1 == FF FF FF FF == 4294967295; //; // In this case, the unsigned compare results would be the same and this; // would also be true for ult, uge and ugt:; // - (255 < 254) == (0xFFFFFFFF < 254) == false; // - (255 <= 254) == (0xFFFFFFFF <= 254) == false; // - (255 > 254) == (0xFFFFFFFF > 254) == true; // - (255 >= 254) == (0xFFFFFFFF >= 254) == true; //; // To demonstrate why we can't handle increasing values:; //; // %add = add i8 %a, 2; // %cmp = icmp ult i8 %add, 127; //; // If %a = 254, %add",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp:629,extend,extending,629,interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TypePromotion.cpp,1,['extend'],['extending']
Modifiability,// We can turn this into an SRA iff the input to the SRL is already sign; // extended enough.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,extend,extended,77,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,// We can use the extended form of FI for other rounding operations.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:18,extend,extended,18,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extended']
Modifiability,// We can't always calculate the size of the DI variable (e.g. if it is a; // VLA). Try to use the size of the alloca that the dbg intrinsic describes; // intead.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:48,variab,variable,48,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,2,['variab'],['variable']
Modifiability,"// We can't combine to vpdpbusd for zext, because each of the 4 multiplies; // done by vpdpbusd compute a signed 16-bit product that will be sign extended; // before adding into the accumulator.; // TODO:; // We also need to verify that the multiply has at least 2x the number of bits; // of the input. We shouldn't match; // (sign_extend (mul (vXi9 (zext (vXi8 X))), (vXi9 (zext (vXi8 Y)))).; // if (Root && (Root.getOpcode() == ISD::SIGN_EXTEND)); // Root = Root.getOperand(0);; // If there was a match, we want Root to be a mul.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:146,extend,extended,146,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// We can't designate an object within the flexible array; // member (because GCC doesn't allow it).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:43,flexible,flexible,43,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['flexible'],['flexible']
Modifiability,// We can't determine if the local variable outlives the statement; // expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:35,variab,variable,35,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,// We can't directly extend an SVE predicate; extend it first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:21,extend,extend,21,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// We can't directly extract from an SVE predicate; extend it first.; // (This isn't the only possible lowering, but it's straightforward.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:52,extend,extend,52,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// We can't directly insert an i8 or i16 into a vector, so zero extend; // it to i32 first.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extend']
Modifiability,// We can't do a vXi16 compare so sign extend to v16i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:39,extend,extend,39,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extend']
Modifiability,// We can't extendRegion here or we risk overlapping with our new region.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:12,extend,extendRegion,12,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,1,['extend'],['extendRegion']
Modifiability,// We can't handle loads that extend past the allocated memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:30,extend,extend,30,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['extend'],['extend']
Modifiability,// We can't handle stores that extend past the allocated memory.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['extend'],['extend']
Modifiability,// We can't handle thread-local variables quickly yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:32,variab,variables,32,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['variab'],['variables']
Modifiability,"// We can't just promote the exponent type in FPOWI, since we want to lower; // the node to a libcall and we if we promote to a type larger than; // sizeof(int) the libcall might not be according to the targets ABI. Instead; // we rewrite to a libcall here directly, letting makeLibCall handle promotion; // if the target accepts it according to shouldSignExtendTypeInLibCall.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:231,rewrite,rewrite,231,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['rewrite'],['rewrite']
Modifiability,// We can't lifetime extend through this but we might still find some; // retained temporaries.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:21,extend,extend,21,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,// We can't reasonably handle cases where the load or store extends past; // the end of the alloca's type and into its padding.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:60,extend,extends,60,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['extend'],['extends']
Modifiability,"// We can't reassign constexpr or const variables. We can compute the; // initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingDataMemberInfo.cxx:40,variab,variables,40,core/metacling/src/TClingDataMemberInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingDataMemberInfo.cxx,1,['variab'],['variables']
Modifiability,// We can't rewrite the same node twice.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:12,rewrite,rewrite,12,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// We can't save an operation here if the value is already extended, and; // the existing shift is easier to combine.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:59,extend,extended,59,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// We can't slide this mask vector down, indexed by its i1 elements.; // This poses a problem when we wish to extract a scalable vector which; // can't be re-expressed as a larger type. Just choose the slow path and; // extend to a larger type, then truncate back down.; // TODO: We could probably improve this when extracting certain fixed; // from fixed, where we can extract as i8 and shift the correct element; // right to reach the desired subvector?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:220,extend,extend,220,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// We can't slide this mask vector up indexed by its i1 elements.; // This poses a problem when we wish to insert a scalable vector which; // can't be re-expressed as a larger type. Just choose the slow path and; // extend to a larger type, then truncate back down.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:216,extend,extend,216,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,// We can't use a generic validation scheme for the cpus accepted here; // versus subtarget cpus accepted in the target attribute because the; // variables intitialized by the runtime only support the below currently; // rather than the full range of cpus.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp:146,variab,variables,146,interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Basic/Targets/X86.cpp,1,['variab'],['variables']
Modifiability,// We cannot 'continue;' from within a statement expression in the; // initializer of a condition variable because we would jump past the; // initialization of that variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:98,variab,variable,98,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,2,['variab'],['variable']
Modifiability,// We cannot describe the location of dllimport'd variables: the; // computation of their address requires loads from the IAT.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp:50,variab,variables,50,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfCompileUnit.cpp,1,['variab'],['variables']
Modifiability,"// We cannot directly use RFieldBase::RDeleter as a shared pointer deleter due to splicing. We use this; // wrapper class to store a polymorphic pointer to the actual deleter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:133,polymorphi,polymorphic,133,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['polymorphi'],['polymorphic']
Modifiability,// We cannot fix a variable declaration if it has some other specifiers than the; // type specifier. Because the source ranges of those specifiers could overlap; // with the source range that is being replaced using fix-its. Especially when; // we often cannot obtain accurate source ranges of cv-qualified type; // specifiers.; // FIXME: also deal with type attributes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,"// We cannot rename arbitrary implicit-defs, the specific rule to rewrite; // them must be known. For example, in ORRWrs the implicit-def; // corresponds to the result register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp:66,rewrite,rewrite,66,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64LoadStoreOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// We cannot rewrite exiting edges from an indirectbr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp:13,rewrite,rewrite,13,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopUtils.cpp,1,['rewrite'],['rewrite']
Modifiability,"// We cannot rewrite out of bound operands.; // Moreover, rewritable sources are at odd positions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:13,rewrite,rewrite,13,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// We cannot use a ZExt ArgInfo flag here, because it will; // zero-extend the argument to i32 instead of just i8.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:68,extend,extend,68,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['extend'],['extend']
Modifiability,"// We compared equal only two iterator of the same type.; // Since this is a function of TListIter, we consequently know that; // both this and aIter are of type inheriting from TListIter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx:162,inherit,inheriting,162,core/cont/src/TList.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TList.cxx,1,['inherit'],['inheriting']
Modifiability,"// We compute `Smallest` and `Greatest` such that [Smallest, Greatest), or; // [Smallest, GreatestSeen] is the range of values the induction variable; // takes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp:141,variab,variable,141,interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/InductiveRangeCheckElimination.cpp,1,['variab'],['variable']
Modifiability,// We constructed the object directly in the variable.; // No need to bind anything.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineC.cpp,1,['variab'],['variable']
Modifiability,// We convert the floating point induction variable to a signed i32 value if; // we can. This is only safe if the comparison will not overflow in a way; // that won't be trapped by the integer equivalent operations. Check for this; // now.; // TODO: We could use i64 if it is native and the range requires it.; // The start/stride/exit values must all fit in signed i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['variab'],['variable']
Modifiability,"// We could allow extending/narrowing FP loads/stores, but codegen is; // too inefficient so reject this for now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:18,extend,extending,18,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extending']
Modifiability,"// We could be called with an integer-typed operands during SCEV rewrites.; // Since the operand is an integer already, just perform zext/trunc/self cast.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:65,rewrite,rewrites,65,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['rewrite'],['rewrites']
Modifiability,// We could be using an instruction with an extendable immediate and shoehorn; // a global address into it. If it is a global address it will be constant; // extended. We do this for COMBINE.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp:44,extend,extendable,44,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonInstrInfo.cpp,2,['extend'],"['extendable', 'extended']"
Modifiability,"// We could either have a variable size array which is currently of size one; // or a single element that might or not might not be present (and is currently present!)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:26,variab,variable,26,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// We couldn't find a legal vector type that was a widening of the input; // and could be extended in-register to the result type, so we have to; // scalarize.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:90,extend,extended,90,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,1,['extend'],['extended']
Modifiability,"// We couldn't find any VC environment variables. Let's walk through PATH and; // see if it leads us to a VC toolchain bin directory. If it does, pick the; // first one that we find.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp:39,variab,variables,39,interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsDriver/MSVCPaths.cpp,1,['variab'],['variables']
Modifiability,"// We couldnt constant fold, do a vector shift instead; // Extend i32 to i64 if necessary. Sign or zero extend doesn't matter since; // only values 0-63 are valid.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp:59,Extend,Extend,59,interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsSEISelLowering.cpp,2,"['Extend', 'extend']","['Extend', 'extend']"
Modifiability,"// We create RooFit variables that will represent the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testActionHelpers.cxx:20,variab,variables,20,roofit/roofitcore/test/testActionHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testActionHelpers.cxx,1,['variab'],['variables']
Modifiability,"// We create vector phi nodes for both integer and floating-point induction; // variables. Here, we determine the kind of arithmetic we will perform.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp:80,variab,variables,80,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanRecipes.cpp,1,['variab'],['variables']
Modifiability,"// We currently don't model flexible array members (FAMs), which are:; // - int array[]; of IncompleteArrayType; // - int array[0]; of ConstantArrayType with size 0; // - int array[1]; of ConstantArrayType with size 1; // https://gcc.gnu.org/onlinedocs/gcc/Zero-Length.html",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp:28,flexible,flexible,28,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/MemRegion.cpp,1,['flexible'],['flexible']
Modifiability,"// We deviate from the specification here, which says:; // ""The name index must contain an entry for each debugging information entry; // that defines a named subprogram, label, variable, type, or namespace,; // subject to ...""; // Explicitly exclude all TAGs that we know shouldn't be indexed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp:178,variab,variable,178,interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/DebugInfo/DWARF/DWARFVerifier.cpp,1,['variab'],['variable']
Modifiability,// We did not find a placeholder variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,// We did not know how many value sites there would be inside; // the instrumented function. This is counting the number of instrumented; // target value sites to enter it as field in the profile data variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:201,variab,variable,201,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"// We didn't lifetime-extend, so don't go any further; we don't need more; // warnings or errors on inner temporaries within this one's initializer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:22,extend,extend,22,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['extend'],['extend']
Modifiability,"// We do not add HD attributes to specializations here because; // they may have different constexpr-ness compared to their; // templates and, after maybeAddCUDAHostDeviceAttrs() is applied,; // may end up with different effective targets. Instead, a; // specialization inherits its target attributes from its template; // in the CheckFunctionTemplateSpecialization() call below.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:270,inherit,inherits,270,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['inherit'],['inherits']
Modifiability,"// We do not look directly into function or method contexts,; // since all of the local variables and parameters of the; // function/method are present within the Scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp:88,variab,variables,88,interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLookup.cpp,1,['variab'],['variables']
Modifiability,"// We do not use AlignInBits in hashing function here on purpose:; // in most cases this param for local variable is zero (for function param; // it is always zero). This leads to lots of hash collisions and errors on; // cases with lots of similar variables.; // clang/test/CodeGen/debug-info-257-args.c is an example of this problem,; // generated IR is random for each run and test fails with Align included.; // TODO: make hashing work fine with such situations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h:105,variab,variable,105,interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/LLVMContextImpl.h,4,['variab'],"['variable', 'variables']"
Modifiability,"// We do not use an intermediary variable because ResetDimensions; // might add more formulas (TCutG).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormulaManager.cxx:33,variab,variable,33,tree/treeplayer/src/TTreeFormulaManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormulaManager.cxx,1,['variab'],['variable']
Modifiability,"// We do not use vsext/vzext to extend from mask vector.; // Instead we use the following instructions to extend from mask vector:; // vmv.v.i v8, 0; // vmerge.vim v8, v8, -1, v0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp:32,extend,extend,32,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVTargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,"// We do not want more constrains than variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpProbDens.cxx:39,variab,variables,39,math/quadp/src/TQpProbDens.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpProbDens.cxx,2,['variab'],['variables']
Modifiability,"// We do not want to warn on some patterns widely used in configuration; // scripts. This requires analyzing next tokens, so do not issue warnings; // now, only inform caller.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp:58,config,configuration,58,interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Lex/PPDirectives.cpp,1,['config'],['configuration']
Modifiability,"// We do this without the plugin manager because it blocks the CINT mutex; // breaking the parallel startup",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx:26,plugin,plugin,26,proof/proof/src/TSlave.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TSlave.cxx,1,['plugin'],['plugin']
Modifiability,"// We don't allow inlining of function with indirect branch to blockaddress.; // If the blockaddress escapes the function, e.g., via a global variable,; // inlining may lead to an invalid cross-function reference. So we shouldn't; // import such function either.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp:142,variab,variable,142,interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ModuleSummaryAnalysis.cpp,1,['variab'],['variable']
Modifiability,// We don't allow variably-modified types as the type of non-type template; // parameters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:18,variab,variably-modified,18,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variably-modified']
Modifiability,// We don't extend or shrink something that has multiple uses -- doing so; // would require duplicating the instruction which isn't profitable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,// We don't have a cached result. Lookup the variable declaration and create; // a new entry representing it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ComparisonCategories.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/AST/ComparisonCategories.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ComparisonCategories.cpp,1,['variab'],['variable']
Modifiability,"// We don't have definitions for variables on the backedge, because we; // haven't gotten that far in the CFG. Thus, when encountering a back edge,; // we conservatively create Phi nodes for all variables. Unnecessary Phi; // nodes will be marked as incomplete, and stripped out at the end.; //; // An Phi node is unnecessary if it only refers to itself and one other; // variable, e.g. x = Phi(y, y, x) can be reduced to x = y.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// We don't have extending load instruction on vector registers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:17,extend,extending,17,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extending']
Modifiability,"// We don't have external taint config, no parsing required.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp:32,config,config,32,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/GenericTaintChecker.cpp,1,['config'],['config']
Modifiability,"// We don't know the desired configuration for this module and don't; // necessarily even have a module map. Since ReadAST already produces; // diagnostics for these two cases, we simply error out here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:29,config,configuration,29,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['config'],['configuration']
Modifiability,// We don't lose any non-extension bits by truncating the src and; // sign-extending the dst.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:75,extend,extending,75,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['extend'],['extending']
Modifiability,// We don't need live-in variable values for this block either.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:25,variab,variable,25,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// We don't plan to emit a fixit for this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// We don't rewrite defs.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp:12,rewrite,rewrite,12,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// We don't sign-extend constants.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// We don't support extending fp types.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp:20,extend,extending,20,interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMTargetTransformInfo.cpp,1,['extend'],['extending']
Modifiability,// We don't support scalable global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:36,variab,variables,36,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,1,['variab'],['variables']
Modifiability,// We don't use PersonalityEncoding and LSDAEncoding because we don't emit; // .cfi directives. We use TTypeEncoding to encode typeinfo global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:143,variab,variables,143,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['variab'],['variables']
Modifiability,"// We don't want (and (zext (shift...)), C) if C fits in the width of the; // original input as that will prevent us from selecting optimal rotates.; // This only matters if the input to the extend is i32 widened to i64.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:191,extend,extend,191,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// We don't want to consider the function itself; // Mark all args that are (indirect) value servers of the integration; // variable or the integration variable itself. If something was marked,; // it means the integration variable was in the compute graph and we will; // add it to the server list.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:124,variab,variable,124,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,3,['variab'],['variable']
Modifiability,// We don't want to implicitly move out of a __block variable during a return; // because we cannot assume the variable will no longer be used.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:53,variab,variable,53,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,2,['variab'],['variable']
Modifiability,// We don't want to propagate the extends unless there's a good chance that; // they'll be optimized in some way.; // Collect the unique incoming values.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:34,extend,extends,34,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extends']
Modifiability,// We don't wish to explicitly explore this variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:44,variab,variable,44,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,1,['variab'],['variable']
Modifiability,// We exclude variable argument instructions since variable arguments; // requires extra checking of the argument list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h:14,variab,variable,14,interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Analysis/IRSimilarityIdentifier.h,2,['variab'],['variable']
Modifiability,// We expect RewriteRules will most commonly include only one case.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:13,Rewrite,RewriteRules,13,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['Rewrite'],['RewriteRules']
Modifiability,// We expect the linker to be invoked with -u<hook_var> flag for Linux; // in which case there is no need to emit the external variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:127,variab,variable,127,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,// We extend a pair to allow users to override the bucket type with their own; // implementation without requiring two members.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h:6,extend,extend,6,interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/DenseMap.h,1,['extend'],['extend']
Modifiability,"// We extend the IV to satisfy the sign of its user(s), or 'signed'; // if there are multiple users with both sign- and zero extensions,; // in order not to introduce nondeterministic behaviour based on the; // unspecified order of a PHI nodes' users-iterator.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:6,extend,extend,6,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['extend'],['extend']
Modifiability,"// We extended the lifetime of NewSrc.Reg, clear the kill flags to; // account for that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:6,extend,extended,6,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['extend'],['extended']
Modifiability,"// We filtered out globals earlier, so it must be a local variable; // or a block variable which is under UnknownSpaceRegion.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/MacOSXAPIChecker.cpp,2,['variab'],['variable']
Modifiability,"// We finally eliminate compare instruction in MBB2.; // We do not need to treat CMPI2 specially here in terms of re-computing; // live variables even though it is being deleted because:; // - It defines a register that has a single use (already checked in; // eligibleForCompareElimination()); // - The only user (BI2) is no longer using it so the register is dead (no; // def, no uses); // - We do not attempt to recompute live variables for dead registers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp:136,variab,variables,136,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCMIPeephole.cpp,2,['variab'],['variables']
Modifiability,// We follow MSVC in mangling GUID declarations as if they were variables; // with a particular reserved name. Continue the pretense here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:64,variab,variables,64,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variables']
Modifiability,"// We found a candidate variable that can be put into a return slot.; // Clear the set, because other variables cannot occupy a return; // slot in the same scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Scope.cpp:24,variab,variable,24,interpreter/llvm-project/clang/lib/Sema/Scope.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Scope.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// We found a placeholder variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variable']
Modifiability,// We found a reduction var if we have reached the original phi node and we; // only have a single instruction with out-of-loop users.; // The ExitInstruction(Instruction which is allowed to have out-of-loop users); // is saved as part of the RecurrenceDescriptor.; // Save the description of this reduction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:308,variab,variable,308,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variable']
Modifiability,// We found a unit clause! The value of its unassigned variable is; // forced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,1,['variab'],['variable']
Modifiability,// We found an entry but it's stale. Rewrite the stale entry; // according to the current predicate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:37,Rewrite,Rewrite,37,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['Rewrite'],['Rewrite']
Modifiability,"// We generate each intrinsic twice, under its full unambiguous; // name and its shorter polymorphic name (if the latter exists).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:89,polymorphi,polymorphic,89,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,2,['polymorphi'],['polymorphic']
Modifiability,"// We give meta instructions the same ordinal as the preceding instruction; // because this class is written for the task of comparing positions of; // variable location ranges against scope ranges. To reflect what we'll see; // in the binary, when we look at location ranges we must consider all; // DBG_VALUEs between two real instructions at the same position. And a; // scope range which ends on a meta instruction should be considered to end; // at the last seen real instruction. E.g.; //; // 1 instruction p Both the variable location for x and for y start; // 1 DBG_VALUE for ""x"" after instruction p so we give them all the same; // 1 DBG_VALUE for ""y"" number. If a scope range ends at DBG_VALUE for ""y"",; // 2 instruction q we should treat it as ending after instruction p; // because it will be the last real instruction in the; // range. DBG_VALUEs at or after this position for; // variables declared in the scope will have no effect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp:152,variab,variable,152,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DbgEntityHistoryCalculator.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// We got int literal token.; // Only sign extend inline immediates.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp:43,extend,extend,43,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp,1,['extend'],['extend']
Modifiability,"// We handle DELEGATE in the default level, because DELEGATE has; // immediate operands to rewrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp:91,rewrite,rewrite,91,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyCFGStackify.cpp,1,['rewrite'],['rewrite']
Modifiability,"// We have 2 compares of a variable with constants. Calculate the constant; // ranges of those compares to see if we can transform the 2nd compare:; // DomBB:; // DomCond = icmp DomPred X, DomC; // br DomCond, CmpBB, FalseBB; // CmpBB:; // Cmp = icmp Pred X, C",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp:27,variab,variable,27,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp,1,['variab'],['variable']
Modifiability,"// We have 3 types of predicates: signed, unsigned and equality; // predicates. For equality, it's legal to widen icmp for either sign and; // zero extend. For sign extend, we can also do so for signed predicates,; // likeweise for zero extend we can widen icmp for unsigned predicates.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:148,extend,extend,148,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,3,['extend'],['extend']
Modifiability,"// We have a DbgOpID for every value or for none. Tell the variable value; // tracker about it. The rest of this LiveDebugValues implementation acts; // exactly the same for DBG_INSTR_REFs as DBG_VALUEs (just, the former can; // refer to values that aren't immediately available).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:59,variab,variable,59,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,// We have a list of components and base declarations for each entry in the; // variable list.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:80,variab,variable,80,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// We have a non-trivially-coalescable copy with IntA being the source and; // IntB being the dest, thus this defines a value number in IntB. If the; // source value number (in IntA) is defined by a copy from B, see if we can; // merge these two pieces of B into a single value number, eliminating a copy.; // For example:; //; // A3 = B0; // ...; // B1 = A3 <- this copy; //; // In this case, B0 can be extended to where the B1 copy lives, allowing the; // B1 value number to be replaced with B0 (which simplifies the B; // liveinterval).; // BValNo is a value number in B that is defined by a copy from A. 'B1' in; // the example above.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:404,extend,extended,404,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extended']
Modifiability,// We have a phi with exactly 1 variable incoming value and 1 or more constant; // incoming values. See if all constant incoming values can be mapped back to; // the same incoming variable value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/CorrelatedValuePropagation.cpp,2,['variab'],['variable']
Modifiability,// We have a polymorphic base class but can't extend its vftable. Add a; // new vfptr if we would use any vftable slots.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp:13,polymorphi,polymorphic,13,interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/RecordLayoutBuilder.cpp,2,"['extend', 'polymorphi']","['extend', 'polymorphic']"
Modifiability,"// We have a second variable dimensions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:20,variab,variable,20,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,// We have a series of consecutive stores. Factor out the common base; // pointer and rewrite the offsets.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp:86,rewrite,rewrite,86,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64PostLegalizerCombiner.cpp,1,['rewrite'],['rewrite']
Modifiability,"// We have a similar situation as the decoder, where we want to store; // variable length entries (code table entries), but we want to do in a; // faster manner than an array of arrays. The code below stores sort of a; // linked list within the code table, and then ""chases"" through it to; // construct the dictionary entries. When a new entry is created, just the; // last byte is stored, and the rest (prefix) of the entry is only; // referenced by its table entry. Then the code chases through the; // prefixes until it reaches a single byte code. We have to chase twice,; // first to compute the length, and then to actually copy the data to the; // output (backwards, since we know the length). The alternative would be; // storing something in an intermediate stack, but that doesn't make any; // more sense. I implemented an approach where it also stored the length; // in the code table, although it's a bit tricky because you run out of; // bits (12 + 12 + 8), but I didn't measure much improvements (the table; // entries are generally not the long). Even when I created benchmarks for; // very long table entries the complexity did not seem worth it.; // The code table stores the prefix entry in 12 bits and then the suffix; // byte in 8 bits, so each entry is 20 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:74,variab,variable,74,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// We have a string used as a string; // This dormant portion of code would be used if (when?) we allow the histogramming; // of the integral content (as opposed to the string content) of strings; // held in a variable size container delimited by a null (as opposed to; // a fixed size container or variable size container whose size is controlled; // by a variable). In GetNdata, we will then use strlen to grab the current length.; //fCumulSizes[i][fNdimensions[i]-1] = 1;; //fUsedSizes[fNdimensions[i]-1] = -TMath::Abs(fUsedSizes[fNdimensions[i]-1]);; //fUsedSizes[0] = - TMath::Abs( fUsedSizes[0]);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:210,variab,variable,210,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,3,['variab'],['variable']
Modifiability,"// We have a variable array within a variable array!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:13,variab,variable,13,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,2,['variab'],['variable']
Modifiability,"// We have a vtable and rtti, but technically we're not polymorphic; // polymorphic = true;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc:56,polymorphi,polymorphic,56,interpreter/llvm-project/clang/utils/VtableTest/gen.cc,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/VtableTest/gen.cc,2,['polymorphi'],['polymorphic']
Modifiability,"// We have a weight variable, use that info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:20,variab,variable,20,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,4,['variab'],['variable']
Modifiability,"// We have already encountered the value for this variable,; // so this one can be deleted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:50,variab,variable,50,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['variab'],['variable']
Modifiability,"// We have an extended type, like i24, so we should just use the; // register type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:14,extend,extended,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// We have an extended type, like i65.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp:14,extend,extended,14,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// We have an extending-load. The instruction we selected operates on the; // smaller type, but the SDNode we are replacing has the larger type. We; // need to emit a CVT to make the types match.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:14,extend,extending-load,14,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['extend'],['extending-load']
Modifiability,"// We have an implementation also for CUDA right now only for the most used; // basis type, which is expBasis. If the need to support other basis types; // arises, they can be implemented following this example. Remember to also; // adapt RooGaussModel::canComputeBatchWithCuda().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooGaussModel.cxx:233,adapt,adapt,233,roofit/roofit/src/RooGaussModel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooGaussModel.cxx,1,['adapt'],['adapt']
Modifiability,// We have an unsupported narrow vector compare op that would be legal; // if extended to the destination type. See if the compare operands; // can be freely extended to the destination type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,extend,extended,78,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['extend'],['extended']
Modifiability,"// We have collected all loads and stores.; // FIXME: many of these accesses do not need to be checked for races; // (e.g. variables that do not escape, etc).; // Instrument memory accesses only if we want to report bugs in the function.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp:123,variab,variables,123,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ThreadSanitizer.cpp,1,['variab'],['variables']
Modifiability,// We have decided to reuse an induction variable of a dominating loop. Apply; // truncation and/or inversion of the step.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp:41,variab,variable,41,interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ScalarEvolutionExpander.cpp,1,['variab'],['variable']
Modifiability,"// We have entered the condition variable's scope, so we're now able to; // jump to the continue block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,1,['variab'],['variable']
Modifiability,// We have found a new value for a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RemoveRedundantDebugValues.cpp,1,['variab'],['variable']
Modifiability,"// We have i1, i8, or i16, we need to either zero extend or sign extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp:50,extend,extend,50,interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMFastISel.cpp,2,['extend'],['extend']
Modifiability,// We have indexed loads for all legal index types. Indices are always; // zero extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:80,extend,extended,80,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// We have legal vector types with these lane types, so widening the; // vector would let us use some of the lanes directly without having to; // extend or truncate values.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:146,extend,extend,146,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// We have no ID to create an Assignment with so we mark this assignment as; // NoneOrPhi. Note that the dbg.value still exists, we just cannot determine; // the assignment responsible for setting this value.; // This is fine; dbg.values are essentially interchangable with unlinked; // dbg.assigns, and some passes such as mem2reg and instcombine add them to; // PHIs for promoted variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:382,variab,variables,382,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variables']
Modifiability,"// We have no authentication information, neither in the options; // nor in the enviromental variables. So may be this is a; // world-readable file, so let's continue and see if; // we can open it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx:93,variab,variables,93,net/net/src/TS3WebFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/net/src/TS3WebFile.cxx,1,['variab'],['variables']
Modifiability,"// We have not seen any differences yet in the GEPs feeding the; // PHI yet, so we record this one if it is allowed to be a; // variable.; // The first two arguments can vary for any GEP, the rest have to be; // static for struct slots",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:128,variab,variable,128,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['variab'],['variable']
Modifiability,"// We have processed both the inputs and the outputs. All of the outputs; // should evaluate to Locs. Nuke all of their values.; // FIXME: Some day in the future it would be nice to allow a ""plug-in""; // which interprets the inline asm and stores proper results in the; // outputs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp:191,plug-in,plug-in,191,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngine.cpp,1,['plug-in'],['plug-in']
Modifiability,"// We have several DBG_PHIs, and a use position (the Here inst). All each; // DBG_PHI does is identify a value at a program position. We can treat each; // DBG_PHI like it's a Def of a value, and the use position is a Use of a; // value, just like SSA. We use the bulk-standard LLVM SSA updater class to; // determine which Def is used at the Use, and any PHIs that happen along; // the way.; // Adapted LLVM SSA Updater:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:396,Adapt,Adapted,396,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['Adapt'],['Adapted']
Modifiability,// We have sign-extended loads.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp:16,extend,extended,16,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// We have the constant offset now, so put the readfirstlane back on the; // variable component.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp:77,variab,variable,77,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp,1,['variab'],['variable']
Modifiability,"// We have to be able to save if statements to execute later, and they have; // to live on the same stack as foreach loops. The simplest implementation; // technique is to convert each 'then' or 'else' clause *into* a foreach; // loop, over a list of length 0 or 1 depending on the condition, and with no; // iteration variable being assigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:319,variab,variable,319,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,// We have to be very careful with the ordering of cleanups here:; // C++ [except.throw]p4:; // The destruction [of the exception temporary] occurs; // immediately after the destruction of the object declared in; // the exception-declaration in the handler.; //; // So the precise ordering is:; // 1. Construct catch variable.; // 2. __cxa_begin_catch; // 3. Enter __cxa_end_catch cleanup; // 4. Enter dtor cleanup; //; // We do this by using a slightly abnormal initialization process.; // Delegation sequence:; // - ExitCXXTryStmt opens a RunCleanupsScope; // - EmitAutoVarAlloca creates the variable and debug info; // - InitCatchParam initializes the variable from the exception; // - CallBeginCatch calls __cxa_begin_catch; // - CallBeginCatch enters the __cxa_end_catch cleanup; // - EmitAutoVarCleanups enters the variable destructor cleanup; // - EmitCXXTryStmt emits the code for the catch body; // - EmitCXXTryStmt close the RunCleanupsScope,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:317,variab,variable,317,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,4,['variab'],['variable']
Modifiability,"// We have to delay extending subranges until we have seen all operands; // defining the register. This is because a <def,read-undef> operand; // will create an ""undef"" point, and we cannot extend any subranges; // until all of them have been accounted for.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:20,extend,extending,20,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,2,['extend'],"['extend', 'extending']"
Modifiability,"// We have to insert explicit sign or zero extends. Note that we could; // insert sign extends for ALL conditions. For those operations where either; // zero or sign extension would be valid, we ask the target which extension; // it would prefer.; // Signed comparisons always require sign extension.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:43,extend,extends,43,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,2,['extend'],['extends']
Modifiability,"// We have to maintain the illusion that the variable is; // zero-initialized. If the variable might be accessed in its; // initializer, zero-initialize before running the initializer, then; // actually perform the initialization with an assign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:45,variab,variable,45,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],['variable']
Modifiability,// We have to reserve the base pointer register in the presence of variable; // sized objects.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp:67,variab,variable,67,interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsRegisterInfo.cpp,1,['variab'],['variable']
Modifiability,// We have transformed phi node before configuring BB.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp:39,config,configuring,39,interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,1,['config'],['configuring']
Modifiability,"// We implement the following algorithm for obtaining the; // original loop iteration variable values based on the; // value of the collapsed loop iteration variable IV.; //; // Let n+1 be the number of collapsed loops in the nest.; // Iteration variables (I0, I1, .... In); // Iteration counts (N0, N1, ... Nn); //; // Acc = IV;; //; // To compute Ik for loop k, 0 <= k <= n, generate:; // Prod = N(k+1) * N(k+2) * ... * Nn;; // Ik = Acc / Prod;; // Acc -= Ik * Prod;; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:86,variab,variable,86,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// We iterate over the instructions in the region, if we find a PHINode, we; // check if there are predecessors outside of the region, if there are,; // we ignore this region since we are unable to handle the severing of the; // phi node right now.; // TODO: Handle extraneous inputs for PHINodes through variable number of; // inputs, similar to how outputs are handled.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp:305,variab,variable,305,interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/IROutliner.cpp,1,['variab'],['variable']
Modifiability,"// We just pass -fmodules, the CIFactory will do the rest and configure; // clang correctly once it sees this flag.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx:62,config,configure,62,core/dictgen/src/rootcling_impl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/rootcling_impl.cxx,1,['config'],['configure']
Modifiability,// We know if we are here that we are in a context that we might require; // a constant expression or a context that requires a constant; // value. But if we are initializing a value we don't know if it is a; // constexpr variable or not. We can check the EvaluatingDecl to determine; // if it constexpr or not. If not then we don't want to emit a diagnostic.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp:222,variab,variable,222,interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprConstant.cpp,1,['variab'],['variable']
Modifiability,"// We know that one of the operands is a select of constants. Now verify that; // the other binary operator operand is either a constant, or we can handle a; // variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:161,variab,variable,161,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['variab'],['variable']
Modifiability,// We know that these reloation types won't need a stub function. This list; // can be extended as needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:87,extend,extended,87,interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp,1,['extend'],['extended']
Modifiability,// We know the runtime overflow check is known false iff the (max) trip-count; // is known and (max) trip-count + (VF * UF) does not overflow in the type of; // the vector loop induction variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:187,variab,variable,187,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,// We lock in the inheritance model once somebody has asked us to ensure; // that a pointer-to-member type is complete.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:18,inherit,inheritance,18,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['inherit'],['inheritance']
Modifiability,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:384,layers,layers,384,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['layers'],['layers']
Modifiability,// We lose information with a variable offset.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['variab'],['variable']
Modifiability,"// We make an exception for system header functions that have no branches.; // Such functions unconditionally fail to initialize the variable.; // If they call other functions that have more paths within them,; // this suppression would still apply when we visit these inner functions.; // One common example of a standard function that doesn't ever initialize; // its out parameter is operator placement new; it's up to the follow-up; // constructor (if any) to initialize the memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp:133,variab,variable,133,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/BugReporterVisitors.cpp,1,['variab'],['variable']
Modifiability,// We mangle Base into the path if the path would've been ambiguous and it; // wasn't already extended with Base.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:94,extend,extended,94,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,1,['extend'],['extended']
Modifiability,// We match the loads and follow the uses to the extend instead of matching; // the extends and following the def to the load. This is because the load; // must remain in the same position for correctness (unless we also add code; // to find a safe place to sink it) whereas the extend is freely movable.; // It also prevents us from duplicating the load for the volatile case or just; // for performance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:49,extend,extend,49,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,3,['extend'],"['extend', 'extends']"
Modifiability,"// We may be adding or dropping fields from the member pointer, so we need; // both types and the inheritance models of both records.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:98,inherit,inheritance,98,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// We may have deferred allocation of the virtual register, and the rewrite; // regs code doesn't handle the liveness update.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp:68,rewrite,rewrite,68,interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/VirtRegMap.cpp,1,['rewrite'],['rewrite']
Modifiability,"// We may have extended the live-range of NewSrc, account for that.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['extend'],['extended']
Modifiability,// We may have had explicitly-specified template arguments for a; // template parameter pack (that may or may not have been extended; // via additional deduced arguments).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:124,extend,extended,124,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['extend'],['extended']
Modifiability,// We may need to allocate extra storage for the mangling number and the; // extended-by ValueDecl.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp:77,extend,extended-by,77,interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ExprCXX.cpp,1,['extend'],['extended-by']
Modifiability,"// We may need to correct some variable names first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSenderSQL.cxx:31,variab,variable,31,proof/proofplayer/src/TProofMonSenderSQL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proofplayer/src/TProofMonSenderSQL.cxx,1,['variab'],['variable']
Modifiability,// We may not have been able to figure out what this member pointer resolved; // to up until this exact point. Attempt to lock-in it's inheritance model.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:135,inherit,inheritance,135,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['inherit'],['inheritance']
Modifiability,"// We may see an if statement in the middle of a basic block, or it may be the; // first statement we are processing. In either case, we create a new basic; // block. First, we create the blocks for the then...else statements, and; // then we create the block containing the if statement. If we were in the; // middle of a block, we stop processing that block. That block is then the; // implicit successor for the ""then"" and ""else"" clauses.; // Save local scope position because in case of condition variable ScopePos; // won't be restored when traversing AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp:501,variab,variable,501,interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CFG.cpp,1,['variab'],['variable']
Modifiability,"// We may want to extend a live range for a partial redef, or for a use; // tied to an early clobber.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:18,extend,extend,18,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,1,['extend'],['extend']
Modifiability,// We may want to extend the live range of the extension result in order; // to replace these uses.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:18,extend,extend,18,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,1,['extend'],['extend']
Modifiability,"// We might extend the live range of Z, clear its kill flag to; // account for this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,2,['extend'],['extend']
Modifiability,"// We might get a parsing error if rv32e in the list, we could just skip; // that and process the rest of multi-lib configs.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp:116,config,configs,116,interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Gnu.cpp,1,['config'],['configs']
Modifiability,// We might have a variable template specialization (or maybe one day a; // member concept-id).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp:19,variab,variable,19,interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprMember.cpp,1,['variab'],['variable']
Modifiability,"// We might have either a ConstantArrayType or a VariableArrayType now:; // a ConstantArrayType is allowed to have an element type which is a; // VariableArrayType if the type is dependent. Fortunately, all array; // types have the same location layout.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h:49,Variab,VariableArrayType,49,interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/TreeTransform.h,2,['Variab'],['VariableArrayType']
Modifiability,"// We must either have the prototype or extended likelihood to determined; // the relative fractions of the components",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimGenContext.cxx:40,extend,extended,40,roofit/roofitcore/src/RooSimGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimGenContext.cxx,1,['extend'],['extended']
Modifiability,"// We must extended likelihood to determine the relative fractions of the components",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimSplitGenContext.cxx:11,extend,extended,11,roofit/roofitcore/src/RooSimSplitGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooSimSplitGenContext.cxx,1,['extend'],['extended']
Modifiability,"// We must reference the plug-ins in such a way that compilers will not; // delete it all as dead code, even with whole program optimization,; // yet is effectively a NO-OP. As the compiler isn't smart enough; // to know that getenv() never returns -1, this will do the job.; // This is so that globals in the translation units where these functions; // are defined are forced to be initialized, populating various; // registries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LinkAllAsmWriterComponents.h:25,plug-in,plug-ins,25,interpreter/llvm-project/llvm/include/llvm/CodeGen/LinkAllAsmWriterComponents.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/LinkAllAsmWriterComponents.h,1,['plug-in'],['plug-ins']
Modifiability,"// We need a different set of heuristics for rotated and non-rotated loops.; // If a loop is rotated then the latch is also the backedge, so inserting; // post-inc expressions just before the latch is ideal. To reduce live ranges; // it also makes sense to rewrite terminating conditions to use post-inc; // expressions.; //; // If the loop is not rotated then the latch is not a backedge; the latch; // check is done in the loop head. Adding post-inc expressions before the; // latch will cause overlapping live-ranges of pre-inc and post-inc expressions; // in the loop body. In this case we do *not* want to use post-inc expressions; // in the latch check, and we want to insert post-inc expressions before; // the backedge.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:257,rewrite,rewrite,257,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['rewrite'],['rewrite']
Modifiability,// We need a global bitmap to tell if a function is executed. We also; // need a global variable to save the order of functions. We can use a; // fixed-size buffer that saves the MD5 hash of the function. We need; // a global variable to save the index into the buffer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrOrderFile.cpp:88,variab,variable,88,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrOrderFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrOrderFile.cpp,2,['variab'],['variable']
Modifiability,// We need a narrow condition value. It must be extended with undef elements; // and have the same number of elements as this shuffle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp:48,extend,extended,48,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineVectorOps.cpp,1,['extend'],['extended']
Modifiability,// We need a temporary variable holding our return value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:23,variab,variable,23,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,1,['variab'],['variable']
Modifiability,"// We need a v16i8 for TBL, so we extend the source with a placeholder vector; // for v8i8 to get a v16i8. As the pattern we are replacing is extract +; // insert, we know that the index in the mask must be smaller than the number; // of elements in the source, or we would have an out-of-bounds access.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:34,extend,extend,34,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// We need at least one extended operand.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstructionCombining.cpp,1,['extend'],['extended']
Modifiability,"// We need the inherited constructor information to merge the declaration,; // so we have to read it before we call VisitCXXMethodDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp:15,inherit,inherited,15,interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTReaderDecl.cpp,1,['inherit'],['inherited']
Modifiability,// We need the type to complete the declaration of the variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,"// We need to adapt other uses of Y though. Get a value that matches; // the original value of Y before inversion. While this increases; // immediate instruction count, we have just ensured that all the; // users are freely-invertible, so that 'not' *will* get folded away.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp:14,adapt,adapt,14,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp,1,['adapt'],['adapt']
Modifiability,// We need to add a data sharing attribute for this variable to make sure it; // is correctly captured. A variable that shows up in a use_device_addr has; // similar properties of a first private variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,// We need to add a data sharing attribute for this variable to make sure it; // is correctly captured. A variable that shows up in a use_device_ptr has; // similar properties of a first private variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,3,['variab'],['variable']
Modifiability,// We need to be extracting the lower bit of an extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:48,extend,extend,48,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// We need to change to a wider element type that we have support for.; // For 8 element vectors this is easy, we either extend to v8i32 or v8i64.; // For 16 element vectors we extend to v16i32 unless we are explicitly; // trying to avoid 512-bit vectors. If we are avoiding 512-bit vectors; // we need to split into two 8 element vectors which we can extend to v8i32,; // truncate and concat the results. There's an additional complication if; // the original type is v16i8. In that case we can't split the v16i8; // directly, so we need to shuffle high elements to low and use; // sign_extend_vector_inreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:121,extend,extend,121,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['extend'],['extend']
Modifiability,"// We need to check for the parent *first* because, if we *have*; // private-captured a global variable, we need to recursively capture it in; // intermediate blocks, lambdas, etc.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:95,variab,variable,95,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// We need to clear kill flags since we may be extending the live range past; // a kill. If the mul had kill flags, we can preserve those since we know; // where the previous range stopped.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp:47,extend,extending,47,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp,1,['extend'],['extending']
Modifiability,// We need to create a temporary record to provide a scope for the; // iteration variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,// We need to determine the inheritance model that the class will use if; // haven't yet.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp:28,inherit,inheritance,28,interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCast.cpp,1,['inherit'],['inheritance']
Modifiability,"// We need to differentiate identifiers for a template deduction guide,; // variables, or function return types (the constraint expression has; // ended before that), and basically all other cases. But it's easier to; // check the other way around.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:76,variab,variables,76,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['variab'],['variables']
Modifiability,// We need to emit a shl + ashr to do the sign extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extend']
Modifiability,// We need to emit host-side 'shadows' for all global; // device-side variables because the CUDA runtime needs their; // size and host-side address in order to provide access to; // their device-side incarnations.; // So device-only functions are the only things we skip.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:70,variab,variables,70,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,1,['variab'],['variables']
Modifiability,"// We need to make sure that the Read and Write action's configuration; // properly reflect this value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx:57,config,configuration,57,tree/tree/src/TBranchElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TBranchElement.cxx,2,['config'],['configuration']
Modifiability,"// We need to model loop body region as the function f(cnt, loop_arg).; // That's why we replace loop induction variable by the new counter; // which will be one of loop body function argument",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:112,variab,variable,112,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variable']
Modifiability,"// We need to perform most of the semantic analysis for a C++0x for-range; // statememt before parsing the body, in order to be able to deduce the type; // of an auto-typed loop variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp:178,variab,variable,178,interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseStmt.cpp,1,['variab'],['variable']
Modifiability,// We need to produce a map clause even if we don't have variables so that; // other diagnostics related with non-existing map clauses are accurate.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:57,variab,variables,57,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variables']
Modifiability,"// We need to put both instructions in the same packet: MI and NvjMI.; // Either of them can require a constant extender. Try to add both to; // the current packet, and if that fails, end the packet and start a; // new one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp:112,extend,extender,112,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonVLIWPacketizer.cpp,1,['extend'],['extender']
Modifiability,// We need to reset FP to its untagged state on return. Bit 60 is currently; // used to show the presence of an extended frame.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:112,extend,extended,112,interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp,1,['extend'],['extended']
Modifiability,"// We need to reset FP to its untagged state on return. Bit 60 is; // currently used to show the presence of an extended frame.; // BIC x29, x29, #0x1000_0000_0000_0000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:112,extend,extended,112,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['extend'],['extended']
Modifiability,// We need to rewrite dst types for ASSIGN_TYPE instrs to be able; // to perform tblgen'erated selection and we can't do that on Legalizer; // as it operates on gMIR only.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPreLegalizer.cpp:14,rewrite,rewrite,14,interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPreLegalizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SPIRV/SPIRVPreLegalizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// We need to rewrite the cursor headers, and fetch actual values; // for Planes/BitCount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp:14,rewrite,rewrite,14,interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-rc/ResourceFileWriter.cpp,1,['rewrite'],['rewrite']
Modifiability,// We need to save the copied-in variables in nested; // blocks because it is needed at the end for some of the API generations.; // See SynthesizeBlockLiterals routine.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:33,variab,variables,33,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variables']
Modifiability,"// We need to set the range also for ""mean"", because this test also checks; // the analytical integral over the mean variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBifurGauss.cxx:117,variab,variable,117,roofit/roofit/test/testRooBifurGauss.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/testRooBifurGauss.cxx,1,['variab'],['variable']
Modifiability,// We need to sign-extend the operands so the carry value computed by the; // wide operation will be equivalent to the carry value computed by the; // narrow operation.; // An UADDO_CARRY can generate carry only if any of the operands has its; // most significant bit set. Sign extension propagates the most significant; // bit into the higher bits which means the extra bit that the narrow; // addition would need (i.e. the carry) will be propagated through the higher; // bits of the wide addition.; // A USUBO_CARRY can generate borrow only if LHS < RHS and this property will; // be preserved by sign extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:19,extend,extend,19,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,// We need to skip the first CompoundStmt to avoid situation when guardian is; // defined in the same scope as guarded variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLocalVarsChecker.cpp:119,variab,variable,119,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLocalVarsChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLocalVarsChecker.cpp,1,['variab'],['variable']
Modifiability,// We need to turn deleted aliases into function or variable decls based; // on the type of their aliasee.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp:52,variab,variable,52,interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/Orc/CompileOnDemandLayer.cpp,1,['variab'],['variable']
Modifiability,// We need to zero/sign extend ConstantInt phi operands to match; // assumptions in FunctionLoweringInfo::ComputePHILiveOutRegInfo.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:24,extend,extend,24,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,1,['extend'],['extend']
Modifiability,"// We need two index variable here since the size of ""Dims"" is the same as; // the size of Components, however, the size of offset, count, and stride is; // equal to the size of base declaration that is non-contiguous.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp,1,['variab'],['variable']
Modifiability,"// We need values for each phi in the block. Since there isn't a good way; // to do a variable number of input values currently, we just fill them; // with undef.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FuzzMutate/Operations.cpp:86,variab,variable,86,interpreter/llvm-project/llvm/lib/FuzzMutate/Operations.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FuzzMutate/Operations.cpp,1,['variab'],['variable']
Modifiability,// We never need to emit a variable that is available in another TU.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:27,variab,variable,27,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['variab'],['variable']
Modifiability,"// We now need to check for equivalence of the use graph of each root with; // that of the primary induction variable (excluding the roots). Our goal; // here is not to solve the full graph isomorphism problem, but rather to; // catch common cases without a lot of work. As a result, we will assume; // that the relative order of the instructions in each unrolled iteration; // is the same (although we will not make an assumption about how the; // different iterations are intermixed). Note that while the order must be; // the same, the instructions may not be in the same basic block.; // An array of just the possible reductions for this scale factor. When we; // collect the set of all users of some root instructions, these reduction; // instructions are treated as 'final' (their uses are not considered).; // This is important because we don't want the root use set to search down; // the reduction chain.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp:109,variab,variable,109,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopRerollPass.cpp,1,['variab'],['variable']
Modifiability,"// We obesrve scopes with children twice here, once descending in, once; // ascending out of the scope nest. Use HighestDFSIn as a ratchet to ensure; // we don't process a scope twice. Additionally, ignore scopes that don't; // have a DILocation -- by proxy, this means we never tracked any variable; // assignments in that scope.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:291,variab,variable,291,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// We only allow move elimination for writes that update a full physical; // register. On X86, move elimination is possible with 32-bit general purpose; // registers because writes to those registers are not partial writes. If a; // register move is a partial write, then we conservatively assume that move; // elimination fails, since it would either trigger a partial update, or the; // issue of a merge opcode.; //; // Note that this constraint may be lifted in future. For example, we could; // make this model more flexible, and let users customize the set of registers; // (i.e. register classes) that allow move elimination.; //; // For now, we assume that there is a strong correlation between registers; // that allow move elimination, and how those same registers are renamed in; // hardware.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:520,flexible,flexible,520,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,1,['flexible'],['flexible']
Modifiability,// We only allow one variable index at the moment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp:21,variab,variable,21,interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/CodeGenPrepare.cpp,1,['variab'],['variable']
Modifiability,"// We only deal with the cases where the source text of the pointee type; // appears on the left-hand side of the variable identifier completely,; // including the following forms:; // `T ident`,; // `T ident[]`, where `T` is any type.; // Examples of excluded cases are `T (*ident)[]` or `T ident[][n]`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:114,variab,variable,114,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// We only handle integer and pointer inductions variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:49,variab,variables,49,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variables']
Modifiability,// We only need to use thread-safe statics for local non-TLS variables and; // inline variables; other global initialization is always single-threaded; // or (through lazy dynamic loading in multiple threads) unsequenced.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:61,variab,variables,61,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,2,['variab'],['variables']
Modifiability,"// We only want to add parameter, not observables. Since a call like; // `pdf->getParameters(&observables)` would be expensive, we take the set; // of all variables and remove the ovservables, which is much cheaper. In; // a call to `pdf->getParameters(&observables)`, the observables are; // matched by name, so we have to pass the `matchByNameOnly` here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx:155,variab,variables,155,roofit/roofitcore/src/RooProdPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProdPdf.cxx,1,['variab'],['variables']
Modifiability,"// We only want to add the variables that actually got exported and skip; // the ones that the pdfs encoded implicitly (like in the case of; // HistFactory).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:27,variab,variables,27,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,1,['variab'],['variables']
Modifiability,"// We only want to extend the live ranges of used registers. If they; // already have existing uses beyond the bundle, we don't need the kill.; //; // It's possible all of the use registers were already live past the; // bundle.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFormMemoryClauses.cpp:19,extend,extend,19,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFormMemoryClauses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFormMemoryClauses.cpp,1,['extend'],['extend']
Modifiability,"// We only want to see those namespaces that have already been defined; // within this scope, because its likely that the user is creating an; // extended namespace declaration. Keep track of the most recent; // definition of each namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:146,extend,extended,146,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['extend'],['extended']
Modifiability,// We optimize the truncation of induction variables having constant; // integer steps. The cost of these truncations is the same as the scalar; // operation.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:43,variab,variables,43,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variables']
Modifiability,// We optionally skip over an extend so long as both loads are extended in the; // same way from the same type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,extend,extend,30,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// We permit the extend to hoist through basic blocks but this is only; // sensible if the target has extending loads. If you end up lowering back; // into a load and extend during the legalizer then the end result is; // hoisting the extend up to the load.; // Prefer defined extensions to undefined extensions as these are more; // likely to reduce the number of instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:17,extend,extend,17,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,4,['extend'],"['extend', 'extending']"
Modifiability,"// We propagate the 'inline' flag with the initializer, because it; // would otherwise imply that the variable is a definition for a; // non-static data member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:102,variab,variable,102,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variable']
Modifiability,// We reached the number of allowed configs and return early.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp:36,config,configs,36,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/SnippetGenerator.cpp,1,['config'],['configs']
Modifiability,"// We reached the start of the block before finding a defining instruction.; // There are numerous scenarios where this can happen:; // * Constant physical registers,; // * Several intrinsics that allow LLVM-IR to read arbitary registers,; // * Arguments in the entry block,; // * Exception handling landing pads.; // Validating all of them is too difficult, so just insert a DBG_PHI reading; // the variable value at this position, rather than checking it makes sense.; // Create DBG_PHI for specified physreg.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp:400,variab,variable,400,interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineFunction.cpp,1,['variab'],['variable']
Modifiability,// We read the TIMER0 and zero-extend it to 64-bits as the intrinsic; // requires.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCISelLowering.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Target/ARC/ARCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARC/ARCISelLowering.cpp,1,['extend'],['extend']
Modifiability,// We recommend replacing the variable with std::array.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// We recommend replacing the variable with std::span.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// We recommend replacing the variable with std::span::iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// We recommend replacing the variable with std::vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:30,variab,variable,30,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variable']
Modifiability,// We record each overload check line before emitting because subsequent Inst; // definitions may extend the number of permitted types (i.e. augment the; // Mask). Use std::map to avoid sorting the table by hash number.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp:98,extend,extend,98,interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/NeonEmitter.cpp,1,['extend'],['extend']
Modifiability,"// We relax the restriction on use of incomplete types and non-object; // types with the type-based extension of _Generic. Allowing incomplete; // objects means those can be used as ""tags"" for a type-safe way to map; // to a value. Similarly, matching on function types rather than; // function pointer types can be useful. However, the restriction on VM; // types makes sense to retain as there are open questions about how; // the selection can be made at compile time.; //; // C11 6.5.1.1p2 ""The type name in a generic association shall specify a; // complete object type other than a variably modified type.""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:588,variab,variably,588,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variably']
Modifiability,"// We rely on this decision to inline being idemopotent and unrelated to the; // use-site. We know that if we inline a variable at one use site, we'll; // inline it elsewhere too (and reuse the constant pool entry). Fast-isel; // doesn't know about this optimization, so bail out if it's enabled else; // we could decide to inline here (and thus never emit the GV) but require; // the GV from fast-isel generated code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:119,variab,variable,119,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// We require all uses of both induction variables to match this pattern:; //; // (OuterPHI * InnerTripCount) + InnerPHI; //; // Any uses of the induction variables not matching that pattern would; // require a div/mod to reconstruct in the flattened loop, so the; // transformation wouldn't be profitable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:41,variab,variables,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,2,['variab'],['variables']
Modifiability,"// We require all uses of both induction variables to match this pattern:; //; // (OuterPHI * InnerTripCount) + InnerPHI; //; // I.e., it needs to be a linear expression of the induction variables and the; // inner loop trip count. We keep track of all different expressions on which; // checks will be performed in this bookkeeping struct.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:41,variab,variables,41,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,2,['variab'],['variables']
Modifiability,// We rewrite objc_object<SomeProtocol>* into id<SomeProtocol>.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:6,rewrite,rewrite,6,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,1,['rewrite'],['rewrite']
Modifiability,"// We run rewriteCandidateWithBasis on all candidates in a post-order, so the; // basis of a candidate cannot be unlinked before the candidate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:10,rewrite,rewriteCandidateWithBasis,10,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['rewrite'],['rewriteCandidateWithBasis']
Modifiability,"// We search in the redecl context because of transparent contexts.; // E.g. a simple C language enum is a transparent context:; // enum E { A, B };; // Now if we had a global variable in the TU; // int A;; // then the enum constant 'A' and the variable 'A' violates ODR.; // We can diagnose this only if we search in the redecl context.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp:176,variab,variable,176,interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTImporter.cpp,2,['variab'],['variable']
Modifiability,"// We should delete the special member in CUDA mode if target inference; // failed.; // For inherited constructors (non-null ICI), CSM may be passed so that MD; // is treated as certain special member, which may not reflect what special; // member MD really is. However inferCUDATargetForImplicitSpecialMember; // expects CSM to match MD, therefore recalculate CSM.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:92,inherit,inherited,92,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// We should not rewrite the code, we should only pick up the single value; // that represents the shrunk PHI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp:17,rewrite,rewrite,17,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUMachineCFGStructurizer.cpp,1,['rewrite'],['rewrite']
Modifiability,// We should only get here for sign extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:36,extend,extend,36,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// We should take the variables from the original dataset if; // available, such that we can query the ""StoreError"" and; // ""StoreAsymError"" attributes.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx:22,variab,variables,22,roofit/roofitcore/src/RooDataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataSet.cxx,1,['variab'],['variables']
Modifiability,// We should warn if a local variable hides an ivar.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:29,variab,variable,29,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// We signal the presence of a Swift extended frame to external tools by; // storing FP with 0b0001 in bits 63:60. In normal userland operation a simple; // ORR is sufficient, it is assumed a Swift kernel would initialize the TBI; // bits so that is still true.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:37,extend,extended,37,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,1,['extend'],['extended']
Modifiability,"// We skip auto-init variables by their alloc size. Take this as an example:; // ""struct Foo {int x; char buff[1024];}"" Assume the max-size flag is 1023.; // All Foo type variables will be skipped. Ideally, we only skip the buff; // array and still auto-init X in this example.; // TODO: Improve the size filtering to by member size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:21,variab,variables,21,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,2,['variab'],['variables']
Modifiability,"// We sort the stack variables by alignment (largest first) to minimize; // unnecessary large gaps due to alignment.; // It is tempting to also sort variables by size so that larger variables; // have larger redzones at both ends. But reordering will make report analysis; // harder, especially when temporary unnamed variables are present.; // So, until we can provide more information (type, line number, etc); // for the stack variables we avoid reordering them too much.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp:21,variab,variables,21,interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp,5,['variab'],['variables']
Modifiability,// We start with a state 'inherited' from all the successors.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp:26,inherit,inherited,26,interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/CalledOnceCheck.cpp,1,['inherit'],['inherited']
Modifiability,// We start with the PHI node and scan for all of the users of this; // instruction. All users must be instructions that can be used as reduction; // variables (such as ADD). We must have a single out-of-block user. The cycle; // must include the original PHI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp:150,variab,variables,150,interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/IVDescriptors.cpp,1,['variab'],['variables']
Modifiability,// We still need to check the argument in case it was extended by; // deduction.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:54,extend,extended,54,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['extend'],['extended']
Modifiability,"// We still need to initialize the SP if we're doing anything weird that; // references the SP, like variable sized stack objects.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp:101,variab,variable,101,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// We still need to mark the variable as TLS so it shows up in AST with; // proper storage class for other tools to use even if we're not going; // to emit any code for it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:29,variab,variable,29,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// We still need to worry about properly extending the sign. For example,; // we could have only a single bit or a constant that needs zero; // extension rather than sign extension. Make sure we pass the return; // value extension property to integer materialization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp:41,extend,extending,41,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFastISel.cpp,1,['extend'],['extending']
Modifiability,// We support 64-bit ANDs with immediates with 32-bits of leading zeroes; // by using a 32-bit operation with implicit zero extension. Detect such; // immediates here as the normal path expects bit 31 to be sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:212,extend,extended,212,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extended']
Modifiability,// We support flexible arrays at the end of structs in; // other structs as an extension.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:14,flexible,flexible,14,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['flexible'],['flexible']
Modifiability,// We suppress diagnostics for ARC zero-initialized _Nonnull locals. This; // prevents false positives when a _Nonnull local variable cannot be; // initialized with an initialization expression:; // NSString * _Nonnull s; // no-warning; // @autoreleasepool {; // s = ...; // }; //; // FIXME: We should treat implicitly zero-initialized _Nonnull locals as; // uninitialized in Sema's UninitializedValues analysis to warn when a use of; // the zero-initialized definition will unexpectedly yield nil.; // Locals are only zero-initialized when automated reference counting; // is turned on.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp:125,variab,variable,125,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/NullabilityChecker.cpp,1,['variab'],['variable']
Modifiability,"// We try and get the best candidate from L to color next, given that our; // preferred color is ""PreferredColor"". L is ordered from larger to smaller; // chains. It is beneficial to color the large chains before the small chains,; // but if we can't find a chain of the maximum length with the preferred color,; // we fuzz the size and look for slightly smaller chains before giving up and; // returning a chain that must be recolored.; // FIXME: Does this need to be configurable?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:469,config,configurable,469,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,1,['config'],['configurable']
Modifiability,"// We use a pointer use visitor to track how an alloca is being used.; // The goal is to be able to answer the following three questions:; // 1. Should this alloca be allocated on the frame instead.; // 2. Could the content of the alloca be modified prior to CoroBegn, which would; // require copying the data from alloca to the frame after CoroBegin.; // 3. Is there any alias created for this alloca prior to CoroBegin, but used; // after CoroBegin. In that case, we will need to recreate the alias after; // CoroBegin based off the frame. To answer question 1, we track two things:; // a. List of all BasicBlocks that use this alloca or any of the aliases of; // the alloca. In the end, we check if there exists any two basic blocks that; // cross suspension points. If so, this alloca must be put on the frame. b.; // Whether the alloca or any alias of the alloca is escaped at some point,; // either by storing the address somewhere, or the address is used in a; // function call that might capture. If it's ever escaped, this alloca must be; // put on the frame conservatively.; // To answer quetion 2, we track through the variable MayWriteBeforeCoroBegin.; // Whenever a potential write happens, either through a store instruction, a; // function call or any of the memory intrinsics, we check whether this; // instruction is prior to CoroBegin. To answer question 3, we track the offsets; // of all aliases created for the alloca prior to CoroBegin but used after; // CoroBegin. std::optional is used to be able to represent the case when the; // offset is unknown (e.g. when you have a PHINode that takes in different; // offset values). We cannot handle unknown offsets and will assert. This is the; // potential issue left out. An ideal solution would likely require a; // significant redesign.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp:1130,variab,variable,1130,interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Coroutines/CoroFrame.cpp,1,['variab'],['variable']
Modifiability,// We use delayed creation/initialization for VLAs and array sections. It is; // required because runtime does not provide the way to pass the sizes of; // VLAs/array sections to initializer/combiner/finalizer functions. Instead; // threadprivate global variables are used to store these values and use; // them in the functions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:254,variab,variables,254,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,1,['variab'],['variables']
Modifiability,// We use getUnderlyingObjects() here instead of getUnderlyingObject() mainly; // because the former looks through phi nodes while the latter does not. We; // need to look through phi nodes to handle pointer induction variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:218,variab,variables,218,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['variab'],['variables']
Modifiability,"// We use ldg (i.e. ld.global.nc) for invariant loads from the global address; // space.; //; // We have two ways of identifying invariant loads: Loads may be explicitly; // marked as invariant, or we may infer them to be invariant.; //; // We currently infer invariance for loads from; // - constant global variables, and; // - kernel function pointer params that are noalias (i.e. __restrict) and; // never written to.; //; // TODO: Perform a more powerful invariance analysis (ideally IPO, and ideally; // not during the SelectionDAG phase).; //; // TODO: Infer invariance only at -O2. We still want to use ldg at -O0 for; // explicitly invariant loads because these are how clang tells us to use ldg; // when the user uses a builtin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp:308,variab,variables,308,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.cpp,1,['variab'],['variables']
Modifiability,"// We use this variable to store the last queried operator (`QueriedOP`); // for which the `getCmpOpState` returned with `Unknown`. If there are two; // different OPs that returned `Unknown` then we have to query the special; // `UnknownX2` column. We assume that `getCmpOpState(CurrentOP, CurrentOP)`; // never returns `Unknown`, so `CurrentOP` is a good initial value.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/RangeConstraintManager.cpp,1,['variab'],['variable']
Modifiability,"// We want the value in a GPR if it is being extended, used for a select, or; // used in logical operations.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:45,extend,extended,45,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,// We want to add a full redzone after every variable.; // The larger the variable Size the larger is the redzone.; // The resulting frame size is a multiple of Alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp:45,variab,variable,45,interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ASanStackFrameLayout.cpp,2,['variab'],['variable']
Modifiability,"// We want to be able to insert a kill of the register if this PHI (aka,; // the copy we just inserted) is the last use of the source value. Live; // variable analysis conservatively handles this by saying that the value; // is live until the end of the block the PHI entry lives in. If the value; // really is dead at the PHI copy, there will be no successor blocks which; // have the value live-in.; // Okay, if we now know that the value is not live out of the block, we; // can add a kill marker in this block saying that it kills the incoming; // value!; // In our final twist, we have to decide which instruction kills the; // register. In most cases this is the copy, however, terminator; // instructions at the end of the block may also use the value. In this; // case, we should mark the last such terminator as being the killing; // block, not the copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PHIElimination.cpp:150,variab,variable,150,interpreter/llvm-project/llvm/lib/CodeGen/PHIElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PHIElimination.cpp,1,['variab'],['variable']
Modifiability,"// We want to capture this variable, which is not possible with a; // structured binding in C++17. Explicitly defining a variable works.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/src/RNTupleImporter.cxx:27,variab,variable,27,tree/ntupleutil/v7/src/RNTupleImporter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntupleutil/v7/src/RNTupleImporter.cxx,2,['variab'],['variable']
Modifiability,"// We want to extend a live range into `e` slot rather than `r` slot if; // tied-def is early clobber, because the `e` slot already contained; // in the live range of early-clobber tied-def operand, give an example; // here:; // 0 %0 = ...; // 16 early-clobber %0 = Op %0 (tied-def 0), ...; // 32 ... = Op %0; // Before extend:; // %0 = [0r, 0d) [16e, 32d); // The point we want to extend is 0d to 16e not 16r in this case, but if; // we use 16r here we will extend nothing because that already contained; // in [16e, 32d).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp:14,extend,extend,14,interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SplitKit.cpp,4,['extend'],['extend']
Modifiability,"// We want to know at compile time whether dynamic_cast or static_cast is; // used. First of all to avoid overhead, but also to avoid a compiler; // error when using dynamic_cast on a non-polymorphic class. In C++17,; // this can be done easily with `if constexpr`, but for the older; // standards we have to use a more verbose alternative. Both ways are; // explicitely implemented for different standards, so that when the; // minimum C++ standard for ROOT is raised to C++17 it's easy to remember; // that we can avoid much boilerplate code in this file.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RRangeCast.hxx:188,polymorphi,polymorphic,188,core/foundation/inc/ROOT/RRangeCast.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/foundation/inc/ROOT/RRangeCast.hxx,1,['polymorphi'],['polymorphic']
Modifiability,// We want to know how many variables (with abstract_origin) don't have; // location info.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp:28,variab,variables,28,interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-dwarfdump/Statistics.cpp,1,['variab'],['variables']
Modifiability,"// We want to prefer the smallest register class possible, so we don't want to; // stop and rewrite on anything that looks like a subregister; // extract. Operations mostly don't care about the super register class, so we; // only want to stop on the most basic of copies between the same register; // class.; //; // e.g. if we have something like; // %0 = ...; // %1 = ...; // %2 = REG_SEQUENCE %0, sub0, %1, sub1, %2, sub2; // %3 = COPY %2, sub0; //; // We want to look through the COPY to find:; // => %3 = COPY %0; // Plain copy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp:92,rewrite,rewrite,92,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp,1,['rewrite'],['rewrite']
Modifiability,// We want to track the variable's stack home from its alloca's; // position onwards so we treat it as an assignment (where the stored; // value is Undef).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp:24,variab,variable,24,interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/DebugInfo.cpp,1,['variab'],['variable']
Modifiability,// We will create register during config. *3 is to make sure; // the virtual register number doesn't exceed the size of; // the bit vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp:34,config,config,34,interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastPreTileConfig.cpp,1,['config'],['config']
Modifiability,"// We will declare the variable as pointer.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx:23,variab,variable,23,core/metacling/src/TClingCallbacks.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TClingCallbacks.cxx,1,['variab'],['variable']
Modifiability,// We will extend this in a later patch:; // If this is a type than can be sign or zero-extended to a basic operation; // go ahead and accept it now.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp:11,extend,extend,11,interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFastISel.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// We will never be able to capture this variable, and we need; // to be able to in any and all instantiations, so diagnose it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:41,variab,variable,41,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['variab'],['variable']
Modifiability,"// We will only fill fragments for simple memory-describing dbg.value; // intrinsics. If the fragment offset is the same as the offset from the; // base pointer, do The Thing, otherwise fall back to normal dbg.value; // behaviour. AssignmentTrackingLowering has generated DIExpressions; // written in terms of the base pointer.; // TODO: Remove this condition since the fragment offset doesn't always; // equal the offset from base pointer (e.g. for a SROA-split variable).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:463,variab,variable,463,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,// We would like to extract code out of functions/methods/blocks.; // Prohibit extraction from things like global variable / field; // initializers and other top-level expressions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp:114,variab,variable,114,interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/Refactoring/Extract/Extract.cpp,1,['variab'],['variable']
Modifiability,"// We would prefer to directly use `TH1::CheckEqualAxes` here;; // however it is protected so we inherit the parts we care about.; // FIXME(bbannier): It appears that functionality like `TH1::CheckEqualAxes` could; // just as well live in `TAxis` so that anyone using axes could make use of it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx:97,inherit,inherit,97,hist/hist/src/THnChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnChain.cxx,1,['inherit'],['inherit']
Modifiability,"// We're ZExt i1 to i64. The ANDWri Wd, Ws, #1 implicitly clears the; // upper 32 bits. Emit a SUBREG_TO_REG to extend from Wd to Xd.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:112,extend,extend,112,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,"// We're constrained by inheritance, but we want to say; // ""declared private here"" if we're diagnosing a hierarchy; // conversion and this is the final step.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp:24,inherit,inheritance,24,interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaAccess.cpp,1,['inherit'],['inheritance']
Modifiability,"// We're done expanding now, so reset the rewriter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp:42,rewrite,rewriter,42,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopStrengthReduce.cpp,1,['rewrite'],['rewriter']
Modifiability,// We're done once we hit the flexible array member or run out of; // InitListExpr elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:30,flexible,flexible,30,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['flexible'],['flexible']
Modifiability,// We're done once we hit the flexible array member.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp:30,flexible,flexible,30,interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprAgg.cpp,1,['flexible'],['flexible']
Modifiability,// We're done with the catch variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:29,variab,variable,29,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variable']
Modifiability,"// We're introducing an undef phi def, and need to set undef on any users of; // the previously local def to avoid artifically extending the lifetime; // through the block.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp:127,extend,extending,127,interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/RegisterCoalescer.cpp,1,['extend'],['extending']
Modifiability,// We're lifetime-extended by a surrounding aggregate.; // Automatic destructors aren't quite working in this case; // on the CFG side. We should warn the caller about that.; // FIXME: Is there a better way to retrieve this information from; // the MaterializeTemporaryExpr?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp:18,extend,extended,18,interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Core/ExprEngineCXX.cpp,1,['extend'],['extended']
Modifiability,"// We're supposed to lifetime-extend the temporary along this path (per; // the resolution of DR1815), but we don't support that yet.; //; // FIXME: Properly handle this situation. Perhaps the easiest approach; // would be to clone the initializer expression on each use that would; // lifetime extend its temporaries.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:30,extend,extend,30,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,2,['extend'],['extend']
Modifiability,"// We're testing several Landau configurations, because the underlying; // ROOT::Math::landau_cdf is defined piecewise. Like this, we're covering; // all possible code paths in the pullback.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx:32,config,configurations,32,roofit/roofitcore/test/testRooFuncWrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooFuncWrapper.cxx,1,['config'],['configurations']
Modifiability,"// We're trying to find X such that; //; // Widen(NarrowDef `op` NonIVNarrowDef) == WideAR == WideDef `op.wide` X; //; // We guess two solutions to X, sext(NonIVNarrowDef) and zext(NonIVNarrowDef),; // and check using SCEV if any of them are correct.; // Returns true if extending NonIVNarrowDef according to `SignExt` is a; // correct solution to X.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:271,extend,extending,271,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['extend'],['extending']
Modifiability,"// We've already seen a partial specialization with the same template; // parameters and template arguments. This can happen, for example, when; // substituting the outer template arguments ends up causing two; // variable template partial specializations of a member variable template; // to have identical forms, e.g.,; //; // template<typename T, typename U>; // struct Outer {; // template<typename X, typename Y> pair<X,Y> p;; // template<typename Y> pair<T, Y> p;; // template<typename Y> pair<U, Y> p;; // };; //; // Outer<int, int> outer; // error: the partial specializations of Inner; // // have the same signature.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:214,variab,variable,214,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,2,['variab'],['variable']
Modifiability,"// We've better initialize the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:31,variab,variables,31,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,// We've inserted the location into the map. The map will have coalesced; // adjacent intervals (variable fragments) that describe the same memory; // location. Use this knowledge to insert a debug location that describes; // that coalesced fragment. This may eclipse other locs we've just; // inserted. This is okay as redundant locs will be cleaned up later.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp:97,variab,variable,97,interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AssignmentTrackingAnalysis.cpp,1,['variab'],['variable']
Modifiability,// We've reached the end of variables in common.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['variab'],['variables']
Modifiability,"// We've transferred the ownership to MsgExprs. For now, we *don't* null; // out the argument in the original expression (since we aren't deleting; // the ObjCMessageExpr). See RewritePropertyOrImplicitSetter() usage for more info.; //Exp->setArg(i, 0);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:177,Rewrite,RewritePropertyOrImplicitSetter,177,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['Rewrite'],['RewritePropertyOrImplicitSetter']
Modifiability,// WebAssembly argument registers are in the same index space as local; // variables. Assign the numbers for them first.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegNumbering.cpp:75,variab,variables,75,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegNumbering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyRegNumbering.cpp,1,['variab'],['variables']
Modifiability,// WebAssembly doesn't have:; // - Floating-point extending loads.; // - Floating-point truncating stores.; // - i1 extending loads.; // - truncating SIMD stores and most extending loads,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp:50,extend,extending,50,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyISelLowering.cpp,3,['extend'],['extending']
Modifiability,"// WebAssembly has variable length opcodes, so can't use EmitFixedLenDecoder; // below (which depends on a Size table-gen Record), and also uses a custom; // disassembler.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DisassemblerEmitter.cpp,1,['variab'],['variable']
Modifiability,// WebAssembly tables can't be used to initialise a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Weights for adaptive kernels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooNDKeysPdf.h:15,adapt,adaptive,15,roofit/roofit/inc/RooNDKeysPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooNDKeysPdf.h,1,['adapt'],['adaptive']
Modifiability,"// What to do depends on the size of the integer and the size of the pointer.; // We can either truncate, zero extend, or no-op, accordingly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:111,extend,extend,111,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,2,['extend'],['extend']
Modifiability,// What was the old variable value?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:20,variab,variable,20,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variable']
Modifiability,"// What we want here is an offset from the value returned by s_getpc (which; // is the address of the s_add_u32 instruction) to the global variable, but; // since the encoding of $symbol starts 4 bytes after the start of the; // s_add_u32 instruction, we end up with an offset that is 4 bytes too; // small. This requires us to add 4 to the global variable offset in order; // to compute the correct address. Similarly for the s_addc_u32 instruction,; // the encoding of $symbol starts 12 bytes after the start of the s_add_u32; // instruction.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp:139,variab,variable,139,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIInstrInfo.cpp,2,['variab'],['variable']
Modifiability,"// What we're essentially doing here is bucketing together ambiguous paths.; // Any bucket with more than one path in it gets extended by NextBase, which; // is usually the direct base of the inherited the vbptr. This code uses a; // sorted vector to implement a multiset to form the buckets. Note that the; // ordering is based on pointers, but it doesn't change our output order. The; // current algorithm is designed to match MSVC 2012's names.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp:126,extend,extended,126,interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/VTableBuilder.cpp,2,"['extend', 'inherit']","['extended', 'inherited']"
Modifiability,// What's known about the type of a variable or return type of a function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCodeComplete.cpp,1,['variab'],['variable']
Modifiability,"// When ArrayIdx is the sext of a value, we try to factor that value as; // well. Handling this case is important because array indices are; // typically sign-extended to the pointer index size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp:159,extend,extended,159,interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/StraightLineStrengthReduce.cpp,1,['extend'],['extended']
Modifiability,"// When CR bit registers are enabled, an extension of an i1 variable to a i32; // or i64 value is lowered in terms of a SELECT_I[48] operation, and thus; // involves constant materialization of a 0 or a 1 or both. If the result of; // the extension is then operated upon by some operator that can be constant; // folded with a constant 0 or 1, and that constant can be materialized using; // only one instruction (like a zero or one), then we should fold in those; // operations with the select.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:60,variab,variable,60,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['variab'],['variable']
Modifiability,"// When GV's init value is all 0, omit the EmuTlsTmplVar and let; // the emutls library function to reset newly allocated TLS variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LowerEmuTLS.cpp:126,variab,variables,126,interpreter/llvm-project/llvm/lib/CodeGen/LowerEmuTLS.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LowerEmuTLS.cpp,1,['variab'],['variables']
Modifiability,"// When HWASAN is used and tagging of global variables is enabled; // they should be accessed via the GOT, since the tagged address of a global; // is incompatible with existing code models. This also applies to non-pic; // mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:45,variab,variables,45,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['variab'],['variables']
Modifiability,"// When a readonly property is shadowed in a class extensions with a; // a readwrite property, the instance variable belongs to the shadowing; // property rather than the shadowed property. If there is no instance; // variable on a readonly property, check to see whether the property is; // shadowed and if so try to get the instance variable from shadowing; // property.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp:108,variab,variable,108,interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/BodyFarm.cpp,3,['variab'],['variable']
Modifiability,"// When an operand is parsed, the assembler will try to iterate through a set of; // possible operand classes that the operand might match and call the; // corresponding PredicateMethod to determine that.; //; // If there are two AsmOperands that would give a specific diagnostic if there; // is no match, there is currently no mechanism to distinguish which operand is; // a closer match. The DiagnosticPredicate distinguishes between 'completely; // no match' and 'near match', so the assembler can decide whether to give a; // specific diagnostic, or use 'InvalidOperand' and continue to find a; // 'better matching' diagnostic.; //; // For example:; // opcode opnd0, onpd1, opnd2; //; // where:; // opnd2 could be an 'immediate of range [-8, 7]'; // opnd2 could be a 'register + shift/extend'.; //; // If opnd2 is a valid register, but with a wrong shift/extend suffix, it makes; // little sense to give a diagnostic that the operand should be an immediate; // in range [-8, 7].; //; // This is a light-weight alternative to the 'NearMissInfo' approach; // below which collects *all* possible diagnostics. This alternative; // is optional and fully backward compatible with existing; // PredicateMethods that return a 'bool' (match or no match).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h:789,extend,extend,789,interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/MC/MCParser/MCTargetAsmParser.h,2,['extend'],['extend']
Modifiability,"// When avoiding a runtime check, the active.lane.mask inside the loop; // uses a modified trip count and the induction variable increment is; // done after the active.lane.mask intrinsic is called.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:120,variab,variable,120,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,1,['variab'],['variable']
Modifiability,"// When building a C++20 module interface unit or a partition unit, a; // strong definition in the module interface is provided by the; // compilation of that unit, not by its users. (Inline variables are still; // emitted in module users.)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp:191,variab,variables,191,interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriterDecl.cpp,1,['variab'],['variables']
Modifiability,// When committing variable values to locations: tell transfer tracker that; // we've clobbered things. It may be able to recover the variable from a; // different location.; // Inform TTracker about any direct clobbers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,2,['variab'],['variable']
Modifiability,"// When compiling the Linux kernel, we sometimes see false positives related to; // MSan being unable to understand that inline assembly calls may initialize; // local variables.; // This flag makes the compiler conservatively unpoison every memory location; // passed into an assembly call. Note that this may cause false positives.; // Because it's impossible to figure out the array sizes, we can only unpoison; // the first sizeof(type) bytes for each type* pointer.; // The instrumentation is only enabled in KMSAN builds, and only if; // -msan-handle-asm-conservative is on. This is done because we may want to; // quickly disable assembly instrumentation when it breaks.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp:168,variab,variables,168,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp,1,['variab'],['variables']
Modifiability,"// When computing imports we only added the variables and functions being; // imported to the export list. We also need to mark any references and calls; // they make as exported as well. We do this here, as it is more efficient; // since we may import the same values multiple times into different modules; // during the import computation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp:44,variab,variables,44,interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/FunctionImport.cpp,1,['variab'],['variables']
Modifiability,"// When debug information is correlated to profile data, a data variable; // is not needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:64,variab,variable,64,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['variab'],['variable']
Modifiability,"// When dereferenceability information is provided by a dereferenceable; // attribute, we know exactly how many bytes are dereferenceable. If we can; // determine the exact offset to the attributed variable, we can use that; // information here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp:198,variab,variable,198,interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/Loads.cpp,1,['variab'],['variable']
Modifiability,"// When doing parseForModule avoid warning about the user code; // being loaded ... we probably might as well extend this to; // ALL warnings ... but this will suffice for now (working; // around a real bug in QT :().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp:110,extend,extend,110,interpreter/cling/lib/Interpreter/Interpreter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/Interpreter.cpp,1,['extend'],['extend']
Modifiability,"// When in 64-bit target, the 32-bit operands generate a 32-bit result,; // zero-extended to a 64-bit result in the destination general-purpose,; // It means ""mov x %ebx"" will clobber the higher 32 bits of rbx, so we; // should preserve the 64-bit register rbx.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/x86gprintrin.h:81,extend,extended,81,interpreter/llvm-project/clang/lib/Headers/x86gprintrin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Headers/x86gprintrin.h,1,['extend'],['extended']
Modifiability,"// When mangling an inheriting constructor, the bare function type used is; // that of the inherited constructor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:20,inherit,inheriting,20,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,2,['inherit'],"['inherited', 'inheriting']"
Modifiability,"// When method is a synthesized one, such as a getter/setter there is; // nothing to rewrite.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:85,rewrite,rewrite,85,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['rewrite'],['rewrite']
Modifiability,"// When naming a constructor as a member of a dependent context (eg, in a; // friend declaration or an inherited constructor declaration), form an; // unresolved ""typename"" type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp:103,inherit,inherited,103,interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExprCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// When on the master, the master and/or slaves may share; // their file systems and cache. Therefore always make a; // check for the file. If the file already exists with the; // expected md5 the kPROOF_CHECKFILE command will cause the; // file to be copied from cache to slave sandbox.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx:279,sandbox,sandbox,279,proof/proof/src/TProof.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProof.cxx,1,['sandbox'],['sandbox']
Modifiability,"// When parsing x64 MS-style assembly, all non-absolute references to a named; // variable default to RIP-relative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp:82,variab,variable,82,interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp,1,['variab'],['variable']
Modifiability,"// When printing the control variable __emutls_v.*,; // we don't need to print the original TLS variable name.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp:29,variab,variable,29,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/AsmPrinter.cpp,2,['variab'],['variable']
Modifiability,"// When scalarizing PHI nodes we might try to examine/rewrite InsertElement; // nodes in predecessors. If those predecessors are unreachable from entry,; // then the IR in those blocks could have unexpected properties resulting in; // infinite loops in Scatterer::operator[]. By simply treating values; // originating from instructions in unreachable blocks as undef we do not; // need to analyse them further.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp:54,rewrite,rewrite,54,interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/Scalarizer.cpp,1,['rewrite'],['rewrite']
Modifiability,"// When set to true, use experimental new debug variable location tracking,; // which seeks to follow the values of variables rather than their location,; // post isel.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h:48,variab,variable,48,interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Target/TargetOptions.h,2,['variab'],"['variable', 'variables']"
Modifiability,"// When sinking a Def and its DBG_VALUEs, we shouldn't just remove the; // original DBG_VALUE instructions; we should set them to undef not to create; // an impossible combination of variable assignments in the original program.; // For example, this is the original program in order:; // %0 = CONST_I32 0; // DBG_VALUE %0, !""a"", !DIExpression() // a = 0, b = ?; // %1 = CONST_I32 1; // DBG_VALUE %1, !""b"", !DIExpression() // a = 0, b = 1; // %2 = CONST_I32 2; // DBG_VALUE %2, !""a"", !DIExpression() // a = 2, b = 1; // %3 = CONST_I32 3; // DBG_VALUE %3, !""b"", !DIExpression() // a = 2, b = 3; //; // If %2 were to sink below %3, if we just sink DBG_VALUE %1 with it, the; // debug info will show the variable ""b"" is updated to 2, creating the; // variable assignment combination of (a = 0, b = 3), which is not possible in; // the original program:; // %0 = CONST_I32 0; // DBG_VALUE %0, !""a"", !DIExpression() // a = 0, b = ?; // %1 = CONST_I32 1; // DBG_VALUE %1, !""b"", !DIExpression() // a = 0, b = 1; // %3 = CONST_I32 3; // DBG_VALUE %3, !""b"", !DIExpression() // a = 0, b = 3 (Incorrect!); // %2 = CONST_I32 2; // DBG_VALUE %2, !""a"", !DIExpression() // a = 2, b = 3; //; // To fix this,we leave an undef DBG_VALUE in its original place, so that the; // result will be; // %0 = CONST_I32 0; // DBG_VALUE %0, !""a"", !DIExpression() // a = 0, b = ?; // %1 = CONST_I32 1; // DBG_VALUE %1, !""b"", !DIExpression() // a = 0, b = 1; // DBG_VALUE $noreg, !""a"", !DIExpression() // a = ?, b = 1; // %3 = CONST_I32 3; // DBG_VALUE %3, !""b"", !DIExpression() // a = ?, b = 3; // %2 = CONST_I32 2; // DBG_VALUE %2, !""a"", !DIExpression() // a = 2, b = 3; // Now in the middle ""a"" will be shown as ""optimized out"", but it wouldn't; // show the impossible combination of (a = 0, b = 3).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugValueManager.cpp:183,variab,variable,183,interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugValueManager.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/WebAssembly/WebAssemblyDebugValueManager.cpp,3,['variab'],['variable']
Modifiability,"// When splitting a larger (e.g., sign-extended) value whose; // lower bits are described with an SDDbgValue, do not attempt; // to transfer the SDDbgValue to the upper bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:39,extend,extended,39,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,1,['extend'],['extended']
Modifiability,"// When the input is extended (i.e. single vector becomes a pair),; // this is done by using an ""undef"" vector as the second input.; // However, then we get; // input 1: GOODBITS; // input 2: ........; // but we need; // input 1: ....BITS; // input 2: ....GOOD; // Then at the end, this needs to be undone. To accomplish this,; // artificially add ""LogLen-1"" at both ends of the sequence.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelDAGToDAGHVX.cpp,1,['extend'],['extended']
Modifiability,"// When the interactive ROOT starts, it can automatically load some frequently; // used includes. However, this introduces several overheads; // -The initialisation takes more time; // -Memory overhead when including <vector>; // In $ROOTSYS/etc/system.rootrc, you can set the variable Rint.Includes to 0; // to disable the loading of these includes at startup.; // You can set the variable to 1 (default) to load only <iostream>, <string> and <DllImport.h>; // You can set it to 2 to load in addition <vector> and <utility>; // We strongly recommend setting the variable to 2 if your scripts include <vector>; // and you execute your scripts multiple times.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx:277,variab,variable,277,core/rint/src/TRint.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TRint.cxx,3,['variab'],['variable']
Modifiability,// When the linkage is not internal we must emit an alias for the original; // variable name as it may be accessed from another object. On non-Mach-O; // we can also emit an alias for internal linkage as it's safe to do so.; // It's not safe on Mach-O as the alias (and thus the portion of the; // MergedGlobals variable) may be dead stripped at link time.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp:79,variab,variable,79,interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalMerge.cpp,2,['variab'],['variable']
Modifiability,"// When the loop is guarded by a runtime overflow check for the loop; // induction variable increment by VF, we can increment the value before; // the get.active.lane mask and use the unmodified tripcount.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp:83,variab,variable,83,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/VPlanTransforms.cpp,1,['variab'],['variable']
Modifiability,"// When the thinlto plugin option is specified, only read the function; // the information from intermediate files and write a combined; // global index for the ThinLTO backends.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:20,plugin,plugin,20,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['plugin'],['plugin']
Modifiability,"// When the variable is on a declare target link or in a to clause with; // unified memory, a reference is needed to hold the host/device address; // of the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:12,variab,variable,12,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,2,['variab'],['variable']
Modifiability,"// When the width of the result grows, assume that a debugger will only; // access the low `FromBits` bits when inspecting the source variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp:134,variab,variable,134,interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/Local.cpp,1,['variab'],['variable']
Modifiability,"// When useCRBits() is true, there can be i1 arguments.; // It is because getRegisterType(MVT::i1) => MVT::i1,; // and for other integer types getRegisterType() => MVT::i32.; // Extend i1 and ensure callee will get i32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:178,Extend,Extend,178,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['Extend'],['Extend']
Modifiability,"// When using FP to access scalable vector objects, we need to minus; // the frame size.; //; // |--------------------------| -- <-- FP; // | callee-allocated save | |; // | area for register varargs| |; // |--------------------------| |; // | callee-saved registers | |; // |--------------------------| | MFI.getStackSize(); // | scalar local variables | |; // |--------------------------| -- (Offset of RVV objects is from here.); // | RVV objects |; // |--------------------------|; // | VarSize objects |; // |--------------------------| <-- SP",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:344,variab,variables,344,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,1,['variab'],['variables']
Modifiability,"// When using SP or BP to access stack objects, we may require extra padding; // to ensure the bottom of the RVV stack is correctly aligned within the main; // stack. We calculate this as the amount required to align the scalar local; // variable section up to the RVV alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:238,variab,variable,238,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// When using SP to access frame objects, we need to add RVV stack size.; //; // |--------------------------| -- <-- FP; // | callee-allocated save | | <----|; // | area for register varargs| | |; // |--------------------------| | |; // | callee-saved registers | | |; // |--------------------------| -- |; // | RVV alignment padding | | |; // | (not counted in | | |; // | MFI.getStackSize() but | | |; // | counted in | | |; // | RVFI.getRVVStackSize()) | | |; // |--------------------------| -- |; // | RVV objects | | |-- MFI.getStackSize(); // | (not counted in | | |; // | MFI.getStackSize()) | | |; // |--------------------------| -- |; // | padding before RVV | | |; // | (not counted in | | |; // | MFI.getStackSize()) | | |; // |--------------------------| -- |; // | scalar local variables | | <----'; // |--------------------------| -- <-- BP (if var sized objects present); // | VarSize objects | |; // |--------------------------| -- <-- SP; //; // The total amount of padding surrounding RVV objects is described by; // RVV->getRVVPadding() and it can be zero. It allows us to align the RVV; // objects to the required alignment.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp:791,variab,variables,791,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVFrameLowering.cpp,1,['variab'],['variables']
Modifiability,"// When using `char8_t *` integers or pointers are written to the ostream; // instead of UTF-8 code as one might expect. This might lead to unexpected; // behavior, especially as `u8""""` literals are of type `char8_t*` instead of; // type `char_t*` from C++20 onwards. Thus we disallow using them with; // raw_ostreams.; // If you have u8"""" literals to stream, you can rewrite them as ordinary; // literals with escape sequences; // e.g. replace `u8""\u00a0""` by `""\xc2\xa0""`; // or use `reinterpret_cast`:; // e.g. replace `u8""\u00a0""` by `reinterpret_cast<const char *>(u8""\u00a0"")`",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h:368,rewrite,rewrite,368,interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/raw_ostream.h,1,['rewrite'],['rewrite']
Modifiability,"// When using an external thunk for retpolines, we pick names that match the; // names GCC happens to use as well. This helps simplify the implementation; // of the thunks for kernels where they have no easy ability to create; // aliases and are doing non-trivial configuration of the thunk's body. For; // example, the Linux kernel will do boot-time hot patching of the thunk; // bodies and cannot easily export aliases of these to loaded modules.; //; // Note that at any point in the future, we may need to change the semantics; // of how we implement retpolines and at that time will likely change the; // name of the called thunk. Essentially, there is no hard guarantee that; // LLVM will generate calls to specific thunks, we merely make a best-effort; // attempt to help out kernels and other systems where duplicating the; // thunks is costly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:264,config,configuration,264,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['config'],['configuration']
Modifiability,"// When we check whether a variable is already defined, for the purpose of; // reporting an error on redefinition, we don't look up to the parent; // scope, because it's all right to shadow an outer definition with an; // inner one.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:27,variab,variable,27,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,1,['variab'],['variable']
Modifiability,"// When we have multiple variable dimensions, the LeafInfo only expect; // the instance after the primary index has been set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:25,variab,variable,25,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// When we need stack realignment, we can't address the stack from the frame; // pointer. When we have dynamic allocas or stack-adjusting inline asm, we; // can't address variables from the stack pointer. MS inline asm can; // reference locals while also adjusting the stack pointer. When we can't; // use both the SP and the FP, we need a separate base pointer register.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kRegisterInfo.cpp:171,variab,variables,171,interpreter/llvm-project/llvm/lib/Target/M68k/M68kRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/M68k/M68kRegisterInfo.cpp,2,['variab'],['variables']
Modifiability,"// When we zero-extend from i32 to i64, we use a pattern like this:; // def : Pat<(i64 (zext i32:$in)),; // (RLDICL (INSERT_SUBREG (i64 (IMPLICIT_DEF)), $in, sub_32),; // 0, 32)>;; // There are several 32-bit shift/rotate instructions, however, that will; // clear the higher-order bits of their output, rendering the RLDICL; // unnecessary. When that happens, we remove it here, and redefine the; // relevant 32-bit operation to be a 64-bit operation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,"// When we're forming an unsplittable region, it must always start at; // the first slice and will extend through its end.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:99,extend,extend,99,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['extend'],['extend']
Modifiability,"// When we're initializing a global variable *or* the storage duration of; // the temporary is explicitly static, create a global variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp:36,variab,variable,36,interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Interp/ByteCodeExprGen.cpp,2,['variab'],['variable']
Modifiability,"// When x and y are extended, lower:; // avgfloor(x, y) -> (x + y) >> 1; // avgceil(x, y) -> (x + y + 1) >> 1; // Otherwise, lower to:; // avgfloor(x, y) -> (x >> 1) + (y >> 1) + (x & y & 1); // avgceil(x, y) -> (x >> 1) + (y >> 1) + ((x || y) & 1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:20,extend,extended,20,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Whether bits in a BitsInit should stay unresolved if resolving them would; // result in a ? (UnsetInit). This behavior is used to represent instruction; // encodings by keeping references to unset variables within a record.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h:200,variab,variables,200,interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TableGen/Record.h,1,['variab'],['variables']
Modifiability,"// Whether or not the current loop will still exist after terminator constant; // folding will be done. In theory, there are two ways how it can happen:; // 1. Loop's latch(es) become unreachable from loop header;; // 2. Loop's header becomes unreachable from method entry.; // In practice, the second situation is impossible because we only modify the; // current loop and its preheader and do not affect preheader's reachibility; // from any other block. So this variable set to true means that loop's latch; // has become unreachable from loop header.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp:465,variab,variable,465,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopSimplifyCFG.cpp,1,['variab'],['variable']
Modifiability,"// Whether the definition of the variable is available externally.; // If yes, we shouldn't emit the GloablCtor and GlobalDtor for the variable; // since this is the job for its original source.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:33,variab,variable,33,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,2,['variab'],['variable']
Modifiability,"// Whether to construct constant values via ""insert"". Could eliminate constant; // extenders, but often not practical.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp:83,extend,extenders,83,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonGenInsert.cpp,1,['extend'],['extenders']
Modifiability,// Whether we started the sandboxing sequence for calls. Calls are bundled; // with branch delays and aligned to the bundle end.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp:26,sandbox,sandboxing,26,interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MCTargetDesc/MipsNaClELFStreamer.cpp,1,['sandbox'],['sandboxing']
Modifiability,// Which operand may be extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h:24,extend,extended,24,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonBaseInfo.h,1,['extend'],['extended']
Modifiability,"// While rewriting uses, we buffer jumps and rewrite them in a second pass; // because doing so will perturb the CFG that we are walking to find the; // uses in the first place.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp:45,rewrite,rewrite,45,interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FlagsCopyLowering.cpp,1,['rewrite'],['rewrite']
Modifiability,"// While sizeof(var) doesn't technically extend the liveness of 'var', it; // does extent the liveness of metadata if 'var' is a VariableArrayType.; // We handle that special case here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/LiveVariables.cpp:41,extend,extend,41,interpreter/llvm-project/clang/lib/Analysis/LiveVariables.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/LiveVariables.cpp,2,"['Variab', 'extend']","['VariableArrayType', 'extend']"
Modifiability,"// While the layout of types that contain virtual bases is not specified; // by the C++ standard, both the Itanium and Microsoft C++ ABIs place; // virtual bases after the derived members. This would make a flexible; // array member declared at the end of an object not adjacent to the end; // of the type.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:207,flexible,flexible,207,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['flexible'],['flexible']
Modifiability,"// While waiting for the lock, another thread may; // have process the requested plugin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:81,plugin,plugin,81,core/base/src/TPluginManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx,1,['plugin'],['plugin']
Modifiability,"// While we still have something to read, read the instance variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp:60,variab,variables,60,interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseObjc.cpp,1,['variab'],['variables']
Modifiability,"// While we're here, rewrite all edges for this PHI, rather; // than just one use at a time, to minimize the number of; // bitcasts we emit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp:21,rewrite,rewrite,21,interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/ObjCARC/ObjCARCContract.cpp,1,['rewrite'],['rewrite']
Modifiability,"// WhileStmt is followed by several trailing objects,; // some of which optional. Note that it would be more; // convenient to put the optional trailing object at the end; // but this would affect children().; // The trailing objects are in order:; //; // * A ""Stmt *"" for the condition variable.; // Present if and only if hasVarStorage(). This is in fact a ""DeclStmt *"".; //; // * A ""Stmt *"" for the condition.; // Always present. This is in fact an ""Expr *"".; //; // * A ""Stmt *"" for the body.; // Always present.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h:287,variab,variable,287,interpreter/llvm-project/clang/include/clang/AST/Stmt.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/AST/Stmt.h,1,['variab'],['variable']
Modifiability,// White-list anything that isn't a local variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// Why do I need to declare it here, it should be inherited without; // any problems, no?; /**. Evaluates the function with the given coordinates. @param x vector containing the input coordinates. @return the result of the function evaluation with the given; coordinates. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:50,inherit,inherited,50,math/minuit2/inc/Minuit2/ParametricFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h,1,['inherit'],['inherited']
Modifiability,"// Widen subvectors to the full width rather than promoting integer; // elements. This is better because:; //; // (a) it means that we can handle the ABI for passing and returning; // sub-128 vectors without having to handle them as legal types.; //; // (b) we don't have instructions to extend on load and truncate on store,; // so promoting the integers is less efficient.; //; // (c) there are no multiplication instructions for the widest integer; // type (v2i64).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h:288,extend,extend,288,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.h,1,['extend'],['extend']
Modifiability,"// Widen the argument value to sizeof(parameter type). This is almost; // always a no-op, except when the parameter type is bool. In; // that case, this may extend the argument from 1 bit to 8 bits.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:157,extend,extend,157,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['extend'],['extend']
Modifiability,// Widen the induction variable expression.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp:23,variab,variable,23,interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/SimplifyIndVar.cpp,1,['variab'],['variable']
Modifiability,// Widen to 64 bits here to get it sign extended.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:40,extend,extended,40,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// Widen to the common type.; // FIXME: This should respect the extend type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp:64,extend,extend,64,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CallLowering.cpp,1,['extend'],['extend']
Modifiability,// Windows does not allow globals to be initialised to point to globals in; // different DLLs. Any such variables must run code to initialise them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:104,variab,variables,104,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variables']
Modifiability,"// With ""RemoveDIs"" debug-info stored in DPValue objects, debug-info; // attached to this instruction, and drop any for scopes that aren't alive,; // like the rest of this loop does. Extending support to assignment tracking; // is future work.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp:183,Extend,Extending,183,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ADCE.cpp,1,['Extend'],['Extending']
Modifiability,"// With MachO only variables whose corresponding symbol starts with 'l' or; // 'L' can be merged, so we only try merging GVs with private linkage.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp:19,variab,variables,19,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp,1,['variab'],['variables']
Modifiability,// With Zbb we can sign extend and let LegalizeDAG use minu/maxu. Using; // sign extend allows overflow of the lower 32 bits to be detected on; // the promoted size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:24,extend,extend,24,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],['extend']
Modifiability,"// With a few exceptions, direct replacement amounts to creating an; // instruction with a corresponding register opcode, with all operands; // the same, except for the register used in place of the extender.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp:199,extend,extender,199,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonConstExtenders.cpp,1,['extend'],['extender']
Modifiability,"// With a name, the ValueType simply provides the type of the named; // variable.; //; // (sext_inreg i32:$src, i16); // ~~~~~~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp:72,variab,variable,72,interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenDAGPatterns.cpp,1,['variab'],['variable']
Modifiability,"// With a variable index, we can't perform the operation in a smaller type, so; // we're forced to expand this.; //; // TODO: We could emit a chain of compare/select to figure out which piece to; // index.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp:10,variab,variable,10,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp,1,['variab'],['variable']
Modifiability,"// With fast, caller promises that layout of `coords` is identical to our internal `vars`.; // Previously, this was verified with an assert in debug mode like this:; //; // assert(!fast || coords.hasSameLayout(_vars));; //; // However, there are usecases where the externally provided `coords` have; // different names than the internal variables, even though they correspond; // to each other. For example, if the observables in the computation graph; // are renamed with `redirectServers`. Hence, we can't do a meaningful assert; // here.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:337,variab,variables,337,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['variab'],['variables']
Modifiability,"// With four arguments, there is only one form that the function could be; // called in: no events and no variable arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,"// With have a second variable dimensions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:22,variab,variable,22,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// With instance variables, this puts '}' on its own line. Without instance; // variables, this ends the @interface line.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:17,variab,variables,17,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,2,['variab'],['variables']
Modifiability,"// With the -maix-small-local-exec-tls option, produce a faster access; // sequence for local-exec TLS variables where the offset from the TLS; // base is encoded as an immediate operand.; //; // We only utilize the faster local-exec access sequence when the TLS; // variable has a size within the policy limit. We treat types that are; // not sized or are empty as being over the policy size limit.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:103,variab,variables,103,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// With the class hierarchy in place, let synthesized register classes inherit; // properties from their closest super-class. The iteration order here can; // propagate properties down multiple levels.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:71,inherit,inherit,71,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['inherit'],['inherit']
Modifiability,"// With the exception of data-predicate transitions, no instructions are; // required to cast between legal scalable vector types. However:; // 1. Packed and unpacked types have different bit lengths, meaning BITCAST; // is not universally useable.; // 2. Most unpacked integer types are not legal and thus integer extends; // cannot be used to convert between unpacked and packed types.; // These can make ""bitcasting"" a multiphase process. REINTERPRET_CAST is used; // to transition between unpacked and packed types of the same element type,; // with BITCAST used otherwise.; // This function does not handle predicate bitcasts.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h:315,extend,extends,315,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.h,1,['extend'],['extends']
Modifiability,"// With the stack layout fixed, rewrite the FP registers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp:32,rewrite,rewrite,32,interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FloatingPoint.cpp,1,['rewrite'],['rewrite']
Modifiability,"// Within the loop, the variable is defined equal to the PHI node. If it; // shadows an existing variable, we have to restore it, so save it now.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp:24,variab,variable,24,interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/examples/Kaleidoscope/BuildingAJIT/Chapter1/toy.cpp,30,['variab'],['variable']
Modifiability,"// Without a virtual base register, if the function has variable sized; // objects, all fixed-size local references will be via the frame pointer,; // Approximate the offset and see if it's legal for the instruction.; // Note that the incoming offset is based on the SP value at function entry,; // so it'll be negative.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp,2,['variab'],['variable']
Modifiability,// Work out which variables are reachable through function calls,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:18,variab,variables,18,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variables']
Modifiability,"// Working with RooCategory objects to describe discrete variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:57,variab,variables,57,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['variab'],['variables']
Modifiability,"// Working with parameterized ranges in a fit. This an example of a; // fit with an acceptance that changes per-event; //; // pdf = exp(-t/tau) with t[tmin,5]; //; // where t and tmin are both observables in the dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:16,parameteriz,parameterized,16,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['parameteriz'],['parameterized']
Modifiability,"// Working with parameterized ranges to define non-rectangular regions; // for fitting and integration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h:16,parameteriz,parameterized,16,roofit/roofitcore/test/stressRooFit_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/stressRooFit_tests.h,1,['parameteriz'],['parameterized']
Modifiability,"// Working with the single array element, so have to remap; // destination and source variables to corresponding array; // elements.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:86,variab,variables,86,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,1,['variab'],['variables']
Modifiability,// Would duplexing this instruction create a requirement to extend,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h:60,extend,extend,60,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCInstrInfo.h,1,['extend'],['extend']
Modifiability,"// Wrapper p.d.f adding an extended likelihood term to an existing p.d.f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h:27,extend,extended,27,roofit/roofitcore/inc/RooExtendPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h,1,['extend'],['extended']
Modifiability,// Write all global variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesYAMLCompiler.cpp:20,variab,variables,20,interpreter/llvm-project/clang/lib/APINotes/APINotesYAMLCompiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesYAMLCompiler.cpp,1,['variab'],['variables']
Modifiability,"// Write all persistent TClasses.; // Avoid plugins.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/rootpcm/src/rootclingIO.cxx:44,plugin,plugins,44,io/rootpcm/src/rootclingIO.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/rootpcm/src/rootclingIO.cxx,1,['plugin'],['plugins']
Modifiability,"// Write definition of external node, which doesn't have any; // specific module associated with it. Typically this is function; // or variable defined in native object or library.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp:135,variab,variable,135,interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/IR/ModuleSummaryIndex.cpp,1,['variab'],['variable']
Modifiability,// Write down each range where the variable is defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCCodeView.cpp,1,['variab'],['variable']
Modifiability,"// Write extended address record, zeroing segment address; // if needed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:9,extend,extended,9,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,1,['extend'],['extended']
Modifiability,// Write extended linear (base) address corresponding to 'Addr',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:9,extend,extended,9,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,1,['extend'],['extended']
Modifiability,// Write out edge attributes to show the kind of inheritance.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp:49,inherit,inheritance,49,interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/InheritViz.cpp,1,['inherit'],['inheritance']
Modifiability,// Write the property. Note that this will implicitly read the; // kind into a local variable with the right name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp:85,variab,variable,85,interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/ClangASTPropertiesEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Write the undefined internal functions and variables, and inline functions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp:46,variab,variables,46,interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Serialization/ASTWriter.cpp,1,['variab'],['variables']
Modifiability,"// X / 1 -> X; // X % 1 -> 0; // If this is a boolean op (single-bit element type), we can't have; // division-by-zero or remainder-by-zero, so assume the divisor is 1.; // TODO: Similarly, if we're zero-extending a boolean divisor, then assume; // it's a 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:204,extend,extending,204,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"// X is not loop invariant. If X == R, this is the inverse pmpy.; // Otherwise, check for an xor with an invariant value. If the; // variable argument to the xor is R, then this is still a valid; // inverse pmpy.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp:133,variab,variable,133,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonLoopIdiomRecognition.cpp,1,['variab'],['variable']
Modifiability,// X is used to extend vector register only when shift is not 3.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,1,['extend'],['extend']
Modifiability,// X shift by 0 -> X; // Shift-by-sign-extended bool must be shift-by-0 because shift-by-all-ones; // would be poison.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:39,extend,extended,39,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['extend'],['extended']
Modifiability,// X86 allows a sign-extended 32-bit immediate field as a displacement.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// X86 has 8, 16, and 32-bit zero-extending loads.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:34,extend,extending,34,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extending']
Modifiability,// XCOFF specific configuration for copying/stripping a single file.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h:18,config,configuration,18,interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ObjCopy/XCOFF/XCOFFConfig.h,1,['config'],['configuration']
Modifiability,// XLo = X & HalfMask; // YLo = Y & HalfMask; // TODO: Refactor with SimplifyDemandedBits or KnownBits known leading zeros; // to enhance robustness,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp:55,Refactor,Refactor,55,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineAddSub.cpp,2,"['Refactor', 'enhance']","['Refactor', 'enhance']"
Modifiability,// XOP has 128-bit variable logical/arithmetic shifts.; // +ve/-ve Amt = shift left/right.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// XOP has 128-bit vector variable + immediate rotates.; // +ve/-ve Amt = rotate left/right - just need to handle ISD::ROTL.; // XOP implicitly uses modulo rotation amounts.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,// XOP has v16i8/v8i16/v4i32/v2i64 variable vector shifts.; // Splitting for v32i8/v16i16 on XOP+AVX2 targets is still preferred.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['variab'],['variable']
Modifiability,"// XXX: Hardcoding to 1 for now.; //; // I think the StackWidth should be stored as metadata associated with the; // MachineFunction. This metadata can either be added by a frontend, or; // calculated by a R600 specific LLVM IR pass.; //; // The StackWidth determines how stack objects are laid out in memory.; // For a vector stack variable, like: int4 stack[2], the data will be stored; // in the following ways depending on the StackWidth.; //; // StackWidth = 1:; //; // T0.X = stack[0].x; // T1.X = stack[0].y; // T2.X = stack[0].z; // T3.X = stack[0].w; // T4.X = stack[1].x; // T5.X = stack[1].y; // T6.X = stack[1].z; // T7.X = stack[1].w; //; // StackWidth = 2:; //; // T0.X = stack[0].x; // T0.Y = stack[0].y; // T1.X = stack[0].z; // T1.Y = stack[0].w; // T2.X = stack[1].x; // T2.Y = stack[1].y; // T3.X = stack[1].z; // T3.Y = stack[1].w; //; // StackWidth = 4:; // T0.X = stack[0].x; // T0.Y = stack[0].y; // T0.Z = stack[0].z; // T0.W = stack[0].w; // T1.X = stack[1].x; // T1.Y = stack[1].y; // T1.Z = stack[1].z; // T1.W = stack[1].w",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUFrameLowering.cpp:333,variab,variable,333,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// XXXX rewrite",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveLine.cxx:8,rewrite,rewrite,8,graf3d/eve7/src/REveLine.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/src/REveLine.cxx,3,['rewrite'],['rewrite']
Modifiability,"// Yes, an existing parameter variable can be reused for this.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp:30,variab,variable,30,interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/TableGen/MveEmitter.cpp,1,['variab'],['variable']
Modifiability,"// Your constructor needs a name and title and then a list of the; // dependent variables and parameters used by this PDF. Use an; // underscore in the variable names to distinguish them from your; // own local versions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooNovosibirsk.h:80,variab,variables,80,roofit/roofit/inc/RooNovosibirsk.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooNovosibirsk.h,2,['variab'],"['variable', 'variables']"
Modifiability,// Zero extend if Byte Swap intrinsic has different type,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,1,['extend'],['extend']
Modifiability,// Zero extend if required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/ExpandMemCmp.cpp,1,['extend'],['extend']
Modifiability,// Zero extend of a sub-reg of NullValueReg into itself does not change the; // null value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86InstrInfo.cpp,1,['extend'],['extend']
Modifiability,// Zero extend so that the elements are of same type as those of NVT,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// Zero extend the argument unless its cttz, then use any_extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,1,['extend'],['extend']
Modifiability,// Zero extend the condition if needed.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,3,['extend'],['extend']
Modifiability,// Zero extend the element to the right size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ConstantFolding.cpp,1,['extend'],['extend']
Modifiability,// Zero extend the input.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// Zero extend the operands to the largest legal integer. Originally, they; // must be of a strictly smaller size.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Zero extend things like i1, sign extend everything else. It shouldn't; // matter in theory which one we pick, but this tends to give better code?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,2,['extend'],['extend']
Modifiability,"// Zero extend to 2i64, OR with the floating point representation of 2^52.; // This gives us the floating point equivalent of 2^52 + the i32 integer; // since double has 52-bits of mantissa. Then subtract 2^52 in floating; // point leaving just our i32 integers in double format.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Zero extend to a new width.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp,1,['extend'],['extend']
Modifiability,// Zero extend to i32 since there is not an i8 bsr.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,2,['extend'],['extend']
Modifiability,// Zero extend to the promoted type and do the count or parity there.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,// Zero extend to the promoted type and do the count there.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,1,['extend'],['extend']
Modifiability,"// Zero extends are a little more awkward. At the point we are matching; // this, we are looking for an AND with a (-1, 0, -1, 0) buildvector mask.; // That might be before of after a bitcast depending on how the and is; // placed. Because this has to look through bitcasts, it is currently only; // supported on LE.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:8,extend,extends,8,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extends']
Modifiability,// Zero or sign extend the most significant register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp:16,extend,extend,16,interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AVR/AVRISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// Zero out the high part, effectively zero extending the input.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:44,extend,extending,44,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,// Zero-extend LHS if it is non-negative. InstCombine canonicalizes sext to; // zext if the source operand is proved non-negative. We should do that; // consistently so that CandidateExpr more likely appears before. See; // @reassociate_gep_assume for an example of this canonicalization.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/NaryReassociate.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend a 32-bit address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend bool.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp:8,extend,extend,8,interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprConstant.cpp,1,['extend'],['extend']
Modifiability,"// Zero-extend bottom element to v2i64 vector type, either by extension or; // shuffle masking.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend directly to i32.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend or sign-extend into high-order input register.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,4,['extend'],['extend']
Modifiability,// Zero-extend or sign-extend the pointer value according to; // whether the index is signed or not.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:8,extend,extend,8,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,2,['extend'],['extend']
Modifiability,// Zero-extend the 32-bit Callee address into a 64-bit according to x32 ABI,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend the evaluated condition boolean value (0 or 1) by 32bits.; // %1 = zext i1 %tobool to i32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/InstrProfiling.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend the index elements within the vector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend the offset,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,// Zero-extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,"// Zero-extending load itself cannot be optimized. So, it is not; // interesting by itself though it gives useful information.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp:8,extend,extending,8,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp,1,['extend'],['extending']
Modifiability,// Zero-initialized TLS variables with local linkage always get classified; // as ThreadBSSLocal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:24,variab,variables,24,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,1,['variab'],['variables']
Modifiability,// Zero/any extend of an unsigned unpack,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:12,extend,extend,12,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// [C++2c] [basic.scope.scope]/p5; // A declaration is name-independent if its name is _ and it declares; // - a variable with automatic storage duration,; // - a structured binding not inhabiting a namespace scope,; // - the variable introduced by an init-capture; // - or a non-static data member.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:113,variab,variable,113,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,2,['variab'],['variable']
Modifiability,"// [OpenMP 4.0], 2.15 declare reduction Directive, Restrictions; // Only the variables omp_in and omp_out are allowed in the combiner.; // Only the variables omp_priv and omp_orig are allowed in the; // initializer-clause.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:77,variab,variables,77,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],['variables']
Modifiability,"// [OpenMP 5.0], 2.19.7.3. declare mapper Directive, Restrictions; // List-items in map clauses on this construct may only refer to the declared; // variable var and entities that could be referenced by a procedure defined; // at the same location.; // [OpenMP 5.2] Also allow iterator declared variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:149,variab,variable,149,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// [class.inhctor.init]p1:; // initialization proceeds as if a defaulted default constructor is used to; // initialize the D object and each base class subobject from which the; // constructor was inherited,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:197,inherit,inherited,197,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,"// [class.inhctor.init]p2:; // If the constructor was inherited from multiple base class subobjects; // of type B, the program is ill-formed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:54,inherit,inherited,54,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['inherit'],['inherited']
Modifiability,// [dcl.constexpr]p1:; // The constexpr specifier shall be applied only to the definition of a; // variable or variable template or the declaration of a function or; // function template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:99,variab,variable,99,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,2,['variab'],['variable']
Modifiability,"// [dcl.constinit]p1:; // If the [constinit] specifier is applied to any declaration of a; // variable, it shall be applied to the initializing declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:94,variab,variable,94,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// [dcl.fct.def.coroutine]p13; // When a coroutine is invoked, after initializing its parameters; // ([expr.call]), a copy is created for each coroutine parameter. For a; // parameter of type cv T, the copy is a variable of type cv T with; // automatic storage duration that is direct-initialized from an xvalue of; // type T referring to the parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp:212,variab,variable,212,interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaCoroutine.cpp,1,['variab'],['variable']
Modifiability,"// [dcl.inline]/7; // If an inline function or variable that is attached to a named module; // is declared in a definition domain, it shall be defined in that; // domain.; // So, if the current declaration does not have a definition, we must; // check at the end of the TU (or when the PMF starts) to see that we; // have a definition at that point.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp:47,variab,variable,47,interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaModule.cpp,1,['variab'],['variable']
Modifiability,// [dcl.inline]p1:; // The inline specifier can be applied only to the declaration or; // definition of a variable or function.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp:106,variab,variable,106,interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplate.cpp,1,['variab'],['variable']
Modifiability,// [dcl.stc] p2: The auto or register specifiers shall be applied only; // to names of variables declared in a block or to function parameters.; // [dcl.stc] p6: The extern specifier cannot be used in the declaration; // of class members,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:87,variab,variables,87,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variables']
Modifiability,"// [distinct, scope, name, variable,...]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h:27,variab,variable,27,interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Bitcode/LLVMBitCodes.h,1,['variab'],['variable']
Modifiability,"// [temp.constr.atomic]p3: To determine if an atomic constraint is; // satisfied, the parameter mapping and template arguments are first; // substituted into its expression. If substitution results in an; // invalid type or expression, the constraint is not satisfied.; // Otherwise, the lvalue-to-rvalue conversion is performed if necessary,; // and E shall be a constant expression of type bool.; //; // Perform the L to R Value conversion if necessary. We do so for all; // non-PRValue categories, else we fail to extend the lifetime of; // temporaries, and that fails the constant expression check.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp:517,extend,extend,517,interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaConcept.cpp,1,['extend'],['extend']
Modifiability,"// [temp.pre]/8:; // An entity is templated if it is; // - a template,; // - an entity defined ([basic.def]) or created ([class.temporary]) in a; // templated entity,; // - a member of a templated entity,; // - an enumerator for an enumeration that is a templated entity, or; // - the closure type of a lambda-expression ([expr.prim.lambda.closure]); // appearing in the declaration of a templated entity. [Note 6: A local; // class, a local or block variable, or a friend function defined in a; // templated entity is a templated entity. — end note]; //; // A templated function is a function template or a function that is; // templated. A templated class is a class template or a class that is; // templated. A templated variable is a variable template or a variable; // that is templated.; // Note: we only have to check if this is defined in a template entity, OR; // if we are a template, since the rest don't apply. The requires clause; // applies to the call operator, which we already know is a member function,; // AND defined.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp:451,variab,variable,451,interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaLambda.cpp,4,['variab'],['variable']
Modifiability,"// \brief Checks that initializers of \p Var satisfy CUDA restrictions. In; // case of error emits appropriate diagnostic and invalidates \p Var.; //; // \details CUDA allows only empty constructors as initializers for global; // variables (see E.2.3.1, CUDA 7.5). The same restriction also applies to all; // __shared__ variables whether they are local or not (they all are implicitly; // static in CUDA). One exception is that CUDA allows constant initializers; // for __constant__ and __device__ variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h:230,variab,variables,230,interpreter/llvm-project/clang/include/clang/Sema/Sema.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Sema.h,3,['variab'],['variables']
Modifiability,"// \p Index is 0, 1, and 2 for x, y, and z dimension, respectively.; /// Emit code based on Code Object ABI version.; /// COV_4 : Emit code to use dispatch ptr; /// COV_5 : Emit code to use implicitarg ptr; /// COV_NONE : Emit code to load a global variable ""__oclc_ABI_version""; /// and use its value for COV_4 or COV_5 approach. It is used for; /// compiling device libraries in an ABI-agnostic way.; ///; /// Note: ""__oclc_ABI_version"" is supposed to be emitted and intialized by; /// clang during compilation of user code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp:249,variab,variable,249,interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBuiltin.cpp,1,['variab'],['variable']
Modifiability,// \returns true if S_GETPC_B64 zero-extends the result from 48 bits instead; // of sign-extending.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h:37,extend,extends,37,interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/GCNSubtarget.h,2,['extend'],"['extending', 'extends']"
Modifiability,// __block variables are not moved implicitly.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:11,variab,variables,11,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['variab'],['variables']
Modifiability,// __block variables are passed by their descriptor address.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:11,variab,variables,11,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,2,['variab'],['variables']
Modifiability,// __block variables might require us to capture a copy-initializer.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp:11,variab,variables,11,interpreter/llvm-project/clang/lib/Sema/Sema.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/Sema.cpp,1,['variab'],['variables']
Modifiability,"// __block variables need to have the rhs evaluated first, plus; // this should improve codegen just a little.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp:11,variab,variables,11,interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGExprScalar.cpp,1,['variab'],['variables']
Modifiability,// __ibm128 for IBM extended precision,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:20,extend,extended,20,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['extend'],['extended']
Modifiability,"// __imp_ variables are indirection pointers, so use malloc to simulate that",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp:10,variab,variables,10,interpreter/cling/lib/Utils/PlatformWin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/PlatformWin.cpp,1,['variab'],['variables']
Modifiability,"// __linux__; // Instruction can have some variable operands, and we may want to see how; // different operands affect performance. So for each operand position,; // precompute all the possible choices we might care about,; // and greedily generate all the possible combinations of choices.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-exegesis/lib/X86/Target.cpp,1,['variab'],['variable']
Modifiability,"// __shared__ variables are odd. Shadows do get created, but; // they are not registered with the CUDA runtime, so they; // can't really be used to access their device-side; // counterparts. It's not clear yet whether it's nvcc's bug or; // a feature, but we've got to do the same for compatibility.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp:14,variab,variables,14,interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGCUDANV.cpp,1,['variab'],['variables']
Modifiability,// __tls_guard comes from the MSVC runtime and reflects; // whether TLS has been initialized for a particular thread.; // It is set from within __dyn_tls_init by the runtime.; // Every library and executable has its own variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:220,variab,variable,220,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,1,['variab'],['variable']
Modifiability,"// __unknown_anytype(...) is a special case used by the debugger when; // it has no idea what a function's signature is.; //; // We want to build this call essentially under the K&R; // unprototyped rules, but making a FunctionNoProtoType in C++; // would foul up all sorts of assumptions. However, we cannot; // simply pass all arguments as variadic arguments, nor can we; // portably just call the function under a non-variadic type; see; // the comment on IR-gen's TargetInfo::isNoProtoCallVariadic.; // However, it turns out that in practice it is generally safe to; // call a function declared as ""A foo(B,C,D);"" under the prototype; // ""A foo(B,C,D,...);"". The only known exception is with the; // Windows ABI, where any variadic function is implicitly cdecl; // regardless of its normal CC. Therefore we change the parameter; // types to match the types of the arguments.; //; // This is a hack, but it is far superior to moving the; // corresponding target-specific code from IR-gen to Sema/AST.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:377,portab,portably,377,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['portab'],['portably']
Modifiability,"// __wasm_lpad_context global variable.; // This variable should be thread local. If the target does not support TLS,; // we depend on CoalesceFeaturesAndStripAtomics to downgrade it to; // non-thread-local ones, in which case we don't allow this object to be; // linked with other objects using shared memory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/WasmEHPrepare.cpp,2,['variab'],['variable']
Modifiability,"// `-analyzer-config optin.cplusplus.UninitializedObject:Pedantic=true`.; //; // - ""NotesAsWarnings"" (boolean). If set to true, the checker will emit a; // warning for each uninitialized field, as opposed to emitting one warning; // per constructor call, and listing the uninitialized fields that belongs; // to it in notes. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:NotesAsWarnings=true`.; //; // - ""CheckPointeeInitialization"" (boolean). If set to false, the checker will; // not analyze the pointee of pointer/reference fields, and will only check; // whether the object itself is initialized. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:CheckPointeeInitialization=true`.; //; // TODO: With some clever heuristics, some pointers should be dereferenced; // by default. For example, if the pointee is constructed within the; // constructor call, it's reasonable to say that no external object; // references it, and we wouldn't generate multiple report on the same; // pointee.; //; // - ""IgnoreRecordsWithField"" (string). If supplied, the checker will not; // analyze structures that have a field with a name or type name that; // matches the given pattern. Defaults to """".; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:IgnoreRecordsWithField=""[Tt]ag|[Kk]ind""`.; //; // - ""IgnoreGuardedFields"" (boolean). If set to true, the checker will analyze; // _syntactically_ whether the found uninitialized object is used without a; // preceding assert call. Defaults to false.; //; // `-analyzer-config \; // optin.cplusplus.UninitializedObject:IgnoreGuardedFields=true`.; //; // Most of the following methods as well as the checker itself is defined in; // UninitializedObjectChecker.cpp.; //; // Some methods are implemented in UninitializedPointee.cpp, to reduce the; // complexity of the main checker file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h:2104,config,config,2104,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/UninitializedObject/UninitializedObject.h,2,['config'],['config']
Modifiability,// `CXXTypeidExpr` is unevaluated unless it's; // applied to an expression of glvalue of; // polymorphic class type.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp:93,polymorphi,polymorphic,93,interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ExprMutationAnalyzer.cpp,1,['polymorphi'],['polymorphic']
Modifiability,// `ContinuationBlockAndPreheader' was the continuation block for some call to; // `changeIterationSpaceEnd' and is the preheader to the loop denoted by `LS'.; // This function rewrites the PHI nodes in `LS.Header' to start with the; // correct value.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h:177,rewrite,rewrites,177,interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Utils/LoopConstrainer.h,1,['rewrite'],['rewrites']
Modifiability,// `Def` inherits all of its child defs' transmitters.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp:9,inherit,inherits,9,interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86LoadValueInjectionLoadHardening.cpp,1,['inherit'],['inherits']
Modifiability,// `FixItsForVariable` now contains only variables that can be; // fixed. A variable can be fixed if its' declaration and all Fixables; // associated to it can all be fixed.; // To further remove from `FixItsForVariable` variables whose group mates; // cannot be fixed...,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:41,variab,variables,41,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// `FixItsForVariable` will map each variable to a set of fix-its directly; // associated to the variable itself. Fix-its of distinct variables in; // `FixItsForVariable` are disjoint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:37,variab,variable,37,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,// `ICI` is interpreted as taking the backedge if the *next* value of the; // induction variable satisfies some constraint.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp:88,variab,variable,88,interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/LoopConstrainer.cpp,1,['variab'],['variable']
Modifiability,"// `Sink` inherits Blocks' terminator, `Source` will have a BranchInst; // directly jumps to `Sink`. Here, we have to create a new terminator for; // `Source`.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FuzzMutate/IRMutator.cpp:10,inherit,inherits,10,interpreter/llvm-project/llvm/lib/FuzzMutate/IRMutator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/FuzzMutate/IRMutator.cpp,1,['inherit'],['inherits']
Modifiability,// `VarGrpMap` maps variables that need fix to the groups (indexes) that the; // variables belong to. Group indexes refer to the elements in `Groups`.; // `VarGrpMap` is complete in that every variable that needs fix is in it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:20,variab,variables,20,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// `WatchedLiteralsSolver` is an implementation of Algorithm D from Knuth's; // The Art of Computer Programming Volume 4: Satisfiability, Fascicle 6. It is; // based on the backtracking DPLL algorithm [1], keeps references to a single; // ""watched"" literal per clause, and uses a set of ""active"" variables to perform; // unit propagation.; //; // The solver expects that its input is a boolean formula in conjunctive normal; // form that consists of clauses of at least one literal. A literal is either a; // boolean variable or its negation. Below we define types, data structures, and; // utilities that are used to represent boolean formulas in conjunctive normal; // form.; //; // [1] https://en.wikipedia.org/wiki/DPLL_algorithm; /// Boolean variables are represented as positive integers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp:296,variab,variables,296,interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/FlowSensitive/WatchedLiteralsSolver.cpp,3,['variab'],"['variable', 'variables']"
Modifiability,"// `Work` specifies a computational limit on the solver. Units of ""work""; // roughly correspond to attempts to assign a value to a single; // variable. Since the algorithm is exponential in the number of variables,; // this is the most direct (abstract) unit to target.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h:142,variab,variable,142,interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/FlowSensitive/WatchedLiteralsSolver.h,2,['variab'],"['variable', 'variables']"
Modifiability,// `inline` variables are a definition and declaration all in one; we won't; // pick up an initializer from anywhere else.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:12,variab,variables,12,interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp,1,['variab'],['variables']
Modifiability,// `template` keyword can start a variable template.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:34,variab,variable,34,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variable']
Modifiability,"// a TTree Variable Alias (i.e. a sub-TTreeFormula)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:11,Variab,Variable,11,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['Variab'],['Variable']
Modifiability,"// a TTree Variable Alias String (i.e. a sub-TTreeFormula)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:11,Variab,Variable,11,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['Variab'],['Variable']
Modifiability,"// a TTree Variable Alternate (i.e. a sub-TTreeFormula)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:11,Variab,Variable,11,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['Variab'],['Variable']
Modifiability,"// a tree variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:10,variab,variable,10,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['variab'],['variable']
Modifiability,"// a variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx:5,variab,variable,5,hist/hist/src/TFormula_v5.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula_v5.cxx,1,['variab'],['variable']
Modifiability,"// accept the enhanced step if it produces a small improvement in; // the step length",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx:14,enhance,enhanced,14,math/quadp/src/TGondzioSolver.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx,1,['enhance'],['enhanced']
Modifiability,"// access target-specific GPU grid values that must be consistent between; // host RTL (plugin), deviceRTL and clang.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h:88,plugin,plugin,88,interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/TargetInfo.h,1,['plugin'],['plugin']
Modifiability,"// activation for input and output layers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:35,layers,layers,35,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['layers'],['layers']
Modifiability,"// activation function to be used for hidden layers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:45,layers,layers,45,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['layers'],['layers']
Modifiability,"// activation function to be used for output layers, depending on estimator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:45,layers,layers,45,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['layers'],['layers']
Modifiability,"// adaboost adapted to regression",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:12,adapt,adapted,12,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,1,['adapt'],['adapted']
Modifiability,"// adaptStartOfLine will break after lines starting with /** if the comment; // is broken anywhere. Avoid emitting this break twice here.; // Example: in /** longtextcomesherethatbreaks */ (with ColumnLimit 20) will; // insert a break after /**, so this code must not insert the same break.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp:3,adapt,adaptStartOfLine,3,interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/BreakableToken.cpp,1,['adapt'],['adaptStartOfLine']
Modifiability,"// adaptive KDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:3,adapt,adaptive,3,tmva/tmva/src/KDEKernel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx,1,['adapt'],['adaptive']
Modifiability,"// adaptive sampling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h:3,adapt,adaptive,3,roofit/roostats/inc/RooStats/FrequentistCalculator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/FrequentistCalculator.h,6,['adapt'],['adaptive']
Modifiability,"// adaptive sampling checks",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:3,adapt,adaptive,3,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['adapt'],['adaptive']
Modifiability,"// adaptive volume; // -----------------------------------------------------------------------; // TODO: optimize, perhaps multi stage with broadening limits,; // or a different root finding method entirely,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:3,adapt,adaptive,3,tmva/tmva/src/MethodPDERS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx,1,['adapt'],['adaptive']
Modifiability,"// adaptive width",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:3,adapt,adaptive,3,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['adapt'],['adaptive']
Modifiability,"// add ""target"" in case of target variable (required for plotting macros)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:34,variab,variable,34,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variable']
Modifiability,"// add Poisson extended term",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:15,extend,extended,15,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['extend'],['extended']
Modifiability,"// add a double bound variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:22,variab,variable,22,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variable']
Modifiability,"// add a fixed variable; // need a step size otherwise treated as a constant; // use 10%",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:15,variab,variable,15,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variable']
Modifiability,"// add a lower bounded variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:23,variab,variable,23,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variable']
Modifiability,"// add a lower bounded variable as a double bound one, using a very large number for the upper limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:23,variab,variable,23,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// add a pointer to a clone of this variable to our list (we now own it!)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:36,variab,variable,36,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['variab'],['variable']
Modifiability,"// add a pointer to this variable to our list (we don't own it!)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:25,variab,variable,25,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,1,['variab'],['variable']
Modifiability,"// add a scope for local variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gather.hxx:25,variab,variables,25,tmva/sofie/inc/TMVA/ROperator_Gather.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Gather.hxx,1,['variab'],['variables']
Modifiability,"// add a upper bounded variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:23,variab,variable,23,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variable']
Modifiability,"// add also the variables defined like x[0],x[1],x[2],...; // support up to x[9] - if needed extend that to higher value; // const int maxdim = 10;; // for (int i = 0; i < maxdim; ++i) {; // TString xvar = TString::Format(""x[%d]"",i);; // fVars[xvar] = TFormulaVariable(xvar,0,i);; // fClingVariables.push_back(0);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:16,variab,variables,16,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,2,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"// add an axis (variable bins) to the distribution associated with this node",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldBinning.h:16,variab,variable,16,hist/unfold/inc/TUnfoldBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldBinning.h,1,['variab'],['variable']
Modifiability,"// add constructor for weights with different shapes (e.g. in recurrent layers)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h:72,layers,layers,72,tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/GeneralLayer.h,1,['layers'],['layers']
Modifiability,"// add fully configured sample to channel",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Channel.cxx:13,config,configured,13,roofit/histfactory/src/Channel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/Channel.cxx,1,['config'],['configured']
Modifiability,"// add newly created session config to our session list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:29,config,config,29,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['config'],['config']
Modifiability,"// add style, here used to configure TGraph attributes, evaluated only on client side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/tobject.cxx:27,config,configure,27,tutorials/rcanvas/tobject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/tobject.cxx,1,['config'],['configure']
Modifiability,"// add the variable map 'varMap' to the vector of varMaps",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:11,variab,variable,11,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// add the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx:11,variab,variables,11,bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,2,['variab'],['variables']
Modifiability,"// add the variables that were specified in theVariables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:11,variab,variables,11,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variables']
Modifiability,"// add variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx:7,variab,variables,7,tmva/tmva/src/DataLoader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataLoader.cxx,1,['variab'],['variables']
Modifiability,"// add variables for all the relative overall uncertainties we expect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:7,variab,variables,7,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['variab'],['variables']
Modifiability,// add variables to the map,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackFrameLayoutAnalysisPass.cpp:7,variab,variables,7,interpreter/llvm-project/llvm/lib/CodeGen/StackFrameLayoutAnalysisPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/StackFrameLayoutAnalysisPass.cpp,1,['variab'],['variables']
Modifiability,"// added to allow for transformation on input variables i.e. norm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:46,variab,variables,46,tmva/tmva/src/OptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx,1,['variab'],['variables']
Modifiability,"// adding a channel (should adding a 'bin' be an 'Extend' operation?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:50,Extend,Extend,50,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Extend'],['Extend']
Modifiability,"// adding a pdf to a RooRealSumPdf will replace it with a RooAddPdf and put the RooRealSumPdf inside that; // if pdf is extended will use in the ""no coefficients"" state, where the expectedEvents are taking from; // the pdf integrals",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:120,extend,extended,120,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extended']
Modifiability,"// adding variables from seed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,variab,variables,10,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,6,['variab'],['variables']
Modifiability,"// adding variables from sub-seed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:10,variab,variables,10,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,2,['variab'],['variables']
Modifiability,"// all variables as list of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooPyBind.h:7,variab,variables,7,roofit/roofit/inc/RooPyBind.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooPyBind.h,2,['variab'],['variables']
Modifiability,"// alternative starting point heuristic: sets the; // ""complementary"" variables to a large positive value; // (based on the norm of the problem data) and the; // remaining variables to zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpSolverBase.h:70,variab,variables,70,math/quadp/inc/TQpSolverBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpSolverBase.h,2,['variab'],['variables']
Modifiability,// always set zoom when hmin/hmax is configured; // fMinimum/fMaximum values is a way how ROOT handles Y scale zooming for TH1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:37,config,configured,37,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configured']
Modifiability,// and it declares a variable with automatic storage duration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp:21,variab,variable,21,interpreter/llvm-project/clang/lib/AST/Decl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/Decl.cpp,1,['variab'],['variable']
Modifiability,"// append our error if requested and this variable is not constant",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx:42,variab,variable,42,roofit/roofitcore/src/RooRealVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealVar.cxx,1,['variab'],['variable']
Modifiability,"// apply font attributes only once, inherited by all other elements",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:36,inherit,inherited,36,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['inherit'],['inherited']
Modifiability,// applying plugins (more methods) ON TOP of built-in API.; // this is intentional as we allow plugins to override; // built-ins,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:12,plugin,plugins,12,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['plugin'],['plugins']
Modifiability,// arc/mrr layout of captured block literal variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:44,variab,variables,44,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variables']
Modifiability,"// are input variables normalised ?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:13,variab,variables,13,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,"// arguments: names of input variables (vector); // verbose flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:29,variab,variables,29,tmva/tmva/src/Reader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx,2,['variab'],['variables']
Modifiability,"// arguments: names of input variables given in form: ""name1:name2:name3""; // verbose flag",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx:29,variab,variables,29,tmva/tmva/src/Reader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Reader.cxx,2,['variab'],['variables']
Modifiability,"// arm64 targets use ""int"" ivar offset variables. All others,; // including OS X x86_64 and Windows x86_64, use ""long"" ivar offsets.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,variab,variables,39,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['variab'],['variables']
Modifiability,// array of configured frames,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:12,config,configured,12,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['config'],['configured']
Modifiability,// array of expression variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:23,variab,variables,23,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variables']
Modifiability,"// arrayType can be incomplete if we're initializing a flexible; // array member. There's nothing we can do with the completed; // type here, though.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp:55,flexible,flexible,55,interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaInit.cpp,1,['flexible'],['flexible']
Modifiability,"// arrays of input evt vs. variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h:27,variab,variable,27,tmva/tmva/inc/TMVA/MethodHMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodHMatrix.h,1,['variab'],['variable']
Modifiability,// artificially extend last level of color palette to maximal visible value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:16,extend,extend,16,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['extend'],['extend']
Modifiability,"// asimage plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASImagePlugin.h:11,plugin,plugin,11,graf2d/asimage/inc/TASImagePlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/inc/TASImagePlugin.h,1,['plugin'],['plugin']
Modifiability,"// ask for the list of datasets; // TODO: is now returning a TMap; viewer has to be adapted",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:84,adapt,adapted,84,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['adapt'],['adapted']
Modifiability,"// assert that the variables are either real values or categories",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:19,variab,variables,19,roofit/roofitcore/src/RooDataHist.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx,1,['variab'],['variables']
Modifiability,// assert(ActiveMLocs[Dst].size() == 0);; //^^^ Legitimate scenario on account of un-clobbered slot being assigned to?; // Move set of active variables from one location to another.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp:142,variab,variables,142,interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/LiveDebugValues/InstrRefBasedImpl.cpp,1,['variab'],['variables']
Modifiability,// assign configuration to the control,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomViewer.controller.js:10,config,configuration,10,ui5/geom/controller/GeomViewer.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomViewer.controller.js,1,['config'],['configuration']
Modifiability,"// assume a function without variables is always 1-dimensional ???; // if (hasParameters && !hasVariables) {; // fNdim = 1;; // AddVariable(""x"", 0);; // hasVariables = true;; // }; // does not make sense to vectorize function which is of FNDim=0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:29,variab,variables,29,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// assume all axis have variable bins or have fixed bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx:24,variab,variable,24,hist/hist/src/TProfile3D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile3D.cxx,1,['variab'],['variable']
Modifiability,"// assuming all the linear layers has a kernel and a bias initialized tensors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RFunction_MLP.cxx:27,layers,layers,27,tmva/sofie/src/RFunction_MLP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/src/RFunction_MLP.cxx,1,['layers'],['layers']
Modifiability,"// auto &layers = net.GetLayers();; // auto bnlayer = new TBatchNormLayer<Architecture>(tbatchSize, 1, 1, outputSize);; // layers.push_back( bnlayer);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h:9,layers,layers,9,tmva/tmva/test/DNN/TestBatchNormalization.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/TestBatchNormalization.h,4,['layers'],['layers']
Modifiability,"// auto h = new TF1(""f1"", ""landau""); -- inheritently does not work. See DIFLAN; //crystalball, breitwigner, cheb3, bigaus,; //auto h = new TF1(""f1"", """");",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/TFormulaGradientTests.cxx:40,inherit,inheritently,40,hist/hist/test/TFormulaGradientTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/TFormulaGradientTests.cxx,1,['inherit'],['inheritently']
Modifiability,"// auxiliary variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:13,variab,variable,13,tmva/tmva/inc/TMVA/MethodPDERS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h,1,['variab'],['variable']
Modifiability,"// available variable transformations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h:13,variab,variable,13,tmva/tmva/inc/TMVA/Types.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Types.h,1,['variab'],['variable']
Modifiability,"// average correlation between first target and variables (so far only for single-target regression)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:48,variab,variables,48,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variables']
Modifiability,"// average value of each variables for S, B, S+B",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:25,variab,variables,25,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,1,['variab'],['variables']
Modifiability,"// average variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx:11,variab,variable,11,tmva/tmva/src/RuleFitParams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitParams.cxx,1,['variab'],['variable']
Modifiability,"// avoid unused variable warning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rootcling_stage1/src/rootcling_stage1.cxx:16,variab,variable,16,core/rootcling_stage1/src/rootcling_stage1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rootcling_stage1/src/rootcling_stage1.cxx,2,['variab'],['variable']
Modifiability,"// avoid unused variable warning.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx:16,variab,variable,16,core/metacling/src/TCling.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.cxx,1,['variab'],['variable']
Modifiability,"// avoid unused variable warnings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RVecDS.hxx:16,variab,variable,16,tree/dataframe/inc/ROOT/RVecDS.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RVecDS.hxx,2,['variab'],['variable']
Modifiability,"// avoid unused variable warnings for older compilers such as gcc 4.9",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:16,variab,variable,16,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,2,['variab'],['variable']
Modifiability,// avoids warning for unused variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h:29,variab,variable,29,interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Support/ThreadPool.h,1,['variab'],['variable']
Modifiability,"// axis cannot extend to underflow/overflows (fix ROOT-8781)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx:15,extend,extend,15,hist/hist/src/THnBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/THnBase.cxx,1,['extend'],['extend']
Modifiability,"// axis of h2 is not extended, make it to have 0 statistics",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:21,extend,extended,21,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['extend'],['extended']
Modifiability,"// base class for different image format handlers(plugins)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TImagePlugin.h:50,plugin,plugins,50,graf2d/graf/inc/TImagePlugin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/inc/TImagePlugin.h,1,['plugin'],['plugins']
Modifiability,"// baseOffset will be -1 if cl does not inherit from expectedClass",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx:40,inherit,inherit,40,io/io/src/TKey.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx,1,['inherit'],['inherit']
Modifiability,"// be aware, that jsroot_browser_hierarchy required for flexible layout that element use full browser area",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:56,flexible,flexible,56,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['flexible'],['flexible']
Modifiability,"// best division variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/PlotFoams.cxx:17,variab,variable,17,tmva/tmvagui/src/PlotFoams.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/PlotFoams.cxx,1,['variab'],['variable']
Modifiability,// bevels not supported for path extrusion; // SETUP TNB variables; // TODO1 - have a .isClosed in spline?,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:57,variab,variables,57,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variables']
Modifiability,"// binning is parameterized, range will need special handling in integration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:14,parameteriz,parameterized,14,roofit/roofitcore/inc/RooParamBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h,1,['parameteriz'],['parameterized']
Modifiability,// bits<n> can also come from variable initializers.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variable']
Modifiability,"// boolean variables can be specified by just their name (!name),; // which will set the to true (false): ...:V:...:!S:..",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx:11,variab,variables,11,tmva/tmva/src/Configurable.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Configurable.cxx,1,['variab'],['variables']
Modifiability,"// boosting algorithm (adaptive boosting with cost matrix)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:23,adapt,adaptive,23,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,1,['adapt'],['adaptive']
Modifiability,"// boosting algorithm (adaptive boosting)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h:23,adapt,adaptive,23,tmva/tmva/inc/TMVA/MethodBDT.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBDT.h,1,['adapt'],['adaptive']
Modifiability,"// both valid for this configuration, set new slot rules",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp:23,config,configuration,23,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonShuffler.cpp,1,['config'],['configuration']
Modifiability,"// bound variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:9,variab,variables,9,math/mathcore/src/MinimTransformFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx,1,['variab'],['variables']
Modifiability,"// browser_settings.plugins = STATE_DISABLED;; // browser_settings.file_access_from_file_urls = STATE_ENABLED;; // browser_settings.universal_access_from_file_urls = STATE_ENABLED;; // browser_settings.web_security = STATE_DISABLED;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx:20,plugin,plugins,20,gui/cefdisplay/src/simple_app.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx,1,['plugin'],['plugins']
Modifiability,"// build and configure HypoTestInverter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:13,config,configure,13,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['config'],['configure']
Modifiability,"// but make y axis extendable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:19,extend,extendable,19,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extendable']
Modifiability,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:47,Adapt,AdaptiveIntegration,47,math/mathcore/src/IntegratorOptions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx,1,['Adapt'],['AdaptiveIntegration']
Modifiability,"// by setting labels in h1 we make its axis extendable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:44,extend,extendable,44,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extendable']
Modifiability,"// by variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h:6,variab,variable,6,tmva/tmva/inc/TMVA/DataSetInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataSetInfo.h,1,['variab'],['variable']
Modifiability,"// cached info on variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooKeysPdf.h:18,variab,variable,18,roofit/roofit/inc/RooKeysPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/RooKeysPdf.h,2,['variab'],['variable']
Modifiability,"// calculate leakage in and out of variable range box",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:35,variab,variable,35,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['variab'],['variable']
Modifiability,"// calculate residuals, their norms, and duality/; // complementarity gap, given a problem and variable set.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpResidual.h:95,variab,variable,95,math/quadp/inc/TQpResidual.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpResidual.h,1,['variab'],['variable']
Modifiability,"// calculate the average of each variable over the range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h:33,variab,variable,33,tmva/tmva/inc/TMVA/RuleFitParams.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitParams.h,1,['variab'],['variable']
Modifiability,"// calculate the averages of the input variables needed for adaptive training",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:39,variab,variables,39,tmva/tmva/inc/TMVA/MethodPDERS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h,2,"['adapt', 'variab']","['adaptive', 'variables']"
Modifiability,"// calculate the discriminating variable for the given event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:32,variab,variable,32,tmva/tmva/inc/TMVA/RuleFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h,1,['variab'],['variable']
Modifiability,"// calculate the distance between two configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:38,config,configuration,38,math/mathmore/src/GSLSimAnnealing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx,1,['config'],['configuration']
Modifiability,"// calculate the distance with respect to another configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:50,config,configuration,50,math/mathmore/src/GSLSimAnnealing.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx,1,['config'],['configuration']
Modifiability,"// calculate the largest alpha in (0,1] such that the; // nonnegative variables stay nonnegative in the given; // search direction. In the general QP problem formulation; // this is the largest value of alpha such that; // (t,u,v,w,lambda,pi,phi,gamma) + alpha * (b->t,b->u,; // b->v,b->w,b->lambda,b->pi,b->phi,b->gamma) >= 0.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:70,variab,variables,70,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variables']
Modifiability,"// calculate the maximum violation of the complementarity; // conditions, and shift these variables to restore positivity.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpSolverBase.cxx:90,variab,variables,90,math/quadp/src/TQpSolverBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpSolverBase.cxx,1,['variab'],['variables']
Modifiability,"// calculate variable and rule importance from a set of events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h:13,variab,variable,13,tmva/tmva/inc/TMVA/RuleFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFit.h,1,['variab'],['variable']
Modifiability,"// calculate variable for ScanTau()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:13,variab,variable,13,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,1,['variab'],['variable']
Modifiability,"// calculate variable importance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx:13,variab,variable,13,tmva/tmva/src/RuleFitAPI.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleFitAPI.cxx,1,['variab'],['variable']
Modifiability,"// calculate variable indices and set in X the parameter values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:13,variab,variable,13,math/mathcore/inc/Math/WrappedParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h,1,['variab'],['variable']
Modifiability,"// calculates variable importance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h:14,variab,variable,14,tmva/tmva/inc/TMVA/RuleEnsemble.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleEnsemble.h,1,['variab'],['variable']
Modifiability,"// call the accept-reject generator to generate its variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:52,variab,variables,52,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['variab'],['variables']
Modifiability,"// call the new Control type ""my.ColorBox"" and let it inherit from sap.ui.core.Control; // the control API:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/lib/ColorBox.js:54,inherit,inherit,54,ui5/geom/lib/ColorBox.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/lib/ColorBox.js,1,['inherit'],['inherit']
Modifiability,"// call to enhance.cxx to set colours",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/Getline.cxx:11,enhance,enhance,11,core/textinput/src/Getline.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/Getline.cxx,1,['enhance'],['enhance']
Modifiability,"// call wrapped method directly, no inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h:36,inherit,inheritance,36,bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CallContext.h,1,['inherit'],['inheritance']
Modifiability,"// can not split variable size array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStreamerElement.cxx:17,variab,variable,17,core/meta/src/TStreamerElement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TStreamerElement.cxx,1,['variab'],['variable']
Modifiability,// captured nested byref variable has its address passed. Do not take; // its address again.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:25,variab,variable,25,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variable']
Modifiability,"// case TStreamerInfo::kSTLvarp: // Variable size array of STL containers.; // {; // TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; // TClass *cl = compinfo[i]->fClass;; // ROOT::NewArrFunc_t arraynew = cl->GetNewArray();; // ROOT::DelArrFunc_t arraydel = cl->GetDeleteArray();; // UInt_t start,count;; // // Version_t v =; // b.ReadVersion(&start, &count, cle);; // if (pstreamer == 0) {; // Int_t size = cl->Size();; // Int_t imethod = compinfo[i]->fMethod+eoffset;; // DOLOOP {; // char **contp = (char**)(arr[k]+ioffset);; // const Int_t *counter = (Int_t*)(arr[k]+imethod);; // const Int_t sublen = (*counter);; // for(int j=0;j<compinfo[i]->fLength;++j) {; // if (arraydel) arraydel(contp[j]);; // contp[j] = 0;; // if (sublen<=0) continue;; // if (arraynew) {; // contp[j] = (char*)arraynew(sublen, 0);; // char *cont = contp[j];; // for(int k=0;k<sublen;++k) {; // cl->Streamer( cont, b );; // cont += size;; // }; // } else {; // // Can't create an array of object; // Error(""ReadBuffer"",""The element %s::%s type %d (%s) can be read because of the class does not have access to new %s[..]\n"",; // GetName(),aElement->GetFullName(),kase,aElement->GetTypeName(),GetName());; // void *cont = cl->New();; // for(int k=0;k<sublen;++k) {; // cl->Streamer( cont, b );; // }; // }; // }; // }; // } else {; // DOLOOP{(*pstreamer)(b,arr[k]+ioffset,compinfo[i]->fLength);}; // }; // b.CheckByteCount(start,count,aElement->GetFullName());; // }; // continue;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoReadBuffer.cxx:36,Variab,Variable,36,io/io/src/TStreamerInfoReadBuffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoReadBuffer.cxx,1,['Variab'],['Variable']
Modifiability,"// case TStreamerInfo::kSTLvarp: // Variable size array of STL containers.; // {; // TMemberStreamer *pstreamer = compinfo[i]->fStreamer;; // TClass *cl = compinfo[i]->fClass;; // UInt_t pos = b.WriteVersion(this->IsA(),kTRUE);; // if (pstreamer == 0) {; // Int_t size = cl->Size();; // Int_t imethod = compinfo[i]->fMethod+eoffset;; // DOLOOP {; // char **contp = (char**)(arr[k]+ioffset);; // const Int_t *counter = (Int_t*)(arr[k]+imethod);; // const Int_t sublen = (*counter);; // for(int j=0;j<compinfo[i]->fLength;++j) {; // char *cont = contp[j];; // for(int k=0;k<sublen;++k) {; // cl->Streamer( cont, b );; // cont += size;; // }; // }; // }; // } else {; // DOLOOP{(*pstreamer)(b,arr[k]+ioffset,compinfo[i]->fLength);}; // }; // b.SetByteCount(pos,kTRUE);; // }; // continue;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoWriteBuffer.cxx:36,Variab,Variable,36,io/io/src/TStreamerInfoWriteBuffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoWriteBuffer.cxx,1,['Variab'],['Variable']
Modifiability,"// case minimizer does not provide minimum values (it failed) take from configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:72,config,configuration,72,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,2,['config'],['configuration']
Modifiability,"// case no plugin manager is available",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:11,plugin,plugin,11,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,2,['plugin'],['plugin']
Modifiability,"// case of using Plugin Manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:17,Plugin,Plugin,17,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,2,['Plugin'],['Plugin']
Modifiability,"// case of using ROOT plug-in manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx:22,plug-in,plug-in,22,math/mathcore/src/MinimizerOptions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx,1,['plug-in'],['plug-in']
Modifiability,"// case of variable bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx:11,variab,variable,11,hist/hist/src/TProfile2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile2D.cxx,1,['variab'],['variable']
Modifiability,"// case variable bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:8,variab,variable,8,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,4,['variab'],['variable']
Modifiability,"// caution (!) this value is not good for a decision for MC, .. it is designed for GA; // but .. it doesn't matter, as MC samplings are independent from the former ones; // and the replacement of the best variables by better ones is done about 10 lines above.; // ( if (effBH < 0 || effBH > effB) { .... )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:205,variab,variables,205,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['variab'],['variables']
Modifiability,"// cbuffer will be translated into global variable in special address space.; // If translate into C,; // cbuffer A {; // float a;; // float b;; // }; // float foo() { return a + b; }; //; // will be translated into; //; // struct A {; // float a;; // float b;; // } cbuffer_A __attribute__((address_space(4)));; // float foo() { return cbuffer_A.a + cbuffer_A.b; }; //; // layoutBuffer will create the struct A type.; // replaceBuffer will replace use of global variable a and b with cbuffer_A.a; // and cbuffer_A.b.; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp:42,variab,variable,42,interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGHLSLRuntime.cpp,2,['variab'],['variable']
Modifiability,"// centisec is stored in variable named hour",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx:25,variab,variable,25,gui/gui/src/TGNumberEntry.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGNumberEntry.cxx,1,['variab'],['variable']
Modifiability,// change layers Z,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:10,layers,layers,10,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['layers'],['layers']
Modifiability,"// change names to be recognized by the plugin manager; // e.g. /protocol/path/to/file.root -> protocol:/path/to/file.root",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:40,plugin,plugin,40,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,2,['plugin'],['plugin']
Modifiability,"// check configuration and objective function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:9,config,configuration,9,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['config'],['configuration']
Modifiability,"// check contents of variable sized arrays",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx:21,variab,variable,21,tree/dataframe/test/dataframe_snapshot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_snapshot.cxx,1,['variab'],['variable']
Modifiability,"// check fomula ndata size (in case of arrays variable); // enough to check for ivarindex = 0 then formula is the same; // this check might take some time. Maybe do only in debug mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:46,variab,variable,46,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variable']
Modifiability,"// check for observables defined as x[0],x[1],....; // maybe could use a regular expression here; // only in case match with defined variables is not successful",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:133,variab,variables,133,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// check if ""silent"" or ""verbose"" option in configuration string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:44,config,configuration,44,tmva/tmva/inc/TMVA/Tools.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h,1,['config'],['configuration']
Modifiability,"// check if also last character is not alphanumeric or is not an operator and not a parenthesis ( or [.; // Parenthesis [] are used to express the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:147,variab,variables,147,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// check if pdf can be extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:23,extend,extended,23,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,1,['extend'],['extended']
Modifiability,"// check if this PDF supports extended maximum likelihood fits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:30,extend,extended,30,roofit/roofitcore/src/RooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx,1,['extend'],['extended']
Modifiability,"// check if this is not output operators to add a specific line for definining the tensor_xxx variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx:94,variab,variable,94,tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,1,['variab'],['variable']
Modifiability,"// check if variable is used by the rule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:12,variab,variable,12,tmva/tmva/inc/TMVA/Rule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h,1,['variab'],['variable']
Modifiability,"// check if we actually depend on the plot variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:43,variab,variable,43,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,"// check if ws already has a dataset with this name, if it does we may need to extend columns",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:79,extend,extend,79,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extend']
Modifiability,"// check index of Variable (assume fMinuit exists)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:18,Variab,Variable,18,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['Variab'],['Variable']
Modifiability,// check invalid configuration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:17,config,configuration,17,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,1,['config'],['configuration']
Modifiability,"// check that any prototype dataset still defines the variables we need; // (this is necessary since we never make a private clone, for efficiency)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:54,variab,variables,54,roofit/roofitcore/src/RooAbsGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx,1,['variab'],['variables']
Modifiability,"// check that the plot variable is not derived",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:23,variab,variable,23,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,"// check that the table does not contain fixed or variable length arrays; // in that case is not possible to print a flattened table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:50,variab,variable,50,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variable']
Modifiability,"// check that this frame knows what variable to plot",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:36,variab,variable,36,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,"// check that we have all variables to be integrated over on the LHS; // of the map, and all terms in the product do appear on the RHS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx:26,variab,variables,26,roofit/roofitcore/src/RooProduct.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooProduct.cxx,1,['variab'],['variables']
Modifiability,"// check that we own our variables or else are empty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:25,variab,variables,25,roofit/roofitcore/src/RooAbsCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx,2,['variab'],['variables']
Modifiability,"// check the spectators of the old dsi for the variable that we want to add",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:47,variab,variable,47,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// check the variables of the old dsi for the variable that we want to add",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:13,variab,variables,13,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// check there are variable parameter in order to do a fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx:19,variab,variable,19,roofit/roostats/src/ProfileLikelihoodCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodCalculator.cxx,1,['variab'],['variable']
Modifiability,"// check value sanity and the variable-length fields",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TZIPFile.cxx:30,variab,variable-length,30,io/io/src/TZIPFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TZIPFile.cxx,1,['variab'],['variable-length']
Modifiability,"// check variable range and set var to lower or upper if out of range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h:9,variab,variable,9,tmva/tmva/inc/TMVA/MethodRuleFit.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodRuleFit.h,1,['variab'],['variable']
Modifiability,"// check variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:9,variab,variables,9,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['variab'],['variables']
Modifiability,"// check whether such method exists; // FIXME: wrong in case called derives via multiple inheritance from this class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx:89,inherit,inheritance,89,core/meta/src/TDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TDataMember.cxx,1,['inherit'],['inheritance']
Modifiability,// checkSemantics should have ensured that we can only rewrite the root.; // Ensure we're deleting it.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp:55,rewrite,rewrite,55,interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/GlobalISelCombinerEmitter.cpp,1,['rewrite'],['rewrite']
Modifiability,"// choose for each node splitting a random subset of variables to choose from",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:53,variab,variables,53,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,3,['variab'],['variables']
Modifiability,"// choose the appropriate one (variable or target)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:31,variab,variable,31,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,2,['variab'],['variable']
Modifiability,"// choose the kernel bandwidth to use. The default is 0; // 0 = use adaptive kernel estimator (uses local population to vary with of kernels); // 1 = use trivial kernel estimator (uses all data and sigma to estimate uniform kernel bandwidth)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/Roo2DKeysPdf.h:68,adapt,adaptive,68,roofit/roofit/inc/Roo2DKeysPdf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/inc/Roo2DKeysPdf.h,1,['adapt'],['adaptive']
Modifiability,"// chrome should have --dump-dom args configures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx:38,config,configures,38,gui/webdisplay/src/RWebDisplayHandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webdisplay/src/RWebDisplayHandle.cxx,1,['config'],['configures']
Modifiability,"// cl does not inherit from TObject.; // Since this is not possible yet, the only reason we could reach this code; // is because something is screw up in the ROOT code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx:15,inherit,inherit,15,io/io/src/TKey.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TKey.cxx,2,['inherit'],['inherit']
Modifiability,"// cl does not inherit from TObject.; // Since this is not supported in this function, the only reason we could reach this code; // is because something is screwed up in the ROOT code.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx:15,inherit,inherit,15,core/base/src/TDirectory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TDirectory.cxx,2,['inherit'],['inherit']
Modifiability,"// clang currently supports native __float128 only on few targets, and; // this target does not have it. The most visible consequence of this is; // a specialization; // __is_floating_point_helper<__float128>; // in include/c++/6.3.0/type_traits:344 that clang then rejects. The; // specialization is protected by !if _GLIBCXX_USE_FLOAT128 (which is; // unconditionally set in c++config.h) and #if !__STRICT_ANSI__. Tweak; // the latter by disabling GNUMode.; // the nvptx backend doesn't support 128 bit float; // a error message is not necessary",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp:380,config,config,380,interpreter/cling/lib/Interpreter/CIFactory.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/CIFactory.cpp,1,['config'],['config']
Modifiability,"// clang-format off; /**; * \class TStatistic; * \ingroup MathCore; * \brief Statistical variable, defined by its mean and variance (RMS). Named, streamable, storable and mergeable.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:89,variab,variable,89,math/mathcore/src/TStatistic.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx,1,['variab'],['variable']
Modifiability,"// clang-format off; /**; \class ROOT::Experimental::Detail::RFieldVisitor; \ingroup NTuple; \brief Abstract base class for classes implementing the visitor design pattern. RFieldVisitor::VisitField() is invoked by RFieldBase::AcceptVisitor(). VisitField() is inherited for instance; by the RPrintSchemaVisitor class. The RFieldBase class and classes which inherit from it will be visited.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx:260,inherit,inherited,260,tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldVisitor.hxx,2,['inherit'],"['inherit', 'inherited']"
Modifiability,"// clang-format off; /**; \class ROOT::Experimental::Internal::RPageSink; \ingroup NTuple; \brief Abstract interface to write data into an ntuple. The page sink takes the list of columns and afterwards a series of page commits and cluster commits.; The user is responsible to commit clusters at a consistent point, i.e. when all pages corresponding to data; up to the given entry number are committed. An object of this class may either be a wrapper (for example a RPageSinkBuf) or a ""persistent"" sink,; inheriting from RPagePersistentSink.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx:504,inherit,inheriting,504,tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx,1,['inherit'],['inheriting']
Modifiability,"// clang-format off; /**; \class ROOT::Experimental::RNTupleDescriptor; \ingroup NTuple; \brief The on-storage meta-data of an ntuple. Represents the on-disk (on storage) information about an ntuple. The meta-data consists of a header and one or; several footers. The header carries the ntuple schema, i.e. the fields and the associated columns and their; relationships. The footer(s) carry information about one or several clusters. For every cluster, a footer stores; its location and size, and for every column the range of element indexes as well as a list of pages and page; locations. The descriptor provide machine-independent (de-)serialization of headers and footers, and it provides lookup routines; for ntuple objects (pages, clusters, ...). It is supposed to be usable by all RPageStorage implementations. The serialization does not use standard ROOT streamers in order to not let it depend on libCore. The serialization uses; the concept of frames: header, footer, and substructures have a preamble with version numbers and the size of the; writte struct. This allows for forward and backward compatibility when the meta-data evolves.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx:1139,evolve,evolves,1139,tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RNTupleDescriptor.hxx,1,['evolve'],['evolves']
Modifiability,"// clang-format off; /**; \class ROOT::RDF::RDataSource; \ingroup dataframe; \brief RDataSource defines an API that RDataFrame can use to read arbitrary data formats. A concrete RDataSource implementation (i.e. a class that inherits from RDataSource and implements all of its pure; methods) provides an adaptor that RDataFrame can leverage to read any kind of tabular data formats.; RDataFrame calls into RDataSource to retrieve information about the data, retrieve (thread-local) readers or ""cursors""; for selected columns and to advance the readers to the desired data entry. The sequence of calls that RDataFrame (or any other client of a RDataSource) performs is the following:. - SetNSlots() : inform RDataSource of the desired level of parallelism; - GetColumnReaders() : retrieve from RDataSource per-thread readers for the desired columns; - Initialize() : inform RDataSource that an event-loop is about to start; - GetEntryRanges() : retrieve from RDataSource a set of ranges of entries that can be processed concurrently; - InitSlot() : inform RDataSource that a certain thread is about to start working on a certain range of entries; - SetEntry() : inform RDataSource that a certain thread is about to start working on a certain entry; - FinalizeSlot() : inform RDataSource that a certain thread finished working on a certain range of entries; - Finalize() : inform RDataSource that an event-loop finished. RDataSource implementations must support running multiple event-loops consecutively (although sequentially) on the same dataset.; - \b SetNSlots() is called once per RDataSource object, typically when it is associated to a RDataFrame.; - \b GetColumnReaders() can be called several times, potentially with the same arguments, also in-between event-loops, but not during an event-loop.; - \b GetEntryRanges() will be called several times, including during an event loop, as additional ranges are needed. It will not be called concurrently.; - \b Initialize() and \b Finalize() are cal",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDataSource.hxx:224,inherit,inherits,224,tree/dataframe/inc/ROOT/RDataSource.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDataSource.hxx,2,"['adapt', 'inherit']","['adaptor', 'inherits']"
Modifiability,"// clang-format off; /**; \class ROnDiskPage; \ingroup NTuple; \brief A page as being stored on disk, that is packed and compressed. Used by the cluster pool to cache pages from the physical storage. Such pages generally need to be; uncompressed and unpacked before they can be used by RNTuple upper layers.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RCluster.hxx:300,layers,layers,300,tree/ntuple/v7/inc/ROOT/RCluster.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RCluster.hxx,1,['layers'],['layers']
Modifiability,"// clang-format off; /*. YAML Format specification. The TBD v1 format only support two level address libraries and is per; definition application extension safe. --- # the tag !tapi-tbd-v1 is optional and; # shouldn't be emitted to support older linker.; archs: [ armv7, armv7s, arm64 ] # the list of architecture slices that are; # supported by this file.; platform: ios # Specifies the platform (macosx, ios, etc); install-name: /u/l/libfoo.dylib #; current-version: 1.2.3 # Optional: defaults to 1.0; compatibility-version: 1.0 # Optional: defaults to 1.0; swift-version: 0 # Optional: defaults to 0; objc-constraint: none # Optional: defaults to none; exports: # List of export sections; ... Each export section is defined as following:. - archs: [ arm64 ] # the list of architecture slices; allowed-clients: [ client ] # Optional: List of clients; re-exports: [ ] # Optional: List of re-exports; symbols: [ _sym ] # Optional: List of symbols; objc-classes: [] # Optional: List of Objective-C classes; objc-ivars: [] # Optional: List of Objective C Instance; # Variables; weak-def-symbols: [] # Optional: List of weak defined symbols; thread-local-symbols: [] # Optional: List of thread local symbols; */; /*. YAML Format specification. --- !tapi-tbd-v2; archs: [ armv7, armv7s, arm64 ] # the list of architecture slices that are; # supported by this file.; uuids: [ armv7:... ] # Optional: List of architecture and UUID pairs.; platform: ios # Specifies the platform (macosx, ios, etc); flags: [] # Optional:; install-name: /u/l/libfoo.dylib #; current-version: 1.2.3 # Optional: defaults to 1.0; compatibility-version: 1.0 # Optional: defaults to 1.0; swift-version: 0 # Optional: defaults to 0; objc-constraint: retain_release # Optional: defaults to retain_release; parent-umbrella: # Optional:; exports: # List of export sections; ...; undefineds: # List of undefineds sections; ... Each export section is defined as following:. - archs: [ arm64 ] # the list of architecture slices; allowed-c",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp:1065,Variab,Variables,1065,interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TextAPI/TextStub.cpp,1,['Variab'],['Variables']
Modifiability,"// clang-format off; /// PassAsVec is a callable generator that allows passing N variables of type T to a function as a single collection.; ///; /// PassAsVec<N, T>(func) returns a callable that takes N arguments of type T, passes them down to function `func` as; /// an initializer list `{t1, t2, t3,..., tN}` and returns whatever f({t1, t2, t3, ..., tN}) returns.; ///; /// Note that for this to work with RDataFrame the type of all columns that the callable is applied to must be exactly T.; /// Example usage together with RDataFrame (""varX"" columns must all be `float` variables):; /// \code; /// bool myVecFunc(std::vector<float> args);; /// df.Filter(PassAsVec<3, float>(myVecFunc), {""var1"", ""var2"", ""var3""});; /// \endcode; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx:81,variab,variables,81,tree/dataframe/inc/ROOT/RDFHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDFHelpers.hxx,2,['variab'],['variables']
Modifiability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////////; /// Enables the global mutex to make ROOT thread safe/aware.; ///; /// The following becomes safe:; /// - concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); /// - concurrent usage of _different_ ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); /// - concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; /// - concurrent calls to the interpreter through gInterpreter; /// - concurrent loading of ROOT plug-ins; ///; /// In addition, gDirectory, gFile and gPad become a thread-local variable.; /// In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents.; /// gFile and gPad default to nullptr, as it is for single-thread programs.; ///; /// The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different; /// canvases from different threads (and analogous operations such as invoking `Draw` on a `TObject`) is not thread-safe.; ///; /// Note that there is no `DisableThreadSafety()`. ROOT's thread-safety features cannot be disabled once activated.; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:740,plug-in,plug-ins,740,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,2,"['plug-in', 'variab']","['plug-ins', 'variable']"
Modifiability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////; /// \brief Define a new column that is updated when the input sample changes.; /// \param[in] name The name of the defined column.; /// \param[in] expression A valid C++ expression as a string, which will be used to compute the defined value.; /// \return the first node of the computation graph for which the new quantity is defined.; ///; /// The expression is just-in-time compiled and used to produce the column entries.; /// It must be valid C++ syntax and the usage of the special variable names `rdfslot_` and `rdfsampleinfo_` is; /// permitted, where these variables will take the same values as the `slot` and `id` parameters described at the; /// DefinePerSample(std::string_view name, F expression) overload. See the documentation of that overload for more information.; ///; /// ### Example usage:; /// ~~~{.py}; /// df = ROOT.RDataFrame('mytree', ['sample1.root','sample2.root']); /// df.DefinePerSample('weightbysample', 'rdfsampleinfo_.Contains(""sample1"") ? 1.0f : 2.0f'); /// ~~~; ///; /// \note; /// If you have declared some C++ function to the interpreter, the correct syntax to call that function with this; /// overload of DefinePerSample is by calling it explicitly with the special names `rdfslot_` and `rdfsampleinfo_` as; /// input parameters. This is for example the correct way to call this overload when working in PyROOT:; /// ~~~{.py}; /// ROOT.gInterpreter.Declare(; /// """"""; /// float weights(unsigned int slot, const ROOT::RDF::RSampleInfo &id){; /// return id.Contains(""sample1"") ? 1.0f : 2.0f;; /// }; /// """"""); /// df = ROOT.RDataFrame(""mytree"", [""sample1.root"",""sample2.root""]); /// df.DefinePerSample(""weightsbysample"", ""weights(rdfslot_, rdfsampleinfo_)""); /// ~~~; ///; /// \note; /// Differently from what happens in Define(), the string expression passed to DefinePerSample cannot contain; /// column names other than those mentioned above: the expression is e",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:586,variab,variable,586,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////; /// \brief Define a new column.; /// \param[in] name The name of the defined column.; /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; /// \param[in] columns Names of the columns/branches in input to the producer function.; /// \return the first node of the computation graph for which the new quantity is defined.; ///; /// Define a column that will be visible from all subsequent nodes; /// of the functional chain. The `expression` is only evaluated for entries that pass; /// all the preceding filters.; /// A new variable is created called `name`, accessible as if it was contained; /// in the dataset from subsequent transformations/actions.; ///; /// Use cases include:; /// * caching the results of complex calculations for easy and efficient multiple access; /// * extraction of quantities of interest from complex objects; ///; /// An exception is thrown if the name of the new column is already in use in this branch of the computation graph.; ///; /// ### Example usage:; /// ~~~{.cpp}; /// // assuming a function with signature:; /// double myComplexCalculation(const RVec<float> &muon_pts);; /// // we can pass it directly to Define; /// auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; /// // alternatively, we can pass the body of the function as a string, as in Filter:; /// auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; /// ~~~; ///; /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; /// ~~~{.cpp}; /// df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); /// ~~~; /// but instead this will:; /// ~~~{.cpp}; /// df.Define(""x",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:759,variab,variable,759,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['variab'],['variable']
Modifiability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////; /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; /// \tparam F The type of the aggregator callable. Automatically deduced.; /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U&,T)`, where T is the type of the column, U is the type of the aggregator variable; /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; /// \param[in] aggIdentity The aggregator variable of each thread is initialized to this value (or is default-constructed if the parameter is omitted); /// \return the result of the aggregation wrapped in a RResultPtr.; ///; /// An aggregator callable takes two values, an aggregator variable and a column value. The aggregator variable is; /// initialized to aggIdentity or default-constructed if aggIdentity is omitted.; /// This action calls the aggregator callable for each processed entry, passing in the aggregator variable and; /// the value of the column columnName.; /// If the signature is `U(U,T)` the aggregator variable is then copy-assigned the result of the execution of the callable.; /// Otherwise the signature of aggregator must be `void(U&,T)`.; ///; /// The merger callable is used to merge the partial accumulation results of each processing thread. It is only called in multi-thread executions.; /// If its signature is `U(U,U)` the aggregator variables of each thread are merged two by two.; /// If its signature is `void(std::vector<U>& a)` i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:329,variab,variable,329,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,2,['variab'],['variable']
Modifiability,"// clang-format off; ////////////////////////////////////////////////////////////////////////////; /// \brief Execute a user-defined accumulation operation on the processed column values in each processing slot.; /// \tparam F The type of the aggregator callable. Automatically deduced.; /// \tparam U The type of the aggregator variable. Must be default-constructible, copy-constructible and copy-assignable. Automatically deduced.; /// \tparam T The type of the column to apply the reduction to. Automatically deduced.; /// \param[in] aggregator A callable with signature `U(U,T)` or `void(U,T)`, where T is the type of the column, U is the type of the aggregator variable; /// \param[in] merger A callable with signature `U(U,U)` or `void(std::vector<U>&)` used to merge the results of the accumulations of each thread; /// \param[in] columnName The column to be aggregated. If omitted, the first default column is used instead.; /// \return the result of the aggregation wrapped in a RResultPtr.; ///; /// See previous Aggregate overload for more information.; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:329,variab,variable,329,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,2,['variab'],['variable']
Modifiability,"// clang-format on; ////////////////////////////////////////////////////////////////////////////; /// \brief Define a new column.; /// \param[in] name The name of the defined column.; /// \param[in] expression An expression in C++ which represents the defined value; /// \return the first node of the computation graph for which the new quantity is defined.; ///; /// The expression is just-in-time compiled and used to produce the column entries.; /// It must be valid C++ syntax in which variable names are substituted with the names; /// of branches/columns.; ///; /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; /// ~~~{.cpp}; /// df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); /// ~~~; /// but instead this will:; /// ~~~{.cpp}; /// df.Define(""x2"", ""return Map(v, [](float e) { return e*e; })""); /// ~~~; ///; /// Refer to the first overload of this method for the full documentation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:490,variab,variable,490,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['variab'],['variable']
Modifiability,"// clang-format on; ////////////////////////////////////////////////////////////////////////////; /// \brief Save selected columns in memory.; /// \tparam ColumnTypes variadic list of branch/column types.; /// \param[in] columnList columns to be cached in memory.; /// \return a `RDataFrame` that wraps the cached dataset.; ///; /// This action returns a new `RDataFrame` object, completely detached from; /// the originating `RDataFrame`. The new dataframe only contains the cached; /// columns and stores their content in memory for fast, zero-copy subsequent access.; ///; /// Use `Cache` if you know you will only need a subset of the (`Filter`ed) data that; /// fits in memory and that will be accessed many times.; ///; /// \note Cache will refuse to process columns with names of the form `#columnname`. These are special columns; /// made available by some data sources (e.g. RNTupleDS) that represent the size of column `columnname`, and are; /// not meant to be written out with that name (which is not a valid C++ variable name). Instead, go through an; /// Alias(): `df.Alias(""nbar"", ""#bar"").Cache<std::size_t>(..., {""nbar""})`.; ///; /// ### Example usage:; ///; /// **Types and columns specified:**; /// ~~~{.cpp}; /// auto cache_some_cols_df = df.Cache<double, MyClass, int>({""col0"", ""col1"", ""col2""});; /// ~~~; ///; /// **Types inferred and columns specified (this invocation relies on jitting):**; /// ~~~{.cpp}; /// auto cache_some_cols_df = df.Cache({""col0"", ""col1"", ""col2""});; /// ~~~; ///; /// **Types inferred and columns selected with a regexp (this invocation relies on jitting):**; /// ~~~{.cpp}; /// auto cache_all_cols_df = df.Cache(myRegexp);; /// ~~~",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx:1025,variab,variable,1025,tree/dataframe/inc/ROOT/RDF/RInterface.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RInterface.hxx,1,['variab'],['variable']
Modifiability,// class FlexibleDisplay; /**; * @summary Batch MDI display; *; * @desc Can be used together with hierarchy painter in node.js; * @private; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:9,Flexible,FlexibleDisplay,9,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['Flexible'],['FlexibleDisplay']
Modifiability,// class TabsDisplay; /**; * @summary Generic flexible MDI display; *; * @private; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:46,flexible,flexible,46,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['flexible'],['flexible']
Modifiability,"// class to load basic configuration for all classification tests,; // like environment variables and data in the DataLoader.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx:23,config,configuration,23,tmva/tmva/test/envelope/testClassification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/envelope/testClassification.cxx,2,"['config', 'variab']","['configuration', 'variables']"
Modifiability,"// clean up un-used default variables in case formula is valid; //if (fClingInitialized && fReadyToExecute) {; //don't check fClingInitialized in case of lazy execution",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:28,variab,variables,28,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// cleanup previously configured custom labels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx:22,config,configured,22,graf2d/graf/src/TGaxis.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TGaxis.cxx,1,['config'],['configured']
Modifiability,"// clear the results of the loop variables if they were vector observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx:33,variab,variables,33,roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFit/Detail/CodeSquashContext.cxx,1,['variab'],['variables']
Modifiability,"// clone any variables we generate that we haven't cloned already",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:13,variab,variables,13,roofit/roofitcore/src/RooAbsNumGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx,1,['variab'],['variables']
Modifiability,"// code duplication unavoidable because TH3 does not inherit from TH2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:53,inherit,inherit,53,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['inherit'],['inherit']
Modifiability,"// collect and set-up configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:22,config,configuration,22,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,2,['config'],['configuration']
Modifiability,"// columns in config table",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLStructure.cxx:14,config,config,14,io/sql/src/TSQLStructure.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLStructure.cxx,1,['config'],['config']
Modifiability,"// coming here from cppyy or from sub-classing in python; take the; // C++ type from the meta class to make sure that the latter category; // has fCppType properly set (it inherits the meta class, but has an; // otherwise unknown (or wrong) C++ type)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:172,inherit,inherits,172,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['inherit'],['inherits']
Modifiability,"// command_line->AppendSwitch(""allow-file-access-from-files"");; // command_line->AppendSwitch(""disable-web-security"");; // if (fBatch) {; // command_line->AppendSwitch(""disable-gpu"");; // command_line->AppendSwitch(""disable-gpu-compositing"");; // command_line->AppendSwitch(""disable-gpu-sandbox"");; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx:287,sandbox,sandbox,287,gui/cefdisplay/src/simple_app.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/cefdisplay/src/simple_app.cxx,1,['sandbox'],['sandbox']
Modifiability,"// compare the value of the likelihood to that generated by a similarly configured RooNLLVar",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx:72,config,configured,72,roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testRooAbsL.cxx,3,['config'],['configured']
Modifiability,// compiler-rt provides a variable with a magic name. Targets that do not; // link with compiler-rt may also provide such a variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp:26,variab,variable,26,interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/TargetLoweringBase.cpp,2,['variab'],['variable']
Modifiability,// complex singletons need predicate checks from the first singleton; // to refer forward to the variable filterchooser that follows.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:97,variab,variable,97,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['variab'],['variable']
Modifiability,"// compute correlation coefficient between target value and variables (regression only)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:60,variab,variables,60,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variables']
Modifiability,"// compute psi +/- phi; // Depending on whether cosTheta is positive or negative and whether it; // is less than 1 in absolute value, different mathematically equivalent; // expressions are numerically stable.; // algorithm from; // adapted for the case 3-2-1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/3DConversions.cxx:233,adapt,adapted,233,math/genvector/src/3DConversions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/src/3DConversions.cxx,1,['adapt'],['adapted']
Modifiability,"// compute tangents when parameterized in [t1,t2]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:25,parameteriz,parameterized,25,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['parameteriz'],['parameterized']
Modifiability,"// compute the 1-norm of the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:29,variab,variables,29,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variables']
Modifiability,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:41,config,configuration,41,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['config'],['configuration']
Modifiability,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result; // update minimizer (recreate if not done or if name has changed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:41,config,configuration,41,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['config'],['configuration']
Modifiability,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:41,config,configuration,41,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['config'],['configuration']
Modifiability,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set; // update minimizer (but cannot re-create in this case). Must use an existing one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx:41,config,configuration,41,roofit/roofitcore/src/RooMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooMinimizer.cxx,1,['config'],['configuration']
Modifiability,"// compute the inf-norm of the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:31,variab,variables,31,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variables']
Modifiability,// compute total size of record (variable due to filenames),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/PerfJITEvents/PerfJITEventListener.cpp:33,variab,variable,33,interpreter/llvm-project/llvm/lib/ExecutionEngine/PerfJITEvents/PerfJITEventListener.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ExecutionEngine/PerfJITEvents/PerfJITEventListener.cpp,1,['variab'],['variable']
Modifiability,"// computes ranking of input variables; // separation for 2-class classification",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:29,variab,variables,29,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variables']
Modifiability,"// computes the diagonal matrices in the augmented system; // from the current set of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpLinSolverBase.h:86,variab,variables,86,math/quadp/inc/TQpLinSolverBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpLinSolverBase.h,1,['variab'],['variables']
Modifiability,"// configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:3,config,configuration,3,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['config'],['configuration']
Modifiability,"// configuration before grabbing input device",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.h:3,config,configuration,3,core/textinput/src/textinput/StreamReaderWin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.h,1,['config'],['configuration']
Modifiability,"// configuration file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:3,config,configuration,3,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['config'],['configuration']
Modifiability,"// configuration file name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:3,config,configuration,3,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['config'],['configuration']
Modifiability,"// configuration file text entry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h:3,config,configuration,3,gui/sessionviewer/inc/TSessionViewer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/inc/TSessionViewer.h,1,['config'],['configuration']
Modifiability,"// configuration of SQL",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h:3,config,configuration,3,io/sql/inc/TSQLFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h,1,['config'],['configuration']
Modifiability,"// configuration while active",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.h:3,config,configuration,3,core/textinput/src/textinput/StreamReaderWin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/StreamReaderWin.h,1,['config'],['configuration']
Modifiability,"// configure RFrame with direct API calls",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rframe.cxx:3,config,configure,3,tutorials/rcanvas/rframe.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rframe.cxx,1,['config'],['configure']
Modifiability,"// configure buttons",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/efficienciesMulticlass.cxx:3,config,configure,3,tmva/tmvagui/src/efficienciesMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/efficienciesMulticlass.cxx,2,['config'],['configure']
Modifiability,"// configure buttons ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAMultiClassGui.cxx:3,config,configure,3,tmva/tmvagui/src/TMVAMultiClassGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAMultiClassGui.cxx,2,['config'],['configure']
Modifiability,"// configure buttons ; // checks if file with name ""fin"" is already open, and if not opens one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/CorrGui.cxx:3,config,configure,3,tmva/tmvagui/src/CorrGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/CorrGui.cxx,2,['config'],['configure']
Modifiability,"// configure color draw option (default)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx:3,config,configure,3,tutorials/rcanvas/rh2_colz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx,1,['config'],['configure']
Modifiability,"// configure color draw option (default); // draw->Text(true); // configure text drawing (can be enabled with most 2d options); // draw->Box(1); // configure box1 draw option; // draw->Surf(2); // configure surf4 draw option, 3d; // draw->Lego(2); // configure lego2 draw option, 3d; // draw->Error(); // configure error drawing, 3d",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx:3,config,configure,3,tutorials/rcanvas/rh2_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx,6,['config'],['configure']
Modifiability,"// configure connections limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:3,config,configure,3,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,2,['config'],['configure']
Modifiability,"// configure default html page; // either HTML code can be specified or just name of file after 'file:' prefix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/geom/geom_threejs.cxx:3,config,configure,3,tutorials/webgui/geom/geom_threejs.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/geom/geom_threejs.cxx,2,['config'],['configure']
Modifiability,"// configure default html page; // either HTML code can be specified or just name of file after 'file:' prefix; // Detect file location to specify full path to the HTML file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:3,config,configure,3,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['config'],['configure']
Modifiability,// configure font is too small - ignore drawing,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,config,configure,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configure']
Modifiability,"// configure hist draw option, default",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx:3,config,configure,3,tutorials/rcanvas/rh1_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx,1,['config'],['configure']
Modifiability,"// configure it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:3,config,configure,3,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,1,['config'],['configure']
Modifiability,"// configure ln - 3 is special case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx:3,config,configure,3,tutorials/webcanv/logN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx,1,['config'],['configure']
Modifiability,"// configure log2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx:3,config,configure,3,tutorials/webcanv/logN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx,1,['config'],['configure']
Modifiability,"// configure log25",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx:3,config,configure,3,tutorials/webcanv/logN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx,1,['config'],['configure']
Modifiability,"// configure log8",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx:3,config,configure,3,tutorials/webcanv/logN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webcanv/logN.cxx,1,['config'],['configure']
Modifiability,"// configure maximal number of clients which allowed to connect",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:3,config,configure,3,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['config'],['configure']
Modifiability,"// configure predefined geometry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanel.cxx:3,config,configure,3,gui/fitpanelv7/src/RFitPanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanelv7/src/RFitPanel.cxx,3,['config'],['configure']
Modifiability,"// configure predefined window geometry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomHierarchy.cxx:3,config,configure,3,geom/webviewer/src/RGeomHierarchy.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomHierarchy.cxx,6,['config'],['configure']
Modifiability,// configure ratio interactive at the end,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:3,config,configure,3,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configure']
Modifiability,"// configure scatter draw option; // draw->Color(); // configure color draw option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh3_large.cxx:3,config,configure,3,tutorials/rcanvas/rh3_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh3_large.cxx,2,['config'],['configure']
Modifiability,"// configure symlog scale with 10 for linear range, rest will be logarithmic, including negative",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx:3,config,configure,3,tutorials/rcanvas/symlog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/symlog.cxx,1,['config'],['configure']
Modifiability,"// configure text drawing (can be enabled with most 2d options)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx:3,config,configure,3,tutorials/rcanvas/rh2_colz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx,1,['config'],['configure']
Modifiability,"// configure window geometry",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/panel/webpanel.cxx:3,config,configure,3,tutorials/webgui/panel/webpanel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/panel/webpanel.cxx,2,['config'],['configure']
Modifiability,"// console configuration before grabbing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayWin.h:11,config,configuration,11,core/textinput/src/textinput/TerminalDisplayWin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayWin.h,1,['config'],['configuration']
Modifiability,"// console configuration when active",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayWin.h:11,config,configuration,11,core/textinput/src/textinput/TerminalDisplayWin.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplayWin.h,1,['config'],['configuration']
Modifiability,"// const Int_t offset = config->fOffset;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx:24,config,config,24,io/io/src/TStreamerInfoActions.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TStreamerInfoActions.cxx,1,['config'],['config']
Modifiability,// const[expr] variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:15,variab,variable,15,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// const_cast<ROOT::Math::IOptions*>(_minimizer.fitter()->Config().MinimizerOptions().ExtraOptions())->SetValue(""HessianStepTolerance"",0.1);; // const_cast<ROOT::Math::IOptions*>(_minimizer.fitter()->Config().MinimizerOptions().ExtraOptions())->SetValue(""HessianG2Tolerance"",0.02);",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:58,Config,Config,58,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['Config'],['Config']
Modifiability,// constant extenders in duplex must always be in slot 1,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cpp:12,extend,extenders,12,interpreter/llvm-project/llvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cpp,1,['extend'],['extenders']
Modifiability,"// constexpr variable may already get an implicit constant attr, which should; // be replaced by the explicit constant attr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:13,variab,variable,13,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,"// constructor for all types of integrations; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:81,adapt,adaptive,81,math/mathmore/src/GSLIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx,1,['adapt'],['adaptive']
Modifiability,"// constructor for calculating BDT-MVA using previously generated decision trees; // the result of the previous training (the decision trees) are read in via the; // weight file. Make sure the variables correspond to the ones used in; // creating the ""weight""-file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:193,variab,variables,193,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['variab'],['variables']
Modifiability,"// constructor for double bound variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h:32,variab,variable,32,math/mathcore/inc/Math/MinimTransformVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h,1,['variab'],['variable']
Modifiability,"// constructor for fixed variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h:25,variab,variable,25,math/mathcore/inc/Math/MinimTransformVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h,1,['variab'],['variable']
Modifiability,"// constructor for lower bound variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h:31,variab,variable,31,math/mathcore/inc/Math/MinimTransformVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h,1,['variab'],['variable']
Modifiability,"// constructor for upper bound variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h:31,variab,variable,31,math/mathcore/inc/Math/MinimTransformVariable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformVariable.h,1,['variab'],['variable']
Modifiability,"// constructor from a char * for the algorithm type, used by the plug-in manager; // The names supported (case unsensitive) are:; // Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp; // select type from the string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:65,plug-in,plug-in,65,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['plug-in'],['plug-in']
Modifiability,"// constructor in which the data and variable pointers are set to point to the given arguments",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:37,variab,variable,37,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variable']
Modifiability,"// constructor of the class from a pointer to the function (which is managed); // vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); // variable values (used for the fixed ones) and a map with the bounds (for the bounded variables)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:104,variab,variable,104,math/mathcore/src/MinimTransformFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx,3,['variab'],"['variable', 'variables']"
Modifiability,"// constructor that creates variables objects of specified dimensions.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:28,variab,variables,28,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variables']
Modifiability,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:96,adapt,adaptive,96,math/mathmore/src/GSLIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx,2,['adapt'],['adaptive']
Modifiability,"// constructor with default type (ADaptiveSingular) , rule is not needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:34,ADapt,ADaptiveSingular,34,math/mathmore/src/GSLIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx,1,['ADapt'],['ADaptiveSingular']
Modifiability,"// constructors: build up from the argument types of the base class, for use by the Python; // derived class (inheriting with/ ""using"" does not work b/c base class constructors may; // have been deleted),",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:110,inherit,inheriting,110,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,1,['inherit'],['inheriting']
Modifiability,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:63,Adapt,Adaptive,63,math/mathmore/inc/Math/GSLIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h,1,['Adapt'],['Adaptive']
Modifiability,"// contains selection of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:25,variab,variables,25,tmva/tmva/src/VariableTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx,1,['variab'],['variables']
Modifiability,"// copied and adapted from CodeGen::CodeGenModule::getMangledName",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/AST.cpp:14,adapt,adapted,14,interpreter/cling/lib/Utils/AST.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Utils/AST.cpp,1,['adapt'],['adapted']
Modifiability,"// copy configuration when reached a minimum error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:8,config,configuration,8,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['config'],['configuration']
Modifiability,"// copy current variables into fcorrector_step",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx:16,variab,variables,16,math/quadp/src/TGondzioSolver.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx,1,['variab'],['variables']
Modifiability,"// copy default configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx:16,config,configuration,16,roofit/roofitcore/src/RooImproperIntegrator1D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooImproperIntegrator1D.cxx,1,['config'],['configuration']
Modifiability,// copy existing colors and extend with new values,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:28,extend,extend,28,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['extend'],['extend']
Modifiability,"// copy of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:17,variab,variables,17,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,"// count how often a variable occurs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:21,variab,variable,21,tmva/tmva/src/RuleEnsemble.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx,1,['variab'],['variable']
Modifiability,"// count number of variables (signal is sufficient), exclude target(s)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/tmvaglob.cxx:19,variab,variables,19,tmva/tmvagui/src/tmvaglob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/tmvaglob.cxx,1,['variab'],['variables']
Modifiability,"// counter variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/correlationscatters.cxx:11,variab,variables,11,tmva/tmvagui/src/correlationscatters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/correlationscatters.cxx,12,['variab'],['variables']
Modifiability,"// counts the number of toys in the limits set for adaptive sampling; // (taking weights into account; always on first test statistic)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:51,adapt,adaptive,51,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['adapt'],['adaptive']
Modifiability,"// cout << "" Cycle: "" << k << endl;; // if multiple adaptive iterations, need to swap weight sets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:52,adapt,adaptive,52,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['adapt'],['adaptive']
Modifiability,"// cout << ""Number of adaptive iterations: "" << _nAdpt << endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:22,adapt,adaptive,22,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['adapt'],['adaptive']
Modifiability,"// cout << ""RRI::ctor("" << GetName() << "") setting expensive object cache to "" << &expensiveObjectCache() << "" as taken from "" << function.GetName() << std::endl ;; // Use objects integrator configuration if none is specified",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx:191,config,configuration,191,roofit/roofitcore/src/RooRealIntegral.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRealIntegral.cxx,1,['config'],['configuration']
Modifiability,"// coutD(InputArguments) << ""extracting operators from; // ""<<couplings.size()<<"" couplings"" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:62,coupling,couplings,62,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,2,['coupling'],['couplings']
Modifiability,"// create Minimizer using the plug-in manager given the type of Minimizer (MINUIT, MINUIT2, FUMILI, etc..) and; // algorithm (MIGRAD, SIMPLEX, etc..)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:30,plug-in,plug-in,30,math/mathcore/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx,1,['plug-in'],['plug-in']
Modifiability,"// create PDFs for variables; // create binary trees (global member variables) for signal and background",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:19,variab,variables,19,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,2,['variab'],['variables']
Modifiability,"// create a DataSet with one Event which uses dynamic variables; // (pointers to variables)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:54,variab,variables,54,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,2,['variab'],['variables']
Modifiability,"// create a DistSampler class using the ROOT plug-in manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:45,plug-in,plug-in,45,math/mathcore/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx,1,['plug-in'],['plug-in']
Modifiability,"// create a Fit result from a fit config (i.e. with initial parameter values; // and errors equal to step values; // The model function is NULL in this case; // set minimizer type and algorithm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:34,config,config,34,math/mathcore/src/FitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx,2,['config'],['config']
Modifiability,"// create a Fit result from the fit configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:36,config,configuration,36,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['config'],['configuration']
Modifiability,"// create a vector of unit Gaussian variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx:36,variab,variables,36,hist/hist/src/TSVDUnfold.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TSVDUnfold.cxx,2,['variab'],['variables']
Modifiability,"// create all branches for the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:31,variab,variables,31,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variables']
Modifiability,"// create all mirror configurations for event i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:21,config,configurations,21,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['config'],['configurations']
Modifiability,"// create and configure MCMC calculator",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:14,config,configure,14,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['config'],['configure']
Modifiability,"// create and fill a temporary histogram of this variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:49,variab,variable,49,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['variab'],['variable']
Modifiability,"// create and fill temporary histograms of this variable for each state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:48,variab,variable,48,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,2,['variab'],['variable']
Modifiability,"// create background model configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:27,config,configuration,27,roofit/roostats/test/stressRooStats_models.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h,2,['config'],['configuration']
Modifiability,"// create branches for event-variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:29,variab,variables,29,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variables']
Modifiability,"// create combined background model configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,config,configuration,36,roofit/roostats/test/stressRooStats_models.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h,1,['config'],['configuration']
Modifiability,"// create combined signal + background model configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:45,config,configuration,45,roofit/roostats/test/stressRooStats_models.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h,1,['config'],['configuration']
Modifiability,"// create dot class charts or an html inheritance tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx:38,inherit,inheritance,38,html/src/TClassDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx,1,['inherit'],['inheritance']
Modifiability,"// create graph via the PluginManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:24,Plugin,PluginManager,24,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['Plugin'],['PluginManager']
Modifiability,"// create minimizer according to the chosen configuration using the; // plug-in manager; // in case of empty string usesd default values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:44,config,configuration,44,math/mathcore/src/FitConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx,2,"['config', 'plug-in']","['configuration', 'plug-in']"
Modifiability,"// create model configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:16,config,configuration,16,roofit/roostats/test/stressRooStats_models.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h,1,['config'],['configuration']
Modifiability,"// create now the input and output matrices; //int n1 = batchHeight;; //int n2 = batchWidth;; // treat case where batchHeight is the batchSize in case of first Dense layers (then we need to set to fNet batch size); //if (fXInput.size() > 0) fXInput.clear();; //fXInput.emplace_back(MatrixImpl_t(n1,n2));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:166,layers,layers,166,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['layers'],['layers']
Modifiability,"// create plug-in with required algorithm",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:10,plug-in,plug-in,10,math/mathcore/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx,1,['plug-in'],['plug-in']
Modifiability,"// create signal + background model configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h:36,config,configuration,36,roofit/roostats/test/stressRooStats_models.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_models.h,2,['config'],['configuration']
Modifiability,"// create std::map from event variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:30,variab,variables,30,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variables']
Modifiability,"// create the branches for the spectator variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:41,variab,variables,41,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variables']
Modifiability,"// create the concrete class for one-dimensional integration. Use the plug-in manager if needed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:70,plug-in,plug-in,70,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,1,['plug-in'],['plug-in']
Modifiability,"// create the histos first for the variables, then for the targets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:35,variab,variables,35,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,2,['variab'],['variables']
Modifiability,"// create the search tree from the events in a TTree; // using ALL the variables specified included in the Event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:71,variab,variables,71,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['variab'],['variables']
Modifiability,"// creating a variable for a pdf we will assume it should be an observable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:14,variab,variable,14,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['variab'],['variable']
Modifiability,"// creation of the python-side class; extend the size if this is a smart ptr",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:38,extend,extend,38,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['extend'],['extend']
Modifiability,"// cross-inheritance dispatch",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.h:9,inherit,inheritance,9,bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.h,1,['inherit'],['inheritance']
Modifiability,"// cuda/hip extern __shared__ variable, leave alignment alone",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:30,variab,variable,30,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,"// current class, defining inheritance sort order",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx:27,inherit,inheritance,27,html/src/TDocParser.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TDocParser.cxx,1,['inherit'],['inheritance']
Modifiability,"// currently configured color",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.h:13,config,configured,13,core/textinput/src/textinput/TerminalDisplay.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/textinput/src/textinput/TerminalDisplay.h,1,['config'],['configured']
Modifiability,// cut variable,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,variab,variable,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// cut variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:7,variab,variable,7,tmva/tmva/src/Rule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx,1,['variab'],['variable']
Modifiability,"// data collection class to configure plotting of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h:28,config,configure,28,tmva/tmva/inc/TMVA/Config.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Config.h,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"// data is not weighted as pdf cannot be extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:41,extend,extended,41,roofit/roostats/inc/RooStats/NumEventsTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h,1,['extend'],['extended']
Modifiability,"// data loader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:33,variab,variable,33,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,3,['variab'],['variable']
Modifiability,"// data members inherited from TGeoTube:; // Double_t fRmin; // inner radius at z=0; // Double_t fRmax; // outer radius at z=0; // Double_t fDz; // half length",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoHype.h:16,inherit,inherited,16,geom/geom/inc/TGeoHype.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/inc/TGeoHype.h,1,['inherit'],['inherited']
Modifiability,"// data->pen_style |= PS_DASH; // bb removed 28.01.2003; /* ; * Set the extended line style. This could be done by ; * PS_USERSTYLE and ExtCreatePen; but ONLY on WinNT, ; * so let's make a guess (based on the implementation ; * in DIA). On Win9x this does only work for lines; * with width one ...; *; * More workarounds for Win9x descibed at:; * http://www.codeguru.com/gdi/dashed.shtml; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkgc-win32.c:72,extend,extended,72,graf2d/win32gdk/gdk/src/gdk/win32/gdkgc-win32.c,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/win32gdk/gdk/src/gdk/win32/gdkgc-win32.c,1,['extend'],['extended']
Modifiability,"// dataloader need at least one variable; // creating loader for seed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx:32,variab,variable,32,tmva/tmva/src/VariableImportance.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableImportance.cxx,3,['variab'],['variable']
Modifiability,"// dataset dir is in the user sandbox (simplified naming)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h:30,sandbox,sandbox,30,proof/proof/inc/TDataSetManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TDataSetManager.h,1,['sandbox'],['sandbox']
Modifiability,"// dcbt[st] is printed manually here because:; // 1. The assembly syntax is different between embedded and server targets; // 2. We must print the short mnemonics for TH == 0 because the; // embedded/server syntax default will not be stable across assemblers; // The syntax for dcbt is:; // dcbt ra, rb, th [server]; // dcbt th, ra, rb [embedded]; // where th can be omitted when it is 0. dcbtst is the same.; // On AIX, only emit the extended mnemonics for dcbt and dcbtst if; // the ""modern assembler"" is available.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp:435,extend,extended,435,interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/MCTargetDesc/PPCInstPrinter.cpp,1,['extend'],['extended']
Modifiability,"// decision variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx:12,variab,variables,12,graf2d/asimage/src/TASImage.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/asimage/src/TASImage.cxx,2,['variab'],['variables']
Modifiability,"// declaration of global variables; // this is the hard-coded maximum length of the source names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx:25,variab,variables,25,tmva/tmva/src/MsgLogger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MsgLogger.cxx,1,['variab'],['variables']
Modifiability,"// declaration, processing and checking of configuration options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:43,config,configuration,43,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['config'],['configuration']
Modifiability,"// declare a color variable to reflect required user changes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx:19,variab,variable,19,gui/gui/src/TGFrame.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGFrame.cxx,1,['variab'],['variable']
Modifiability,"// declare a new scope with two variables, _stack and _rethrow.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:32,variab,variables,32,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,2,['variab'],['variables']
Modifiability,"// declare variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:11,variab,variables,11,tmva/tmva/src/VariableGaussTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx,1,['variab'],['variables']
Modifiability,"// default config dir",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:11,config,config,11,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['config'],['config']
Modifiability,"// default config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h:11,config,config,11,proof/proof/inc/TProof.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProof.h,1,['config'],['config']
Modifiability,"// default configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:11,config,configuration,11,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['config'],['configuration']
Modifiability,"// default is all variables and all targets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:18,variab,variables,18,tmva/tmva/src/VariableTransformBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx,1,['variab'],['variables']
Modifiability,"// define a global ""tree"" variable for the same tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:26,variab,variable,26,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,1,['variab'],['variable']
Modifiability,"// define sets of variables obs={x} and poi={sig}; // x is the only observable in the main measurement and y is treated as a separate measurement,; // which is used to produce the prior that will be used in the calculation to randomize the nuisance parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:18,variab,variables,18,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['variab'],['variables']
Modifiability,"// defined as a variable to exercise passing lvalues into Book",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_interface.cxx:16,variab,variable,16,tree/dataframe/test/dataframe_interface.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/dataframe_interface.cxx,1,['variab'],['variable']
Modifiability,"// delete Exp; leak for now, see RewritePropertyOrImplicitSetter() usage for more info.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:33,Rewrite,RewritePropertyOrImplicitSetter,33,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,10,['Rewrite'],['RewritePropertyOrImplicitSetter']
Modifiability,"// deletion removes the proxy, with the idea that a fresh lookup can be made,; // to support Cling's shadowing of declarations (TODO: the use case here is; // redeclared variables, for which fDescription is indeed th ename; it might; // fail for enums).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx:170,variab,variables,170,bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPDataMember.cxx,1,['variab'],['variables']
Modifiability,"// detailed walk through inheritance hierarchy",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx:25,inherit,inheritance,25,bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/API.cxx,4,['inherit'],['inheritance']
Modifiability,// detect same vertices on both Z-layers,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:34,layers,layers,34,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['layers'],['layers']
Modifiability,"// detect variables from array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:10,variab,variables,10,tmva/tmva/src/VariableInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx,1,['variab'],['variables']
Modifiability,"// determine static and/or adaptive bandwidth",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:27,adapt,adaptive,27,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['adapt'],['adaptive']
Modifiability,"// determine the way how a node is split (which variable, which cut value)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:48,variab,variable,48,tmva/tmva/inc/TMVA/DecisionTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h,1,['variab'],['variable']
Modifiability,"// determine variable importances",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:13,variab,variable,13,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variable']
Modifiability,"// diagonalise variable vectors",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx:15,variab,variable,15,tmva/tmva/src/VariableDecorrTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableDecorrTransform.cxx,1,['variab'],['variable']
Modifiability,// direct_map_kernel lists which variables are used by the kernel; // find the variables which are used through a function call,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:33,variab,variables,33,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,2,['variab'],['variables']
Modifiability,"// disable adaptive sampling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:11,adapt,adaptive,11,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,4,['adapt'],['adaptive']
Modifiability,"// distinguish case where variable is not from an array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:26,variab,variable,26,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variable']
Modifiability,"// distinguish the case we have lower /upper limits; // check if a possible crossing exists otherwise return variable min/max; // do lower extrapolation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:109,variab,variable,109,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['variab'],['variable']
Modifiability,"// dll attributes require external linkage. Static locals may have external; // linkage but still cannot be explicitly imported or exported.; // In Microsoft mode, a variable defined in anonymous namespace must have; // external linkage in order to be exported.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:166,variab,variable,166,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,// dllimport and dllexport are inheritable attributes so we have to exclude; // inherited attribute instances.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:31,inherit,inheritable,31,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['inherit'],"['inheritable', 'inherited']"
Modifiability,// dllimport cannot be used on variable definitions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:31,variab,variable,31,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,1,['variab'],['variable']
Modifiability,"// dllimport/dllexport variables cannot be thread local, their TLS index; // isn't exported with the variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp:23,variab,variables,23,interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDecl.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// do not run by default tests on 32 bit architecture; // since extended precision will make it difficult",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx:64,extend,extended,64,math/genvector/test/rotationApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/rotationApplication.cxx,1,['extend'],['extended']
Modifiability,"// do not send too much data, limit could be made configurable later",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx:50,config,configurable,50,geom/webviewer/src/RGeomData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/webviewer/src/RGeomData.cxx,1,['config'],['configurable']
Modifiability,"// do not want underflow/overflow in h2; // if (h1->GetYaxis()->GetBinWidth(1) < 2. && y > 10.) {; // std::cout << ""extending the histogram for "" << x << "" "" << y << std::endl;; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:116,extend,extending,116,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extending']
Modifiability,"// doc syntax configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h:14,config,configuration,14,html/inc/THtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h,1,['config'],['configuration']
Modifiability,"// does the model depend indirectly on this variable through an lvalue chain?; // otherwise, this variable will have to be generated with accept/reject",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:44,variab,variable,44,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,2,['variab'],['variable']
Modifiability,"// does the model depend on this variable directly, ie, like ""x"" in; // f(x) or f(x,g(x,y)) or even f(x,x) ?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx:33,variab,variable,33,roofit/roofitcore/src/RooGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooGenContext.cxx,1,['variab'],['variable']
Modifiability,"// don't add a coef if in 'all-extended' mode and this pdf is extendable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,extend,extended,31,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['extend'],"['extendable', 'extended']"
Modifiability,"// don't treat pdf as extended if it has a coefficient and is RooAddPdf: RooAddPdf doesn't extend them unless no; // coefs for any (and all are extendable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:22,extend,extended,22,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,3,['extend'],"['extend', 'extendable', 'extended']"
Modifiability,"// double MaxSigma = 8; // Needed to set ranges for variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:52,variab,variables,52,roofit/roostats/src/NumberCountingPdfFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx,1,['variab'],['variables']
Modifiability,"// double x[1]; x[0] = 0.;; // std::cout << ""fval "" << f(x) << std::endl;; // x[0] = 1.; std::cout << ""fval "" << f(x) << std::endl;; //fitter.Config().SetMinimizer(""Minuit2"");; // fails with minuit (t.b. investigate)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:142,Config,Config,142,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['Config'],['Config']
Modifiability,"// dragged frame is taken from some main frame; //if (fPimpl->fGrab && fClient->GetRoot()->InheritsFrom(TGMainFrame::Class())) {; // fBuilder->MapRaised();; //}",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx:91,Inherit,InheritsFrom,91,gui/guibuilder/src/TGuiBldDragManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/guibuilder/src/TGuiBldDragManager.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// draw->Box(); // configure box draw option (default); // draw->Sphere(); // configure sphere draw option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh3_large.cxx:19,config,configure,19,tutorials/rcanvas/rh3_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh3_large.cxx,2,['config'],['configure']
Modifiability,"// draw->Contour(); // configure cont draw option; // draw->Scatter(); // configure scatter draw option; // draw->Arrow(); // configure arrow draw option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx:23,config,configure,23,tutorials/rcanvas/rh2_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_large.cxx,3,['config'],['configure']
Modifiability,"// draw->fill.color = RColor::kLime;; // draw->fill.style = RAttrFill::kSolid;; // draw->Line(); // configure line draw option; // draw->Bar(); // configure bar draw option; // draw->Error(3); // configure error drawing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx:100,config,configure,100,tutorials/rcanvas/rh1_large.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh1_large.cxx,3,['config'],['configure']
Modifiability,"// draw->line.color = RColor::kLime;; // draw->Surf(2); // configure surf4 draw option; // draw->Lego(2); // configure lego2 draw option; // draw->Contour(); // configure cont draw option; // draw->Scatter(); // configure color draw option (default); // draw->Arrow(); // configure arrow draw option",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx:59,config,configure,59,tutorials/rcanvas/rh2_colz.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/rcanvas/rh2_colz.cxx,5,['config'],['configure']
Modifiability,"// drop one variable (this is ONLY used for internal variable ranking !)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:12,variab,variable,12,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,2,['variab'],['variable']
Modifiability,"// dto2longs(d, i1, i2) returns (in i1 and i2) two unsigned ints; // representation of its double input. This is byte-ordering; // independent, and depends for complete portability ONLY on adherence; // to the IEEE 754 standard for 64-bit floating point representation.; // The first unsigned int contains the high-order bits in IEEE; thus; // 1.0 will always be 0x3FF00000, 00000000",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/BitReproducible.h:169,portab,portability,169,math/genvector/inc/Math/GenVector/BitReproducible.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/BitReproducible.h,1,['portab'],['portability']
Modifiability,"// dtox(d) returns a 16-character string containing the (zero-filled) hex; // representation of its double input. This is byte-ordering; // independent, and depends for complete portability ONLY on adherence; // to the IEEE 754 standard for 64-bit floating point representation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/BitReproducible.h:178,portab,portability,178,math/genvector/inc/Math/GenVector/BitReproducible.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/inc/Math/GenVector/BitReproducible.h,1,['portab'],['portability']
Modifiability,// dummy config until real config is received,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomViewer.controller.js:9,config,config,9,ui5/geom/controller/GeomViewer.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomViewer.controller.js,2,['config'],['config']
Modifiability,"// dummy methods to suppress unused variable warnings; // this member function should never be called within; // the Fumili method...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx:36,variab,variable,36,math/minuit2/src/FumiliErrorUpdator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx,1,['variab'],['variable']
Modifiability,// dyn_cast_or_null is used to handle objC variables which do not; // have a declaration context.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ComputeDependence.cpp:43,variab,variables,43,interpreter/llvm-project/clang/lib/AST/ComputeDependence.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ComputeDependence.cpp,1,['variab'],['variables']
Modifiability,// dynamic_cast only finds public inheritance paths.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:34,inherit,inheritance,34,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,1,['inherit'],['inheritance']
Modifiability,"// eBPF at the moment only has 64-bit comparison. Any 32-bit comparison need; // to be promoted, however if the 32-bit comparison operands are destination; // registers then they are implicitly zero-extended already, there is no; // need of explicit zero-extend sequence for them.; //; // We simply do extension for all situations in this method, but we will; // try to remove those unnecessary in BPFMIPeephole pass.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp:199,extend,extended,199,interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/BPF/BPFISelLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,// eBPF or extended BPF or 64-bit BPF (big endian),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:11,extend,extended,11,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['extend'],['extended']
Modifiability,// eBPF or extended BPF or 64-bit BPF (little endian),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h:11,extend,extended,11,interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/TargetParser/Triple.h,1,['extend'],['extended']
Modifiability,// eXcess: 16/32/64-bit configurable embedded CPU,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h:24,config,configurable,24,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/ELF.h,1,['config'],['configurable']
Modifiability,"// each variable with static storage duration that is declared; // in a namespace or global scope and referenced in the construct,; // and that does not have a predetermined data-sharing attribute",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:8,variab,variable,8,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,1,['variab'],['variable']
Modifiability,"// each vi is a variable of type ""reference to T"" initialized with the; // initializer, where the reference is an lvalue reference if the; // initializer is an lvalue and an rvalue reference otherwise",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp:16,variab,variable,16,interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclCXX.cpp,1,['variab'],['variable']
Modifiability,"// eat the ','; // We need to create a temporary record to provide a scope for the; // two variables.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:91,variab,variables,91,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variables']
Modifiability,// eat the '{'.; // A group let introduces a new scope for local variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:65,variab,variables,65,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,1,['variab'],['variables']
Modifiability,"// else - if name or newattr is Set, we should write in the attr_name variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:70,variab,variable,70,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['variab'],['variable']
Modifiability,"// else if (obj->InheritsFrom(TMultiGraph::Class()) ); // ROOT::Fit::FillData(data, dynamic_cast<TMultiGraph *>(obj) );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:17,Inherit,InheritsFrom,17,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,// emitAtomicCmpSwapW() will zero extend the result (original value).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp:34,extend,extend,34,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// end anonymous namespace; // Checks the condition of the IfStmt and returns true if one; // of the following heuristics are met:; // 1) The conidtion is a variable with ""singular"" or ""plural"" in the name; // 2) The condition is a binary operator with 1 or 2 on the right-hand side",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/LocalizationChecker.cpp:157,variab,variable,157,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/LocalizationChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/LocalizationChecker.cpp,1,['variab'],['variable']
Modifiability,// end anonymous namespace; // Register plugin!,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/CheckerDependencyHandling/CheckerDependencyHandling.cpp:40,plugin,plugin,40,interpreter/llvm-project/clang/lib/Analysis/plugins/CheckerDependencyHandling/CheckerDependencyHandling.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/plugins/CheckerDependencyHandling/CheckerDependencyHandling.cpp,2,['plugin'],['plugin']
Modifiability,"// end anonymous namespace; // The recurrence AR has been shown to have no signed/unsigned wrap or something; // close to it. Typically, if we can prove NSW/NUW for AR, then we can just as; // easily prove NSW/NUW for its preincrement or postincrement sibling. This; // allows normalizing a sign/zero extended AddRec as such: {sext/zext(Step +; // Start),+,Step} => {(Step + sext/zext(Start),+,Step} As a result, the; // expression ""Step + sext/zext(PreIncAR)"" is congruent with; // ""sext/zext(PostIncAR)""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:301,extend,extended,301,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['extend'],['extended']
Modifiability,// end anonymous namespace; // This trait holds region of variable that is assigned with vfork's; // return value (this is the only region child is allowed to write).; // VFORK_RESULT_INVALID means that we are in parent process.; // VFORK_RESULT_NONE means that vfork's return value hasn't been assigned.; // Other values point to valid regions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VforkChecker.cpp:58,variab,variable,58,interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VforkChecker.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/Checkers/VforkChecker.cpp,1,['variab'],['variable']
Modifiability,"// end anonymous namespace; /// AddPointerWithMoreQualifiedTypeVariants - Add the pointer type @p Ty to; /// the set of pointer types along with any more-qualified variants of; /// that type. For example, if @p Ty is ""int const *"", this routine; /// will add ""int const *"", ""int const volatile *"", ""int const; /// restrict *"", and ""int const volatile restrict *"" to the set of; /// pointer types. Returns true if the add of @p Ty itself succeeded,; /// false otherwise.; ///; /// FIXME: what to do about extended qualifiers?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp:504,extend,extended,504,interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOverload.cpp,1,['extend'],['extended']
Modifiability,"// end anonymous namespace; /// Calculate the fragment of a variable to use when slicing a store; /// based on the slice dimensions, existing fragment, and base storage; /// fragment.; /// Results:; /// UseFrag - Use Target as the new fragment.; /// UseNoFrag - The new slice already covers the whole variable.; /// Skip - The new alloca slice doesn't include this variable.; /// FIXME: Can we use calculateFragmentIntersect instead?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:60,variab,variable,60,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,3,['variab'],['variable']
Modifiability,// end anonymous namespace; /// Check if the sign-/zero-extend will be a noop.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:56,extend,extend,56,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,1,['extend'],['extend']
Modifiability,// end anonymous namespace; /// Emit code to declare the ID enumeration and external global instance; /// variables.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp:106,variab,variables,106,interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/RegisterBankEmitter.cpp,1,['variab'],['variables']
Modifiability,// end anonymous namespace; /// EmitAutoVarWithLifetime - Does the setup required for an automatic; /// variable with lifetime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp:104,variab,variable,104,interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGDecl.cpp,1,['variab'],['variable']
Modifiability,// end anonymous namespace; /// Emits a reference to a dummy variable which is emitted with each class.; /// This ensures that a linker error will be generated when trying to link; /// together modules where a referenced class is not defined.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:61,variab,variable,61,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['variab'],['variable']
Modifiability,// end anonymous namespace; /// Get the appropriated Rewriter for \p MI.; /// \return A pointer to a dynamically allocated Rewriter or nullptr if no; /// rewriter works for \p MI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp:53,Rewrite,Rewriter,53,interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/PeepholeOptimizer.cpp,3,"['Rewrite', 'rewrite']","['Rewriter', 'rewriter']"
Modifiability,// end anonymous namespace; /// Iteratively perform simplification on a worklist of IV users. Each; /// successive simplification may push more users which may themselves be; /// candidates for simplification.; ///; /// Sign/Zero extend elimination is interleaved with IV simplification.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:230,extend,extend,230,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['extend'],['extend']
Modifiability,"// end anonymous namespace; /// NEONThumb2DataIPostEncoder - Post-process encoded NEON data-processing; /// instructions, and rewrite them to their Thumb2 form if we are currently in; /// Thumb2 mode.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp:126,rewrite,rewrite,126,interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/MCTargetDesc/ARMMCCodeEmitter.cpp,1,['rewrite'],['rewrite']
Modifiability,// end anonymous namespace; /// Strip aggregate type wrapping.; ///; /// This removes no-op aggregate types wrapping an underlying type. It will; /// strip as many layers of types as it can without changing either the type; /// size or the allocated size.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp:164,layers,layers,164,interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/SROA.cpp,1,['layers'],['layers']
Modifiability,// end anonymous namespace; /// ValueProfileCollectorImpl inherits the API of PluginChainFinal.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp:58,inherit,inherits,58,interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Instrumentation/ValueProfileCollector.cpp,2,"['Plugin', 'inherit']","['PluginChainFinal', 'inherits']"
Modifiability,// end anonymous namespace; ///Perform cse of induction variable instructions.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp:56,variab,variable,56,interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp,1,['variab'],['variable']
Modifiability,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // rewriteNonIntegerIVs and helpers. Prefer integer IVs.; //===----------------------------------------------------------------------===//; /// Convert APF to an integer, if possible.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:113,rewrite,rewriteNonIntegerIVs,113,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,1,['rewrite'],['rewriteNonIntegerIVs']
Modifiability,// end class BreakContinueFinder; // Emit a warning when a loop increment/decrement appears twice per loop; // iteration. The conditions which trigger this warning are:; // 1) The last statement in the loop body and the third expression in the; // for loop are both increment or both decrement of the same variable; // 2) No continue statements in the loop body.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:306,variab,variable,306,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variable']
Modifiability,"// end else (parse config file)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx:19,config,config,19,proof/proof/src/TProofCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx,1,['config'],['config']
Modifiability,"// end loop on k (layers of image)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx:18,layers,layers,18,tmva/sofie/inc/TMVA/ROperator_Pool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx,1,['layers'],['layers']
Modifiability,// end namespace AttributeLangSupport; //===----------------------------------------------------------------------===//; // Helper functions; //===----------------------------------------------------------------------===//; /// isFunctionOrMethod - Return true if the given decl has function; /// type (function or function-typed variable) or an Objective-C; /// method.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp:330,variab,variable,330,interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaDeclAttr.cpp,1,['variab'],['variable']
Modifiability,// end namespace RawInstrProf; // Create the variable for the profile file name.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h:45,variab,variable,45,interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ProfileData/InstrProf.h,1,['variab'],['variable']
Modifiability,"// end namespace SystemZCP; /// A SystemZ-specific constant pool value. At present, the only; /// defined constant pool values are module IDs or offsets of; /// thread-local variables (written x@TLSGD, x@TLSLDM, x@DTPOFF,; /// or x@NTPOFF).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZConstantPoolValue.h:174,variab,variables,174,interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZConstantPoolValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/SystemZ/SystemZConstantPoolValue.h,1,['variab'],['variables']
Modifiability,"// end namespace Util; /// \class KahanSum; /// The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors; /// when adding a sequence of finite-precision floating point numbers.; /// This is done by keeping a separate running compensation (a variable to accumulate small errors).; ///; /// ### Auto-vectorisable accumulation; /// This class can internally use multiple accumulators (template parameter `N`).; /// When filled from a collection that supports index access from a *contiguous* block of memory,; /// compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling; /// through the internal accumulators based on the value of ""`index % N`"", so `N` accumulators can be filled from a block; /// of `N` numbers in a single instruction.; ///; /// The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version; /// with `N = 1`.; /// This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation; /// result can change *in dependence of N*, even when the data are identical.; /// The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show; /// in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to; /// speed up the accumulation, but not to increase precision.; ///; /// \param T The type of the values to be accumulated.; /// \param N Number of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture.; /// Depending on the instruction set, good values are:; /// - AVX2-float: 8; /// - AVX2-double: 4; /// - AVX512-float: 16; /// - AVX512-double: 8; ///; /// ### Examples; ///; /// ~~~{.cpp}; /// std::vector<double> numbers(1000);; /// for (std::size_t i=0; i<1000; ++i) {; /// numbers[i] = rand();; /// }; ///; /// ROOT::Math::KahanSu",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:287,variab,variable,287,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,1,['variab'],['variable']
Modifiability,// end namespace at; /// Convert @llvm.dbg.declare intrinsics into sets of @llvm.dbg.assign; /// intrinsics by treating stores to the dbg.declare'd address as assignments; /// to the variable. Not all kinds of variables are supported yet; those will; /// be left with their dbg.declare intrinsics.; /// The pass sets the debug-info-assignment-tracking module flag to true to; /// indicate assignment tracking has been enabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h:183,variab,variable,183,interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/DebugInfo.h,2,['variab'],"['variable', 'variables']"
Modifiability,// end namespace internal; /// A type trait that returns true iff the given type is a type that can be; /// stored in a refactoring option.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h:120,refactor,refactoring,120,interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Refactoring/RefactoringOptionVisitor.h,1,['refactor'],['refactoring']
Modifiability,"// end namespace llvm; /// constrainLocalCopy handles two possibilities:; /// 1) Local src:; /// I0: = dst; /// I1: src = ...; /// I2: = dst; /// I3: dst = src (copy); /// (create pred->succ edges I0->I1, I2->I1); ///; /// 2) Local copy:; /// I0: dst = src (copy); /// I1: = dst; /// I2: src = ...; /// I3: = dst; /// (create pred->succ edges I1->I2, I3->I2); ///; /// Although the MachineScheduler is currently constrained to single blocks,; /// this algorithm should handle extended blocks. An EBB is a set of; /// contiguously numbered blocks such that the previous block in the EBB is; /// always the single predecessor.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp:476,extend,extended,476,interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/MachineScheduler.cpp,1,['extend'],['extended']
Modifiability,// end namespace refactor,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp:17,refactor,refactor,17,interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-refactor/TestSupport.cpp,3,['refactor'],['refactor']
Modifiability,"// end of FilterChooser::filterProcessor(bool); // Decides on the best configuration of filter(s) to use in order to decode; // the instructions. A conflict of instructions may occur, in which case we; // dump the conflict set to the standard error.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp:71,config,configuration,71,interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/DecoderEmitter.cpp,1,['config'],['configuration']
Modifiability,"// end of adaptive method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:10,adapt,adaptive,10,tmva/tmva/src/MethodPDERS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx,1,['adapt'],['adaptive']
Modifiability,// endif use parallel deepnet; /*! Function that will update the weights and biases in the layers that; * contain weights and biases. */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h:91,layers,layers,91,tmva/tmva/inc/TMVA/DNN/DeepNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/DeepNet.h,1,['layers'],['layers']
Modifiability,"// ensure that direct inheritance is used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RHolder.hxx:22,inherit,inheritance,22,gui/browsable/inc/ROOT/Browsable/RHolder.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/browsable/inc/ROOT/Browsable/RHolder.hxx,2,['inherit'],['inheritance']
Modifiability,"// ensure that there is only one variable given:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoord.cxx:33,variab,variable,33,tree/treeviewer/src/TParallelCoord.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TParallelCoord.cxx,1,['variab'],['variable']
Modifiability,"// environment variables; // file descriptor redirection should almost come first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/inc/TTabCom.h:15,variab,variables,15,core/rint/inc/TTabCom.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/inc/TTabCom.h,1,['variab'],['variables']
Modifiability,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended binned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:213,extend,extended,213,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,4,['extend'],['extended']
Modifiability,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:213,extend,extended,213,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,4,['extend'],['extended']
Modifiability,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:504,adapt,adapter,504,math/mathmore/inc/Math/GSLIntegrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h,1,['adapt'],['adapter']
Modifiability,"// even exponents are not interference terms; // if the coupling is part of a ""pairwise non-interfering group""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:56,coupling,coupling,56,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['coupling'],['coupling']
Modifiability,"// exactRDIVtest - Tests the RDIV subscript pair for dependence.; // Things of the form [c1 + a*i] and [c2 + b*j],; // where i and j are induction variable, c1 and c2 are loop invariant,; // and a and b are constants.; // Returns true if any possible dependence is disproved.; // Marks the result as inconsistent.; // Works in some cases that symbolicRDIVtest doesn't, and vice versa.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:147,variab,variable,147,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// exactSIVtest -; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*i],; // where i is an induction variable, c1 and c2 are loop invariant, and a1; // and a2 are constant, we can solve it exactly using an algorithm developed; // by Banerjee and Wolfe. See Algorithm 6.2.1 (case 2.5) in:; //; // Dependence Analysis for Supercomputing; // Utpal Banerjee; // Kluwer Academic Publishers, 1988; //; // It's slower than the specialized tests (strong SIV, weak-zero SIV, etc),; // so use them if possible. They're also a bit better with symbolics and,; // in the case of the strong SIV test, can compute Distances.; //; // Return true if dependence disproved.; //; // This is a modified version of the original Banerjee algorithm. The original; // only tested whether Dst depends on Src. This algorithm extends that and; // returns all the dependencies that exist between Dst and Src.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:125,variab,variable,125,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,"['extend', 'variab']","['extends', 'variable']"
Modifiability,"// example of a multi dimensional fit where parallelization can be used; // to speed up the result; // define the environment variable OMP_NUM_THREADS to the number of desired threads; // By default it will have thenumber of core of the machine; // The default number of dimension is 20 (fit in 40 parameters) on 1000 data events.; // One can change the dimension and the number of events by doing:; // ./test_Minuit2_Parallel ndim nevents",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/ParallelTest.cxx:126,variab,variable,126,math/minuit2/test/MnSim/ParallelTest.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/ParallelTest.cxx,1,['variab'],['variable']
Modifiability,// exclude captured __block variables; there's no destructor; // associated with the block literal for them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp:28,variab,variables,28,interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/JumpDiagnostics.cpp,1,['variab'],['variables']
Modifiability,"// exclude constants variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h:21,variab,variables,21,roofit/roostats/inc/RooStats/RooStatsUtils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/RooStatsUtils.h,1,['variab'],['variables']
Modifiability,"// exclude enum or static variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx:26,variab,variables,26,net/http/src/TRootSniffer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/src/TRootSniffer.cxx,1,['variab'],['variables']
Modifiability,// extend range,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMExpandPseudoInsts.cpp,1,['extend'],['extend']
Modifiability,// extend to v16i32,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// extend to v32i16,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// extend/pmullw/pack,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,1,['extend'],['extend']
Modifiability,// extend/vpsllvw/pack sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,3,['extend'],['extend']
Modifiability,// extend/vpsravd/pack sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,// extend/vpsravw/pack sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,3,['extend'],['extend']
Modifiability,// extend/vpsrlvd/pack sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,4,['extend'],['extend']
Modifiability,// extend/vpsrlvw/pack sequence.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:3,extend,extend,3,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,3,['extend'],['extend']
Modifiability,"// extended fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx:3,extend,extended,3,roofit/roofitcore/test/testTestStatistics.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testTestStatistics.cxx,2,['extend'],['extended']
Modifiability,"// extended from WORD",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/misc/win/bindexplib/bindexplib.cxx:3,extend,extended,3,misc/win/bindexplib/bindexplib.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/misc/win/bindexplib/bindexplib.cxx,1,['extend'],['extended']
Modifiability,"// extended term in likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:3,extend,extended,3,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['extend'],['extended']
Modifiability,// extended vector elements.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:3,extend,extended,3,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,1,['extend'],['extended']
Modifiability,"// extending only to the lowest data value within this range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCandle.cxx:3,extend,extending,3,graf2d/graf/src/TCandle.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/graf/src/TCandle.cxx,1,['extend'],['extending']
Modifiability,// extends and implements,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp:3,extend,extends,3,interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/UnwrappedLineParser.cpp,1,['extend'],['extends']
Modifiability,"// extends and infer can appear as keywords in conditional types:; // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#conditional-types; // do not break before them, as the expressions are subject to ASI.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:3,extend,extends,3,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['extend'],['extends']
Modifiability,// extension:; // <vector-type> ::= Dv <positive dimension number> _ <extended element type>; // ::= Dv [<dimension expression>] _ <element type>; // <extended element type> ::= <element type>; // ::= p # AltiVec vector pixel,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h:70,extend,extended,70,interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Demangle/ItaniumDemangle.h,2,['extend'],['extended']
Modifiability,// external zero size addrspace(3) without initializer implies cuda/hip extern; // __shared__ the semantics for such a variable appears to be that all extern; // __shared__ variables alias one another. This hits different handling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.cpp:119,variab,variable,119,interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/Utils/AMDGPUMemoryUtils.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// extra options for tensorflow; // use different naming in tf2 for ConfigProto and Session",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:68,Config,ConfigProto,68,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['Config'],['ConfigProto']
Modifiability,"// extract parameters from the variable; // use current value and error on v as constraint",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:31,variab,variable,31,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['variab'],['variable']
Modifiability,"// extract underlying pdf which is extended; first server is the pdf; second server is the number of events variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx:35,extend,extended,35,roofit/roostats/src/RooStatsUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/RooStatsUtils.cxx,4,"['extend', 'variab']","['extended', 'variable']"
Modifiability,"// extract variables - to MVA matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:11,variab,variables,11,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,2,['variab'],['variables']
Modifiability,"// extractelt x, (insertelt y, elt, n), n -> elt; // If the possibly-variable indices are trivially known to be equal; // (because they are the same operand) then use the value that was; // inserted directly.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp:69,variab,variable,69,interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/InstructionSimplify.cpp,1,['variab'],['variable']
Modifiability,"// f16 arguments are extended to f32 and assigned to a register in [s0, s15]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallingConv.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallingConv.cpp,1,['extend'],['extended']
Modifiability,"// f16 arguments are extended to i32 and assigned to a register in [r0, r3]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallingConv.cpp:21,extend,extended,21,interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallingConv.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMCallingConv.cpp,1,['extend'],['extended']
Modifiability,// f16 arguments could have been extended prior to argument lowering.; // Mask them arguments if this is a CMSE nonsecure call.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:33,extend,extended,33,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// f16 arguments have their size extended to 4 bytes and passed as if they; // had been copied to the LSBs of a 32-bit register.; // For that, it's passed extended to i32 (soft ABI) or to f32 (hard ABI)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp:33,extend,extended,33,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.cpp,6,['extend'],['extended']
Modifiability,"// fCheckSum is an atomic variable. Also once it has; // transition from a zero Value it never changes. If two; // thread reach past this if statement and calculated the; // 'kLastestCheckSum', they will by definition obtain the; // same value, so technically we could simply have:; // if (fCheckSum && code == kCurrentCheckSum) return fCheckSum;; // However save a little bit of barrier time by calling load(); // only once.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:26,variab,variable,26,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,1,['variab'],['variable']
Modifiability,"// fScaleFrac <= 0.0 then do not scale input variables; // fScaleFrac >= 1.0 then use all event coordinates to scale input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx:45,variab,variables,45,tmva/tmva/src/MethodKNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodKNN.cxx,2,['variab'],['variables']
Modifiability,"// fWriteCurrent was not the default id and is still the 'holder' thread id; // this id is now also in the holder variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx:114,variab,variable,114,core/cont/src/TCollection.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/src/TCollection.cxx,1,['variab'],['variable']
Modifiability,// fallthrough; // These all can only appear in local or variable-initialization; // contexts and so should never appear in a mangling.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp:57,variab,variable-initialization,57,interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ItaniumMangle.cpp,1,['variab'],['variable-initialization']
Modifiability,// fcvt.wu.* sign extends bit 31 on RV64. FP_TO_UINT_SAT expects to zero; // extend.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:18,extend,extends,18,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,2,['extend'],"['extend', 'extends']"
Modifiability,"// figure out number of variables required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx:24,variab,variables,24,bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,2,['variab'],['variables']
Modifiability,"// fill and test 2D variable bins histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx:20,variab,variable,20,test/stressHistoFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistoFit.cxx,1,['variab'],['variable']
Modifiability,"// fill in this variable's value and error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:16,variab,variable,16,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,1,['variab'],['variable']
Modifiability,"// fill the variables into the tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:12,variab,variables,12,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variables']
Modifiability,"// fill variable names into foam",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h:8,variab,variable,8,tmva/tmva/inc/TMVA/MethodPDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDEFoam.h,2,['variab'],['variable']
Modifiability,"// fill variable vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:8,variab,variable,8,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['variab'],['variable']
Modifiability,"// fill variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:8,variab,variables,8,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,"// finally, to expose protected members, copy them over from the C++ dispatcher base; // to the Python dictionary (the C++ dispatcher's Python proxy is not a base of the; // Python class to keep the inheritance tree intact)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:199,inherit,inheritance,199,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,1,['inherit'],['inheritance']
Modifiability,"// find all input variables types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAGui.cxx:18,variab,variables,18,tmva/tmvagui/src/TMVAGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/TMVAGui.cxx,3,['variab'],['variables']
Modifiability,"// find directory from input variable transformation and extract class names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/mvasMulticlass.cxx:29,variab,variable,29,tmva/tmvagui/src/mvasMulticlass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/mvasMulticlass.cxx,1,['variab'],['variable']
Modifiability,"// find out number of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/correlationscatters.cxx:28,variab,variables,28,tmva/tmvagui/src/correlationscatters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/correlationscatters.cxx,2,['variab'],['variables']
Modifiability,"// finds cell according to given event variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h:39,variab,variables,39,tmva/tmva/inc/TMVA/PDEFoam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDEFoam.h,1,['variab'],['variables']
Modifiability,"// first bring the range of the variable _x to the normalised range [-1, 1]; // calculate sum_k c_k T_k(x) where x is given in the normalised range,; // c_0 = 1, and the higher coefficients are given in _coefList",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooChebychev.cxx:32,variab,variable,32,roofit/roofit/src/RooChebychev.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooChebychev.cxx,2,['variab'],['variable']
Modifiability,"// first enum (not counting ""kUNKNOWN_CONTEXT"") must; // cast to zero because these enums will be used to; // index arrays of size ""kNUM_PAT""; // ---------------; // user names and environment variables should come first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/inc/TTabCom.h:193,variab,variables,193,core/rint/inc/TTabCom.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/inc/TTabCom.h,1,['variab'],['variables']
Modifiability,"// first find stats of all variables; // vardata[v][i].first -> value of var <v> in event <i>; // vardata[v][i].second.first -> the event weight; // vardata[v][i].second.second -> the event type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx:27,variab,variables,27,tmva/tmva/src/RuleEnsemble.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/RuleEnsemble.cxx,1,['variab'],['variables']
Modifiability,"// first for variables, then for targets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:13,variab,variables,13,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,2,['variab'],['variables']
Modifiability,"// first message to provide config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx:28,config,config,28,tutorials/webgui/ping/ping.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/webgui/ping/ping.cxx,1,['config'],['config']
Modifiability,"// first the variables, then the targets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:13,variab,variables,13,tmva/tmva/inc/TMVA/TransformationHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h,1,['variab'],['variables']
Modifiability,"// fitter.Config().MinimizerOptions().SetPrintLevel(3);; // need to set function first (need to change this)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:10,Config,Config,10,math/mathcore/test/fit/testFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx,1,['Config'],['Config']
Modifiability,"// fix this line; // figure out average value of variable i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:49,variab,variable,49,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['variab'],['variable']
Modifiability,"// fix variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,variab,variable,7,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// fixed rule for adaptive singular",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:18,adapt,adaptive,18,math/mathmore/src/GSLIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx,1,['adapt'],['adaptive']
Modifiability,"// flag that indicates that no splines are produced and no smoothing; // is applied, i.e., the original histogram is used as reference; // this is useful for discrete variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:167,variab,variables,167,tmva/tmva/inc/TMVA/PDF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h,1,['variab'],['variables']
Modifiability,"// flexible interpolation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/FlexibleInterpVar.h:3,flexible,flexible,3,roofit/histfactory/inc/RooStats/HistFactory/FlexibleInterpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/inc/RooStats/HistFactory/FlexibleInterpVar.h,1,['flexible'],['flexible']
Modifiability,// fold (sext_in_reg (*_extend_vector_inreg x)) -> (sext_vector_inreg x); // if x is small enough or if we know that x has more than 1 sign bit and the; // sign_extend_inreg is extending from one of them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:177,extend,extending,177,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,// fold (sext_in_reg (sext x)) -> (sext x); // fold (sext_in_reg (aext x)) -> (sext x); // if x is small enough or if we know that x has more than 1 sign bit and the; // sign_extend_inreg is extending from one of them.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:191,extend,extending,191,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,// fold (sext_in_reg (zext x)) -> (sext x); // iff we are extending the source sign bit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,extend,extending,58,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extending']
Modifiability,"// fold (sext_inreg (extload x)) -> (sextload x); // If sextload is not supported by target, we can only do the combine when; // load has one use. Doing otherwise can block folding the extload with other; // extends that the target does support.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:208,extend,extends,208,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extends']
Modifiability,// fold (sext_inreg (masked_load x)) -> (sext_masked_load x); // ignore it if the masked load is already sign extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:110,extend,extended,110,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// fold (sub x, x) -> 0; // FIXME: Refactor this and xor and other similar operations together.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Refactor,Refactor,35,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['Refactor'],['Refactor']
Modifiability,"// fold sext (not i1 X) -> add (zext i1 X), -1; // TODO: This could be extended to handle bool vectors.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:71,extend,extended,71,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extended']
Modifiability,"// following is commented out while still considering, but idea is to include category in coords; /*if (auto s = _p->get<RooSimultaneous>(); s && s->indexCat().InheritsFrom(""RooCategory"") &&; !out.find(s->indexCat().GetName())) { auto cat = const_cast<RooCategory*>(dynamic_cast<const; RooCategory*>(&s->indexCat()));; // check if we have a pdf for every category ... if not then add to cut; cat->clearRange(""coordRange"",true);; bool hasMissing = false;; std::string includedStates;; for (auto state : *cat) {; if (!s->getPdf(state.first.c_str())) {; hasMissing = true;; } else {; if (!includedStates.empty()) {; includedStates += "","";; }; includedStates += state.first;; }; }; if (hasMissing) {; if(includedStates.find("","") != std::string::npos) {; cat->addToRange(""coordRange"",includedStates.c_str());; } else {; cat->setLabel(includedStates);; }; out.emplace_back(std::make_shared<xRooNode>(cat->GetName(),_p->getObject<RooAbsArg>(cat->GetName()),_p));; }; } else*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:160,Inherit,InheritsFrom,160,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// for Cudnn all weights are collapsed in one; // if (Architecture::IsCudnn()); // continue;; // if other layers (not RNN) continue",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h:106,layers,layers,106,tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/TestRecurrentBackpropagation.h,1,['layers'],['layers']
Modifiability,"// for RooFit::Extended()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx:15,Extend,Extended,15,roofit/roostats/src/HybridResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HybridResult.cxx,1,['Extend'],['Extended']
Modifiability,"// for binned case each entry is: -(-N + Nlog(N) - std::lgamma(N+1)); // for unbinned case each entry is: -(N*log(N/(sumN*binW))) = -N*logN + N*log(sumN) + N*log(binW); // but unbinned gets extendedTerm = sumN - sumN*log(sumN); // so resulting sum is just sumN - sum[ N*logN - N*log(binW) ]; // which is the same as the binned case without the LnGamma part and with the extra sum[N*log(binW)] part",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:190,extend,extendedTerm,190,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['extend'],['extendedTerm']
Modifiability,"// for defining unused variables in the interfaces; // and have still them in the documentation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h:23,variab,variables,23,math/mathcore/inc/Math/Util.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Util.h,1,['variab'],['variables']
Modifiability,"// for esoteric inheritance testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:16,inherit,inheritance,16,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['inherit'],['inheritance']
Modifiability,"// for rebinning of variable bins in a constant group",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:20,variab,variable,20,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['variab'],['variable']
Modifiability,"// for safety force a refresh of the cache (and tracking) in the nll; // DO NOT do a ConfigChange ... this is just a deactivate-reactivate of caching; // but it seems like doing this breaks the const optimization and function is badly behaved; // so once its turned on never turn it off.; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track; // the next line seems safe to do but wont bother doing it because not bothering with above; // need to understand why turning the cache off and on again breaks it??; // nll.constOptimizeTestStatistic(RooAbsArg::ValueChange, constOptimize>1); // update the cache values -- is; // this needed??",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:85,Config,ConfigChange,85,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['Config'],['ConfigChange']
Modifiability,"// for simple inheritance testing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h:14,inherit,inheritance,14,bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.h,1,['inherit'],['inheritance']
Modifiability,"// for testing multiple inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx:24,inherit,inheritance,24,bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/test/advancedcpp.cxx,2,['inherit'],['inheritance']
Modifiability,"// for the components, we need the set of variables without the index category",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:42,variab,variables,42,roofit/roofitcore/src/RooCompositeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx,1,['variab'],['variables']
Modifiability,"// for the enumerations defining the types; /** Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:121,Adapt,Adaptive,121,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,2,"['Adapt', 'adapt']","['Adaptive', 'adaptive']"
Modifiability,"// for the enumerations defining the types; // constructors; /**; Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h:125,adapt,adaptive,125,math/mathcore/inc/Math/Integrator.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/Integrator.h,3,['adapt'],['adaptive']
Modifiability,"// for variable bins: scale content by the bin width normalized by a reference value (typically the minimum bin); // this option is for variable bin widths",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx:7,variab,variable,7,hist/hist/src/HFitImpl.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/HFitImpl.cxx,2,['variab'],['variable']
Modifiability,"// force plots show how much NLL changes wrt to a change of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:60,variab,variables,60,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['variab'],['variables']
Modifiability,// foreach variables are never actually initialized in the way that; // the parser came up with.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp:11,variab,variables,11,interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaStmt.cpp,1,['variab'],['variables']
Modifiability,"// found the extend of the scope ... done",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:13,extend,extend,13,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,3,['extend'],['extend']
Modifiability,"// found the variable, return its binning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx:13,variab,variable,13,roofit/histfactory/src/ParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx,1,['variab'],['variable']
Modifiability,// fp; // Reserve the base register if we need to realign the stack and allocate; // variable-sized objects at runtime.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp:85,variab,variable-sized,85,interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/LoongArch/LoongArchRegisterInfo.cpp,2,['variab'],['variable-sized']
Modifiability,"// from auto-folding operations, e.g.; // (i32 ext (i16 ext i8)) would be folded to (i32 ext i8).; // To simplify the type legalization, we want to keep these; // single steps separate during type legalization.; // TL_[EXTEND|TRUNCATE] Inp, i128 _, i32 Opc; // * Inp is the original input to extend/truncate,; // * _ is a dummy operand with an illegal type (can be undef),; // * Opc is the original opcode.; // The legalization process (in Hexagon lowering code) will; // first deal with the ""real"" types (i.e. Inp and the result),; // and once all of them are processed, the wrapper node will; // be replaced with the original ISD node. The dummy illegal; // operand is there to make sure that the legalization hooks; // are called again after everything else is legal, giving; // us the opportunity to undo the wrapping.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.h:219,EXTEND,EXTEND,219,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonISelLowering.h,2,"['EXTEND', 'extend']","['EXTEND', 'extend']"
Modifiability,"// from this moment on user cannot change configurations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx:42,config,configurations,42,io/sql/src/TSQLFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/src/TSQLFile.cxx,1,['config'],['configurations']
Modifiability,"// function is cloned when creating the adapter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:40,adapt,adapter,40,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['adapt'],['adapter']
Modifiability,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:402,inherit,inherit,402,math/minuit2/src/FumiliBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx,3,['inherit'],"['inherit', 'inheritance']"
Modifiability,"// function performing the minimum searches using the Variable Metric algorithm (MIGRAD); // perform first a line search in the - Vg direction and then update using the Davidon formula (Davidon Error; // updator) stop when edm reached is less than required (edmval); // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx:54,Variab,Variable,54,math/minuit2/src/VariableMetricBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/VariableMetricBuilder.cxx,1,['Variab'],['Variable']
Modifiability,"// functions to manipulate basic tables (Configurations, Objects, Keys) in database",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h:41,Config,Configurations,41,io/sql/inc/TSQLFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/sql/inc/TSQLFile.h,1,['Config'],['Configurations']
Modifiability,"// gBenchmark->Start(TString::Format(""Adding %d variables\n"",n));; // test->AddVariables(vars,n);; // gBenchmark->Show(TString::Format(""Adding %d variables\n"",n));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:48,variab,variables,48,test/TFormulaTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx,4,['variab'],['variables']
Modifiability,"// gTools().AddAttr( varxml, ""Name"", Variables()[ivar].GetLabel() );",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:37,Variab,Variables,37,tmva/tmva/src/VariableGaussTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx,1,['Variab'],['Variables']
Modifiability,"// gcc prints these as sign extended. Sign extend value to 64 bits; // now; without this it would get ZExt'd later in; // ScheduleDAGSDNodes::EmitNode, which is very generic.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:28,extend,extended,28,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,2,['extend'],"['extend', 'extended']"
Modifiability,"// generate minimum and delta cuts for this variable; // retrieve signal events",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:44,variab,variable,44,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['variab'],['variable']
Modifiability,// generic function for variable calculation,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:24,variab,variable,24,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,// generic viewer configuration,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/tree/controller/TreeViewer.controller.js:18,config,configuration,18,ui5/tree/controller/TreeViewer.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/tree/controller/TreeViewer.controller.js,1,['config'],['configuration']
Modifiability,"// get a big list of all variables for convenient switching",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx:25,variab,variables,25,roofit/roostats/src/HypoTestCalculatorGeneric.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestCalculatorGeneric.cxx,1,['variab'],['variables']
Modifiability,"// get a list of keys with a given inheritance; // the list contains TKey objects",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/tmvaglob.cxx:35,inherit,inheritance,35,tmva/tmvagui/src/tmvaglob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/tmvaglob.cxx,1,['inherit'],['inheritance']
Modifiability,"// get any pointer type to initialize the extended dictionary type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:42,extend,extended,42,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['extend'],['extended']
Modifiability,"// get array of event variables (non-targets)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:22,variab,variables,22,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variables']
Modifiability,"// get length of each variable, and maximum length",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx:22,variab,variable,22,tmva/tmva/src/Tools.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Tools.cxx,2,['variab'],['variable']
Modifiability,"// get mean value of each variables for signal, backgd and signal+backgd",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:26,variab,variables,26,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,1,['variab'],['variables']
Modifiability,"// get mean value of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:21,variab,variables,21,tmva/tmva/inc/TMVA/MethodFisher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h,1,['variab'],['variables']
Modifiability,"// get number of variable parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:17,variab,variable,17,math/minuit2/src/MnApplication.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx,1,['variab'],['variable']
Modifiability,"// get number of variables used in Rule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:17,variab,variables,17,tmva/tmva/inc/TMVA/Rule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h,1,['variab'],['variables']
Modifiability,"// get scanned variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:15,variab,variable,15,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['variab'],['variable']
Modifiability,"// get the discriminating power of each variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:40,variab,variables,40,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,1,['variab'],['variables']
Modifiability,"// get the name of variable with index i",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h:19,variab,variable,19,tmva/tmva/inc/TMVA/Rule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Rule.h,1,['variab'],['variable']
Modifiability,"// get the true signal integral (ComputeIntegral just return 1 as they; // automatically normalize. IN ADDITION, they do not account for variable; // bin sizes (which you might perhaps use later on for the fMvaSig/Bkg histograms)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx:137,variab,variable,137,tmva/tmva/src/OptimizeConfigParameters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/OptimizeConfigParameters.cxx,1,['variab'],['variable']
Modifiability,"// get the variable specific options, first initialize default",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:11,variab,variable,11,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['variab'],['variable']
Modifiability,"// get top dir containing all hists of the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/rulevisHists.cxx:43,variab,variables,43,tmva/tmvagui/src/rulevisHists.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/rulevisHists.cxx,2,['variab'],['variables']
Modifiability,"// get top dir containing all hists of the variables; // TDirectory* vardir = (TDirectory*)file->Get( ""InputVariables_Id"" );; // TDirectory* vardir = TMVAGlob::GetInputVariablesDir( type );; // if (vardir==0) return;; // TDirectory* corrdir = TMVAGlob::GetCorrelationPlotsDir( type, vardir );; // if (corrdir==0) return;; // get all titles of the method rulefit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/rulevisCorr.cxx:43,variab,variables,43,tmva/tmvagui/src/rulevisCorr.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/rulevisCorr.cxx,1,['variab'],['variables']
Modifiability,"// get variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx:7,variab,variables,7,roofit/histfactory/test/stressHistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/test/stressHistFactory.cxx,1,['variab'],['variables']
Modifiability,"// getNumBases() seems to only give us the number of direct bases, and not the; // total. This function tells us if we inherit from anybody that uses MI, or if; // we have a non-primary base class, which uses the multiple inheritance model.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp:119,inherit,inherit,119,interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/MicrosoftCXXABI.cpp,2,['inherit'],"['inherit', 'inheritance']"
Modifiability,// getStructOrErr() cannot copy the variable-length seg_info_offset array.; // Its elements must be byte swapped manually.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h:36,variab,variable-length,36,interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/BinaryFormat/MachO.h,1,['variab'],['variable-length']
Modifiability,"// getTemplateInstantiationArgs picks up the non-deduced version of the; // template args when this is a variable template partial specialization and; // not class-scope explicit specialization, so replace with Deduced Args; // instead of adding to inner-most.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp:105,variab,variable,105,interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaTemplateDeduction.cpp,1,['variab'],['variable']
Modifiability,"// getting number of variables and variable names from loader",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,variab,variables,21,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,12,['variab'],"['variable', 'variables']"
Modifiability,"// given variables b, compute a <- a + alpha b,; // where a are the variables in this class",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:9,variab,variables,9,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,2,['variab'],['variables']
Modifiability,"// glibc, bionic, and Fuchsia have a special slot for the stack guard in; // tcbhead_t; use it instead of the usual global variable (see; // sysdeps/{i386,x86_64}/nptl/tls.h)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp:123,variab,variable,123,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLoweringCall.cpp,1,['variab'],['variable']
Modifiability,"// global accessor; //; // Adapts a TRandom random number generator to the interface of the ones in the; // standard library (STL) so that TRandom derived generators can be used with; // STL algorithms such as `std::shuffle`.; //; // Example:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // TRandom3StdEngine rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //; // Or at a lower level:; // ```; // std::vector<double> v {0, 1, 2, 3, 4, 5};; // RandomGenerator<TRandom3> rng(seed);; // std::shuffle(v.begin(), v.end(), rng);; // ```; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:27,Adapt,Adapts,27,tmva/tmva/inc/TMVA/Tools.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h,1,['Adapt'],['Adapts']
Modifiability,"// global data variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx:15,variab,variables,15,math/genvector/test/stress2D.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/stress2D.cxx,5,['variab'],['variables']
Modifiability,"// global test variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx:15,variab,variable,15,test/stressMathCore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressMathCore.cxx,1,['variab'],['variable']
Modifiability,"// global variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx:10,variab,variables,10,hist/hist/test/test_THBinIterator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_THBinIterator.cxx,1,['variab'],['variables']
Modifiability,"// hack - this is drawn twice now:; // once by DrawPosteriorKeysPdf (which also configures things and sets; // the title), and once again here so the shading shows up behind.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:80,config,configures,80,roofit/roostats/src/MCMCIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx,1,['config'],['configures']
Modifiability,"// handle ${foo}bar as $foo by detecting whether the character following; // the dollar sign is a curly brace. If so, advance VarEnd and DollarPos; // so the variable name does not contain the leading curly brace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp:158,variab,variable,158,interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/AsmWriterInst.cpp,1,['variab'],['variable']
Modifiability,"// hardcopy of input variables (necessary because they are update later)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:21,variab,variables,21,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,// hasFP - Return true if the specified function should have a dedicated frame; // pointer register. This is true if the function has variable sized allocas or; // if frame pointer elimination is disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp:134,variab,variable,134,interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Sparc/SparcFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// hasFP - Return true if the specified function should have a dedicated frame; // pointer register. This is true if the function has variable sized allocas,; // if it needs dynamic stack realignment, if frame pointer elimination is; // disabled, or if the frame address is taken.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFrameLowering.cpp:134,variab,variable,134,interpreter/llvm-project/llvm/lib/Target/Mips/MipsFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsFrameLowering.cpp,1,['variab'],['variable']
Modifiability,// hasFP - Return true if the specified function should have a dedicated frame; // pointer register. This is true if the function has variable sized allocas; // or if frame pointer elimination is disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp:134,variab,variable,134,interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/VE/VEFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// hasFP should be accurate for entry functions even before the frame is; // finalized, because it does not rely on the known stack size, only; // properties like whether variable sized objects are present.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp:171,variab,variable,171,interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/SIISelLowering.cpp,1,['variab'],['variable']
Modifiability,// helper variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:10,variab,variables,10,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,11,['variab'],['variables']
Modifiability,"// here copy the string from text buffer to return variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEditor.cxx:51,variab,variable,51,gui/gui/src/TGTextEditor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGTextEditor.cxx,2,['variab'],['variable']
Modifiability,"// here copy the string from text buffer to return variable; // coverity[secure_coding]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGInputDialog.cxx:51,variab,variable,51,gui/gui/src/TGInputDialog.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGInputDialog.cxx,2,['variab'],['variable']
Modifiability,"// here copy the string from text buffer to return variable; // see TFitEditor.cxx for the maximum length:; // char variables[256] = {0}; char cuts[256] = {0};",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TTreeInput.cxx:51,variab,variable,51,gui/fitpanel/src/TTreeInput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/fitpanel/src/TTreeInput.cxx,4,['variab'],"['variable', 'variables']"
Modifiability,"// here some bin contents are written into variables to make the error; // calculation a little more legible:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:43,variab,variables,43,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['variab'],['variables']
Modifiability,"// hidden layers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:10,layers,layers,10,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['layers'],['layers']
Modifiability,"// histograms for variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:18,variab,variables,18,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variables']
Modifiability,"// hmm now you have a problem, as you do not want to mess with the original event variables; // (change them permanently) ... guess the only way is to add a 'fValuesRearranged' array,; // and living with the fact that it 'doubles' the Event size :(",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:82,variab,variables,82,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,1,['variab'],['variables']
Modifiability,"// how many variables are in the directory?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/CorrGui.cxx:12,variab,variables,12,tmva/tmvagui/src/CorrGui.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/CorrGui.cxx,2,['variab'],['variables']
Modifiability,"// http://man7.org/linux/man-pages/man7/inotify.7.html; // Some systems cannot read integer variables if they are not; // properly aligned. On other systems, incorrect alignment may; // decrease performance. Hence, the buffer used for reading from; // the inotify file descriptor should have the same alignment as; // struct inotify_event.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:92,variab,variables,92,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,1,['variab'],['variables']
Modifiability,// https://github.com/wbkd/d3-extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/etc/notebook/JsMVA/js/NeuralNetwork.js:30,extend,extended,30,etc/notebook/JsMVA/js/NeuralNetwork.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/etc/notebook/JsMVA/js/NeuralNetwork.js,1,['extend'],['extended']
Modifiability,"// i.e. gauss kernel; //; // this is going to be done for both (nonadaptive KDE and adaptive KDE); // for nonadaptive KDE this is the only = final thing to do; // for adaptive KDE this is going to be used in the first (hidden) iteration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:84,adapt,adaptive,84,tmva/tmva/src/KDEKernel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx,2,['adapt'],['adaptive']
Modifiability,// i1 arguments are zero-extended to i8 by the caller. Emit a; // hint to reflect this.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:25,extend,extended,25,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,2,['extend'],['extended']
Modifiability,"// i1 cond ? i1 x : i1 C --> C + (i1 cond ? (i1 x - i1 C) : i1 0); // --> C + (umin_seq cond, x - C); //; // i1 cond ? i1 C : i1 x --> C + (i1 cond ? i1 0 : (i1 x - i1 C)); // --> C + (i1 ~cond ? (i1 x - i1 C) : i1 0); // --> C + (umin_seq ~cond, x - C); // FIXME: while we can't legally model the case where both of the hands; // are fully variable, we only require that the *difference* is constant.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp:341,variab,variable,341,interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/ScalarEvolution.cpp,1,['variab'],['variable']
Modifiability,// i1 is a special case because SDAG i1 true is naturally zero extended; // when widened using ANYEXT. We need to do it explicitly here.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp:63,extend,extended,63,interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/GISel/AArch64CallLowering.cpp,1,['extend'],['extended']
Modifiability,// i1 was sign extended we can use X86ISD::CVT2MASK.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:15,extend,extended,15,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// i8->i16 doesn't exist in the autogenerated isel table. Need to sign; // extend to 32-bits and then extract down to 16-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:75,extend,extend,75,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['extend'],['extend']
Modifiability,// i8->i16 doesn't exist in the autogenerated isel table. Need to zero; // extend to 32-bits and then extract down to 16-bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp:75,extend,extend,75,interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86FastISel.cpp,1,['extend'],['extend']
Modifiability,"// if (!leaf->InheritsFrom(TLeafObject::Class()) ) {; // If the leaf that we found so far is not a TLeafObject then there is; // nothing we would be able to do.; // Error(""DefinedVariable"",""Need a TLeafObject to call a function!"");; // return -1;; //}; // We need to recover the info not used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:14,Inherit,InheritsFrom,14,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// if (opts.Contains(""vartransform"")) Log() << kFATAL << ""It is not possible to use boost in conjunction with variable transform. Please remove either Boost_Num or VarTransform from the option string""<< methodTitle<<Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx:110,variab,variable,110,tmva/tmva/src/MethodBoost.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBoost.cxx,1,['variab'],['variable']
Modifiability,"// if (shape1->InheritsFrom(TGeoPcon::Class())) {; // CleanPoints(points1, numPoints1);; // fBuff1->SetRawSizes(numPoints1, 3*numPoints1,0, 0, 0, 0);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:15,Inherit,InheritsFrom,15,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// if (shape2->InheritsFrom(TGeoPcon::Class())) {; // CleanPoints(points2, numPoints2);; // fBuff1->SetRawSizes(numPoints2, 3*numPoints2,0,0,0,0);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx:15,Inherit,InheritsFrom,15,geom/geompainter/src/TGeoChecker.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geompainter/src/TGeoChecker.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// if E is a til::Variable, update its clangDecl.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp:18,Variab,Variable,18,interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafetyCommon.cpp,1,['Variab'],['Variable']
Modifiability,"// if `T == TH1D` Eventually calls TH1::ExtendAxis that creates new instances of TH1D",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RMergeableValue.hxx:40,Extend,ExtendAxis,40,tree/dataframe/inc/ROOT/RDF/RMergeableValue.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/RMergeableValue.hxx,1,['Extend'],['ExtendAxis']
Modifiability,"// if enhanced step length is significantly better than the; // current alpha, make the enhanced step official, but maybe; // keep correcting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx:6,enhance,enhanced,6,math/quadp/src/TGondzioSolver.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx,2,['enhance'],['enhanced']
Modifiability,"// if extended, use an extended binding as the coef; // otherwise e.g. if adding a RooRealSumPdf the stacked histograms will be above the; // actual pdf histogram because the pdf histogram is just normalized down",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:6,extend,extended,6,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,2,['extend'],['extended']
Modifiability,"// if fixups present, make sure we don't insert too many nops that would; // later prevent an extender from being inserted.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCShuffler.cpp:94,extend,extender,94,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCShuffler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonMCShuffler.cpp,1,['extend'],['extender']
Modifiability,"// if immediate extender needed, add it in",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:16,extend,extender,16,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,1,['extend'],['extender']
Modifiability,"// if it's not a simple 'spectator' variable (0 or 1) that the categories are defined by; // (but rather some 'formula' (i.e. eta>0), then this formulas are stored in fCatTree and that; // one will be evaluated.. (the formulae return 'true' or 'false'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:36,variab,variable,36,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// if no converter set yet, create a default converter via the PluginManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TVirtualGeoConverter.cxx:63,Plugin,PluginManager,63,geom/geom/src/TVirtualGeoConverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TVirtualGeoConverter.cxx,1,['Plugin'],['PluginManager']
Modifiability,"// if no painter set yet, create a default painter via the PluginManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TVirtualGeoPainter.cxx:59,Plugin,PluginManager,59,geom/geom/src/TVirtualGeoPainter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TVirtualGeoPainter.cxx,3,['Plugin'],['PluginManager']
Modifiability,"// if no pdf is given in the constructor, we assume by default it can be extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h:73,extend,extended,73,roofit/roostats/inc/RooStats/NumEventsTestStat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/inc/RooStats/NumEventsTestStat.h,1,['extend'],['extended']
Modifiability,"// if no player set yet, create a default painter via the PluginManager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TVirtualTreePlayer.cxx:58,Plugin,PluginManager,58,tree/tree/src/TVirtualTreePlayer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/src/TVirtualTreePlayer.cxx,1,['Plugin'],['PluginManager']
Modifiability,"// if not, we should write in the attr_value variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:45,variab,variable,45,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['variab'],['variable']
Modifiability,"// if parameters was set, processing just means of closing parameters and variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx:74,variab,variables,74,sql/mysql/src/TMySQLStatement.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/sql/mysql/src/TMySQLStatement.cxx,1,['variab'],['variables']
Modifiability,"// if parent is a FlexibleInterpVar, change the value in that .",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:18,Flexible,FlexibleInterpVar,18,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Flexible'],['FlexibleInterpVar']
Modifiability,"// if pdf cannot be extended assume is then a counting experiment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:20,extend,extended,20,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['extend'],['extended']
Modifiability,"// if point is outside root, extend tree by adding new roots",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:29,extend,extend,29,math/mathcore/src/CDT/KDTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h,1,['extend'],['extend']
Modifiability,"// if redefining previously variable parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:28,variab,variable,28,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// if scanindex is 0 then we have a name index thus a variable; // array (or TClonesArray!).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx:54,variab,variable,54,tree/treeplayer/src/TTreeFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormula.cxx,1,['variab'],['variable']
Modifiability,"// if structure fsumw2 is created extend it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx:34,extend,extend,34,hist/hist/src/TH2Poly.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2Poly.cxx,1,['extend'],['extend']
Modifiability,"// if the enhanced step length is actually 1, make it official; // and stop correcting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx:10,enhance,enhanced,10,math/quadp/src/TGondzioSolver.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TGondzioSolver.cxx,1,['enhance'],['enhanced']
Modifiability,"// if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:37,extend,extendable,37,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,2,['extend'],['extendable']
Modifiability,"// if the source and dest are the same type, we can drop both the extend; // and the truncate.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,extend,extend,66,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// if the source is smaller than the dest, we still need an extend.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,extend,extend,60,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['extend'],['extend']
Modifiability,"// if the variable is neither in the variables nor in the spectators, we abort",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:10,variab,variable,10,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// if there are too many input variables, the creation of correlations plots blows up; // memory and basically kills the TMVA execution; // --> avoid above critical number (which can be user defined)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:31,variab,variables,31,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variables']
Modifiability,"// if there is a string between %%, this is an environment; // variable (e.g. %ROOTSYS%), so let's try to resolve it; // and replace it with the real path",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:63,variab,variable,63,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['variab'],['variable']
Modifiability,"// if there's no variable transformation for this classifier, just hand back the; // event collection of the data set",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:17,variab,variable,17,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variable']
Modifiability,"// if variable widths are computed then rescale variable in this event; // to same widths as events in stored kd-tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:6,variab,variable,6,tmva/tmva/src/ModulekNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx,2,['variab'],['variable']
Modifiability,"// if variables have to arranged (as it is the case for the; // composite classifier) the number of the variables changes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:6,variab,variables,6,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,4,['variab'],['variables']
Modifiability,"// if we've moved, set the values of the variables in the PDF to the; // corresponding values of the variables in x, according to the; // mappings (i.e. let the variables in x set the given values for the; // PDF that will generate xPrime)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx:41,variab,variables,41,roofit/roostats/src/PdfProposal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/PdfProposal.cxx,3,['variab'],['variables']
Modifiability,"// if( TMath::Abs(vmax[ivar]-vmin[ivar]) <= FLT_MIN ); // Log() << kWARNING << ""Spectator variable "" << dsi.GetSpectatorInfo(ivar).GetExpression().Data() << "" is constant."" << Endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:90,variab,variable,90,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variable']
Modifiability,"// if(o->InheritsFrom(""RooProduct"")) return ""TH1D"";",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:9,Inherit,InheritsFrom,9,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Inherit'],['InheritsFrom']
Modifiability,"// ifdef __cplusplus; // TODO: pick up from llvm-config --cxxflags",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.h:49,config,config,49,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.h,1,['config'],['config']
Modifiability,// iff we only need the sign bit then we can use the source directly.; // TODO: generalize where we only demand extended signbits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:112,extend,extended,112,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extended']
Modifiability,// ignore drawing if projection not configured,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:36,config,configured,36,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configured']
Modifiability,"// implement filling of projected histogram; // outbin is bin number of outAxis (the projected axis). Loop is done on all bin of TH2 histograms; // inbin is the axis being integrated. Loop is done only on the selected bins; // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:261,extend,extendable,261,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,2,['extend'],['extendable']
Modifiability,"// implementation is adapted from clangJIT; // (https://github.com/hfinkel/llvm-project-cxxjit/blob/cxxjit/clang/lib/CodeGen/JIT.cpp); // void *resolveFunction(const void *NTTPValues, const char **TypeStrings,; // unsigned Idx); // The outer header of the fat binary is documented in the CUDA; // fatbinary.h header. As mentioned there, the overall size must be a; // multiple of eight, and so we must make sure that the PTX is.; // We also need to make sure that the buffer is explicitly null; // terminated (cuobjdump, at least, seems to assume that it is).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp:21,adapt,adapted,21,interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/IncrementalCUDADeviceCompiler.cpp,1,['adapt'],['adapted']
Modifiability,"// implementation of FCN static function used internally by TFumili.; // Adapt IMultiGenFunction interface to TFumili FCN static function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:73,Adapt,Adapt,73,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['Adapt'],['Adapt']
Modifiability,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGenFunction interface to TMinuit FCN static function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:73,Adapt,Adapt,73,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['Adapt'],['Adapt']
Modifiability,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; // provided gradient.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:73,Adapt,Adapt,73,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['Adapt'],['Adapt']
Modifiability,// in C++ it is not error to take address of a register; // variable (c++03 7.1.1P3),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:60,variab,variable,60,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variable']
Modifiability,"// in case DynamicPath was extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx:27,extend,extended,27,core/unix/src/TUnixSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/unix/src/TUnixSystem.cxx,2,['extend'],['extended']
Modifiability,"// in case of [..] found, assume they specify all the variables. Use it to get function dimension",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:54,variab,variables,54,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// in case of array variables, add ""[]"" to the type string: e.g. F[]",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx:20,variab,variables,20,tmva/tmva/src/VariableInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableInfo.cxx,1,['variab'],['variables']
Modifiability,"// in case of autofit this will generate a configure; // event for the container and this will force the; // update of the TCanvas; //Layout();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx:43,config,configure,43,gui/gui/src/TRootCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TRootCanvas.cxx,1,['config'],['configure']
Modifiability,"// in case of dense layers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h:20,layers,layers,20,tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/TensorDataLoader.h,1,['layers'],['layers']
Modifiability,"// in case of transformation wrap objective function in a new transformation function; // and transform from external variables to internals ones type; // Transformations are supported only for gradient function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:118,variab,variables,118,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variables']
Modifiability,"// in the case of xbins given (rebinning in variable bins) ngroup is the new number of bins.; // and number of grouped bins is not constant.; // when looping for setting the contents for the new histogram we; // need to loop on all bins of original histogram. Set then ngroup=nbins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx:44,variab,variable,44,hist/hist/src/TProfile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfile.cxx,1,['variab'],['variable']
Modifiability,"// in the case that no variables are specified, add the default-variables from the original dsi",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:23,variab,variables,23,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,2,['variab'],['variables']
Modifiability,"// in the case that xbins is given (rebinning in variable bins), ngroup is; // the new number of bins and number of grouped bins is not constant.; // when looping for setting the contents for the new histogram we; // need to loop on all bins of original histogram. Then set ngroup=nbins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx:49,variab,variable,49,hist/hist/src/TH1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1.cxx,1,['variab'],['variable']
Modifiability,"// include a separate scope to avoid defining unique operator temp variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx:67,variab,variables,67,tmva/sofie/inc/TMVA/ROperator_Conv.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Conv.hxx,2,['variab'],['variables']
Modifiability,"// include the extended maximum likelihood term, if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx:15,extend,extended,15,roofit/roofitcore/src/RooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVar.cxx,2,['extend'],['extended']
Modifiability,"// include the extendedTerm, distributed evenly over the bins; // probably should be somehow dependent on data density though (i.e. bins with more data get more of it?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:15,extend,extendedTerm,15,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extendedTerm']
Modifiability,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:134,Adapt,Adapt,134,math/mathmore/test/testSpecFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx,1,['Adapt'],['Adapt']
Modifiability,"// increment session Id to avoid clash in session variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx:50,variab,variable,50,tmva/sofie/test/TestSofieModels.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/test/TestSofieModels.cxx,1,['variab'],['variable']
Modifiability,// index 0 is a placeholder for undefined variables (aka phi-nodes).,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:42,variab,variables,42,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,1,['variab'],['variables']
Modifiability,"// index of the variable to sort on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h:16,variab,variable,16,tmva/tmva/inc/TMVA/BDTEventWrapper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BDTEventWrapper.h,1,['variab'],['variable']
Modifiability,"// index of the wanted variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:23,variab,variable,23,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variable']
Modifiability,"// induction variables, which are; // expected to start at zero and; // increment by one on each loop.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp:13,variab,variables,13,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopFlatten.cpp,1,['variab'],['variables']
Modifiability,"// inherit binning if we dont have one yet",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:3,inherit,inherit,3,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['inherit'],['inherit']
Modifiability,// inherit constructors,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:3,inherit,inherit,3,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,5,['inherit'],['inherit']
Modifiability,"// inherit default parameters from normSum; // Parameter names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:3,inherit,inherit,3,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['inherit'],['inherit']
Modifiability,// inherit the bitwidth value,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp:3,inherit,inherit,3,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelDAGToDAG.cpp,1,['inherit'],['inherit']
Modifiability,"// inherited interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h:3,inherit,inherited,3,hist/hist/inc/TBackCompFitter.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/TBackCompFitter.h,1,['inherit'],['inherited']
Modifiability,"// init configurable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:8,config,configurable,8,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,1,['config'],['configurable']
Modifiability,"// initial config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:11,config,config,11,math/mathmore/test/simanTSP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx,1,['config'],['config']
Modifiability,"// initialization of global matrices and vectors; // average value of each variables for S, B, S+B",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:75,variab,variables,75,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variables']
Modifiability,"// initialize first Keras. This is done only here when class has; // all state variable set from options or read from XML file; // Import Keras",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:79,variab,variable,79,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['variab'],['variable']
Modifiability,"// initialize internal sum-of-weights variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:38,variab,variables,38,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,2,['variab'],['variables']
Modifiability,"// initialize plugin manager early",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:14,plugin,plugin,14,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['plugin'],['plugin']
Modifiability,"// initialized only once as a static function variable; // Include ""RuntimePrintValue.h"" only on the first printing.; // This keeps the interpreter lightweight and reduces the startup time.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValuePrinter.cpp:46,variab,variable,46,interpreter/cling/lib/Interpreter/ValuePrinter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/ValuePrinter.cpp,1,['variab'],['variable']
Modifiability,"// initializing xmin and xmax for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:39,variab,variable,39,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// inject a FlexibleInterpVar ...; // get the list of clients BEFORE creating the new interpolation ... seems list of clients is inaccurate after",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:12,Flexible,FlexibleInterpVar,12,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['Flexible'],['FlexibleInterpVar']
Modifiability,"// insert new variable parameter in list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14,variab,variable,14,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// integrate again ADAPTIve, with different rule",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:19,ADAPT,ADAPTIve,19,math/mathmore/test/testGSLIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx,1,['ADAPT'],['ADAPTIve']
Modifiability,"// internal names and expressions of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:43,variab,variables,43,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,"// interpolate linearly between adjacent bins; // this is not useful for discrete variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:82,variab,variables,82,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['variab'],['variables']
Modifiability,"// invariant.start on memory location implies that the referenced memory; // location is constant and unchanging. This is no longer true after; // RewriteStatepointsForGC runs because there can be calls to gc.statepoint; // which frees the entire heap and the presence of invariant.start allows; // the optimizer to sink the load of a memory location past a statepoint,; // which is incorrect.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp:147,Rewrite,RewriteStatepointsForGC,147,interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/RewriteStatepointsForGC.cpp,1,['Rewrite'],['RewriteStatepointsForGC']
Modifiability,"// is the class selected; // is the global function, variable, enum selected - the behavior is different for linkdef.h and selection.xml - that's why; // we have two functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h:53,variab,variable,53,core/dictgen/res/SelectionRules.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/res/SelectionRules.h,1,['variab'],['variable']
Modifiability,"// is this variable being generated or taken from the prototype?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:11,variab,variable,11,roofit/roofitcore/src/RooAbsGenContext.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx,1,['variab'],['variable']
Modifiability,"// isImm0_4095Neg is used with 32-bit immediates only.; // 32-bit immediates are zero extended to 64-bit when parsed,; // thus simple -CE->getValue() results in a big negative number,; // not a small positive number as intended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp:86,extend,extended,86,interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/AsmParser/ARMAsmParser.cpp,1,['extend'],['extended']
Modifiability,"// isOperandImmEqual() will sign-extend to 64-bits, so should we.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:33,extend,extend,33,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,1,['extend'],['extend']
Modifiability,"// it is a variable from an array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:11,variab,variable,11,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variable']
Modifiability,"// it is sufficient to have a consistent label axis that can be extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:64,extend,extended,64,hist/hist/src/TH1Merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx,1,['extend'],['extended']
Modifiability,"// iterate over all variables in 'variables' and add them",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:20,variab,variables,20,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,2,['variab'],['variables']
Modifiability,"// iterate over the cache variables for this dataset",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx:26,variab,variables,26,roofit/roofitcore/src/RooTreeDataStore.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooTreeDataStore.cxx,1,['variab'],['variables']
Modifiability,"// iterate through all the rules; // we call this method only for genrefex variables, functions and enums - it is simpler than the class case:; // if we have No - it is veto even if we have explicit yes as well",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx:75,variab,variables,75,core/dictgen/src/SelectionRules.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/SelectionRules.cxx,3,['variab'],['variables']
Modifiability,"// jsPDF.API.events is a JS Array of Arrays; // where each Array is a pair of event name, handler; // Events were added by plugins to the jsPDF instantiator.; // These are always added to the new instance and some ran; // during instantiation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:123,plugin,plugins,123,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['plugin'],['plugins']
Modifiability,"// just add the alpha for the parameters of the FlexibleInterpVar function",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:48,Flexible,FlexibleInterpVar,48,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['Flexible'],['FlexibleInterpVar']
Modifiability,"// kTRUE if config file has master info",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofResourcesStatic.h:12,config,config,12,proof/proof/inc/TProofResourcesStatic.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofResourcesStatic.h,1,['config'],['config']
Modifiability,"// kTRUE if the columns has variable-length arrays",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:28,variab,variable-length,28,graf2d/fitsio/inc/TFITS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h,1,['variab'],['variable-length']
Modifiability,"// kTRUE if the file is in the sandbox",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofOutputFile.h:31,sandbox,sandbox,31,proof/proof/inc/TProofOutputFile.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/inc/TProofOutputFile.h,1,['sandbox'],['sandbox']
Modifiability,"// kbelasco: consider setting fDataEntry = fChain->get(); // to see if that makes it possible to get values of variables without; // doing string comparison",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx:111,variab,variables,111,roofit/roostats/src/MarkovChain.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MarkovChain.cxx,1,['variab'],['variables']
Modifiability,"// kbelasco: figure out how to set TGraph variable ranges",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx:42,variab,variable,42,roofit/roostats/src/MCMCIntervalPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/MCMCIntervalPlot.cxx,1,['variab'],['variable']
Modifiability,"// labels in h1 are set in alphabetic order; // by setting labels in h1 we make its axis extendable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:89,extend,extendable,89,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extendable']
Modifiability,"// labels variable transform type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:10,variab,variable,10,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// larger value test tolerance especially when using toys (difference of <~ 0.1 observed between using Minuit or; // Minuit2); // (inherited default value is 1e-3)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:131,inherit,inherited,131,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,2,['inherit'],['inherited']
Modifiability,"// layers",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx:3,layers,layers,3,tmva/tmva/src/MethodANNBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodANNBase.cxx,1,['layers'],['layers']
Modifiability,// let configure histogram titles - only for debug purposes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:7,config,configure,7,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['config'],['configure']
Modifiability,"// libxml2 assumes that attributes do not inherit default namespaces, whereas; // the original mt.exe does make this assumption. This function reconciles; // this by setting all attributes to have the inherited default namespace.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp:42,inherit,inherit,42,interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/WindowsManifest/WindowsManifestMerger.cpp,2,['inherit'],"['inherit', 'inherited']"
Modifiability,"// linear iterate over all the variables, create var1^exp1 ..vark^0",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPolyFunc.cxx:31,variab,variables,31,roofit/roofitcore/src/RooPolyFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPolyFunc.cxx,1,['variab'],['variables']
Modifiability,"// link (URL) configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h:14,config,configuration,14,html/inc/THtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h,1,['config'],['configuration']
Modifiability,// llvm-config is designed to support being run both from a development tree; // and from an installed path. We try and auto-detect which case we are in so; // that we can report the correct information when run from a development; // tree.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp:8,config,config,8,interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-config/llvm-config.cpp,1,['config'],['config']
Modifiability,"// llvm.vscale() can always be executed in larger type, because the; // value is automatically zero-extended.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp:100,extend,extended,100,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineCasts.cpp,1,['extend'],['extended']
Modifiability,"// llvm::Module cannot contain:; // * variables and parameters with dependent context;; // * mangled names for parameters;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:38,variab,variables,38,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['variab'],['variables']
Modifiability,// llvmGetPassPluginInfo should be resolved to the definition from the plugin; // we are currently loading.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:71,plugin,plugin,71,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,1,['plugin'],['plugin']
Modifiability,"// load gs:0 -> GS segment register.; // load fs:0 -> FS segment register.; //; // This optimization is generally valid because the GNU TLS model defines that; // gs:0 (or fs:0 on X86-64) contains its own address. However, for X86-64 mode; // with 32-bit registers, as we get in ILP32 mode, those registers are first; // zero-extended to 64 bits and then added it to the base address, which gives; // unwanted results when the register holds a negative value.; // For more information see http://people.redhat.com/drepper/tls.pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp:326,extend,extended,326,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelDAGToDAG.cpp,1,['extend'],['extended']
Modifiability,"// load plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGuiBuilder.cxx:8,plugin,plugin,8,gui/gui/src/TGuiBuilder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/gui/src/TGuiBuilder.cxx,2,['plugin'],['plugin']
Modifiability,"// load the plugin",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:12,plugin,plugin,12,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['plugin'],['plugin']
Modifiability,"// load the tree via the interpreter; // define a global ""tree"" variable for the same tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:64,variab,variable,64,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,2,['variab'],['variable']
Modifiability,"// local config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,config,config,9,roofit/roofitcore/inc/RooMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h,4,['config'],['config']
Modifiability,"// local config object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,config,config,9,roofit/roofitcore/inc/RooMinimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h,1,['config'],['config']
Modifiability,"// local variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx:9,variab,variables,9,geom/gdml/src/TGDMLWrite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/src/TGDMLWrite.cxx,2,['variab'],['variables']
Modifiability,"// local variables; // RooAbsData* data = fData; //fWS->data(fDataName);; // fill in implied variables given data",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx:9,variab,variables,9,roofit/roostats/src/FeldmanCousins.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FeldmanCousins.cxx,2,['variab'],['variables']
Modifiability,"// look for a special case of pointer to a class type (which is a builtin, but it; // is more useful to treat it polymorphically by allowing auto-downcasts)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx:113,polymorphi,polymorphically,113,bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Pythonize.cxx,1,['polymorphi'],['polymorphically']
Modifiability,"// look for variable in the DataHist, and if found, return the binning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx:12,variab,variable,12,roofit/histfactory/src/ParamHistFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/ParamHistFunc.cxx,1,['variab'],['variable']
Modifiability,"// looking for default variables defined in fVars",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:23,variab,variables,23,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// lookup the 2x2 covariance matrix elements for these variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx:55,variab,variables,55,roofit/roofitcore/src/RooFitResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitResult.cxx,1,['variab'],['variables']
Modifiability,// lookup which class implements the instance variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:46,variab,variable,46,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,3,['variab'],['variable']
Modifiability,// lookupMethod - Lookup a instance/class method in the protocol and protocols; // it inherited.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp:86,inherit,inherited,86,interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/DeclObjC.cpp,1,['inherit'],['inherited']
Modifiability,"// loop here until content is configured",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/rootqt5.cpp:30,config,configured,30,gui/qt5webdisplay/rootqt5.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/qt5webdisplay/rootqt5.cpp,2,['config'],['configured']
Modifiability,"// loop on j variables for not fixed i variables (forget that matrix is symmetric) - could be optimized",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:13,variab,variables,13,math/mathcore/src/MinimTransformFunction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx,2,['variab'],['variables']
Modifiability,"// loop on layers of filtered region",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx:11,layers,layers,11,tmva/sofie/inc/TMVA/ROperator_Pool.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Pool.hxx,1,['layers'],['layers']
Modifiability,"// loop over all discriminating variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:32,variab,variables,32,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,4,['variab'],['variables']
Modifiability,"// loop over input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:19,variab,variables,19,tmva/tmva/src/VariableNormalizeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx,3,['variab'],['variables']
Modifiability,"// loop over non-extended and extended fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx:17,extend,extended,17,roofit/roofitcore/test/testRooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx,4,['extend'],['extended']
Modifiability,"// loop over variable parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13,variab,variable,13,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// loop over variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx:13,variab,variables,13,tmva/tmva/src/MethodHMatrix.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodHMatrix.cxx,1,['variab'],['variables']
Modifiability,"// loop through all variables and parameters, filling in argSubstitutions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:20,variab,variables,20,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variables']
Modifiability,"// maddu and madd are unusual instructions in that on MIPS64 bits 63..31; // must be in canonical form, i.e. sign extended. For MIPS32, the operands; // of the multiply must have 32 or more sign bits, otherwise we cannot; // perform this optimization. We have to check this here as we're performing; // this optimization pre-legalization.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp:114,extend,extended,114,interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Mips/MipsISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// main plugin manager created in TROOT",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx:8,plugin,plugin,8,core/base/src/TPluginManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TPluginManager.cxx,1,['plugin'],['plugin']
Modifiability,"// make CUDA specific variables unique",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:22,variab,variables,22,interpreter/cling/lib/Interpreter/BackendPasses.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/BackendPasses.cpp,1,['variab'],['variables']
Modifiability,"// make a link to the inheritance tree (postscript)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx:22,inherit,inheritance,22,html/src/TClassDocOutput.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/src/TClassDocOutput.cxx,1,['inherit'],['inheritance']
Modifiability,"// make axis not extendable otherwise statistics in X will be set to zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:17,extend,extendable,17,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extendable']
Modifiability,"// make my snapshot which will contain a copy of the snapshot variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:62,variab,variables,62,roofit/roofitcore/src/ModelConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx,1,['variab'],['variables']
Modifiability,"// make sure is silent if wanted to; // init configurable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:45,config,configurable,45,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,2,['config'],['configurable']
Modifiability,"// make sure not to erase 'const' as part of the name: if it is; // connected, before or after, to a variable name, then keep it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TypeManip.cxx:101,variab,variable,101,bindings/pyroot/cppyy/CPyCppyy/src/TypeManip.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TypeManip.cxx,1,['variab'],['variable']
Modifiability,"// make sure we set the variables attached to this nll",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx:24,variab,variables,24,roofit/roostats/src/ProfileLikelihoodTestStat.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ProfileLikelihoodTestStat.cxx,3,['variab'],['variables']
Modifiability,"// make use of an oddity: enum global variables do not have their kIsStatic bit; // set, whereas enum global values do",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:38,variab,variables,38,bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx,1,['variab'],['variables']
Modifiability,"// map font-id to ttf-font-file; // Default fonts - for gl/eve, ""extended"" - for gl-pad",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLFontManager.h:65,extend,extended,65,graf3d/gl/inc/TGLFontManager.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/gl/inc/TGLFontManager.h,1,['extend'],['extended']
Modifiability,// map from name to global variable information,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h:27,variab,variable,27,interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/APINotes/APINotesFormat.h,1,['variab'],['variable']
Modifiability,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:21,variab,variables,21,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,4,['variab'],"['variable', 'variables']"
Modifiability,"// map the subset of variables used in randomised trees to the original variable number (used in the Event() ) ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:21,variab,variables,21,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,4,['variab'],"['variable', 'variables']"
Modifiability,"// mapAppendingVariable call can change AppendingInits if initalizer for; // the variable depends on another appending global, because of that inits; // need to be extracted and updated before the call.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp:81,variab,variable,81,interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/ValueMapper.cpp,1,['variab'],['variable']
Modifiability,// mapped_iterator - This is a simple iterator adapter that causes a function to; // be applied whenever operator* is invoked on the iterator.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h:47,adapt,adapter,47,interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/STLExtras.h,1,['adapt'],['adapter']
Modifiability,"// mapping from global variable index (the position in the vector); // to the new index in the subset of variables used by the; // composite classifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx:23,variab,variable,23,tmva/tmva/src/Event.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Event.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// mark as hesse succeeded, although need to look at covQual to see if was any good; /*for(auto f : *floatPars) {; auto v = dynamic_cast<RooRealVar*>(f);; if(v->hasRange(""backup"")) {; v->setRange(v->getMin(),v->getMax());; v->removeRange(""backup"");; }; }; _minimizer.fitter()->Config().SetParamsSettings(parSettings);*/; /*for (auto &ss : _minimizer.fitter()->Config().ParamsSettings()) {; if( ss.HasLowerLimit() || ss.HasUpperLimit() ) std::cout << ss.Name() << "" limit restored "" <<; ss.LowerLimit() << "" - "" << ss.UpperLimit() << std::endl;; }*/",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:277,Config,Config,277,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,2,['Config'],['Config']
Modifiability,"// mark the term as zero if any of the couplings are zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:39,coupling,couplings,39,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['coupling'],['couplings']
Modifiability,"// masked variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx:10,variab,variables,10,tmva/tmva/src/VariableRearrangeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableRearrangeTransform.cxx,2,['variab'],['variables']
Modifiability,"// match binop (extract_vector_elt V, 0), (extract_vector_elt V, 1) to; // reduce_op (extract_subvector [2 x VT] from V). This will form the; // root of our reduction tree. TODO: We could extend this to any two; // adjacent aligned constant indices if desired.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:188,extend,extend,188,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// mathtext - A TeX/LaTeX compatible rendering library. Copyright (C); // 2008-2012 Yue Shi Lai <ylai@users.sourceforge.net>; //; // This library is free software; you can redistribute it and/or; // modify it under the terms of the GNU Lesser General Public License; // as published by the Free Software Foundation; either version 2.1 of; // the License, or (at your option) any later version.; //; // This library is distributed in the hope that it will be useful, but; // WITHOUT ANY WARRANTY; without even the implied warranty of; // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; // Lesser General Public License for more details.; //; // You should have received a copy of the GNU Lesser General Public; // License along with this library; if not, write to the Free Software; // Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA; // 02110-1301 USA; // See also Knuth (1986), p. 447; /////////////////////////////////////////////////////////////////////; // TeX Font Parameters; // Following variables are derived from MathTime Professional II's; // mtpro2.sty",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h:1027,variab,variables,1027,graf2d/mathtext/src/table/mathfontparam.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/mathtext/src/table/mathfontparam.h,1,['variab'],['variables']
Modifiability,"// matrix of variables means: S, B, S+B vs. variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h:13,variab,variables,13,tmva/tmva/inc/TMVA/MethodFisher.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodFisher.h,2,['variab'],['variables']
Modifiability,"// maxDim[dim] = -2; // Index is calculated via a variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx:50,variab,variable,50,tree/treeplayer/src/TTreeProxyGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProxyGenerator.cxx,2,['variab'],['variable']
Modifiability,"// maximum number of nodes per variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:31,variab,variable,31,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,1,['variab'],['variable']
Modifiability,"// may be overwritten by derived classes; // ---------- main training and testing methods ------------------------------; // prepare tree branch with the method's discriminating variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:178,variab,variable,178,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// member data, multiple inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:25,inherit,inheritance,25,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['inherit'],['inheritance']
Modifiability,"// member data, single inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:23,inherit,inheritance,23,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['inherit'],['inheritance']
Modifiability,"// member data, virtual inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:24,inherit,inheritance,24,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['inherit'],['inheritance']
Modifiability,"// member function, multiple inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:29,inherit,inheritance,29,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['inherit'],['inheritance']
Modifiability,"// member function, single inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:27,inherit,inheritance,27,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['inherit'],['inheritance']
Modifiability,"// member function, virtual inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:28,inherit,inheritance,28,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,1,['inherit'],['inheritance']
Modifiability,"// member variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/inc/RooFitHS3/RooJSONFactoryWSTool.h:10,variab,variables,10,roofit/hs3/inc/RooFitHS3/RooJSONFactoryWSTool.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/inc/RooFitHS3/RooJSONFactoryWSTool.h,1,['variab'],['variables']
Modifiability,"// memset(P, 'x', 1234) -> splat('x'), even if x is a variable, and; // independently of what the offset is.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/VNCoercion.cpp:54,variab,variable,54,interpreter/llvm-project/llvm/lib/Transforms/Utils/VNCoercion.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/VNCoercion.cpp,1,['variab'],['variable']
Modifiability,"// method inheritaed from IFunction interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:10,inherit,inheritaed,10,math/mathmore/inc/Math/MultiNumGradFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h,1,['inherit'],['inheritaed']
Modifiability,"// method inherited from IFunction interface",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformFunction.h:10,inherit,inherited,10,math/mathcore/inc/Math/MinimTransformFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimTransformFunction.h,1,['inherit'],['inherited']
Modifiability,"// minuit variables -- commented out because they rely on a static pointer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h:10,variab,variables,10,tmva/tmva/inc/TMVA/MethodMLP.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodMLP.h,1,['variab'],['variables']
Modifiability,"// model for extended fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx:13,extend,extended,13,roofit/roofitcore/test/testRooAbsPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testRooAbsPdf.cxx,1,['extend'],['extended']
Modifiability,"// monitor a few more variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx:22,variab,variables,22,roofit/roostats/src/DetailedOutputAggregator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/DetailedOutputAggregator.cxx,1,['variab'],['variables']
Modifiability,"// most likely, was a variable; // Now check arguments.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp:22,variab,variable,22,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp,2,['variab'],['variable']
Modifiability,"// move ""external"" pointer to the next variable in the array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:39,variab,variable,39,tmva/tmva/src/DataSetInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx,1,['variab'],['variable']
Modifiability,// movq loads is a subset of reloc_riprel_4byte_relax_rex. It is a; // special case because COFF and Mach-O don't support ELF's more; // flexible R_X86_64_REX_GOTPCRELX relaxation.; // TODO: Support new relocation for REX2.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp:137,flexible,flexible,137,interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp,1,['flexible'],['flexible']
Modifiability,"// n0 - number of variable parameters in fit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx:18,variab,variable,18,math/fumili/src/TFumili.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumili.cxx,1,['variab'],['variable']
Modifiability,"// nElements should have at least 100; // const size_t nWorkers = TMVA::Config::Instance().GetNCpu();; // return (nElements > nWorkers) ? (int) nElements/nWorkers : 1;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h:72,Config,Config,72,tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h,1,['Config'],['Config']
Modifiability,"// name of variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h:11,variab,variable,11,tmva/tmva/inc/TMVA/Option.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Option.h,2,['variab'],['variable']
Modifiability,"// names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:19,variab,variables,19,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['variab'],['variables']
Modifiability,"// namespace Detail; // clang-format off; /**; \class ROOT::Experimental::RFieldBase; \ingroup NTuple; \brief A field translates read and write calls from/to underlying columns to/from tree values. A field is a serializable C++ type or a container for a collection of sub fields. The RFieldBase and its; type-safe descendants provide the object to column mapper. They map C++ objects to primitive columns. The; mapping is trivial for simple types such as 'double'. Complex types resolve to multiple primitive columns.; The field knows based on its type and the field name the type(s) and name(s) of the columns. Note: the class hierarchy starting at RFieldBase is not meant to be extended by user-provided child classes.; This is and can only be partially enforced through C++.; */; // clang-format on",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx:680,extend,extended,680,tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/inc/ROOT/RFieldBase.hxx,1,['extend'],['extended']
Modifiability,"// namespace HistFactory; /**; * \ingroup HistFactory; * main function of the hist2workspace executable.; * It creates RooFit models from an xml config and files with histograms.; * See MakeModelAndMeasurementFast(), for further instructions.; * \param[in] argc number of CLI arguments; * \param[in] argv pointer to arguments; *; * -h Help; * -v Switch HistFactory message stream to INFO level.; * -vv Switch HistFactory message stream to DEBUG level.; * -disable_binned_fit_optimization Disable the binned fit optimization used in HistFactory since ROOT 6.28.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/hist2workspace.cxx:145,config,config,145,roofit/histfactory/src/hist2workspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/hist2workspace.cxx,1,['config'],['config']
Modifiability,"// namespace Internal; /** An axis that can extend its range, keeping the number of its bins unchanged.; The axis is constructed with an initial range. Apart from its ability to; grow, this axis behaves like a RAxisEquidistant.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx:44,extend,extend,44,hist/histv7/inc/ROOT/RAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx,1,['extend'],['extend']
Modifiability,"// namespace Internal; /**; An axis with non-equidistant bins (also known as ""variable binning""). It is; defined by an array of bin borders - one more than the number of; (non-overflow-) bins it has! As an example, an axis with two bin needs three; bin borders:; - lower edge of the first bin;; - higher edge of the first bin, identical to the lower edge of the second; bin;; - higher edge of the second bin. This axis cannot grow; the size of new bins would not be well defined.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx:78,variab,variable,78,hist/histv7/inc/ROOT/RAxis.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/histv7/inc/ROOT/RAxis.hxx,1,['variab'],['variable']
Modifiability,"// namespace Internal; /// Special implementation of ROOT::RRangeCast for TCollection, including a; /// check that the cast target type inherits from TObject and a new constructor; /// that takes the TCollection by pointer.; /// \tparam T The new type to convert to.; /// \tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:136,inherit,inherits,136,core/cont/inc/TCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h,1,['inherit'],['inherits']
Modifiability,"// namespace Loc; //===----------------------------------------------------------------------===//; /// This class is used to track local variable information.; ///; /// Variables that have been optimized out hold the \c monostate alternative.; /// This is not distinguished from the case of a constructed \c DbgVariable; /// which has not be initialized yet.; ///; /// Variables can be created from allocas, in which case they're generated from; /// the MMI table. Such variables hold the \c Loc::MMI alternative which can; /// have multiple expressions and frame indices.; ///; /// Variables can be created from the entry value of registers, in which case; /// they're generated from the MMI table. Such variables hold the \c; /// EntryValueLoc alternative which can either have a single expression or; /// multiple *fragment* expressions.; ///; /// Variables can be created from \c DBG_VALUE instructions. Those whose; /// location changes over time hold a \c Loc::Multi alternative which uses \c; /// DebugLocListIndex and (optionally) \c DebugLocListTagOffset, while those; /// with a single location hold a \c Loc::Single alternative which use \c; /// ValueLoc and (optionally) a single \c Expr.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h:138,variab,variable,138,interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.h,7,"['Variab', 'variab']","['Variables', 'variable', 'variables']"
Modifiability,"// namespace ROOT; /// @brief TRangeDynCast is an adapter class that allows the typed iteration; /// through a TCollection.; ///; /// The typical use is:; /// ```{.cpp}; /// for(auto bcl : TRangeDynCast<TBaseClass>( *cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// for(auto bcl : TRangeDynCast<TBaseClass>( cl->GetListOfBases() )) {; /// if (!bcl) continue;; /// ... use bcl as a TBaseClass*; /// }; /// ```; /// \tparam T The new type to convert to.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h:50,adapt,adapter,50,core/cont/inc/TCollection.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/cont/inc/TCollection.h,1,['adapt'],['adapter']
Modifiability,"// namespace ROOT; /// This is a helper for an RDataFrame action, which fills RooFit data classes.; ///; /// \tparam DataSet_t Either RooDataSet or RooDataHist.; ///; /// To construct RooDataSet / RooDataHist within RDataFrame; /// - Construct one of the two action helpers RooDataSetHelper or RooDataHistHelper. Pass constructor arguments; /// to RooAbsDataHelper::RooAbsDataHelper() as for the original classes.; /// The arguments are forwarded to the actual data classes without any changes.; /// - Book the helper as an RDataFrame action. Here, the RDataFrame column types have to be passed as template; /// parameters.; /// - Pass the column names to the Book action. These are matched by position to the variables of the dataset.; /// If there is one more column name than variables in the dataset, the last columns values will be used as weights.; ///; /// All arguments passed to are forwarded to RooDataSet::RooDataSet() / RooDataHist::RooDataHist().; ///; /// #### Usage example:; /// ```; /// RooRealVar x(""x"", ""x"", -5., 5.);; /// RooRealVar y(""y"", ""y"", -50., 50.);; /// auto myDataSet = rdataframe.Book<double, double>(; /// RooDataSetHelper{""dataset"", // Name (directly forwarded to RooDataSet::RooDataSet()); /// ""Title of dataset"", // Title ( ~ "" ~ ); /// RooArgSet(x, y) }, // Variables to create in dataset; /// {""x"", ""y"", ""weight""} // Column names from RDataFrame; /// // (this example uses an additional column for the weight); /// );; ///; /// ```; /// \warning Variables in the dataset and columns in RDataFrame are **matched by position, not by name**.; /// This enables the easy exchanging of columns that should be filled into the dataset.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:710,variab,variables,710,roofit/roofitcore/inc/RooAbsDataHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h,4,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"// namespace RooFit; // Register this class with RooNumIntConfig; ////////////////////////////////////////////////////////////////////////////////; /// Register integrator plugins, their parameters and capabilities with RooNumIntFactory.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx:172,plugin,plugins,172,roofit/roofitcore/src/RooRombergIntegrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooRombergIntegrator.cxx,1,['plugin'],['plugins']
Modifiability,"// namespace ThreadSafetyTIL; // Nodes which declare variables; /// A named variable, e.g. ""x"".; ///; /// There are two distinct places in which a Variable can appear in the AST.; /// A variable declaration introduces a new variable, and can occur in 3 places:; /// Let-expressions: (Let (x = t) u); /// Functions: (Function (x : t) u); /// Self-applicable functions (SFunction (x) t); ///; /// If a variable occurs in any other location, it is a reference to an existing; /// variable declaration -- e.g. 'x' in (x * y + z). To save space, we don't; /// allocate a separate AST node for variable references; a reference is just a; /// pointer to the original declaration.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:53,variab,variables,53,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,8,"['Variab', 'variab']","['Variable', 'variable', 'variables']"
Modifiability,"// namespace detail; /// Constructs a simple \c RewriteRule. \c Edits can be an \c EditGenerator,; /// multiple \c ASTEdits, or a single \c ASTEdit.; /// @{",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h:48,Rewrite,RewriteRule,48,interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Tooling/Transformer/RewriteRule.h,1,['Rewrite'],['RewriteRule']
Modifiability,"// namespace detail; /// MacroExpansionContext tracks the macro expansions processed by the; /// Preprocessor. It means that it can track source locations from a single; /// translation unit. For every macro expansion it can tell you what text will; /// be substituted.; ///; /// It was designed to deal with:; /// - regular macros; /// - macro functions; /// - variadic macros; /// - transitive macro expansions; /// - macro redefinition; /// - unbalanced parenthesis; ///; /// \code{.c}; /// void bar();; /// #define retArg(x) x; /// #define retArgUnclosed retArg(bar(); /// #define BB CC; /// #define applyInt BB(int); /// #define CC(x) retArgUnclosed; ///; /// void unbalancedMacros() {; /// applyInt );; /// //^~~~~~~~~~^ is the substituted range; /// // Substituted text is ""applyInt )""; /// // Expanded text is ""bar()""; /// }; ///; /// #define expandArgUnclosedCommaExpr(x) (x, bar(), 1; /// #define f expandArgUnclosedCommaExpr; ///; /// void unbalancedMacros2() {; /// int x = f(f(1)) )); // Look at the parenthesis!; /// // ^~~~~~^ is the substituted range; /// // Substituted text is ""f(f(1))""; /// // Expanded text is ""((1,bar(),1,bar(),1""; /// }; /// \endcode; /// \remark Currently we don't respect the whitespaces between expanded tokens,; /// so the output for this example might differ from the -E compiler; /// invocation.; /// \remark All whitespaces are consumed while constructing the expansion.; /// After all identifier a single space inserted to produce a valid C; /// code even if identifier follows an other identifiers such as; /// variable declarations.; /// \remark MacroExpansionContext object must outlive the Preprocessor; /// parameter.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/MacroExpansionContext.h:1559,variab,variable,1559,interpreter/llvm-project/clang/include/clang/Analysis/MacroExpansionContext.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/MacroExpansionContext.h,1,['variab'],['variable']
Modifiability,// namespace detail; /// One of these variable length records is kept for each; /// selector containing more than one keyword. We use a folding set; /// to unique aggregate names (keyword selectors in ObjC parlance). Access to; /// this class is provided strictly through Selector.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h:38,variab,variable,38,interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Basic/IdentifierTable.h,1,['variab'],['variable']
Modifiability,// namespace vfs; /// The instrumentation (profile-instr-gen) pass for IR based PGO.; // We use this pass to create COMDAT profile variables for context; // sensitive PGO (CSPGO). The reason to have a pass for this is CSPGO; // can be run after LTO/ThinLTO linking. Lld linker needs to see; // all the COMDAT variables before linking. So we have this pass; // always run before linking for CSPGO.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h:131,variab,variables,131,interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/Transforms/Instrumentation/PGOInstrumentation.h,2,['variab'],['variables']
Modifiability,"// namespace; /** @fn RooStats::ModelConfig::createNLL(); *; * Wrapper around RooAbsPdf::createNLL(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * The options taken from the ModelConfig are:; *; * * ConditionalObservables(); * * GlobalObservables(); * * ExternalConstraints(); *; * Except for the options above, you can still pass all the other command; * arguments supported by RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:128,config,configuration,128,roofit/roofitcore/src/ModelConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx,1,['config'],['configuration']
Modifiability,// namespace; /** Construct a RooNLLVarNew; \param name the name; \param title the title; \param pdf The pdf for which the nll is computed for; \param observables The observabes of the pdf; \param isExtended Set to true if this is an extended fit; **/,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.cxx:234,extend,extended,234,roofit/roofitcore/src/RooNLLVarNew.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooNLLVarNew.cxx,1,['extend'],['extended']
Modifiability,"// namespace; /** \class MinuitFcnGrad; *; * \brief Minuit-RooMinimizer interface which synchronizes parameter data and coordinates evaluation of likelihood; * (gradient) values; *; * This class provides an interface between RooFit and Minuit. It synchronizes parameter values from Minuit, calls; * calculator classes to evaluate likelihood and likelihood gradient values and returns them to Minuit. The Wrapper; * objects do the actual calculations. These are constructed inside the MinuitFcnGrad constructor using the RooAbsL; * likelihood passed in to the constructor, usually directly from RooMinimizer, with which this class is intimately; * coupled, being a RooAbsMinimizerFcn implementation. MinuitFcnGrad inherits from ROOT::Math::IMultiGradFunction as; * well, which allows it to be used as the FCN and GRAD parameters Minuit expects.; *; * \note The class is not intended for use by end-users. We recommend to either use RooMinimizer with a RooAbsL derived; * likelihood object, or to use a higher level entry point like RooAbsPdf::fitTo() or RooAbsPdf::createNLL().; */; /// \param[in] absL The input likelihood.; /// \param[in] context RooMinimizer that creates and owns this class.; /// \param[in] parameters The vector of ParameterSettings objects that describe the parameters used in the Minuit; /// \param[in] likelihoodMode Lmode; /// \param[in] likelihoodGradientMode Lgrad; /// \param[in] verbose true for verbose output; /// Fitter. Note that these must match the set used in the Fitter used by \p context! It can be passed in from; /// RooMinimizer with fitter()->Config().ParamsSettings().",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx:713,inherit,inherits,713,roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/MinuitFcnGrad.cxx,2,"['Config', 'inherit']","['Config', 'inherits']"
Modifiability,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:92,variab,variable,92,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,3,['variab'],"['variable', 'variables']"
Modifiability,// namespace; // Add new local variables to the variable map,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp:31,variab,variables,31,interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/ThreadSafety.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// namespace; // Check the validity of the provided variable list for the provided clause kind; // \a CKind. In the check process the valid expressions, mappable expression; // components, variables, and user-defined mappers are extracted and used to; // fill \a ProcessedVarList, \a VarComponents, \a VarBaseDeclarations, and \a; // UDMapperList in MVLI. \a MapType, \a IsMapTypeImplicit, \a MapperIdScopeSpec,; // and \a MapperId are expected to be valid if the clause kind is 'map'.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp:52,variab,variable,52,interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaOpenMP.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,// namespace; // Map token string to extended OMP token kind that are; // OpenMPDirectiveKind + OpenMPDirectiveKindEx.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp:37,extend,extended,37,interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Parse/ParseOpenMP.cpp,1,['extend'],['extended']
Modifiability,// namespace; // Register the JSONCompilationDatabasePlugin with the; // CompilationDatabasePluginRegistry using this statically initialized variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/JSONCompilationDatabase.cpp:141,variab,variable,141,interpreter/llvm-project/clang/lib/Tooling/JSONCompilationDatabase.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Tooling/JSONCompilationDatabase.cpp,1,['variab'],['variable']
Modifiability,// namespace; // Return true if the ABI requires Ty to be passed sign- or zero-; // extended to 32/64 bits.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:84,extend,extended,84,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,1,['extend'],['extended']
Modifiability,// namespace; // The actual implementation of the lazy analysis and update. Note that the; // inheritance from LazyValueInfoCache is intended to be temporary while; // splitting the code and then transitioning to a has-a relationship.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp:94,inherit,inheritance,94,interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/LazyValueInfo.cpp,1,['inherit'],['inheritance']
Modifiability,"// namespace; // Try to collect variable and constant offsets for \p GEP, partly traversing; // nested GEPs. Returns an OffsetResult with nullptr as BasePtr of collecting; // the offset fails.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp:32,variab,variable,32,interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/ConstraintElimination.cpp,1,['variab'],['variable']
Modifiability,// namespace; /// Check whether the given argument is a block which captures a; /// variable.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:84,variab,variable,84,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,// namespace; /// Consider whether capturing the given variable can possibly lead to; /// a retain cycle.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp:55,variab,variable,55,interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaChecking.cpp,1,['variab'],['variable']
Modifiability,"// namespace; /// Implementation of RooAbsCollection::snapshot() with some extra parameters.; /// to be used in other RooHelpers functions.; /// param[in] input The input collection.; /// param[in] output The output collection.; /// param[in] deepCopy If the whole computation graph should be cloned recursively.; /// param[in] observables If this is not a nullptr, only the fundamental; /// variables that are in observables are deep cloned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitImplHelpers.cxx:392,variab,variables,392,roofit/roofitcore/src/RooFitImplHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooFitImplHelpers.cxx,1,['variab'],['variables']
Modifiability,"// namespace; /// Look for patterns like; /// %outer.cond = select i1 %inner.cond, i1 %alt.cond, i1 false; /// %inner.sel = select i1 %inner.cond, i8 %inner.sel.t, i8 %inner.sel.f; /// %outer.sel = select i1 %outer.cond, i8 %outer.sel.t, i8 %inner.sel; /// and rewrite it as; /// %inner.sel = select i1 %cond.alternative, i8 %sel.outer.t, i8 %sel.inner.t; /// %sel.outer = select i1 %cond.inner, i8 %inner.sel, i8 %sel.inner.f",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp:261,rewrite,rewrite,261,interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp,1,['rewrite'],['rewrite']
Modifiability,"// namespace; /// Mark any declarations that appear within this expression or any; /// potentially-evaluated subexpressions as ""referenced"".; ///; /// \param SkipLocalVariables If true, don't mark local variables as; /// 'referenced'.; /// \param StopAt Subexpressions that we shouldn't recurse into.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp:203,variab,variables,203,interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaExpr.cpp,1,['variab'],['variables']
Modifiability,"// namespace; //////////////////////////////////////////////////////////////////////////////////; /// Calculate and return likelihood on subset of data from firstEvent to lastEvent; /// processed with a step size of 'stepSize'. If this an extended likelihood and; /// and the zero event is processed the extended term is added to the return; /// likelihood.; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooUnbinnedL.cxx:239,extend,extended,239,roofit/roofitcore/src/TestStatistics/RooUnbinnedL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/RooUnbinnedL.cxx,2,['extend'],['extended']
Modifiability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Construct a two-dimensional RooPlot with ranges and properties taken; /// from variables var1 and var2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx:179,variab,variables,179,roofit/roofitcore/src/RooPlot.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooPlot.cxx,1,['variab'],['variables']
Modifiability,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Write code for a 'baseName' implementation with class name 'className',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral. Skeleton code for internal event generation is added; /// if hasIntGen is true; ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:510,variab,variables,510,roofit/roofitcore/src/RooClassFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx,1,['variab'],['variables']
Modifiability,"// nbins[0] = number of bins for signal distributions. It depends on the number of entries, thus it's the same for all the input variables, but it isn't necessary for some ""weird"" reason.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx:129,variab,variables,129,tmva/tmva/src/VariableGaussTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableGaussTransform.cxx,1,['variab'],['variables']
Modifiability,"// ncuts means that we need n+1 bins for each variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:46,variab,variable,46,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// need TFile::Open to load plugins if need be",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx:28,plugin,plugins,28,tree/treeplayer/src/TTreeProcessorMT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeProcessorMT.cxx,1,['plugin'],['plugins']
Modifiability,"// need an adapter from a multi-dim function to a one-dimensional",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:11,adapt,adapter,11,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['adapt'],['adapter']
Modifiability,"// need at least one variable; // NOTE: if sub-seed is zero then is the special case; // that count in xbitset is 1",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:21,variab,variable,21,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,3,['variab'],['variable']
Modifiability,"// need expPdf option while RooProjectedPdf doesn't support keeping things extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:75,extend,extended,75,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extended']
Modifiability,// need to create all layers again,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:22,layers,layers,22,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['layers'],['layers']
Modifiability,"// need to distinguish signal and background in case of variable transformation; // signal first",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:56,variab,variable,56,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['variab'],['variable']
Modifiability,"// need to fix param 0 , normalization in the unbinned fits; // fitter.Config().ParSettings(0).Fix();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx:71,Config,Config,71,math/minuit2/test/testNdimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx,3,['Config'],['Config']
Modifiability,"// need to loop on the map to find corresponding variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:49,variab,variable,49,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// need to name the variables dynamically, so please forgive the string manipulation and focus on values & ranges.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx:20,variab,variables,20,roofit/roostats/src/NumberCountingPdfFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NumberCountingPdfFactory.cxx,1,['variab'],['variables']
Modifiability,"// need to random variables flat in [0,1)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussRandomGen.h:18,variab,variables,18,math/minuit2/test/MnSim/GaussRandomGen.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/MnSim/GaussRandomGen.h,1,['variab'],['variables']
Modifiability,"// need to set variable map",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:15,variab,variable,15,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// needed because we don't have an extended pdf",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:35,extend,extended,35,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['extend'],['extended']
Modifiability,"// needed sum of weights and sum of weight square if likelkihood is extended",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:68,extend,extended,68,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['extend'],['extended']
Modifiability,"// needed to compute effective global weight in case of extended likelihood",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:56,extend,extended,56,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['extend'],['extended']
Modifiability,// needsFP - Return true if the specified function should have a dedicated frame; // pointer register. This is true if the function has variable sized allocas or; // if frame pointer elimination is disabled.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp:136,variab,variable,136,interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/PPCFrameLowering.cpp,1,['variab'],['variable']
Modifiability,"// negate the value of all the variables in this structure",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:31,variab,variables,31,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,1,['variab'],['variables']
Modifiability,"// new version of GetNData:; // Possible problem: we only allow one variable dimension so far.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormulaManager.cxx:68,variab,variable,68,tree/treeplayer/src/TTreeFormulaManager.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TTreeFormulaManager.cxx,1,['variab'],['variable']
Modifiability,"// new version with only 4 variables but n-parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx:27,variab,variables,27,test/TFormulaTests.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaTests.cxx,1,['variab'],['variables']
Modifiability,"// next, assign 1 to all the complementary variables, so that there; // are identities in the coefficient matrix when we do the solve.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpSolverBase.cxx:43,variab,variables,43,math/quadp/src/TQpSolverBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/src/TQpSolverBase.cxx,1,['variab'],['variables']
Modifiability,"// no keyword, ... user provided variable labels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:33,variab,variable,33,tmva/tmva/src/VariableTransformBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx,1,['variab'],['variable']
Modifiability,"// no match found try to parse as text showing the width; // support for input a formula where the variable 'x' is 'N' in the string; // use TFormula for the evaluation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx:99,variab,variable,99,tmva/tmva/src/MethodDL.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodDL.cxx,1,['variab'],['variable']
Modifiability,"// no need for PM in the adaptive case using Genz method (class is in MathCore)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:25,adapt,adaptive,25,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,1,['adapt'],['adaptive']
Modifiability,"// no recognized specification: try the plugin manager",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx:40,plugin,plugin,40,io/io/src/TFile.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/io/src/TFile.cxx,1,['plugin'],['plugin']
Modifiability,"// no transformation applied, replace by current variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:49,variab,variables,49,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['variab'],['variables']
Modifiability,"// no transformations; // workaround for transformations to complicated to be handled by makeclass; // count number of transformations with incomplete set of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx:158,variab,variables,158,tmva/tmva/src/VariableTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransform.cxx,1,['variab'],['variables']
Modifiability,"// non adaptive KDE",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx:7,adapt,adaptive,7,tmva/tmva/src/KDEKernel.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/KDEKernel.cxx,1,['adapt'],['adaptive']
Modifiability,"// non-adaptive bandwidth; // (default, and needed to calculate adaptive bandwidth)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:7,adapt,adaptive,7,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,2,['adapt'],['adaptive']
Modifiability,"// normal is not changed, only sign variable; // this.normal.multiplyScalar( -1 );; // this.w *= -1;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:36,variab,variable,36,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// normalise input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:19,variab,variables,19,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,"// normalization of the variable importances of this foam: the; // sum of all variable importances equals 1 for this foam",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:24,variab,variable,24,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,2,['variab'],['variable']
Modifiability,"// normalization of variable output",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h:20,variab,variable,20,tmva/tmva/inc/TMVA/Tools.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Tools.h,1,['variab'],['variable']
Modifiability,"// normalize result if requested according to bin volume; // we need to multiply by the bin volume (e.g. for variable bins histograms)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:109,variab,variable,109,math/mathcore/src/FitUtil.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx,1,['variab'],['variable']
Modifiability,"// normalizeWeight is a computeRegUnitWeights helper that adjusts the weight of; // a register and its subregisters so that they have the same weight as their; // UberSet. Self-recursion processes the subregister tree in postorder so; // subregisters are normalized first.; //; // Side effects:; // - creates new adopted register units; // - causes superregisters to inherit adopted units; // - increases the weight of ""singular"" units; // - induces recomputation of UberWeights.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp:367,inherit,inherit,367,interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/utils/TableGen/CodeGenRegisters.cpp,1,['inherit'],['inherit']
Modifiability,"// not a variable-sized array or the size branch is already there, nothing to do; // otherwise we must insert the size in colsWithoutAliases _and_ colsWithAliases",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:9,variab,variable-sized,9,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable-sized']
Modifiability,"// not-extended is not implemented in this case",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:7,extend,extended,7,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['extend'],['extended']
Modifiability,"// note ... it may be sufficient here to do:; // nll.constOptimizeTestStatistic(RooAbsArg::ConfigChange, constOptimize>1 /* do tracking too if >1 */); //; // trigger a re-evaluate of which nodes to cache-and-track nll.constOptimizeTestStatistic(RooAbsArg::ValueChange,; // constOptimize>1); // update the cache values -- is this needed??; // this forces the optimization to be redone; // for now leave as a reinitialize though, until had a chance to test this properly",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx:91,Config,ConfigChange,91,roofit/xroofit/src/xRooNLLVar.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNLLVar.cxx,1,['Config'],['ConfigChange']
Modifiability,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:43,extend,extendable,43,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extendable']
Modifiability,"// note in this test label axis (y) is not extendable because labels are matching the bins; // and we can test also the Mean and RMS; // reset stats so h2 will have a fake mean,stddev; // by setting labels in h1 we make its axis extendable and we get zero statistics in Y",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:43,extend,extendable,43,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['extend'],['extendable']
Modifiability,"// note that one variable is type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:17,variab,variable,17,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variable']
Modifiability,// note that the expr may (oddly) has multiple layers of parens; // example:; // *((..(pointer + 123)..)); // goal:; // pointer[123]; // Fix-It:; // remove '*('; // replace ' + ' with '['; // replace ')' with ']'; // example:; // *((..(123 + pointer)..)); // goal:; // 123[pointer]; // Fix-It:; // remove '*('; // replace ' + ' with '['; // replace ')' with ']',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:47,layers,layers,47,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['layers'],['layers']
Modifiability,"// note: making nll or profile class variables can only be done in the constructor; // as all other hooks are const (which has to be because GetHypoTest is const). However,; // when setting it only in constructor, they would have to be changed every time SetNullModel; // or SetAltModel is called. Simply put, converting them into class variables breaks; // encapsulation.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx:37,variab,variables,37,roofit/roostats/src/FrequentistCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/FrequentistCalculator.cxx,2,['variab'],['variables']
Modifiability,"// note: so far this method is inconsistent with the BuildHistogram in ways:; // no projection over other variables; // July2023: made RooRealSumPdf evaluate as a function if doesn't have a floor; // but this method will still evaluate it as a pdf (uses PdfWrapper); // but can get away with it while added NaN recovery to getSimplePropagatedError to pickup raw values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:106,variab,variables,106,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['variab'],['variables']
Modifiability,"// now as you know which variables you want to use, count and map them:; // such that you can use an array/matrix filled only with THOSE variables; // that you used",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:25,variab,variables,25,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,4,['variab'],['variables']
Modifiability,"// now check inheritance only for configured classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:13,inherit,inheritance,13,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,2,"['config', 'inherit']","['configured', 'inheritance']"
Modifiability,// now copy over the original instruction(the one we may have extended),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp:62,extend,extended,62,interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/MCTargetDesc/HexagonAsmBackend.cpp,1,['extend'],['extended']
Modifiability,"// now create the model config for this problem",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx:24,config,config,24,roofit/roofitcore/test/testWorkspace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/testWorkspace.cxx,2,['config'],['config']
Modifiability,"// now exclud the variables used in the Fisher cuts, and don't ; // use them anymore in the individual variable scan",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:18,variab,variables,18,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// now exclude the variables used in the Fisher cuts, and don't; // use them anymore in the individual variable scan",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:19,variab,variables,19,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// now read the event-values (variables and regression targets)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:30,variab,variables,30,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variables']
Modifiability,"// now sort the variables according to the best 'eff at Beff=0.10'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx:16,variab,variables,16,tmva/tmva/src/Classification.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Classification.cxx,2,['variab'],['variables']
Modifiability,"// now the question is whether to read the variables first or the options (well, of course the order; // of writing them needs to agree); //; // the option ""Decorrelation"" is needed to decide if the variables we; // read are decorrelated or not; //; // the variables are needed by some methods (TMLP) to build the NN; // which is done in ProcessOptions so for the time being we first Read and Parse the options then; // we read the variables, and then we process the options; // now read all options",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:43,variab,variables,43,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,4,['variab'],['variables']
Modifiability,"// now we compare the nodes at each level; // starting backwards since that enhances the probability of an early return",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPhysicalNode.cxx:76,enhance,enhances,76,geom/geom/src/TGeoPhysicalNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/src/TGeoPhysicalNode.cxx,1,['enhance'],['enhances']
Modifiability,"// now xmin[] and xmax[] contain upper/lower limits for every dimension; // copy xmin[], xmax[] values to the class variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:116,variab,variable,116,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variable']
Modifiability,"// null variables needed by the fits_read_col",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:8,variab,variables,8,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variables']
Modifiability,"// number of adaptive width iterations. Default is 1.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:13,adapt,adaptive,13,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['adapt'],['adaptive']
Modifiability,"// number of additional random numbers that need to be 'thrown away'; // every 24 numbers is set using fLuxury level variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:117,variab,variable,117,math/mathcore/src/TRandom1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx,1,['variab'],['variable']
Modifiability,"// number of bins in histos; // loop over all testing signal and BG events and clac minimal and; // maximal value of every variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:123,variab,variable,123,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variable']
Modifiability,"// number of bins in input variable histograms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:27,variab,variable,27,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// number of complementary primal-dual variables.; // these variables will be ""Used"" not copied",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h:39,variab,variables,39,math/quadp/inc/TQpVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpVar.h,2,['variab'],['variables']
Modifiability,"// number of elements in the cell we want to read, i.e.; // number of elements in the variable-length array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:86,variab,variable-length,86,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variable-length']
Modifiability,"// number of free variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:18,variab,variables,18,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variables']
Modifiability,"// number of input variable used by classifier",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:19,variab,variable,19,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// number of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:19,variab,variables,19,tmva/tmva/src/VariableNormalizeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx,1,['variab'],['variables']
Modifiability,"// number of layers (including input and output layers)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:13,layers,layers,13,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h,2,['layers'],['layers']
Modifiability,"// number of mirror points for this mirror configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:43,config,configuration,43,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['config'],['configuration']
Modifiability,"// number of nodes per layer (maximum 20 layers)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:41,layers,layers,41,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['layers'],['layers']
Modifiability,"// number of nodes per layer; // additional member variables for the independent NN::Evaluation phase",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h:51,variab,variables,51,tmva/tmva/inc/TMVA/MethodCFMlpANN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN.h,1,['variab'],['variables']
Modifiability,"// number of non-spectator variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx:27,variab,variables,27,tmva/tmva/inc/TMVA/RReader.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RReader.hxx,1,['variab'],['variables']
Modifiability,"// number of output dimensions for regression; // input for adaptive volume adjustment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h:60,adapt,adaptive,60,tmva/tmva/inc/TMVA/MethodPDERS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodPDERS.h,1,['adapt'],['adaptive']
Modifiability,"// number of variable parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx:13,variab,variable,13,hist/hist/src/TBackCompFitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TBackCompFitter.cxx,1,['variab'],['variable']
Modifiability,"// number of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h:13,variab,variables,13,tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyAdaBoost.h,5,['variab'],['variables']
Modifiability,"// number of variables or number of targets",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:13,variab,variables,13,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,2,['variab'],['variables']
Modifiability,"// offset is a 7-bit signed immediate, so sign extend it to; // fill the unsigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,"// offset is a 9-bit signed immediate, so sign extend it to; // fill the unsigned.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp:47,extend,extend,47,interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/Disassembler/AArch64Disassembler.cpp,1,['extend'],['extend']
Modifiability,"// old variable-counting method",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:7,variab,variable-counting,7,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['variab'],['variable-counting']
Modifiability,"// once classes can be extended, should consider re-use; for now, since derived; // python classes can differ in what they override, simply use different shims",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:23,extend,extended,23,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,1,['extend'],['extended']
Modifiability,// only HVX vgather instructions handled; // TODO: extend the pass to other vector load/store operations,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp:51,extend,extend,51,interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/HexagonOptAddrMode.cpp,1,['extend'],['extend']
Modifiability,// only extend nodes and decode shapes,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomViewer.controller.js:8,extend,extend,8,ui5/geom/controller/GeomViewer.controller.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/ui5/geom/controller/GeomViewer.controller.js,1,['extend'],['extend']
Modifiability,"// only optimze with selected variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:30,variab,variables,30,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variables']
Modifiability,"// only version 2.3 is latest multi-backend version.; // version 2.4 is just tf.keras and should not be used in standalone and will not work in this workflow; // see https://github.com/keras-team/keras/releases/tag/2.4.0; // for example variable keras.backend.tensorflow_backend will not exist anymore in keras 2.4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:237,variab,variable,237,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['variab'],['variable']
Modifiability,"// open the config file and go through it",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx:12,config,config,12,roofit/roostats/src/HLFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HLFactory.cxx,1,['config'],['config']
Modifiability,"// otherwise look at inheritance tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx:21,inherit,inheritance,21,core/meta/src/TClass.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/meta/src/TClass.cxx,2,['inherit'],['inheritance']
Modifiability,"// otherwise something is wrong; // std::cout << ""n variables "" << fVarIndices.size() << std::endl;; // std::ostream_iterator<int> oi(std::cout,"" "");; // std::copy(fVarIndices.begin(), fVarIndices.end(), oi);; // std::cout << std::endl;; // assert( fVarIndices.size() == fDim);; // std::cout << this << std::endl;; // set parameter values in fX",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:52,variab,variables,52,math/mathcore/inc/Math/WrappedParamFunction.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h,1,['variab'],['variables']
Modifiability,"// otherwise, it simply looks if ""variable == true"" (""greater 0.5 to be ""sure"" )",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:34,variab,variable,34,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// output style configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h:16,config,configuration,16,html/inc/THtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h,1,['config'],['configuration']
Modifiability,"// output variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx:10,variab,variable,10,roofit/roofitcore/src/BatchModeDataHelpers.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx,2,['variab'],['variable']
Modifiability,"// p3 has at least 2 ref-counts, as contrary to p2, it will create a descriptor; // copy for the method holding self in the case of __init__; but there can also; // be a reference held by the frame object, which is indistinguishable from a; // local variable reference, so the cut-off has to remain 2.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:250,variab,variable,250,bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx,1,['variab'],['variable']
Modifiability,"// painter is not necessary for batch canvas, but keep configuring it for a while",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx:55,config,configuring,55,gui/webgui6/src/TWebCanvas.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/webgui6/src/TWebCanvas.cxx,1,['config'],['configuring']
Modifiability,"// parameterized binning cannot be shared across instances",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:3,parameteriz,parameterized,3,roofit/roofitcore/inc/RooParamBinning.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h,1,['parameteriz'],['parameterized']
Modifiability,"// parameterized ranges may be full range now, but that might change,; // so return false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx:3,parameteriz,parameterized,3,roofit/roofitcore/src/RooHistPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooHistPdf.cxx,1,['parameteriz'],['parameterized']
Modifiability,"// parse config file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx:9,config,config,9,proof/proof/src/TProofCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx,1,['config'],['config']
Modifiability,"// parse config file to find working directory",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx:9,config,config,9,proof/proof/src/TProofServ.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofServ.cxx,1,['config'],['config']
Modifiability,"// parse things that follow the name of the histo between '(' and ')'.; // At this point hname contains the name of the specified histogram.; // Now the syntax is extended to handle an hname of the following format; // hname(nBIN [[,[xlow]][,xhigh]],...); // so enclosed in brackets is the binning information, xlow, xhigh, and; // the same for the other dimensions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx:163,extend,extended,163,tree/treeplayer/src/TSelectorDraw.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TSelectorDraw.cxx,1,['extend'],['extended']
Modifiability,// parseInstallNameToolOptions returns the config and sets the input arguments.; // If a help flag is set then parseInstallNameToolOptions will print the help; // messege and exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:43,config,config,43,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,1,['config'],['config']
Modifiability,// parseObjcopyOptions returns the config and sets the input arguments. If a; // help flag is set then parseObjcopyOptions will print the help messege and; // exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:35,config,config,35,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,1,['config'],['config']
Modifiability,// parseStripOptions returns the config and sets the input arguments. If a; // help flag is set then parseStripOptions will print the help messege and; // exit.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp:33,config,config,33,interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objcopy/ObjcopyOptions.cpp,1,['config'],['config']
Modifiability,"// path configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h:8,config,configuration,8,html/inc/THtml.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/html/inc/THtml.h,1,['config'],['configuration']
Modifiability,"// perform a likelihood fit on a set of binned data; // The fit is extended (Poisson logl_ by default",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:67,extend,extended,67,math/mathcore/src/Fitter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx,1,['extend'],['extended']
Modifiability,"// physical number of the dimension that is variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h:44,variab,variable,44,tree/treeplayer/inc/TFormLeafInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/inc/TFormLeafInfo.h,1,['variab'],['variable']
Modifiability,"// place the vector storing the variable-length array in the corresponding cell",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:32,variab,variable-length,32,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variable-length']
Modifiability,"// plot configurations",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:8,config,configurations,8,math/mathmore/test/simanTSP.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx,1,['config'],['configurations']
Modifiability,"// plot the variables once in this transformation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx:12,variab,variables,12,tmva/tmva/src/TransformationHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/TransformationHandler.cxx,1,['variab'],['variables']
Modifiability,"// plugin manager requires a string",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:3,plugin,plugin,3,math/mathcore/src/Integrator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx,1,['plugin'],['plugin']
Modifiability,// plugin-api.h requires HAVE_STDINT_H,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp:3,plugin,plugin-api,3,interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/gold/gold-plugin.cpp,1,['plugin'],['plugin-api']
Modifiability,"// pointer to condition variable implementation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TCondition.h:24,variab,variable,24,core/thread/inc/TCondition.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TCondition.h,1,['variab'],['variable']
Modifiability,"// pointer to string with environment variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:38,variab,variables,38,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,2,['variab'],['variables']
Modifiability,"// pointer to string with expanded environment variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:47,variab,variables,47,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,2,['variab'],['variables']
Modifiability,// positional attributes are only inherited from a parent to its first child,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:34,inherit,inherited,34,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['inherit'],['inherited']
Modifiability,// pre-SSE41 targets unpack lower lanes and then sign-extend using SRAI.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// precision we demand from the linear system solver. If it isn't; // attained on the first solve, we use iterative refinement and; // possibly refactorization with a higher value of kThresholdPivoting.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h:144,refactor,refactorization,144,math/matrix/inc/TDecompSparse.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h,1,['refactor'],['refactorization']
Modifiability,"// print a verbose summary of our configuration, if requested",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:34,config,configuration,34,roofit/roofitcore/src/RooAcceptReject.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx,1,['config'],['configuration']
Modifiability,"// print a warning if this variable is not the same one we; // already have",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:27,variab,variable,27,roofit/roofitcore/src/RooArgSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx,1,['variab'],['variable']
Modifiability,"// print general information and configuration state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:33,config,configuration,33,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['config'],['configuration']
Modifiability,"// prints classifier-specific help messages, dedicated to; // help with the optimisation and configuration options tuning.; // If no classifier name is given, help messages for all booked; // classifiers are printed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h:93,config,configuration,93,tmva/tmva/inc/TMVA/Factory.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Factory.h,1,['config'],['configuration']
Modifiability,"// private member variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h:18,variab,variables,18,tmva/tmva/inc/TMVA/TNeuron.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TNeuron.h,1,['variab'],['variables']
Modifiability,"// private variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:11,variab,variables,11,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['variab'],['variables']
Modifiability,"// probably should also remove any range on the x-axis variable too, if there is one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:55,variab,variable,55,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['variab'],['variable']
Modifiability,"// problem due to virtual inheritance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/LinkDef2.h:26,inherit,inheritance,26,math/mathcore/inc/LinkDef2.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/LinkDef2.h,1,['inherit'],['inheritance']
Modifiability,"// problem with call of REGISTER_METHOD macro ...; // ClassifierFactory::DestroyInstance();; // Types::DestroyInstance();; // Tools::DestroyInstance();; // Config::DestroyInstance();",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx:156,Config,Config,156,tmva/tmva/src/Factory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Factory.cxx,1,['Config'],['Config']
Modifiability,"// product matrices (x-<x>)(y-<y>) where x;y are variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:49,variab,variables,49,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variables']
Modifiability,"// product matrices (x-<x>)(y-<y>) where x;y are variables; // init",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx:49,variab,variables,49,tmva/tmva/src/MethodFisher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFisher.cxx,1,['variab'],['variables']
Modifiability,"// protected variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:13,variab,variables,13,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,1,['variab'],['variables']
Modifiability,"// proto.writeToFile((""results/model_""+channel+"".root"").c_str());; // fill out nuisance parameters in model config; // proto_config->GuessObsAndNuisance(*proto.data(""asimovData""));",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:108,config,config,108,roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx,1,['config'],['config']
Modifiability,"// put a cloned copy of scanned variable to set in the interval; // to avoid I/O problem of the Result class -; // make the set owning the cloned copy (use clone instead of Clone to not copying all links)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx:32,variab,variable,32,roofit/roostats/src/HypoTestInverterResult.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverterResult.cxx,1,['variab'],['variable']
Modifiability,"// query if variable is fixed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:12,variab,variable,12,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// r13_2 is not extendable, so if there are no extent bits, it's r13_2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cpp:16,extend,extendable,16,interpreter/llvm-project/llvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Hexagon/Disassembler/HexagonDisassembler.cpp,1,['extend'],['extendable']
Modifiability,"// range of variable in dataset may be less than in the workspace; // if e.g. generate for a specific channel. So need to expand ranges to match",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx:12,variab,variable,12,roofit/xroofit/src/xRooFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooFit.cxx,1,['variab'],['variable']
Modifiability,"// ranking of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h:20,variab,variables,20,tmva/tmva/inc/TMVA/MethodANNBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodANNBase.h,17,['variab'],['variables']
Modifiability,"// ranking of input variables (not available for cuts)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h:20,variab,variables,20,tmva/tmva/inc/TMVA/MethodCuts.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCuts.h,1,['variab'],['variables']
Modifiability,"// re-create output tree as we need to create its branches again, with new input variables; // TODO we could instead create the output tree and its branches, change addresses of input variables in each task",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx:81,variab,variables,81,tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx,2,['variab'],['variables']
Modifiability,"// read configuration from input stream",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx:8,config,configuration,8,tmva/tmva/src/MethodSVM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodSVM.cxx,1,['config'],['configuration']
Modifiability,"// read extrema of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:25,variab,variables,25,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,"// read first the variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:18,variab,variables,18,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variables']
Modifiability,"// read in the variable importances",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:15,variab,variable,15,tmva/tmva/inc/TMVA/RuleFitAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h,1,['variab'],['variable']
Modifiability,"// read number of layers (sum of: input + output + hidden)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:18,layers,layers,18,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['layers'],['layers']
Modifiability,"// read number of variables and classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx:18,variab,variables,18,tmva/tmva/src/MethodCFMlpANN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCFMlpANN.cxx,1,['variab'],['variables']
Modifiability,"// rec.SetField(""_more"", ""true"", kFALSE); // one could allow to extend",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx:64,extend,extend,64,net/httpsniff/src/TRootSnifferFull.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/httpsniff/src/TRootSnifferFull.cxx,1,['extend'],['extend']
Modifiability,"// reconnect any parameterized ranges to internal dataset observables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,parameteriz,parameterized,17,roofit/roofitcore/src/RooAbsData.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx,2,['parameteriz'],['parameterized']
Modifiability,"// reduce n here since unbinned adaptive is slow",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx:32,adapt,adaptive,32,hist/hist/test/test_tkde.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/test_tkde.cxx,1,['adapt'],['adaptive']
Modifiability,"// reduce number of variable parameters by one",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:20,variab,variable,20,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// refactor with a higher Threshold Pivoting parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:3,refactor,refactor,3,math/matrix/src/TDecompSparse.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx,1,['refactor'],['refactor']
Modifiability,// remap from lds global to a constantexpr gep to where it has been moved to; // for each kernel; // an array with an element for each kernel containing where the corresponding; // variable was remapped to,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp:181,variab,variable,181,interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AMDGPU/AMDGPULowerModuleLDSPass.cpp,1,['variab'],['variable']
Modifiability,"// remove TMVA:: from TObject name; // variables needed by JsMVA",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:39,variab,variables,39,tmva/tmva/inc/TMVA/FitterBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h,1,['variab'],['variables']
Modifiability,// remove all previous configurations,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:23,config,configurations,23,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,4,['config'],['configurations']
Modifiability,"// remove template constructor since is ambiguous; /** Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementing operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integration methods); */; // this is ambiguous; // template<class Function>; // IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; // fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; // SetFunction(f, dim);; // }; /// destructor",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h:156,adapt,adaptive,156,math/mathcore/inc/Math/IntegratorMultiDim.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorMultiDim.h,2,['adapt'],['adaptive']
Modifiability,"// remove the ""{.. }"" added around the variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:39,variab,variable,39,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,2,['variab'],['variable']
Modifiability,"// remove variable parameter from list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10,variab,variable,10,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// removeMatchingExtensions - Examines a subscript pair.; // If the source and destination are identically sign (or zero); // extended, it strips off the extension in an effect to simplify; // the actual analysis.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:126,extend,extended,126,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['extend'],['extended']
Modifiability,"// replace input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx:17,variab,variables,17,tmva/tmva/src/MethodFDA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodFDA.cxx,1,['variab'],['variables']
Modifiability,"// replace transformation print by current variables and indicated incompleteness",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:43,variab,variables,43,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['variab'],['variables']
Modifiability,"// replace {Vn} with variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:21,variab,variable,21,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// request for another variable parameter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:23,variab,variable,23,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variable']
Modifiability,"// require to be extended to be in coefficient-free mode ...; // otherwise would lose the integral of the sumPdf (can't think of way to have a coef be the integral)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:17,extend,extended,17,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extended']
Modifiability,"// reset member variables once again, if one at least setter failed",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx:16,variab,variables,16,core/base/src/TUri.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUri.cxx,1,['variab'],['variables']
Modifiability,"// reset static variables to automatic",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx:16,variab,variables,16,roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/TestStatistics/testLikelihoodGradientJob.cxx,7,['variab'],['variables']
Modifiability,"// reset the plot variable value to not disturb the original state",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,variab,variable,18,roofit/roofitcore/src/RooAbsReal.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx,1,['variab'],['variable']
Modifiability,"// reset variable map which was set it before",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:9,variab,variable,9,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// reset, otherwise setting the under/overflow will extend the axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h:52,extend,extend,52,hist/hist/src/TProfileHelper.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TProfileHelper.h,1,['extend'],['extend']
Modifiability,"// restore canvas and browser classes configured at the moment when gROOT->SetWebDisplay() was called for the first time; // This is necessary when SetWebDisplay() called several times and therefore current settings may differ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx:38,config,configured,38,core/base/src/TROOT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TROOT.cxx,1,['config'],['configured']
Modifiability,"// restore now the variables of snapshot in ws to their original values; // need to const cast since assign is not const (but in reality in just assign values and does not change the set); // and anyway the set is const",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:19,variab,variables,19,roofit/roofitcore/src/ModelConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx,1,['variab'],['variables']
Modifiability,"// resulting histogram will have the bigger range and the larger bin width; // eventually range is extended by half bin width to have correct bin boundaries; // of largest bin width histogram",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:99,extend,extended,99,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extended']
Modifiability,"// retrieve the first TTree; // (re-adapted from TEventIter.cxx)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TMPWorkerTree.cxx:36,adapt,adapted,36,tree/treeplayer/src/TMPWorkerTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeplayer/src/TMPWorkerTree.cxx,1,['adapt'],['adapted']
Modifiability,"// retrieve variable expressions (could be transformations)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:12,variab,variable,12,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,1,['variab'],['variable']
Modifiability,"// retrieve variable settings (all set info on the variable)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:12,variab,variable,12,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,4,['variab'],['variable']
Modifiability,"// retrieve variables, and transform, if required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:12,variab,variables,12,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['variab'],['variables']
Modifiability,// return 'true' if 'PI' is in the inheritance hierarchy of Proto,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp:35,inherit,inheritance,35,interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/AST/ASTContext.cpp,1,['inherit'],['inheritance']
Modifiability,"// return a new dataloader; // iterate over all variables, ignore the ones whose variance is below specific threshold; // DataLoader *transformedLoader=(DataLoader *)fDataLoader->Clone(""vt_transformed_dataset"");; // TMVA::DataLoader *transformedLoader = new TMVA::DataLoader(fDataSetInfo.GetName());",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx:48,variab,variables,48,tmva/tmva/src/VarTransformHandler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VarTransformHandler.cxx,1,['variab'],['variables']
Modifiability,"// return empty target vector (size = dimension of foam -; // number of variables)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx:72,variab,variables,72,tmva/tmva/src/PDEFoamMultiTarget.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamMultiTarget.cxx,1,['variab'],['variables']
Modifiability,"// return false; // Tells clang not to create the plugin.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/example/DemoPlugin.cpp:50,plugin,plugin,50,interpreter/cling/tools/plugins/example/DemoPlugin.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/example/DemoPlugin.cpp,1,['plugin'],['plugin']
Modifiability,"// return first bin that is used in case of variable bin size axis",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:44,variab,variable,44,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,1,['variab'],['variable']
Modifiability,"// return number of variable parameters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:20,variab,variable,20,math/minuit2/src/MnUserParameterState.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx,1,['variab'],['variable']
Modifiability,"// return periode (number of variables)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h:29,variab,variables,29,tmva/tmva/inc/TMVA/BinarySearchTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/BinarySearchTree.h,1,['variab'],['variables']
Modifiability,"// return pointer to non-const version of the options inside the fit config",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:69,config,config,69,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['config'],['config']
Modifiability,"// return the individual relative variable importance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h:34,variab,variable,34,tmva/tmva/inc/TMVA/DecisionTree.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DecisionTree.h,1,['variab'],['variable']
Modifiability,"// return the variable index; // check if variable exist",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:14,variab,variable,14,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['variab'],['variable']
Modifiability,"// return the variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:14,variab,variable,14,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// return variable index",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:10,variab,variable,10,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// returns fit config, or creates a default one if not existing",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h:15,config,config,15,roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/inc/RooFit/xRooFit/xRooNLLVar.h,1,['config'],['config']
Modifiability,// rewrite MI to access 'Offset' bytes from the FP. Update Offset to be; // however much remains to be handled. Return 'true' if no further; // work is required.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.h:3,rewrite,rewrite,3,interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ThumbRegisterInfo.h,1,['rewrite'],['rewrite']
Modifiability,// rewrite block specifier.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:3,rewrite,rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,1,['rewrite'],['rewrite']
Modifiability,// rewrite constructor,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h:3,rewrite,rewrite,3,interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Analysis/Analyses/ThreadSafetyTIL.h,7,['rewrite'],['rewrite']
Modifiability,// rewrite getter method expression into: receiver.property or; // (receiver).property,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp:3,rewrite,rewrite,3,interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/ARCMigrate/ObjCMT.cpp,1,['rewrite'],['rewrite']
Modifiability,// rewrite the original branch instruction with this new target,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp:3,rewrite,rewrite,3,interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Utils/CodeExtractor.cpp,1,['rewrite'],['rewrite']
Modifiability,// rewrite the original header,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:3,rewrite,rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,1,['rewrite'],['rewrite']
Modifiability,// rewrite the original header *without* disturbing the '{',MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp:3,rewrite,rewrite,3,interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/Rewrite/RewriteObjC.cpp,1,['rewrite'],['rewrite']
Modifiability,// rewriteFirstIterationLoopExitValues does not rely on the computation of; // trip count and therefore can further simplify exit values in addition to; // rewriteLoopExitValues.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp:3,rewrite,rewriteFirstIterationLoopExitValues,3,interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/IndVarSimplify.cpp,2,['rewrite'],"['rewriteFirstIterationLoopExitValues', 'rewriteLoopExitValues']"
Modifiability,// rewriter project will change target built-in bool type from its default.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp:3,rewrite,rewriter,3,interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Frontend/CompilerInstance.cpp,1,['rewrite'],['rewriter']
Modifiability,"// riscv_masked_{atomicrmw_*,cmpxchg} intrinsics represent an emulated; // narrow atomic operation. These are implemented using atomic; // operations at the minimum supported atomicrmw/cmpxchg width whose; // result is then sign extended to XLEN. With +A, the minimum width is; // 32 for both 64 and 32.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp:229,extend,extended,229,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVISelLowering.cpp,1,['extend'],['extended']
Modifiability,"// rms of cut variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx:14,variab,variable,14,tmva/tmva/src/Rule.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Rule.cxx,1,['variab'],['variable']
Modifiability,"// run rf_go.exe to get the variable importance",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h:28,variab,variable,28,tmva/tmva/inc/TMVA/RuleFitAPI.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/RuleFitAPI.h,1,['variab'],['variable']
Modifiability,"// rwlock condition variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TRWLock.h:20,variab,variable,20,core/thread/inc/TRWLock.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TRWLock.h,1,['variab'],['variable']
Modifiability,"// s/urhadd instructions implement the following pattern, making the; // extends free:; // %x = add ((zext i8 -> i16), 1); // %y = (zext i8 -> i16); // trunc i16 (lshr (add %x, %y), 1) -> i8; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp:73,extend,extends,73,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp,1,['extend'],['extends']
Modifiability,"// save formula to parse variable and parameters for Cling",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:25,variab,variable,25,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// save into configuration file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx:13,config,configuration,13,gui/sessionviewer/src/TSessionViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/gui/sessionviewer/src/TSessionViewer.cxx,1,['config'],['configuration']
Modifiability,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:21,variab,variable,21,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variable']
Modifiability,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range; // (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); // (force in that case to use errors); // scan is not implemented for TMinuit, the way to return the array is only via the graph",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:21,variab,variable,21,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// scan some variable (e.g. global correlation) and find a minimum using successive calls to DoUnfold(Double_t) at various tau",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h:13,variab,variable,13,hist/unfold/inc/TUnfoldDensity.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/unfold/inc/TUnfoldDensity.h,1,['variab'],['variable']
Modifiability,"// search all variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx:14,variab,variables,14,tmva/tmva/src/VariableTransformBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableTransformBase.cxx,3,['variab'],['variables']
Modifiability,"// select the input variables for the transformation and get them from the event",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx:20,variab,variables,20,tmva/tmva/src/VariableNormalizeTransform.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/VariableNormalizeTransform.cxx,1,['variab'],['variables']
Modifiability,"// select the variable to sort by",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,variab,variable,14,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],['variable']
Modifiability,"// semaphore condition variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TSemaphore.h:23,variab,variable,23,core/thread/inc/TSemaphore.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TSemaphore.h,1,['variab'],['variable']
Modifiability,"// send a TObject*. Allows polymorphic behaviour and pters to derived classes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/MPSendRecv.h:27,polymorphi,polymorphic,27,core/multiproc/inc/MPSendRecv.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/multiproc/inc/MPSendRecv.h,1,['polymorphi'],['polymorphic']
Modifiability,// set VReg will cause type mismatch if it comes from extend/trunc,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp:54,extend,extend,54,interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/GlobalISel/CombinerHelper.cpp,1,['extend'],['extend']
Modifiability,"// set a fixed variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genetic/src/GeneticMinimizer.cxx:15,variab,variable,15,math/genetic/src/GeneticMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genetic/src/GeneticMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set a fixed variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:15,variab,variable,15,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,3,['variab'],['variable']
Modifiability,"// set a free variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:14,variab,variable,14,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// set a free variable.; // Add the variable if not existing otherwise set value if exists already; // this is implemented in MnUserParameterState::Add; // if index is wrong (i.e. variable already exists but with a different index return false) but; // value is set for corresponding variable name; // std::cout << "" add parameter "" << name << "" "" << val << "" step "" << step << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:14,variab,variable,14,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,4,['variab'],['variable']
Modifiability,"// set a limited variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:17,variab,variable,17,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// set a lower limited variable; // since is not supported in TMinuit , just use a artificial large value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:23,variab,variable,23,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set a upper limited variable; // since is not supported in TMinuit , just use a artificial large negative value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:23,variab,variable,23,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set adaptive weights in fWeights matrix",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx:7,adapt,adaptive,7,hist/hist/src/TKDE.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TKDE.cxx,1,['adapt'],['adaptive']
Modifiability,"// set all variable values in minimizer",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:11,variab,variable,11,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set bins for mixed axis do not exists - need to set afterwards the variable bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:70,variab,variable,70,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,2,['variab'],['variable']
Modifiability,// set by configure(),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h:10,config,configure,10,interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/Sema/Lookup.h,1,['config'],['configure']
Modifiability,"// set corresponding bit indicating is a variable from an array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx:41,variab,variable,41,tmva/tmva/src/DataSetInfo.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetInfo.cxx,1,['variab'],['variable']
Modifiability,"// set default max of function calls according to the number of parameters; // formula from Minuit2 (adapted)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:101,adapt,adapted,101,math/mathcore/src/FitConfig.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx,1,['adapt'],['adapted']
Modifiability,"// set double bounded variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:22,variab,variable,22,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set input variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h:13,variab,variable,13,tmva/tmva/inc/TMVA/DataLoader.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/DataLoader.h,1,['variab'],['variable']
Modifiability,"// set lower limited variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:21,variab,variable,21,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set method - Use the plug-in manager if method is implemented in MathMore",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx:24,plug-in,plug-in,24,math/mathcore/src/RootFinder.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx,1,['plug-in'],['plug-in']
Modifiability,"// set number of input variables (only used by MethodCuts, could perhaps be removed); // void SetNvar( Int_t n ) { fNvar = n; }; // verbose and help flags",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:23,variab,variables,23,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variables']
Modifiability,"// set of TObjects used in CINT variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.h:32,variab,variables,32,core/metacling/src/TCling.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/metacling/src/TCling.h,1,['variab'],['variables']
Modifiability,"// set periode (number of variables) of binary search tree",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx:26,variab,variables,26,tmva/tmva/src/PDEFoamDensityBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDEFoamDensityBase.cxx,1,['variab'],['variables']
Modifiability,"// set the first poi as the axis variable to scan",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx:33,variab,variable,33,roofit/xroofit/src/xRooHypoSpace.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooHypoSpace.cxx,2,['variab'],['variable']
Modifiability,"// set the instance variables, so that the various visit routines may use it.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,variab,variables,20,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,1,['variab'],['variables']
Modifiability,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:33,variab,variable,33,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,6,['variab'],['variable']
Modifiability,"// set the step-size of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:36,variab,variable,36,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// set the value of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:32,variab,variable,32,math/minuit/src/TMinuitMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set the variable value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx:11,variab,variable,11,math/fumili/src/TFumiliMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/fumili/src/TFumiliMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set the variables' limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphRMM.cxx:11,variab,variables,11,tutorials/fit/fitEllipseTGraphRMM.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/fit/fitEllipseTGraphRMM.cxx,1,['variab'],['variables']
Modifiability,"// set upper limited variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:21,variab,variable,21,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set value for variable ivar (only for existing parameters)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:17,variab,variable,17,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,2,['variab'],['variable']
Modifiability,"// set variable in minimizer - support only free variables; // no transformation implemented - so far",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,variab,variable,7,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,2,['variab'],"['variable', 'variables']"
Modifiability,"// set variable limits (remove limits if lower >= upper)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,variab,variable,7,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set variable lower limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,variab,variable,7,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set variable names",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx:7,variab,variable,7,hist/hist/src/TF1.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TF1.cxx,1,['variab'],['variable']
Modifiability,"// set variable upper limit",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,variab,variable,7,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,1,['variab'],['variable']
Modifiability,"// set variable value in minimizer; // no change to transformation or variable status",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,variab,variable,7,math/mathcore/src/BasicMinimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx,2,['variab'],['variable']
Modifiability,"// set variable values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:7,variab,variable,7,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h,1,['variab'],['variable']
Modifiability,"// set variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:7,variab,variables,7,math/minuit2/src/Minuit2Minimizer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx,1,['variab'],['variables']
Modifiability,"// set variables that used to be options; // any modifications are then made in ProcessOptions()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx:7,variab,variables,7,tmva/tmva/src/MethodRuleFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodRuleFit.cxx,1,['variab'],['variables']
Modifiability,"// set variables to requested parameter point",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx:7,variab,variables,7,roofit/roostats/src/ToyMCSampler.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/ToyMCSampler.cxx,1,['variab'],['variables']
Modifiability,"// setcc_merge_zero(; // all_active, extend(nxvNi1 ...), != splat(0)); // -> nxvNi1 ...",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:37,extend,extend,37,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// setcc_merge_zero(; // pred, extend(nxvNi1 ...), != splat(0)); // -> nxvNi1 and(pred, ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// setcc_merge_zero(; // pred, extend(setcc_merge_zero(pred, ...)), != splat(0)); // => setcc_merge_zero(pred, ...)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp:31,extend,extend,31,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ISelLowering.cpp,1,['extend'],['extend']
Modifiability,"// setting a Root dir causes the variables distributions to be saved to the root file",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx:33,variab,variables,33,tmva/tmva/src/Envelope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/Envelope.cxx,2,['variab'],['variables']
Modifiability,"// setting up variables for JsMVA interactive training",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h:14,variab,variables,14,tmva/tmva/inc/TMVA/FitterBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/FitterBase.h,1,['variab'],['variables']
Modifiability,"// setup ipython interactive variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h:29,variab,variables,29,tmva/tmva/inc/TMVA/NeuralNet.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/NeuralNet.h,1,['variab'],['variables']
Modifiability,"// setup output variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx:16,variab,variables,16,tmva/pymva/src/MethodPyKeras.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/src/MethodPyKeras.cxx,1,['variab'],['variables']
Modifiability,"// setup processtimer, initialize some variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/ProcessTimer.h:39,variab,variables,39,roofit/multiprocess/res/RooFit/MultiProcess/ProcessTimer.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/multiprocess/res/RooFit/MultiProcess/ProcessTimer.h,1,['variab'],['variables']
Modifiability,"// setups the needed variables, loads the model",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h:21,variab,variables,21,tmva/pymva/inc/TMVA/MethodPyKeras.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/inc/TMVA/MethodPyKeras.h,2,['variab'],['variables']
Modifiability,// shifting right sufficiently makes the value 32-bit sign-extended,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp:59,extend,extended,59,interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/RISCV/RISCVOptWInstrs.cpp,1,['extend'],['extended']
Modifiability,"// should this lower bound be configurable?",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:30,config,configurable,30,math/minuit2/src/MnPosDef.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx,1,['config'],['configurable']
Modifiability,// sign extend is vpcmpeq+maskedmove+vpmovdw; // zero extend is vpcmpeq+maskedmove+vpmovdw+vpsrlw,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/X86TargetTransformInfo.cpp,2,['extend'],['extend']
Modifiability,"// sign- or zero-extend elements to i64 and sum, returning",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extend']
Modifiability,"// sign- or zero-extend the elements of a vector to i32,",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extend']
Modifiability,"// sign- or zero-extend the elements of two vectors to i32, multiply",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:17,extend,extend,17,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extend']
Modifiability,// sign-extend vector extract element; // Vector move immediate and move negated immediate:,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h:8,extend,extend,8,interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/ARMISelLowering.h,1,['extend'],['extend']
Modifiability,"// significant speedup; // ToyMCSampler configuration",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:40,config,configuration,40,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['config'],['configuration']
Modifiability,"// significant speedup; // needed because we have no extended pdf and the ToyMC Sampler evaluation returns an error",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:53,extend,extended,53,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['extend'],['extended']
Modifiability,"// silence -Wunused-const-variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_sqlite.cxx:26,variab,variable,26,tree/dataframe/test/datasource_sqlite.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/test/datasource_sqlite.cxx,1,['variab'],['variable']
Modifiability,"// since in multi-target regression targets are handled like; // variables --> remove targets and add them to the event variabels",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:65,variab,variables,65,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,4,['variab'],"['variabels', 'variables']"
Modifiability,"// since output is a boolean need to add the tensor_xxx variable since it is not defined as a pointer to a boolean std::vector",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx:56,variab,variable,56,tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/sofie/inc/TMVA/ROperator_Comparision.hxx,1,['variab'],['variable']
Modifiability,// size may not be multiple of alignment. This can only happen with; // an over-aligned variable. We will be adding a padding field to; // make the size be multiple of alignment.,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp:88,variab,variable,88,interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGBlocks.cpp,1,['variab'],['variable']
Modifiability,"// size of canvas; // counter variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/compareanapp.cxx:30,variab,variables,30,tmva/tmvagui/src/compareanapp.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/compareanapp.cxx,1,['variab'],['variables']
Modifiability,"// size of the variable-length array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:15,variab,variable-length,15,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variable-length']
Modifiability,"// skip all other python special funcs; // figure out number of variables required",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx:64,variab,variables,64,bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,2,['variab'],['variables']
Modifiability,// skip classes not inherited as public,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h:20,inherit,inherited,20,interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/include/clang/ExtractAPI/ExtractAPIVisitor.h,1,['inherit'],['inherited']
Modifiability,"// skip computation of the statistics along axis that have labels (can be extended and are alphanumeric)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx:74,extend,extended,74,hist/hist/src/TH2.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH2.cxx,1,['extend'],['extended']
Modifiability,"// skip computation of the statistics along axis that have labels (can be extended and are aphanumeric)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx:74,extend,extended,74,hist/hist/src/TH3.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH3.cxx,4,['extend'],['extended']
Modifiability,"// skip this test on 32 bits architecture. It might fail due to extended precision",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx:64,extend,extended,64,math/genvector/test/testGenVector.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/test/testGenVector.cxx,1,['extend'],['extended']
Modifiability,"// skipping plotting of variables if too many (default is 200)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx:24,variab,variables,24,tmva/tmva/src/MethodBase.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBase.cxx,1,['variab'],['variables']
Modifiability,"// some (modified) histfactory models have several instances of FlexibleInterpVar; // we collect and merge them here",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx:64,Flexible,FlexibleInterpVar,64,roofit/hs3/src/JSONFactories_HistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx,1,['Flexible'],['FlexibleInterpVar']
Modifiability,// some helper variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs:15,variab,variables,15,js/modules/three.mjs,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/modules/three.mjs,1,['variab'],['variables']
Modifiability,"// some variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx:8,variab,variables,8,tmva/tmva/src/DataSet.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSet.cxx,1,['variab'],['variables']
Modifiability,"// sort again each variable for all events - needs this before Optimize(); // rescaling has changed variable values",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:19,variab,variable,19,tmva/tmva/src/ModulekNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx,2,['variab'],['variable']
Modifiability,"// sort and configure norms",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx:12,config,configure,12,roofit/hs3/src/JSONFactories_HistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx,1,['config'],['configure']
Modifiability,"// sort and configure the histosys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx:12,config,configure,12,roofit/hs3/src/JSONFactories_HistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx,1,['config'],['configure']
Modifiability,"// sort and configure the normsys",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx:12,config,configure,12,roofit/hs3/src/JSONFactories_HistFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/JSONFactories_HistFactory.cxx,1,['config'],['configure']
Modifiability,"// sort each variable for all events - needs this before Optimize() and ComputeMetric()",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx:13,variab,variable,13,tmva/tmva/src/ModulekNN.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/ModulekNN.cxx,1,['variab'],['variable']
Modifiability,"// sorted map of variables in each dimension for all event types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h:17,variab,variables,17,tmva/tmva/inc/TMVA/ModulekNN.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/ModulekNN.h,1,['variab'],['variables']
Modifiability,"// space between type and variable e.g. Dictionary<string,string> foo;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp:26,variab,variable,26,interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Format/TokenAnnotator.cpp,1,['variab'],['variable']
Modifiability,"// special case - all layers are there, create faces ourself",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:22,layers,layers,22,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['layers'],['layers']
Modifiability,"// special case for this histogram when is empty; // and axis cannot be extended (because it is the default)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx:72,extend,extended,72,hist/hist/src/TH1Merger.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TH1Merger.cxx,1,['extend'],['extended']
Modifiability,// special handling for variable arrays of compressed floats in branch - not tested,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:24,variab,variable,24,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,"// special options for Adaptive mode",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx:23,Adapt,Adaptive,23,tmva/tmva/src/MethodPDERS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDERS.cxx,1,['Adapt'],['Adaptive']
Modifiability,"// special treatment for integer variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:33,variab,variables,33,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,2,['variab'],['variables']
Modifiability,"// specialization for multiple inheritance disambiguation",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPConstructor.h:31,inherit,inheritance,31,bindings/pyroot/cppyy/CPyCppyy/src/CPPConstructor.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPConstructor.h,1,['inherit'],['inheritance']
Modifiability,"// specific method for one-dim; /// Set number of points for active integration rule.; /// - For the GSL adaptive integrator, `n = 1,2,3,4,5,6` correspond to the 15,21,31,41,51,61-point integration rules.; /// - For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h:105,adapt,adaptive,105,math/mathcore/inc/Math/IntegratorOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/IntegratorOptions.h,1,['adapt'],['adaptive']
Modifiability,"// spline0 uses histogram as reference; // static configuration variables ----------------------------; // to increase computation speed, the final PDF is filled in; // a high-binned histogram; ""GetValue"" then returns the histogram; // entry, linearized between adjacent bins",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h:50,config,configuration,50,tmva/tmva/inc/TMVA/PDF.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/PDF.h,2,"['config', 'variab']","['configuration', 'variables']"
Modifiability,"// split string that contains the variables into tiny little pieces",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:34,variab,variables,34,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variables']
Modifiability,// squash unused-variable warning at -NDEBUG,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp:17,variab,variable,17,interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/Thumb2InstrInfo.cpp,1,['variab'],['variable']
Modifiability,"// standard case no weights or iWeight=1; // this is needed for Poisson likelihood (which are extended and not for multinomial); // the formula below include constant term due to likelihood of saturated model (f(x) = y); // (same formula as in Baker-Cousins paper, page 439 except a factor of 2",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h:94,extend,extended,94,math/mathcore/inc/Fit/FitUtil.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Fit/FitUtil.h,2,['extend'],['extended']
Modifiability,"// start index = 1, to skip the global variable key; // increment = 2, to skip the value for each property-value pairs",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXUtilities.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXUtilities.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/NVPTX/NVPTXUtilities.cpp,1,['variab'],['variable']
Modifiability,"// startup all slaves if no config file given",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx:28,config,config,28,proof/proof/src/TProofCondor.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/proof/src/TProofCondor.cxx,1,['config'],['config']
Modifiability,"// static configuration settings",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx:10,config,configuration,10,tmva/tmva/src/PDF.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/PDF.cxx,1,['config'],['configuration']
Modifiability,"// static maximum number of input variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h:34,variab,variables,34,tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodCFMlpANN_Utils.h,1,['variab'],['variables']
Modifiability,"// static methods for setting and retrieving the default options; /// Set the default Minimizer type and corresponding algorithms.; /// Here is the list of the available minimizers and their corresponding algorithms.; /// For some minimizers (e.g. Fumili) there are no specific algorithms available, then there is no need to specify it.; ///; /// \anchor ROOTMinimizers; /// ### ROOT Minimizers; ///; /// - Minuit Minimizer based on TMinuit, the legacy Minuit implementation. Here are the available algorithms:; /// - Migrad default algorithm based on the variable metric minimizer; /// - Minimize combination of Simplex and Migrad; /// - Simplex minimization algorithm not using the gradient information; /// - Scan brute function scan; /// - Minuit2 New C++ implementation of Minuit (the recommended one); /// - Migrad (default); /// - Minimize; /// - Simplex; /// - Fumili2 new implementation of Fumili integrated in Minuit2; /// - Fumili Minimizer using an approximation for the Hessian based on first derivatives of the model function (see TFumili). Works only for chi-squared and likelihood functions.; /// - Linear Linear minimizer (fitter) working only for linear functions (see TLinearFitter and TLinearMinimizer); /// - GSLMultiMin Minimizer from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; /// - BFGS2 (default); /// - BFGS; /// - ConjugateFR; /// - ConjugatePR; /// - SteepestDescent; /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorithm using only function values and not the gradient.; /// - Genetic Genetic minimization algorithms (see TMVA::Genetic); ///",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h:556,variab,variable,556,math/mathcore/inc/Math/MinimizerOptions.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/MinimizerOptions.h,1,['variab'],['variable']
Modifiability,"// static variable definitions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx:10,variab,variable,10,roofit/roostats/src/HypoTestInverter.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/HypoTestInverter.cxx,1,['variab'],['variable']
Modifiability,"// static_assert that sizeof(T) is not ""too big"".; //; // Because our policy guarantees at least one inlined element, it is possible; // for an arbitrarily large inlined element to allocate an arbitrarily large; // amount of inline storage. We generally consider it an antipattern for a; // SmallVector to allocate an excessive amount of inline storage, so we want; // to call attention to these cases and make sure that users are making an; // intentional decision if they request a lot of inline storage.; //; // We want this assertion to trigger in pathological cases, but otherwise; // not be too easy to hit. To accomplish that, the cutoff is actually somewhat; // larger than kPreferredSmallVectorSizeof (otherwise,; // `SmallVector<SmallVector<T>>` would be one easy way to trip it, and that; // pattern seems useful in practice).; //; // One wrinkle is that this assertion is in theory non-portable, since; // sizeof(T) is in general platform-dependent. However, we don't expect this; // to be much of an issue, because most LLVM development happens on 64-bit; // hosts, and therefore sizeof(T) is expected to *decrease* when compiled for; // 32-bit hosts, dodging the issue. The reverse situation, where development; // happens on a 32-bit host and then fails due to sizeof(T) *increasing* on a; // 64-bit host, is expected to be very rare.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h:898,portab,portable,898,interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/ADT/SmallVector.h,1,['portab'],['portable']
Modifiability,"// std::cout << "" variable "" << ivar << "" has no proper range in (xmax[ivar]-xmin[ivar] = "" << xmax[ivar]-xmin[ivar] << std::endl;; // std::cout << "" will set useVariable[ivar]=false""<<std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:18,variab,variable,18,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],['variable']
Modifiability,"// std::cout << ""Erase variable "" << itvar->first << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:23,variab,variable,23,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// std::cout << ""Found variable with name \"""" << name << ""\""."" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:23,variab,variable,23,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['variab'],['variable']
Modifiability,"// std::cout << ""NumFolds|numFolds is a reserved variable! Adding to context."" << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx:49,variab,variable,49,tmva/tmva/src/CvSplit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/CvSplit.cxx,1,['variab'],['variable']
Modifiability,"// std::cout << ""Number of couplings "" << ncouplings << std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx:27,coupling,couplings,27,roofit/roofit/src/RooLagrangianMorphFunc.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooLagrangianMorphFunc.cxx,1,['coupling'],['couplings']
Modifiability,"// std::cout << ""investigating character : "" << i << "" "" << formula[i] << "" of formula "" << formula <<; // std::endl;; // look for variable and function names. They start in C++ with alphanumeric characters",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx:131,variab,variable,131,hist/hist/src/TFormula.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TFormula.cxx,1,['variab'],['variable']
Modifiability,"// std::cout<<""creating tmp variable""<<std::endl;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h:28,variab,variable,28,math/minuit2/inc/Minuit2/LASymMatrix.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h,2,['variab'],['variable']
Modifiability,"// std::decay is supposed to produce 'std::remove_cv', but since 'restrict' is; // in the same group of qualifiers as 'const' and 'volatile', we're extending; // '__decay(T)' so that it removes all qualifiers.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp:148,extend,extending,148,interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Sema/SemaType.cpp,1,['extend'],['extending']
Modifiability,"// std::vector<TMVA::Event*>* TransformCollection( VariableTransformBase* trf,; // Int_t cls,; // std::vector<TMVA::Event*>* events,; // Bool_t replace ) const;",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h:51,Variab,VariableTransformBase,51,tmva/tmva/inc/TMVA/TransformationHandler.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/TransformationHandler.h,1,['Variab'],['VariableTransformBase']
Modifiability,// step 3: Check the recurrence of variable X,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp:35,variab,variable,35,interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/LoopIdiomRecognize.cpp,2,['variab'],['variable']
Modifiability,"// store indices of events in variable boundaries and box shell.; //calculateShell(&_fullBoxInfo);; // calculate normalization needed in analyticalIntegral(); //calculatePreNorm(&_fullBoxInfo);; // lookup table for determining which events contribute to a certain coordinate",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx:30,variab,variable,30,roofit/roofit/src/RooNDKeysPdf.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/src/RooNDKeysPdf.cxx,1,['variab'],['variable']
Modifiability,"// store method, cut and variable names and create cut formula",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx:25,variab,variable,25,tmva/tmva/src/MethodCategory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCategory.cxx,1,['variab'],['variable']
Modifiability,"// store of `control variables'",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx:21,variab,variables,21,hist/hist/src/TMultiDimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/src/TMultiDimFit.cxx,1,['variab'],['variables']
Modifiability,"// store the variable name in the TimeFormat property as well, b.c. alphanumeric requires axis name to be; // ""xaxis""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:13,variab,variable,13,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['variab'],['variable']
Modifiability,"// strongSIVtest -; // From the paper, Practical Dependence Testing, Section 4.2.1; //; // When we have a pair of subscripts of the form [c1 + a*i] and [c2 + a*i],; // where i is an induction variable, c1 and c2 are loop invariant,; // and a is a constant, we can solve it exactly using the Strong SIV test.; //; // Can prove independence. Failing that, can compute distance (and direction).; // In the presence of symbolic terms, we can sometimes make progress.; //; // If there's a dependence,; //; // c1 + a*i = c2 + a*i'; //; // The dependence distance is; //; // d = i' - i = (c1 - c2)/a; //; // A dependence only exists if d is an integer and abs(d) <= U, where U is the; // loop's upper bound. If a dependence exists, the dependence direction is; // defined as; //; // { < if d > 0; // direction = { = if d = 0; // { > if d < 0; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:192,variab,variable,192,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,// struct ConfigurationEnvironmentTy {; // uint8_t UseGenericStateMachine;; // uint8_t MayUseNestedParallelism;; // llvm::omp::OMPTgtExecModeFlags ExecMode;; // int32_t MinThreads;; // int32_t MaxThreads;; // int32_t MinTeams;; // int32_t MaxTeams;; // };; // struct DynamicEnvironmentTy {; // uint16_t DebugIndentionLevel;; // };; // struct KernelEnvironmentTy {; // ConfigurationEnvironmentTy Configuration;; // IdentTy *Ident;; // DynamicEnvironmentTy *DynamicEnv;; // };,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp:10,Config,ConfigurationEnvironmentTy,10,interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/IPO/OpenMPOpt.cpp,3,['Config'],"['Configuration', 'ConfigurationEnvironmentTy']"
Modifiability,// struct _protocol_t {; // id isa; // NULL; // const char * const protocol_name;; // const struct _protocol_list_t * protocol_list; // super protocols; // const struct method_list_t * const instance_methods;; // const struct method_list_t * const class_methods;; // const struct method_list_t *optionalInstanceMethods;; // const struct method_list_t *optionalClassMethods;; // const struct _prop_list_t * properties;; // const uint32_t size; // sizeof(struct _protocol_t); // const uint32_t flags; // = 0; // const char ** extendedMethodTypes;; // const char *demangledName;; // const struct _prop_list_t * class_properties;; // }; // Holder for struct _protocol_list_t *,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:524,extend,extendedMethodTypes,524,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,1,['extend'],['extendedMethodTypes']
Modifiability,// struct objc_ivar_t ivar_list[1]; /* variable length structure */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:39,variab,variable,39,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['variab'],['variable']
Modifiability,"// struct objc_method_list *methods; // FIXME: Almost identical code is copied and pasted below for the; // class, but refactoring it cleanly requires C++14 generic lambdas.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp:119,refactor,refactoring,119,interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCGNU.cpp,1,['refactor'],['refactoring']
Modifiability,// struct objc_method_t method_list[1]; /* variable length structure */,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp:43,variab,variable,43,interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-objdump/MachODump.cpp,1,['variab'],['variable']
Modifiability,"// sufficient number of scans; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:50,variab,variables,50,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['variab'],['variables']
Modifiability,"// support for templated ctors in single inheritance (TODO: also multi possible?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx:41,inherit,inheritance,41,bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/Dispatcher.cxx,2,['inherit'],['inheritance']
Modifiability,// suppress unused variable warning,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp:19,variab,variable,19,interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Transforms/Scalar/DivRemPairs.cpp,1,['variab'],['variable']
Modifiability,"// switch also the global ""tree"" variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx:33,variab,variable,33,tree/treeviewer/src/TTreeViewer.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/treeviewer/src/TTreeViewer.cxx,3,['variab'],['variable']
Modifiability,"// symbolicRDIVtest -; // In Section 4.5 of the Practical Dependence Testing paper,the authors; // introduce a special case of Banerjee's Inequalities (also called the; // Extreme-Value Test) that can handle some of the SIV and RDIV cases,; // particularly cases with symbolics. Since it's only able to disprove; // dependence (not compute distances or directions), we'll use it as a; // fall back for the other tests.; //; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*j]; // where i and j are induction variables and c1 and c2 are loop invariants,; // we can use the symbolic tests to disprove some dependences, serving as a; // backup for the RDIV test. Note that i and j can be the same variable,; // letting this test serve as a backup for the various SIV tests.; //; // For a dependence to exist, c1 + a1*i must equal c2 + a2*j for some; // 0 <= i <= N1 and some 0 <= j <= N2, where N1 and N2 are the (normalized); // loop bounds for the i and j loops, respectively. So, ...; //; // c1 + a1*i = c2 + a2*j; // a1*i - a2*j = c2 - c1; //; // To test for a dependence, we compute c2 - c1 and make sure it's in the; // range of the maximum and minimum possible values of a1*i - a2*j.; // Considering the signs of a1 and a2, we have 4 possible cases:; //; // 1) If a1 >= 0 and a2 >= 0, then; // a1*0 - a2*N2 <= c2 - c1 <= a1*N1 - a2*0; // -a2*N2 <= c2 - c1 <= a1*N1; //; // 2) If a1 >= 0 and a2 <= 0, then; // a1*0 - a2*0 <= c2 - c1 <= a1*N1 - a2*N2; // 0 <= c2 - c1 <= a1*N1 - a2*N2; //; // 3) If a1 <= 0 and a2 >= 0, then; // a1*N1 - a2*N2 <= c2 - c1 <= a1*0 - a2*0; // a1*N1 - a2*N2 <= c2 - c1 <= 0; //; // 4) If a1 <= 0 and a2 <= 0, then; // a1*N1 - a2*0 <= c2 - c1 <= a1*0 - a2*N2; // a1*N1 <= c2 - c1 <= -a2*N2; //; // return true if dependence disproved",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:533,variab,variables,533,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,2,['variab'],"['variable', 'variables']"
Modifiability,"// t1.Draw(""x""); // to select fit variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx:34,variab,variable,34,math/minuit2/test/testNdimFit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/test/testNdimFit.cxx,4,['variab'],['variable']
Modifiability,"// take 'fisher coeff. weighted estimate as variable importance, ""Don't fill the offset coefficient though :)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:44,variab,variable,44,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// take 'fisher coeff. weighted estimate as variable importance, ""Don't fill the offset coefficient though :) ",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:44,variab,variable,44,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// take address of first adapter",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx:25,adapt,adapter,25,core/base/src/TUUID.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TUUID.cxx,1,['adapt'],['adapter']
Modifiability,"// tbaa.struct contains (offset, size, type) triples. Extending the length; // of the tbaa.struct doesn't require changing this (though more information; // could be provided by adding more triples at subsequent lengths).",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h:54,Extend,Extending,54,interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/IR/Metadata.h,1,['Extend'],['Extending']
Modifiability,"// templated function issues a lot -Wunused-variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp:44,variab,variable,44,interpreter/cling/lib/Interpreter/DeclUnloader.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/lib/Interpreter/DeclUnloader.cpp,1,['variab'],['variable']
Modifiability,"// temporary variable used during optimization",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h:13,variab,variable,13,hist/hist/inc/v5/TFormula.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/inc/v5/TFormula.h,1,['variab'],['variable']
Modifiability,"// temporary variable, use in assignment",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,variab,variable,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variable']
Modifiability,// temporary variables,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js:13,variab,variables,13,js/build/jsroot.js,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/build/jsroot.js,2,['variab'],['variables']
Modifiability,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:123,adapt,adaptive,123,math/mathmore/test/testMCIntegration.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx,1,['adapt'],['adaptive']
Modifiability,"// test parsing variables/parameters of user-defined functions",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h:16,variab,variables,16,test/TFormulaParsingTests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/TFormulaParsingTests.h,1,['variab'],['variables']
Modifiability,"// testRDIV -; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 + a2*j]; // where i and j are induction variables, c1 and c2 are loop invariant,; // and a1 and a2 are constant, we can solve it exactly with an easy adaptation; // of the Exact SIV test, the Restricted Double Index Variable (RDIV) test.; // It doesn't make sense to talk about distance or direction in this case,; // so there's no point in making special versions of the Strong SIV test or; // the Weak-crossing SIV test.; //; // With minor algebra, this test can also be used for things like; // [c1 + a1*i + a2*j][c2].; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:124,variab,variables,124,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,3,"['Variab', 'adapt', 'variab']","['Variable', 'adaptation', 'variables']"
Modifiability,"// testSIV -; // When we have a pair of subscripts of the form [c1 + a1*i] and [c2 - a2*i]; // where i is an induction variable, c1 and c2 are loop invariant, and a1 and; // a2 are constant, we attack it with an SIV test. While they can all be; // solved with the Exact SIV test, it's worthwhile to use simpler tests when; // they apply; they're cheaper and sometimes more precise.; //; // Return true if dependence disproved.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp:119,variab,variable,119,interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Analysis/DependenceAnalysis.cpp,1,['variab'],['variable']
Modifiability,"// tested to be sufficient for the scan of the Bayesian posterior; // names of tested variables must be the same in write / comparison modes",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h:86,variab,variables,86,roofit/roostats/test/stressRooStats_tests.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/test/stressRooStats_tests.h,1,['variab'],['variables']
Modifiability,"// that's were I store the ""fisher MVA""; //use for the Fisher discriminant ONLY those variables that show; //some reasonable linear correlation in either Signal or Background",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:86,variab,variables,86,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,2,['variab'],['variables']
Modifiability,"// the +1 comes from the fact that I treat later on the Fisher output as an ; // additional possible variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:101,variab,variable,101,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// the +1 comes from the fact that I treat later on the Fisher output as an; // additional possible variable.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:100,variab,variable,100,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,1,['variab'],['variable']
Modifiability,"// the adaptive sampling algorithm wants at least one toy event to be outside; // of the requested pvalue including the sampling variation. That leads to an equation; // N-1 = (1-alpha)N + Z sqrt(N - (1-alpha)N) // for upper limit and; // 1 = alpha N - Z sqrt(alpha N) // for lower limit; //; // solving for N gives:; // N = 1/alpha * [3/2 + sqrt(5)] for Z = 1 (which is used currently); // thus, a good guess for the first iteration of events is N=3.73/alpha~4/alpha; // should replace alpha here by smaller tail probability: eg. alpha*Min(leftsideFrac, 1.-leftsideFrac); // totalMC will be incremented by 2 before first call, so initiated it at half the value",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx:7,adapt,adaptive,7,roofit/roostats/src/NeymanConstruction.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/NeymanConstruction.cxx,1,['adapt'],['adaptive']
Modifiability,"// the column contains a variable-length array",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h:25,variab,variable-length,25,graf2d/fitsio/inc/TFITS.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/inc/TFITS.h,1,['variab'],['variable-length']
Modifiability,"// the direct base can be useful for some templates, such as shared_ptrs,; // so make it accessible (the __cpp_cross__ data member also signals that; // this is a cross-inheritance class)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx:169,inherit,inheritance,169,bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/CPPScope.cxx,1,['inherit'],['inheritance']
Modifiability,"// the environment variable exist and properly resolved; // so add the last part of the path and add it to the list",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx:19,variab,variable,19,core/winnt/src/TWinNTSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/winnt/src/TWinNTSystem.cxx,1,['variab'],['variable']
Modifiability,"// the field is variable selection rule object",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx:16,variab,variable,16,core/dictgen/src/XMLReader.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/dictgen/src/XMLReader.cxx,1,['variab'],['variable']
Modifiability,"// the file name end up in the file produced; // by rootcling as a variable name so all character need to be valid!",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx:67,variab,variable,67,core/base/src/TSystem.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/base/src/TSystem.cxx,1,['variab'],['variable']
Modifiability,"// the fisher variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx:14,variab,variable,14,tmva/tmva/src/DecisionTree.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DecisionTree.cxx,5,['variab'],['variable']
Modifiability,"// the fit is extended in case of bin data types",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:14,extend,extended,14,math/mathcore/test/testGradientFitting.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx,1,['extend'],['extended']
Modifiability,"// the input variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx:13,variab,variable,13,tmva/tmva/src/DataSetFactory.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/DataSetFactory.cxx,1,['variab'],['variable']
Modifiability,"// the lumi variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx:12,variab,variables,12,roofit/histfactory/src/JSONTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/src/JSONTool.cxx,1,['variab'],['variables']
Modifiability,"// the minimum linear correlation between two variables demanded for use in fisher criterion in node splitting",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx:46,variab,variables,46,tmva/tmva/src/MethodBDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodBDT.cxx,1,['variab'],['variables']
Modifiability,"// the overall variable importance is the average over all foams",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx:15,variab,variable,15,tmva/tmva/src/MethodPDEFoam.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodPDEFoam.cxx,1,['variab'],['variable']
Modifiability,"// the pthread condition variable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TPosixCondition.h:25,variab,variable,25,core/thread/inc/TPosixCondition.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/inc/TPosixCondition.h,2,['variab'],['variable']
Modifiability,"// the reference histograms require the correct boundaries. Since in Likelihood classification; // the transformations are applied using both classes, also the corresponding boundaries; // need to take this into account; // special treatment for discrete variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx:255,variab,variables,255,tmva/tmva/src/MethodLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodLikelihood.cxx,1,['variab'],['variables']
Modifiability,"// the rest of header line; // number of variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT.cxx:41,variab,variables,41,tmva/tmvagui/src/BDT.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmvagui/src/BDT.cxx,2,['variab'],['variables']
Modifiability,"// the rest of this function is an adaptation of RooAbsTestStatistic::initSimMode:",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx:35,adapt,adaptation,35,roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/TestStatistics/buildLikelihood.cxx,1,['adapt'],['adaptation']
Modifiability,// the static variable ensures that the help information only gets; // printed once even though a target machine creates multiple subtargets,MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp:14,variab,variable,14,interpreter/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCSubtargetInfo.cpp,2,['variab'],['variable']
Modifiability,"// the type of the variable whose name is ""varName""; // should now be stored on disk in the file ""tmpfile""",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx:19,variab,variable,19,core/rint/src/TTabCom.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/rint/src/TTabCom.cxx,1,['variab'],['variable']
Modifiability,"// the values needed to create all ""VariableInfo"" objects in all ways",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:36,Variab,VariableInfo,36,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,1,['Variab'],['VariableInfo']
Modifiability,"// the variable information",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h:7,variab,variable,7,tmva/tmva/inc/TMVA/MethodBase.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/MethodBase.h,1,['variab'],['variable']
Modifiability,"// the variable name",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h:7,variab,variable,7,tmva/tmva/inc/TMVA/Ranking.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/inc/TMVA/Ranking.h,1,['variab'],['variable']
Modifiability,"// the variable representing the global observable",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx:7,variab,variable,7,roofit/roostats/src/AsymptoticCalculator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/src/AsymptoticCalculator.cxx,1,['variab'],['variable']
Modifiability,"// the variables may be transformed by a transformation method: to coherently; // treat signal and background one must decide which transformation type shall; // be used: our default is signal-type",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx:7,variab,variables,7,tmva/tmva/src/MethodCuts.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/src/MethodCuts.cxx,2,['variab'],['variables']
Modifiability,"// the vlims are a non-negligible distance from pi/2; // used by MNPINT to set variables ""near"" the physical limits",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:79,variab,variables,79,math/minuit/src/TMinuit.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx,1,['variab'],['variables']
Modifiability,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,extend,extended,259,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,2,['extend'],['extended']
Modifiability,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram h4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,extend,extended,259,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extended']
Modifiability,"// the x axis will be full labels while the y axis will be numeric; // avoid underflow-overflow in x; // should the merge not use labels if underflow-overflows are presents ?; // when merging with labels underflow/overflow are ignored and; //NB when axis are extended underflow/overflow are set to zero; // profile3d has not yet filling with labels implemented.; // test filling with x but be careful in filling reference histogram p4",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx:259,extend,extended,259,test/stressHistogram.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/stressHistogram.cxx,1,['extend'],['extended']
Modifiability,"// then add the remaining variables",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx:26,variab,variables,26,bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/CPyCppyy/src/TPyClassGenerator.cxx,2,['variab'],['variables']
Modifiability,"// there is no comparison operator for VariableInfo, this will be broken if the implementation changes; /*; for(vector<VariableInfo>::const_iterator varinf = vecvarinfo.begin(); varinf < vecvarinfo.end(); ++varinf); {; unsigned int index = vecvarinfo.begin() - varinf;; test_(datasetinfo->GetVariableInfo(index) == varinfo); // doesn't work!; }; */",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx:39,Variab,VariableInfo,39,tmva/tmva/test/stressTMVA.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/stressTMVA.cxx,2,['Variab'],['VariableInfo']
Modifiability,// these variables need to be fixed in one step; // Group Connected Components for Unsafe Vars; // (Dependencies based on pointer assignments),MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp:9,variab,variables,9,interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Analysis/UnsafeBufferUsage.cpp,1,['variab'],['variables']
Modifiability,"// these variables will be ""Used"" not copied",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpDataDens.h:9,variab,variables,9,math/quadp/inc/TQpDataDens.h,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/quadp/inc/TQpDataDens.h,4,['variab'],['variables']
Modifiability,"// this branch is not a variable-sized array, nothing to do",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx:24,variab,variable-sized,24,tree/dataframe/src/RDFInterfaceUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFInterfaceUtils.cxx,1,['variab'],['variable-sized']
Modifiability,"// this can happen if all pdfs are extended then the coef is effectively the; // expected number of events; // TODO: test behaviour of xRooNode under this scenario (are histograms correct?)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx:35,extend,extended,35,roofit/xroofit/src/xRooNode.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/xroofit/src/xRooNode.cxx,1,['extend'],['extended']
Modifiability,"// this can take a few minutes in some configurations; // TEST(RWLock, VeryLargeconcurrentReadsAndWritesSpin); // {; // concurrentReadsAndWrites(gRWMutexSpin,10,200,gRepetition / 100000);; // }",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx:39,config,configurations,39,core/thread/test/testRWLock.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/thread/test/testRWLock.cxx,1,['config'],['configurations']
Modifiability,"// this column contains variable-length arrays",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx:24,variab,variable-length,24,graf2d/fitsio/src/TFITS.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/fitsio/src/TFITS.cxx,1,['variab'],['variable-length']
Modifiability,"// this is a fixed-sized array (we do not differentiate between variable- and fixed-sized arrays)",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx:64,variab,variable,64,tree/dataframe/src/RDFUtils.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/dataframe/src/RDFUtils.cxx,1,['variab'],['variable']
Modifiability,"// this is a regular unbinned dataset; // This works around a problem in RooStats/HistFactory that was only fixed; // in ROOT 6.30: until then, the weight variable of the observed dataset,; // called ""weightVar"", was added to the observables. Therefore, it also got; // added to the Asimov dataset. But the Asimov has its own weight variable,; // called ""binWeightAsimov"", making ""weightVar"" an actual observable in the; // Asimov data. But this is only by accident and should be removed.",MatchSource.CODE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx:155,variab,variable,155,roofit/hs3/src/RooJSONFactoryWSTool.cxx,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/hs3/src/RooJSONFactoryWSTool.cxx,2,['variab'],['variable']
