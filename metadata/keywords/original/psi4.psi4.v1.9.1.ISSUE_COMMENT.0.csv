id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/2#issuecomment-17312261:17,Deployability,update,update,17,There will be an update to beta 4 next week that will contain the GPL2 license text where needed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2#issuecomment-17312261
https://github.com/psi4/psi4/issues/3#issuecomment-17311560:78,Deployability,patch,patch,78,See the tracker at http://sirius.chem.vt.edu/trac/ticket/270 for the proposed patch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17311560
https://github.com/psi4/psi4/issues/3#issuecomment-17312112:534,Deployability,patch,patch,534,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112
https://github.com/psi4/psi4/issues/3#issuecomment-17312112:385,Energy Efficiency,adapt,adapted,385,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112
https://github.com/psi4/psi4/issues/3#issuecomment-17312112:385,Modifiability,adapt,adapted,385,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112
https://github.com/psi4/psi4/issues/3#issuecomment-17312112:611,Testability,test,tests,611,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112
https://github.com/psi4/psi4/issues/3#issuecomment-17313687:129,Deployability,patch,patch,129,"Well, that sounds really like an overkill, since you end up doing more work than necessary to get the target integrals. Using my patch computing up to (am1,am2) is enough. A similar fix would then also be necessary for the second derivatives.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17313687
https://github.com/psi4/psi4/issues/3#issuecomment-121322945:20,Deployability,patch,patch,20,"Here's the proposed patch copied over from Trac. @jturney , does this need further consideration, or do you want to close it out?. ```; --- psi4.0b4/src/lib/libmints/osrecur.cc.nuclear 2013-04-07 10:13:35.000000000 +0300; +++ psi4.0b4/src/lib/libmints/osrecur.cc 2013-04-22 14:52:27.921823318 +0300; @@ -637,22 +637,22 @@ void ObaraSaikaTwoCenterVIDerivRecursion; double tmp = sqrt(zeta) * M_2_SQRTPI;; // U from A21; double u = zeta * (PC[0] * PC[0] + PC[1] * PC[1] + PC[2] * PC[2]);; - double *F = new double[mmax+1];; + double *F = new double[mmax+2];. // Zero out F; - memset(F, 0, sizeof(double) * (mmax+1));; + memset(F, 0, sizeof(double) * (mmax+2));. // Form Fm(U) from A20; - calculate_f(F, mmax, u);; + calculate_f(F, mmax+1, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; - for (m=0; m<=mmax-1; ++m) {; - vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; - vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; - vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; + for (m=0; m<=mmax; ++m) {; + vx_[0][0][m] = 2.0*zeta*PC[0]*tmp*F[m+1];; + vy_[0][0][m] = 2.0*zeta*PC[1]*tmp*F[m+1];; + vz_[0][0][m] = 2.0*zeta*PC[2]*tmp*F[m+1];; }. // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945
https://github.com/psi4/psi4/issues/3#issuecomment-121322945:744,Performance,Perform,Perform,744,"Here's the proposed patch copied over from Trac. @jturney , does this need further consideration, or do you want to close it out?. ```; --- psi4.0b4/src/lib/libmints/osrecur.cc.nuclear 2013-04-07 10:13:35.000000000 +0300; +++ psi4.0b4/src/lib/libmints/osrecur.cc 2013-04-22 14:52:27.921823318 +0300; @@ -637,22 +637,22 @@ void ObaraSaikaTwoCenterVIDerivRecursion; double tmp = sqrt(zeta) * M_2_SQRTPI;; // U from A21; double u = zeta * (PC[0] * PC[0] + PC[1] * PC[1] + PC[2] * PC[2]);; - double *F = new double[mmax+1];; + double *F = new double[mmax+2];. // Zero out F; - memset(F, 0, sizeof(double) * (mmax+1));; + memset(F, 0, sizeof(double) * (mmax+2));. // Form Fm(U) from A20; - calculate_f(F, mmax, u);; + calculate_f(F, mmax+1, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; - for (m=0; m<=mmax-1; ++m) {; - vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; - vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; - vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; + for (m=0; m<=mmax; ++m) {; + vx_[0][0][m] = 2.0*zeta*PC[0]*tmp*F[m+1];; + vy_[0][0][m] = 2.0*zeta*PC[1]*tmp*F[m+1];; + vz_[0][0][m] = 2.0*zeta*PC[2]*tmp*F[m+1];; }. // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945
https://github.com/psi4/psi4/issues/3#issuecomment-121322945:1199,Performance,Perform,Perform,1199," // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945
https://github.com/psi4/psi4/issues/5#issuecomment-121327206:114,Testability,stub,stub,114,"Now no longer zero-length, it has license text! You're right that the file is useless, but it's an implementation stub, and it's in the attic and unused, so I'm leaving it be rather than deleting it and changing a dozen files to remove the header include. If this is still a problem, reopen the issue, and I'll see what can be done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/5#issuecomment-121327206
https://github.com/psi4/psi4/issues/6#issuecomment-17472943:310,Integrability,wrap,wrapper,310,"Oh, here's the full debuginfo. ==12645== Process terminating with default action of signal 11 (SIGSEGV); ==12645== Access not within mapped region at address 0x0; ==12645== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (scf_grad.cc:330); ==12645== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (wrapper.cc:16); ==12645== by 0x67BD9E: py_psi_scfgrad() (python.cc:177); ==12645== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (invoke.hpp:75); ==12645== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/6#issuecomment-17472943
https://github.com/psi4/psi4/issues/6#issuecomment-17472943:115,Security,Access,Access,115,"Oh, here's the full debuginfo. ==12645== Process terminating with default action of signal 11 (SIGSEGV); ==12645== Access not within mapped region at address 0x0; ==12645== at 0x11C73A9: psi::scfgrad::SCFGrad::compute_gradient() (scf_grad.cc:330); ==12645== by 0x11BF3EC: psi::scfgrad::scfgrad(psi::Options&) (wrapper.cc:16); ==12645== by 0x67BD9E: py_psi_scfgrad() (python.cc:177); ==12645== by 0x682F96: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<int (*)(), boost::python::default_call_policies, boost::mpl::vector1<int> > >::operator()(_object_, _object_) (invoke.hpp:75); ==12645== by 0x31C2429AAA: boost::python::objects::function::call(_object_, _object_) const (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2429CC7: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2432C4A: boost::python::handle_exception_impl(boost::function0<void>) (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x31C2427F84: ??? (in /usr/lib64/libboost_python.so.1.50.0); ==12645== by 0x3D50849C0D: PyObject_Call (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508D9582: PyEval_EvalFrameEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D508DDCBE: PyEval_EvalCodeEx (in /usr/lib64/libpython2.7.so.1.0); ==12645== by 0x3D5086DA36: ??? (in /usr/lib64/libpython2.7.so.1.0)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/6#issuecomment-17472943
https://github.com/psi4/psi4/issues/7#issuecomment-19470203:2,Testability,test,tested,2,"I tested atom Ne because I saw it in the user manual (pp. 20) as an example. Strangely it works, and Psi4 terminated successfully.; Buy you a beer for Ne.... Hao",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470203
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:691,Availability,error,error,691,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:546,Energy Efficiency,energy,energy,546,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:872,Energy Efficiency,energy,energy,872,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:894,Energy Efficiency,energy,energy,894,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:697,Integrability,message,message,697,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:1165,Safety,sanity check,sanity check,1165,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:45,Testability,test,tested,45,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470461:386,Testability,test,test,386,"This works for me on the main trunk. Haven't tested beta4. -TDC. On Jun 14, 2013, at 1:10 PM, renh notifications@github.com wrote:. > Hi all,; > ; > I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; > ; > #=======================; > #! sample input; > memory 500 mb; > ; > molecule test {; > Li 0.000 0.000 0.000; > }; > ; > set reference uhf; > set globals = {; > scf_type direct; > basis 6-31G; > e_convergence 10; > }; > ; > this_energy = energy('scf'); > #=======================; > ; > running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64); > ; > The error message is: ; > #=======================; > Traceback (most recent call last):; > File """", line 36, in ; > File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; > procedures['energy']lowername; > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; > scf_helper(name, **kwargs); > File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; > e_scf = PsiMod.scf(precallback, postcallback); > RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; > file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; > line: 339; > #=======================; > ; > Is it a but or am I wrong anywhere?; > I appreciate any help and suggestions,; > Hao; > ; > —; > Reply to this email directly or view it on GitHub. ## . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470461
https://github.com/psi4/psi4/issues/7#issuecomment-19470973:273,Availability,avail,available,273,"The reason this doesn't work in the beta branch is that scf_type direct does a few steps density-fitted, then switches over to the exact algorithm. The necessary auxiliary basis set (cc-pvdz-jkfit http://sirius.chem.vt.edu/psi4manual/master/basissets_byfamily.html) is not available for the atoms the original poster listed. In the development branch, there's a check that automatically turns off the density-fitting steps if the aux basis is not available. We'll be releasing the development branch fairly soon, so this shouldn't come up again. In the meantime, if you add `set df_scf_guess false` for atoms that are missing the aux set, it won't try the density-fitting steps and your inputs should work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470973
https://github.com/psi4/psi4/issues/7#issuecomment-19470973:447,Availability,avail,available,447,"The reason this doesn't work in the beta branch is that scf_type direct does a few steps density-fitted, then switches over to the exact algorithm. The necessary auxiliary basis set (cc-pvdz-jkfit http://sirius.chem.vt.edu/psi4manual/master/basissets_byfamily.html) is not available for the atoms the original poster listed. In the development branch, there's a check that automatically turns off the density-fitting steps if the aux basis is not available. We'll be releasing the development branch fairly soon, so this shouldn't come up again. In the meantime, if you add `set df_scf_guess false` for atoms that are missing the aux set, it won't try the density-fitting steps and your inputs should work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470973
https://github.com/psi4/psi4/issues/7#issuecomment-19472479:561,Availability,avail,available,561,"got it, thanks. I asked basisset_parser.cc to print out the basis file it was reading, ; and I found in addition to read the basis file; $(PSI4)/share/psi/basis/6-31g.gbs. it also reads; $(PSI4)/share/psi/basis/cc-pvdz-jkfit.gbs. On 6/14/13 10:37 AM, Lori Burns wrote:. > The reason this doesn't work in the beta branch is that scf_type ; > direct does a few steps density-fitted, then switches over to the ; > exact algorithm. The necessary auxiliary basis set (cc-pvdz-jkfit ; > http://sirius.chem.vt.edu/psi4manual/master/basissets_byfamily.html) ; > is not available for the atoms the original poster listed. In the ; > development branch, there's a check that automatically turns off the ; > density-fitting steps if the aux basis is not available. We'll be ; > releasing the development branch fairly soon, so this shouldn't come ; > up again. In the meantime, if you add |set df_scf_guess false| for ; > atoms that are missing the aux set, it won't try the density-fitting ; > steps and your inputs should work fine.; > ; > —; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4.0b4/issues/7#issuecomment-19470973.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19472479
https://github.com/psi4/psi4/issues/7#issuecomment-19472479:743,Availability,avail,available,743,"got it, thanks. I asked basisset_parser.cc to print out the basis file it was reading, ; and I found in addition to read the basis file; $(PSI4)/share/psi/basis/6-31g.gbs. it also reads; $(PSI4)/share/psi/basis/cc-pvdz-jkfit.gbs. On 6/14/13 10:37 AM, Lori Burns wrote:. > The reason this doesn't work in the beta branch is that scf_type ; > direct does a few steps density-fitted, then switches over to the ; > exact algorithm. The necessary auxiliary basis set (cc-pvdz-jkfit ; > http://sirius.chem.vt.edu/psi4manual/master/basissets_byfamily.html) ; > is not available for the atoms the original poster listed. In the ; > development branch, there's a check that automatically turns off the ; > density-fitting steps if the aux basis is not available. We'll be ; > releasing the development branch fairly soon, so this shouldn't come ; > up again. In the meantime, if you add |set df_scf_guess false| for ; > atoms that are missing the aux set, it won't try the density-fitting ; > steps and your inputs should work fine.; > ; > —; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4.0b4/issues/7#issuecomment-19470973.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19472479
https://github.com/psi4/psi4/issues/8#issuecomment-19999150:193,Deployability,release,release,193,"According to Jet ""The segfault occurs on some systems because Python has already been shutdown but Boost Python objects still exists."" This is fixed and the fix will come out in the next minor release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/8#issuecomment-19999150
https://github.com/psi4/psi4/pull/9#issuecomment-20533136:56,Testability,test,test,56,"Awesome, thanks for this fix. I haven't had a chance to test it yet but does it still work with Python 2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20533136
https://github.com/psi4/psi4/pull/9#issuecomment-20534484:429,Energy Efficiency,efficient,efficient,429,"It should do but I'll check once the test suite with python 3 has finished and let you know. I am running the full test suite which is revealing a few more compatibility issues. Most are minor and easily fixed. The major problem is that iteritems and itervalues are used in several places. Unfortunately these have been (essentially) replaced in python 3 with the items and values methods, which return lists (rather than memory efficient generators) in python 2. I'm not sure what to do about this--one option is to just use the items and values methods, but that uses more memory in python 2. Another alternative is to write a function which returns iteritems in python 2 and items in python 3, but that's quite intrusive. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20534484
https://github.com/psi4/psi4/pull/9#issuecomment-20534484:37,Testability,test,test,37,"It should do but I'll check once the test suite with python 3 has finished and let you know. I am running the full test suite which is revealing a few more compatibility issues. Most are minor and easily fixed. The major problem is that iteritems and itervalues are used in several places. Unfortunately these have been (essentially) replaced in python 3 with the items and values methods, which return lists (rather than memory efficient generators) in python 2. I'm not sure what to do about this--one option is to just use the items and values methods, but that uses more memory in python 2. Another alternative is to write a function which returns iteritems in python 2 and items in python 3, but that's quite intrusive. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20534484
https://github.com/psi4/psi4/pull/9#issuecomment-20534484:115,Testability,test,test,115,"It should do but I'll check once the test suite with python 3 has finished and let you know. I am running the full test suite which is revealing a few more compatibility issues. Most are minor and easily fixed. The major problem is that iteritems and itervalues are used in several places. Unfortunately these have been (essentially) replaced in python 3 with the items and values methods, which return lists (rather than memory efficient generators) in python 2. I'm not sure what to do about this--one option is to just use the items and values methods, but that uses more memory in python 2. Another alternative is to write a function which returns iteritems in python 2 and items in python 3, but that's quite intrusive. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20534484
https://github.com/psi4/psi4/pull/9#issuecomment-20536164:263,Deployability,patch,patch,263,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164
https://github.com/psi4/psi4/pull/9#issuecomment-20536164:559,Deployability,patch,patches,559,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164
https://github.com/psi4/psi4/pull/9#issuecomment-20536164:213,Integrability,interface,interface,213,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164
https://github.com/psi4/psi4/pull/9#issuecomment-20536164:552,Usability,simpl,simple,552,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:222,Availability,fault,faults,222,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:848,Deployability,patch,patch,848,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:211,Energy Efficiency,energy,energy,211,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:794,Integrability,interface,interface,794,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:899,Integrability,interface,interface,899,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:735,Modifiability,plugin,plugins,735,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:33,Testability,test,tests,33,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:86,Testability,test,tests,86,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20545979:724,Testability,test,tested,724,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:841,Deployability,patch,patch,841,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:191,Energy Efficiency,energy,energy,191,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:1087,Integrability,rout,routines,1087,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:430,Modifiability,plugin,plugins,430,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:328,Testability,test,test,328,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:418,Testability,test,tested,418,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20548249:1008,Testability,test,test,1008,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249
https://github.com/psi4/psi4/pull/9#issuecomment-20552847:140,Availability,toler,tolerance,140,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847
https://github.com/psi4/psi4/pull/9#issuecomment-20552847:14,Energy Efficiency,energy,energy,14,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847
https://github.com/psi4/psi4/pull/9#issuecomment-20552847:21,Testability,test,test,21,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847
https://github.com/psi4/psi4/pull/9#issuecomment-20552847:257,Testability,test,tests,257,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847
https://github.com/psi4/psi4/pull/9#issuecomment-20552847:686,Testability,test,test,686,"- The fd-freq-energy test fails for me if the exit() command is removed---the 5-point frequencies disagree by slightly more than 0.001 (the tolerance threshold).; - Thanks for the pointer on dftd3. I was indeed looking at the wrong documentation. The dftd3 tests needed only a small change to work (see above commit).; - One option for format_kwargs_for_input is to reopen the file in binary mode before calling it and then reopening the file in (normal) text mode afterwards. Messy but it should work under python 2 and python 3. Regarding checking against different platforms, have you considered using buildbot to automate the process? Given psi4 is so easy to checkout, compile and test, setting up buildbot would be pretty easy. Let me know if you'd like a hand/advice---I'm moving to using psi4 for as much as possible so I'm happy to spend time helping to make it work more smoothly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20552847
https://github.com/psi4/psi4/pull/9#issuecomment-20587095:354,Deployability,release,release,354,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095
https://github.com/psi4/psi4/pull/9#issuecomment-20587095:249,Energy Efficiency,energy,energy,249,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095
https://github.com/psi4/psi4/pull/9#issuecomment-20587095:221,Testability,test,test,221,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095
https://github.com/psi4/psi4/pull/9#issuecomment-20587095:831,Testability,test,tests,831,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095
https://github.com/psi4/psi4/pull/9#issuecomment-20587095:1271,Testability,test,testing,1271,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095
https://github.com/psi4/psi4/pull/9#issuecomment-20634786:407,Integrability,wrap,wrappers,407,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786
https://github.com/psi4/psi4/pull/9#issuecomment-20634786:383,Testability,test,tests,383,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786
https://github.com/psi4/psi4/pull/9#issuecomment-20634786:597,Testability,test,testing,597,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786
https://github.com/psi4/psi4/pull/9#issuecomment-20634786:627,Testability,test,testing,627,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786
https://github.com/psi4/psi4/pull/9#issuecomment-20634786:740,Testability,test,tests,740,"Thanks. Don't worry about pulling my changes into this tree--that sounds like it would unnecessarily complicate matters. I did (briefly) try my suggestion for format_kwargs_for_input and it didn't work out--the input parser does not like the binary format! An alternative is to use json rather than pickle. This works for the format_kwargs_for_input case (both python 2 and python 3 tests pass) but not for wrappers.py (db_func is a function, which json can't serialize by default, so pywrap-db2 still fails under python 3) and I have didn't look at the pickle use in text.py. As far as automated testing goes, I've found just testing the setups I use regularly gets most of the benefits (especially as some people are not great at running tests before committing!). I am a fan...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20634786
https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1073,Availability,ERROR,ERROR,1073,"EG ---; ---------------------------------------------------------------------------; Coordinate Previous Force Change New; ---------- -------- ------ ------ ------; 1 R(1,2) = 1.257186 -0.000456 0.000097 1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508
https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1224,Energy Efficiency,charge,charge,1224," -------- ------ ------ ------; 1 R(1,2) = 1.257186 -0.000456 0.000097 1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting succ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508
https://github.com/psi4/psi4/issues/10#issuecomment-149031508:2205,Integrability,message,message,2205,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508
https://github.com/psi4/psi4/issues/10#issuecomment-149031508:1916,Performance,Optimiz,Optimization,1916,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508
https://github.com/psi4/psi4/issues/10#issuecomment-149031508:2053,Performance,optimiz,optimization,2053,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508
https://github.com/psi4/psi4/issues/10#issuecomment-149031508:2246,Performance,Optimiz,Optimization,2246,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508
https://github.com/psi4/psi4/issues/10#issuecomment-189324724:218,Performance,Optimiz,Optimization,218,"Still fails with the current HEAD (Feb 26, 2015). ```; attempted to find atom at; -2.764295 -2.721319 2.493509; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 2 steps) ****; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-189324724
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:28,Availability,error,errors,28,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:117,Availability,ERROR,ERROR,117,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:268,Energy Efficiency,charge,charge,268,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:1583,Energy Efficiency,energy,energy,1583,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:827,Performance,Optimiz,Optimization,827,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:907,Performance,optimiz,optimize,907,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:1553,Performance,optimiz,optimize,1553,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:1650,Performance,optimiz,optimization,1650,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-200900928:53,Usability,simpl,simple,53,"+1. I have run into similar errors. This is with the simple case of doing a dihedral scan on hydrogen peroxide. ```; ERROR: Symmetry operation 2 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; H 0.021730534334 1.023759611300 -0.835745328589 1.007825032070; O -0.026376271469 0.710734621460 0.054491125526 15.994914619560; O 0.026376271467 -0.710734621234 0.054491125355 15.994914619560; H -0.021730534332 -1.023759611527 -0.835745328694 1.007825032070. attempted to find atom at; 0.041065 -1.934625 -1.579330; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 1 steps) ****; ```. In my case, some steps fail to optimize while most don't. It's hard to say why some are failing, while other steps are not. It seems that rotation far away from the input molecule conformer are an issue. Though that's not always the case, so...? Here's my input file:. ```; molecule HOOH {; 0 1; H ; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 0.0 ; }. steps = 35; step_size = 10 ; start_angle = -170.0; dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]; #print(dihedrals); for dihedral in dihedrals:; set {; basis 6-31G*; scf_type df; guess sad ; ints_tolerance 1.0E-8; } ; set optking {; fixed_dihedral = $dihedral; } ; optimize('scf'); SCF_Energy = energy('scf'); ```. Edit: I should add that attempting to make the optimization gentler with the following settings, or changing the step size, does not seem to fix the issue. ```; full_hess_every 1; dynamic_level 1; opt_coordinates both; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-200900928
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:34,Availability,toler,tolerance,34,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:87,Availability,toler,tolerance,87,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:290,Energy Efficiency,ENERGY,ENERGY,290,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:326,Energy Efficiency,energy,energy,326,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:119,Performance,optimiz,optimizer,119,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:303,Safety,avoid,avoid,303,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-201451437:212,Usability,simpl,simple,212,"This looks like a mismatch in the tolerance used to figure out the point group and the tolerance being used within the optimizer. For the HOOH case, adding `symmetry c2` to the molecule specification should be a simple workaround. Also, you can use `SCF_Energy = psi4.get_variable('CURRENT ENERGY')` to avoid running an extra energy calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-201451437
https://github.com/psi4/psi4/issues/10#issuecomment-202110158:137,Availability,down,down,137,"This erratic behavior is caused by several problems in the optimizer (one of which being the maximum step size getting needlessly scaled down). However, I believe I've solved all the problems and can now generate a nice, smooth torsional potential curve in C2 symmetry. I'll push the fix soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202110158
https://github.com/psi4/psi4/issues/10#issuecomment-202110158:59,Performance,optimiz,optimizer,59,"This erratic behavior is caused by several problems in the optimizer (one of which being the maximum step size getting needlessly scaled down). However, I believe I've solved all the problems and can now generate a nice, smooth torsional potential curve in C2 symmetry. I'll push the fix soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202110158
https://github.com/psi4/psi4/issues/10#issuecomment-202577523:821,Energy Efficiency,ENERGY,ENERGY,821,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523
https://github.com/psi4/psi4/issues/10#issuecomment-202577523:74,Performance,optimiz,optimizations,74,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523
https://github.com/psi4/psi4/issues/10#issuecomment-202577523:756,Performance,optimiz,optimize,756,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523
https://github.com/psi4/psi4/issues/10#issuecomment-202577523:953,Performance,optimiz,optimizer,953,"I've just issued a pull request with some changes to the fixed-coordinate optimizations. With that code, I am able to get a good dihedral scan for HOOH in C2 with the input below. (A reminder that, in general, such scans can have erratic jumps since this is not following an IRC, but HOOH is so well-behaved the result is smooth and symmetric anyway.). ```; molecule HOOH {; 0 1; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 -175.0; }. set {; basis 6-31G*; scf_type df; guess sad; ints_tolerance 1.0E-8; }. start_angle = -175.0; steps = 36; step_size = 10. dihedrals = [""1 2 3 4 {}"".format((counter * step_size) + start_angle) for counter in range(0, steps)]. SCF_Energies = []. for dihedral in dihedrals:; set optking { fixed_dihedral = $dihedral }; optimize('scf'); SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ). for i in range(steps):; print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); ```. Note that at present the optimizer does not of its own volition head through the discontinuity at 180, even if that path is the shortest to the fixed value. Thus, I began at -175 and started up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202577523
https://github.com/psi4/psi4/issues/10#issuecomment-202622738:1304,Energy Efficiency,ENERGY,ENERGY,1304,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738
https://github.com/psi4/psi4/issues/10#issuecomment-202622738:317,Integrability,rout,routine,317,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738
https://github.com/psi4/psi4/issues/10#issuecomment-202622738:484,Performance,optimiz,optimizations,484,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738
https://github.com/psi4/psi4/issues/10#issuecomment-202622738:1237,Performance,optimiz,optimize,1237,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738
https://github.com/psi4/psi4/issues/10#issuecomment-202622738:1445,Performance,optimiz,optimizer,1445,"Excellent, thanks, Rollin. Daniel Smith brought up the possibility that we might add a little function; to the driver to automate dihedral scans. That seems like a good idea.; This input isn't super complicated, but nevertheless I suspect some users; would appreciate automating these loops in a pre-packaged library routine. On Mon, Mar 28, 2016 at 4:55 PM, Rollin King notifications@github.com; wrote:. > I've just issued a pull request with some changes to the fixed-coordinate; > optimizations. With that code, I am able to get a good dihedral scan for; > HOOH in C2 with the input below. (A reminder that, in general, such scans; > can have erratic jumps since this is not following an IRC, but HOOH is so; > well-behaved the result is smooth and symmetric anyway.); > ; > molecule HOOH {; > 0 1; > H; > O 1 0.90; > O 2 1.40 1 100.0; > H 3 0.90 2 100.0 1 -175.0; > }; > ; > set {; > basis 6-31G*; > scf_type df; > guess sad; > ints_tolerance 1.0E-8; > }; > ; > start_angle = -175.0; > steps = 36; > step_size = 10; > ; > dihedrals = [""1 2 3 4 {}"".format((counter \* step_size) + start_angle) for counter in range(0, steps)]; > ; > SCF_Energies = []; > ; > for dihedral in dihedrals:; > set optking { fixed_dihedral = $dihedral }; > optimize('scf'); > SCF_Energies.append( psi4.get_variable('CURRENT ENERGY') ); > ; > for i in range(steps):; > print ""%10s%20.10f"" % (start_angle+i*step_size, SCF_Energies[i]); > ; > Note that at present the optimizer does not of its own volition head; > through the discontinuity at 180, even if that path is the shortest to the; > fixed value. Thus, I began at -175 and started up.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-202577523",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-202622738
https://github.com/psi4/psi4/issues/10#issuecomment-203056297:20,Performance,optimiz,optimization,20,"No transition-state optimization algorithm always converges to the desired TS. This case is so expensive it is unwieldy to debug. I wonder what the issue is to be solved here. Is there a TS nearby to the input geometry, and is it known to be in Cs symmetry?. If the P-RFO eigenvector is asymmetric, do we want to follow it or not? If yes, then there is clearly a geometry symmetrization that will have to be omitted. If no, then it is hard to see how the algorithm could choose the best, nearest TS in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203056297
https://github.com/psi4/psi4/issues/10#issuecomment-203056297:353,Usability,clear,clearly,353,"No transition-state optimization algorithm always converges to the desired TS. This case is so expensive it is unwieldy to debug. I wonder what the issue is to be solved here. Is there a TS nearby to the input geometry, and is it known to be in Cs symmetry?. If the P-RFO eigenvector is asymmetric, do we want to follow it or not? If yes, then there is clearly a geometry symmetrization that will have to be omitted. If no, then it is hard to see how the algorithm could choose the best, nearest TS in general.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203056297
https://github.com/psi4/psi4/issues/10#issuecomment-203062097:135,Availability,error,error,135,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097
https://github.com/psi4/psi4/issues/10#issuecomment-203062097:182,Availability,error,error,182,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097
https://github.com/psi4/psi4/issues/10#issuecomment-203062097:188,Integrability,message,message,188,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097
https://github.com/psi4/psi4/issues/10#issuecomment-203062097:174,Usability,clear,clearer,174,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097
https://github.com/psi4/psi4/issues/10#issuecomment-203440132:114,Availability,error,error,114,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132
https://github.com/psi4/psi4/issues/10#issuecomment-203440132:372,Availability,error,error,372,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132
https://github.com/psi4/psi4/issues/10#issuecomment-203440132:422,Availability,error,error,422,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132
https://github.com/psi4/psi4/issues/10#issuecomment-203440132:428,Integrability,message,message,428,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132
https://github.com/psi4/psi4/issues/10#issuecomment-203440132:14,Testability,test,test,14,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132
https://github.com/psi4/psi4/issues/10#issuecomment-203440132:414,Usability,clear,clearer,414,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132
https://github.com/psi4/psi4/issues/10#issuecomment-203471756:35,Availability,failure,failure,35,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756
https://github.com/psi4/psi4/issues/10#issuecomment-203471756:199,Availability,error,error,199,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756
https://github.com/psi4/psi4/issues/10#issuecomment-203471756:205,Integrability,message,message,205,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756
https://github.com/psi4/psi4/issues/10#issuecomment-203487706:187,Availability,failure,failure,187,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706
https://github.com/psi4/psi4/issues/10#issuecomment-203487706:360,Availability,error,error,360,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706
https://github.com/psi4/psi4/issues/10#issuecomment-203487706:366,Integrability,message,message,366,"OK, I had only run the default 50 steps. On Wed, Mar 30, 2016 at 9:53 AM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Thats very odd, I get a failure; > at a large number of steps for both SCF and DFT. I guess you can consider; > that this doesn't identify the TS, but it should still fail with a; > understandable error message.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203471756",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203487706
https://github.com/psi4/psi4/issues/10#issuecomment-203491619:75,Availability,failure,failures,75,"@psi-rking Ah, thats disturbing it appears to be non-deterministic. I find failures between iteration 7 and 35 or the optimization stopping at iteration 50 between separate DF-SCF runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203491619
https://github.com/psi4/psi4/issues/10#issuecomment-203491619:118,Performance,optimiz,optimization,118,"@psi-rking Ah, thats disturbing it appears to be non-deterministic. I find failures between iteration 7 and 35 or the optimization stopping at iteration 50 between separate DF-SCF runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203491619
https://github.com/psi4/psi4/issues/11#issuecomment-34667483:17,Deployability,patch,patch,17,No need for this patch with psi4public.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/11#issuecomment-34667483
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:291,Availability,fault,faults,291,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:563,Availability,avail,avail,563,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:638,Availability,fault,fault,638,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7773,Availability,down,down,7773,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:119,Deployability,patch,patch,119,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:463,Energy Efficiency,energy,energy,463,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:1219,Performance,optimiz,optimized,1219,"lations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::ob",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2034,Performance,optimiz,optimized,2034,"si::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2128,Performance,optimiz,optimized,2128,"ray.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2150,Performance,optimiz,optimized,2150,"ray.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2404,Performance,optimiz,optimized,2404,"i::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<syntheti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2426,Performance,optimiz,optimized,2426,"i::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<syntheti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2446,Performance,optimiz,optimized,2446,"i::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<syntheti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:2944,Performance,optimiz,optimized,2944,"t::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>); > at /usr/include/boost/python/detail/invoke.hpp:75; > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:3378,Performance,optimiz,optimized,3378,"operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38; > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:3542,Performance,optimiz,optimized,3542,"::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0; > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (); > from /usr/lib/libboost_python3.so.1.54.0; > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...); > at /usr/include/boost/python/detail/translate_exception.hpp:48; > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382; > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4480,Performance,optimiz,optimized,4480,"tion0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4500,Performance,optimiz,optimized,4500,"tion0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4547,Performance,optimiz,optimized,4547,"tion0<void> > (a2=..., a1=..., this=<optimized out>); > at /usr/include/boost/bind/bind_template.hpp:102; > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4615,Performance,optimiz,optimized,4615,"etail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:4856,Performance,optimiz,optimized,4856,"handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132; > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0; > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0; > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084; > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5438,Performance,optimiz,optimized,5438,"l (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5458,Performance,optimiz,optimized,5458,"l (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5481,Performance,optimiz,optimized,5481,"l (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283; > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086; > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5756,Performance,optimiz,optimized,5756,"d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5803,Performance,optimiz,optimized,5803,"d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:5994,Performance,optimiz,optimized,5994,"0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6019,Performance,optimiz,optimized,6019,"0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6066,Performance,optimiz,optimized,6066,"0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0); > at Python/ceval.c:3433; > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6134,Performance,optimiz,optimized,6134,"unc=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633; > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084; > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0); > at Python/ceval.c:4378; > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720; > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:6889,Performance,optimiz,optimized,6889,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7166,Performance,optimiz,optimized,7166,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7506,Performance,optimiz,optimized,7506,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7529,Performance,optimiz,optimized,7529,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:7651,Performance,optimiz,optimized,7651,"; > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161; > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084; > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679; > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433; > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0); > at Python/ceval.c:771; > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981; > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0); > at Python/pythonrun.c:1914; > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); > from /usr/lib/libboost_python3.so.1.54.0; > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446; > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111; > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious.; > ; > Thanks!; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22188141:30,Usability,feedback,feedback,30,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:650,Availability,fault,faults,650,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:943,Availability,avail,avail,943,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:1018,Availability,fault,fault,1018,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:8336,Availability,down,down,8336,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:449,Deployability,patch,patch,449,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:840,Energy Efficiency,energy,energy,840,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:1628,Performance,optimiz,optimized,1628,"n faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2464,Performance,optimiz,optimized,2464,"=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2564,Performance,optimiz,optimized,2564,"0012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2586,Performance,optimiz,optimized,2586,"0012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2843,Performance,optimiz,optimized,2843,"ies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2865,Performance,optimiz,optimized,2865,"ies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:2885,Performance,optimiz,optimized,2885,"ies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307 ; > > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171 ; > > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429 ; > > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:3398,Performance,optimiz,optimized,3398,"alue<double const&>, double (_)()> (rc=..., f=<optimized out>) ; > > at /usr/include/boost/python/detail/invoke.hpp:75 ; > > #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223 ; > > #9 boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (_)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator() (this=<optimized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:3838,Performance,optimiz,optimized,3838,"imized out>, args=<optimized out>, kw=<optimized out>) at /usr/include/boost/python/object/py_function.hpp:38 ; > > #10 0x00007ffff6695f2a in boost::python::objects::function::call(_object_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4005,Performance,optimiz,optimized,4005,"ct_, _object_) const () from /usr/lib/libboost_python3.so.1.54.0 ; > > #11 0x00007ffff6696298 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #12 0x00007ffff66a01b3 in boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #13 0x000000000070c003 in operator() (this=<optimized out>, translate=0x6f9ff0 <translate_psi_exception(psi::PsiException const&)>, f=..., handler=...) ; > > at /usr/include/boost/python/detail/translate_exception.hpp:48 ; > > #14 operator()<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(const psi::PsiException&)>, boost::_bi::list2<const boost::python::detail::exception_handler&, const boost::function0<void>&> > (f=..., a=<synthetic pointer>, this=<optimized out>) at /usr/include/boost/bind/bind.hpp:382 ; > > #15 operator()<boost::python::detail::exception_handler, boost::function0<void> > (a2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4961,Performance,optimiz,optimized,4961,"2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:4981,Performance,optimiz,optimized,4981,"2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5028,Performance,optimiz,optimized,5028,"2=..., a1=..., this=<optimized out>) ; > > at /usr/include/boost/bind/bind_template.hpp:102 ; > > #16 boost::detail::function::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5099,Performance,optimiz,optimized,5099,"n::function_obj_invoker2<boost::_bi::bind_t<bool, boost::python::detail::translate_exception<psi::PsiException, void (*)(psi::PsiException const&)>, boost::_bi::list3boost::arg<1, boost::arg<2>, boost::_bi::value<void (*)(psi::PsiException const&)> > >, bool, boost::python::detail::exception_handler const&, boost::function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5346,Performance,optimiz,optimized,5346,":function0<void> const&>::invoke (function_obj_ptr=..., a0=..., a1=...) at /usr/include/boost/function/function_template.hpp:132 ; > > #17 0x00007ffff669ff7d in boost::python::handle_exception_impl(boost::function0<void>) () from /usr/lib/libboost_python3.so.1.54.0 ; > > #18 0x00007ffff6694a53 in ?? () from /usr/lib/libboost_python3.so.1.54.0 ; > > #19 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x278dbd0, arg=arg@entry=0x7ffff7f4f050, kw=kw@entry=0x0) at Objects/abstract.c:2084 ; > > #20 0x00007ffff5148fa6 in do_call (nk=<optimized out>, na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5942,Performance,optimiz,optimized,5942,"na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5962,Performance,optimiz,optimized,5962,"na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:5985,Performance,optimiz,optimized,5985,"na=<optimized out>, pp_stack=0x7fffffffdc30, func=<optimized out>) at Python/ceval.c:4283 ; > > #21 call_function (oparg=<optimized out>, pp_stack=0x7fffffffdc30) at Python/ceval.c:4086 ; > > #22 PyEval_EvalFrameEx (f=f@entry=0x290fc70, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #23 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6269,Performance,optimiz,optimized,6269,"Ex (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6316,Performance,optimiz,optimized,6316,"Ex (_co=0x7fffef1d9270, globals=<optimized out>, locals=locals@entry=0x0, args=args@entry=0x7ffff7eace28, ; > > argcount=1, kws=kws@entry=0x7ffff7f4f068, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6512,Performance,optimiz,optimized,6512,"y=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6537,Performance,optimiz,optimized,6537,"y=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6584,Performance,optimiz,optimized,6584,"y=0, kwdefs=0x0, closure=0x0) ; > > at Python/ceval.c:3433 ; > > #24 0x00007ffff50c4033 in function_call (func=0x7fffef2128c0, arg=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:6655,Performance,optimiz,optimized,6655,"g=0x7ffff7eace10, kw=0x7fffef1a75f0) at Objects/funcobject.c:633 ; > > #25 0x00007ffff509dfdc in PyObject_Call (func=func@entry=0x7fffef2128c0, arg=arg@entry=0x7ffff7eace10, kw=kw@entry=0x7fffef1a75f0) at Objects/abstract.c:2084 ; > > #26 0x00007ffff5148044 in ext_do_call (nk=<optimized out>, na=<optimized out>, flags=<optimized out>, pp_stack=0x7fffffffdf48, func=0x7fffef2128c0) ; > > at Python/ceval.c:4378 ; > > #27 PyEval_EvalFrameEx (f=f@entry=0x2982860, throwflag=throwflag@entry=0) at Python/ceval.c:2720 ; > > #28 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7fffefef5e40, globals=<optimized out>, locals=locals@entry=0x0, args=<optimized out>, ; > > argcount=argcount@entry=1, kws=0x28d54e8, kwcount=0, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3433 ; > > #29 0x00007ffff514b004 in fast_function (nk=<optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:7429,Performance,optimiz,optimized,7429,"optimized out>, na=1, n=<optimized out>, pp_stack=0x7fffffffe160, func=<optimized out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:7711,Performance,optimiz,optimized,7711,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:8063,Performance,optimiz,optimized,8063,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:8086,Performance,optimiz,optimized,8086,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:8211,Performance,optimiz,optimized,8211,"ed out>) at Python/ceval.c:4161 ; > > #30 call_function (oparg=<optimized out>, pp_stack=0x7fffffffe160) at Python/ceval.c:4084 ; > > #31 PyEval_EvalFrameEx (f=f@entry=0x28d5360, throwflag=throwflag@entry=0) at Python/ceval.c:2679 ; > > #32 0x00007ffff514d265 in PyEval_EvalCodeEx (_co=_co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0, ; > > args=args@entry=0x0, argcount=argcount@entry=0, kws=kws@entry=0x0, kwcount=kwcount@entry=0, defs=defs@entry=0x0, defcount=defcount@entry=0, ; > > kwdefs=kwdefs@entry=0x0, closure=closure@entry=0x0) at Python/ceval.c:3433 ; > > #33 0x00007ffff514d33b in PyEval_EvalCode (co=co@entry=0x7ffff7f22150, globals=globals@entry=0x7ffff7ed07a0, locals=locals@entry=0x7ffff7ed07a0) ; > > at Python/ceval.c:771 ; > > #34 0x00007ffff51669e4 in run_mod (mod=<optimized out>, filename=filename@entry=0x7ffff51bde72 ""<string>"", globals=globals@entry=0x7ffff7ed07a0, ; > > locals=locals@entry=0x7ffff7ed07a0, flags=flags@entry=0x0, arena=arena@entry=0x28ca640) at Python/pythonrun.c:1981 ; > > #35 0x00007ffff5168335 in PyRun_StringFlags (str=<optimized out>, start=257, globals=0x7ffff7ed07a0, locals=0x7ffff7ed07a0, flags=0x0) ; > > at Python/pythonrun.c:1914 ; > > #36 0x00007ffff66a3f45 in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) () ; > > from /usr/lib/libboost_python3.so.1.54.0 ; > > #37 0x00000000006fcad7 in psi::Python::run (this=<optimized out>, input=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/python.cc:1446 ; > > #38 0x000000000069a8ae in main (argc=2, argv=<optimized out>) at /home/james/projects/psi4/src/bin/psi4/psi4.cc:111 ; > > Any suggestions on what I could do to track this down further? I looked in ccenergy/pair_energies.cc and there was nothing immediately obvious. ; > > ; > > Thanks! ; > > ; > >  ; > > Reply to this email directly or view it on GitHub. ; > > ; > > ; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/12#issuecomment-22192736:360,Usability,feedback,feedback,360,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736
https://github.com/psi4/psi4/issues/13#issuecomment-22784021:14,Testability,test,tests,14,"Actually, the tests fail also on x86_64. This is on the development version of Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22784021
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:36,Testability,test,testing,36,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:57,Testability,test,tests,57,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:91,Testability,test,tests,91,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:240,Testability,test,tests,240,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:323,Testability,test,testing,323,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:431,Testability,test,tests,431,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-22788039:508,Testability,test,test,508,"That may be a problem with the perl testing script (psi4/tests/runtest.pl.in). Most of our tests are handled with compare_values() lines that call a python function that compares to values within the input file. Many of the coupled-cluster tests, though, because the output is so repetitive, use that script to compare the testing output to a output.ref file. The ones marked as failing use the latter. Particularly, cc18 has four tests with the new scheme and the rest with the old scheme. Both versions of test work for me. We should unify these schemes one day, but could something be off with your perl setup?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22788039
https://github.com/psi4/psi4/issues/13#issuecomment-121760444:6,Testability,test,tests,6,Those tests pass for me on Fedora 21 x86_64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-121760444
https://github.com/psi4/psi4/issues/14#issuecomment-22982958:120,Integrability,depend,dependencies,120,"Did you run `make docs`? We've been discouraging users from building the docs themselves, as they require several extra dependencies and we have them hosted (http://sirius.chem.vt.edu/psi4manual/latest/index.html). However, the developers do need to be able to test the docs build, hence the Makefile target is still there. We do want to continue shipping samples in the tarball, as the documentation links to them on github. We can, however, be more careful about making sure they're up to date before packing the tarball. Also, we can drop git tracking of SUMMARY, since it's prone to reshuffling its contents and may show up as modified after a docs build. Would that help?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22982958
https://github.com/psi4/psi4/issues/14#issuecomment-22982958:261,Testability,test,test,261,"Did you run `make docs`? We've been discouraging users from building the docs themselves, as they require several extra dependencies and we have them hosted (http://sirius.chem.vt.edu/psi4manual/latest/index.html). However, the developers do need to be able to test the docs build, hence the Makefile target is still there. We do want to continue shipping samples in the tarball, as the documentation links to them on github. We can, however, be more careful about making sure they're up to date before packing the tarball. Also, we can drop git tracking of SUMMARY, since it's prone to reshuffling its contents and may show up as modified after a docs build. Would that help?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22982958
https://github.com/psi4/psi4/issues/14#issuecomment-22983952:562,Deployability,release,release,562,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952
https://github.com/psi4/psi4/issues/14#issuecomment-22983952:387,Testability,test,tests,387,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952
https://github.com/psi4/psi4/issues/14#issuecomment-22983952:282,Usability,clear,clear,282,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952
https://github.com/psi4/psi4/issues/14#issuecomment-22985263:539,Deployability,release,release,539,"I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists. Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985263
https://github.com/psi4/psi4/issues/14#issuecomment-22985263:105,Testability,test,tests,105,"I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists. Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985263
https://github.com/psi4/psi4/issues/14#issuecomment-22985263:210,Testability,test,tests,210,"I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists. Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985263
https://github.com/psi4/psi4/issues/14#issuecomment-22985486:249,Deployability,release,release,249,"The manuals for older versions are online:-; http://sirius.chem.vt.edu/psi4manual/4.0b4/index.html; http://sirius.chem.vt.edu/psi4manual/4.0b3/index.html; etc…. http://sirius.chem.vt.edu/psi4manual/latest/index.html; will always point to the latest release. On Aug 20, 2013, at 7:19 PM, Lori Burns notifications@github.com wrote:. > I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists.; > ; > Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985486
https://github.com/psi4/psi4/issues/14#issuecomment-22985486:879,Deployability,release,release,879,"The manuals for older versions are online:-; http://sirius.chem.vt.edu/psi4manual/4.0b4/index.html; http://sirius.chem.vt.edu/psi4manual/4.0b3/index.html; etc…. http://sirius.chem.vt.edu/psi4manual/latest/index.html; will always point to the latest release. On Aug 20, 2013, at 7:19 PM, Lori Burns notifications@github.com wrote:. > I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists.; > ; > Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985486
https://github.com/psi4/psi4/issues/14#issuecomment-22985486:438,Testability,test,tests,438,"The manuals for older versions are online:-; http://sirius.chem.vt.edu/psi4manual/4.0b4/index.html; http://sirius.chem.vt.edu/psi4manual/4.0b3/index.html; etc…. http://sirius.chem.vt.edu/psi4manual/latest/index.html; will always point to the latest release. On Aug 20, 2013, at 7:19 PM, Lori Burns notifications@github.com wrote:. > I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists.; > ; > Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985486
https://github.com/psi4/psi4/issues/14#issuecomment-22985486:543,Testability,test,tests,543,"The manuals for older versions are online:-; http://sirius.chem.vt.edu/psi4manual/4.0b4/index.html; http://sirius.chem.vt.edu/psi4manual/4.0b3/index.html; etc…. http://sirius.chem.vt.edu/psi4manual/latest/index.html; will always point to the latest release. On Aug 20, 2013, at 7:19 PM, Lori Burns notifications@github.com wrote:. > I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists.; > ; > Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985486
https://github.com/psi4/psi4/issues/14#issuecomment-121321984:153,Deployability,update,updated,153,"`samples/SUMMARY` which was the major offender was removed some time ago. If someone's added a test to `tests`, the attendant `samples` file doesn't get updated automatically. Perhaps a post-commit hook is in order to make that happen. Basically, we want samples to never be out of date so that a make, make docs doesn't add anything outside the objdir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-121321984
https://github.com/psi4/psi4/issues/14#issuecomment-121321984:95,Testability,test,test,95,"`samples/SUMMARY` which was the major offender was removed some time ago. If someone's added a test to `tests`, the attendant `samples` file doesn't get updated automatically. Perhaps a post-commit hook is in order to make that happen. Basically, we want samples to never be out of date so that a make, make docs doesn't add anything outside the objdir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-121321984
https://github.com/psi4/psi4/issues/14#issuecomment-121321984:104,Testability,test,tests,104,"`samples/SUMMARY` which was the major offender was removed some time ago. If someone's added a test to `tests`, the attendant `samples` file doesn't get updated automatically. Perhaps a post-commit hook is in order to make that happen. Basically, we want samples to never be out of date so that a make, make docs doesn't add anything outside the objdir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-121321984
https://github.com/psi4/psi4/issues/18#issuecomment-182638550:148,Performance,optimiz,optimization,148,"Reasonably, since this is more than 2 years old, you've deleted the dropbox files. Maybe @psi-rking has the inputs to test if any of the newfangled optimization modes work on these cases. Thanks for reporting, but I'm closing since we probably don't have the info to reconstruct the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/18#issuecomment-182638550
https://github.com/psi4/psi4/issues/18#issuecomment-182638550:118,Testability,test,test,118,"Reasonably, since this is more than 2 years old, you've deleted the dropbox files. Maybe @psi-rking has the inputs to test if any of the newfangled optimization modes work on these cases. Thanks for reporting, but I'm closing since we probably don't have the info to reconstruct the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/18#issuecomment-182638550
https://github.com/psi4/psi4/issues/19#issuecomment-25369147:37,Deployability,patch,patch,37,Thanks for finding this. I'll push a patch in shortly for it by removing the offending files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/19#issuecomment-25369147
https://github.com/psi4/psi4/issues/26#issuecomment-27649815:2,Deployability,patch,patch,2,"A patch in format-patch format is here: https://gist.github.com/mbanck/7292871. I don't feel like cloning psi4 on github right now, but if this is a requirement for getting the patch applied, I'll do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/26#issuecomment-27649815
https://github.com/psi4/psi4/issues/26#issuecomment-27649815:18,Deployability,patch,patch,18,"A patch in format-patch format is here: https://gist.github.com/mbanck/7292871. I don't feel like cloning psi4 on github right now, but if this is a requirement for getting the patch applied, I'll do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/26#issuecomment-27649815
https://github.com/psi4/psi4/issues/26#issuecomment-27649815:177,Deployability,patch,patch,177,"A patch in format-patch format is here: https://gist.github.com/mbanck/7292871. I don't feel like cloning psi4 on github right now, but if this is a requirement for getting the patch applied, I'll do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/26#issuecomment-27649815
https://github.com/psi4/psi4/issues/27#issuecomment-29766453:114,Availability,avail,available,114,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453
https://github.com/psi4/psi4/issues/27#issuecomment-29766453:256,Availability,checkpoint,checkpointing,256,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453
https://github.com/psi4/psi4/issues/27#issuecomment-29766453:461,Availability,error,error,461,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453
https://github.com/psi4/psi4/issues/27#issuecomment-29766453:720,Availability,avail,avail,720,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453
https://github.com/psi4/psi4/issues/27#issuecomment-29766453:248,Integrability,rout,routine,248,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453
https://github.com/psi4/psi4/issues/27#issuecomment-29866542:209,Deployability,release,release,209,"Dear Bartek,. FYI, I did some additional investigating and discovered that some problems were introduced in PSI4 regarding restarts. You do need to set ""force_restart true"" (that will be corrected in the next release), but you also need to specify the file numbers assigned to the binary files so that PSI4 knows where the necessary wfn data is stored. Normally the files are named using the process ID number of the psi4 parent process, which changes from run to run. However, for a restart, you need to tell PSI4 which number to use using the ""filename"" keyword. For example, if your binary files were named, e.g., psi.60235.h2o.35, the process ID was 60235. To restart, place the following line at the TOP of your input file:. filename 60235. If you also set force_restart = true, then the CC codes will try to grab the amplitudes from the appropriate file. I'll be interested in hearing if this works for you. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 4, 2013, at 10:22 AM, sbart76 notifications@github.com wrote:. > Thanks for the quick reply. I am running these jobs on my local workstation with only one drive and of which I am the only user. I keep all scratch files in the job directory by setting:; > ; > psi4_io.set_default_path('./'); > ; > in my .psi4rc file. I will check the force_restart keyword. Does the program print the information about the reason of not using the restart files somewhere? That would be useful I guess...; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29866542
https://github.com/psi4/psi4/issues/27#issuecomment-29878672:197,Energy Efficiency,energy,energy,197,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672
https://github.com/psi4/psi4/issues/27#issuecomment-29878672:239,Energy Efficiency,energy,energy,239,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672
https://github.com/psi4/psi4/issues/27#issuecomment-29878672:289,Energy Efficiency,energy,energy,289,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672
https://github.com/psi4/psi4/issues/27#issuecomment-29878672:900,Energy Efficiency,Energy,Energy,900,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672
https://github.com/psi4/psi4/issues/27#issuecomment-29878672:557,Performance,Cache,Cache,557,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672
https://github.com/psi4/psi4/issues/27#issuecomment-29878672:574,Performance,Cache,Cache,574,"Well, there is a progress. I have set the filename and force_restart keywords. This results in:. <pre>; **************************; * *; * CCENERGY *; * *; **************************; Nuclear Rep. energy (chkpt) = 327.121621300020024; SCF energy (chkpt) = -1150.463735394306923; Reference energy (file100) = -1150.463735394307605; Input parameters:; -----------------; Wave function = CC3; Reference wfn = RHF; Memory (Mbytes) = 8192.0; Maxiter = 50; R_Convergence = 1.0e-07; E_Convergence = 1.0e-06; Restart = Yes; DIIS = Yes; AO Basis = NONE; ABCD = NEW; Cache Level = 2; Cache Type = LOW; Print Level = 5; Num. of threads = 8; # Amps to Print = 10; Print MP2 Amps? = No; Analyze T2 Amps = No; Print Pair Ener = No; Local CC = No; T3 Ws incore = No; SCS-MP2 = False; SCSN-MP2 = False; SCS-CCSD = False; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; </pre>. So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash. Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29878672
https://github.com/psi4/psi4/issues/27#issuecomment-29895339:507,Energy Efficiency,energy,energy,507,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339
https://github.com/psi4/psi4/issues/27#issuecomment-29895339:551,Energy Efficiency,energy,energy,551,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339
https://github.com/psi4/psi4/issues/27#issuecomment-29895339:603,Energy Efficiency,energy,energy,603,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339
https://github.com/psi4/psi4/issues/27#issuecomment-29895339:1291,Energy Efficiency,Energy,Energy,1291,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339
https://github.com/psi4/psi4/issues/27#issuecomment-29895339:901,Performance,Cache,Cache,901,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339
https://github.com/psi4/psi4/issues/27#issuecomment-29895339:920,Performance,Cache,Cache,920,"The code still needs to go through at least one iteration of the CC equations in order to confirm that the wfn it used from disk is actually converged. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 5, 2013, at 3:13 AM, sbart76 notifications@github.com wrote:. > Well, there is a progress. I have set the filename and force_restart keywords. This results in:; > ; > ```; > **************************; > * *; > * CCENERGY *; > * *; > **************************; > ; > Nuclear Rep. energy (chkpt) = 327.121621300020024; > SCF energy (chkpt) = -1150.463735394306923; > Reference energy (file100) = -1150.463735394307605; > ; > Input parameters:; > -----------------; > Wave function = CC3; > Reference wfn = RHF; > Memory (Mbytes) = 8192.0; > Maxiter = 50; > R_Convergence = 1.0e-07; > E_Convergence = 1.0e-06; > Restart = Yes; > DIIS = Yes; > AO Basis = NONE; > ABCD = NEW; > Cache Level = 2; > Cache Type = LOW; > Print Level = 5; > Num. of threads = 8; > # Amps to Print = 10; > Print MP2 Amps? = No; > Analyze T2 Amps = No; > Print Pair Ener = No; > Local CC = No; > T3 Ws incore = No; > SCS-MP2 = False; > SCSN-MP2 = False; > SCS-CCSD = False; > ; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > ```; > ; > So it seems to reuse the old T1 amplitudes, but still goes to solving the equations anyway - I was rather expecting it to skip this step - as this is the most time consuming part and there is nothing changed in the system since the crash.; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29895339
https://github.com/psi4/psi4/issues/27#issuecomment-30089484:290,Energy Efficiency,Energy,Energy,290,"I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:. <pre>; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.072955 0.170180; 17 -1.309315455352626 1.686e-07 0.019205 0.072955 0.072955 0.170180; 18 -1.309315454431369 8.202e-08 0.019205 0.072955 0.072955 0.170180; Iterations converged.; </pre>. Am I forgetting about some other restart keyword besides those I mentioned in my first post?. Cheers,; Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089484
https://github.com/psi4/psi4/issues/27#issuecomment-30089484:123,Performance,perform,performs,123,"I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:. <pre>; Using old T1 amplitudes.; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.072955 0.170180; 17 -1.309315455352626 1.686e-07 0.019205 0.072955 0.072955 0.170180; 18 -1.309315454431369 8.202e-08 0.019205 0.072955 0.072955 0.170180; Iterations converged.; </pre>. Am I forgetting about some other restart keyword besides those I mentioned in my first post?. Cheers,; Bartek",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089484
https://github.com/psi4/psi4/issues/27#issuecomment-30089575:750,Energy Efficiency,Energy,Energy,750,"Not that I can tell. It's key to note that it did not re-use the T2 amplitudes, as those are far more important in the correlation procedure. I'm sorry for the trouble, but restarts are one of the trickiest parts of the code because, if not done correctly, they can make the convergence even slower. ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 8, 2013, at 11:20 AM, sbart76 notifications@github.com wrote:. > I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:; > ; > ```; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; > 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; > 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; > 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; > 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; > 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; > 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; > 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; > 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; > 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; > 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; > 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; > 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; > 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; > 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; > 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.07295",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089575
https://github.com/psi4/psi4/issues/27#issuecomment-30089575:560,Performance,perform,performs,560,"Not that I can tell. It's key to note that it did not re-use the T2 amplitudes, as those are far more important in the correlation procedure. I'm sorry for the trouble, but restarts are one of the trickiest parts of the code because, if not done correctly, they can make the convergence even slower. ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 8, 2013, at 11:20 AM, sbart76 notifications@github.com wrote:. > I'm afraid it didn't work for me. After printing ""Using old T1 amplitudes"" psi4 goes into solving the amplitudes again and performs the same 18 steps it did in the first interrupted run:; > ; > ```; > Using old T1 amplitudes.; > Solving CC Amplitude Equations; > ------------------------------; > ```; > ; > Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; > ; > ---; > ; > ```; > 0 -1.235360138318377 0.000e+00 0.000000 0.000000 0.000000 0.135205; > 1 -1.258496281454846 1.123e-01 0.012365 0.042410 0.042410 0.142648; > 2 -1.293057476483294 4.944e-02 0.013001 0.044484 0.044484 0.157500; > 3 -1.308609725361918 3.006e-02 0.017430 0.062504 0.062504 0.166792; > 4 -1.308744865230533 9.227e-03 0.018476 0.067628 0.067628 0.169514; > 5 -1.309149882270872 4.350e-03 0.019044 0.071228 0.071228 0.170429; > 6 -1.309354583622632 1.527e-03 0.019182 0.072401 0.072401 0.170400; > 7 -1.309289325269788 6.083e-04 0.019195 0.072771 0.072771 0.170246; > 8 -1.309311983140765 2.175e-04 0.019204 0.072902 0.072902 0.170205; > 9 -1.309317616625639 9.166e-05 0.019206 0.072942 0.072942 0.170191; > 10 -1.309311723074096 4.260e-05 0.019204 0.072947 0.072947 0.170180; > 11 -1.309314106752320 2.049e-05 0.019204 0.072952 0.072952 0.170178; > 12 -1.309314722212116 8.774e-06 0.019205 0.072954 0.072954 0.170179; > 13 -1.309315551023014 3.974e-06 0.019205 0.072954 0.072954 0.170180; > 14 -1.309315536441650 1.739e-06 0.019205 0.072955 0.072955 0.170180; > 15 -1.309315490258709 7.682e-07 0.019205 0.072954 0.072954 0.170180; > 16 -1.309315447546901 3.279e-07 0.019205 0.072955 0.07295",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-30089575
https://github.com/psi4/psi4/issues/27#issuecomment-54103423:669,Availability,failure,failure,669,"This sort of worked for me i.e. if the job was killed in the CC equations the restart would take a lot of steps but if the job was killed in the (T) then it could pick up nicely from the old T1 and T2 amplitudes, which is helpful for me as one of our users reports his job failing at the start of the triples. My question is whether there is a bare minimum of scratch files that we can copy over from transient scratch to enable the restart or do we need all of them? Also, it looks as though the scratch files (including amplitudes?) are deleted at the end of a successful run so we can't do the ccsd and (T) as separate runs? It takes 80 hours to get to the point of failure so ideally I'd just like to take a look at the (T) failure to see if it is a problem on our side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-54103423
https://github.com/psi4/psi4/issues/27#issuecomment-54103423:728,Availability,failure,failure,728,"This sort of worked for me i.e. if the job was killed in the CC equations the restart would take a lot of steps but if the job was killed in the (T) then it could pick up nicely from the old T1 and T2 amplitudes, which is helpful for me as one of our users reports his job failing at the start of the triples. My question is whether there is a bare minimum of scratch files that we can copy over from transient scratch to enable the restart or do we need all of them? Also, it looks as though the scratch files (including amplitudes?) are deleted at the end of a successful run so we can't do the ccsd and (T) as separate runs? It takes 80 hours to get to the point of failure so ideally I'd just like to take a look at the (T) failure to see if it is a problem on our side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-54103423
https://github.com/psi4/psi4/issues/30#issuecomment-32127370:544,Integrability,message,message,544,"You're completely correct. The first version of MRPT2 was forked from the MRCCSD code, and used an out-of-core sort. However, not all integrals are needed in MP2, so it's quite wasteful to sort all integrals and only use a subset, which inspired us to write an integral direct version. When the CINTS code from Psi3 was replaced, this integral direct code didn't make it into Psi4. It should be quite easy for me to write a density fitted version, which is an even better approach. I have a few other things to do first, but I'll reply to this message when the code is done. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/30#issuecomment-32127370
https://github.com/psi4/psi4/issues/30#issuecomment-32127370:590,Usability,feedback,feedback,590,"You're completely correct. The first version of MRPT2 was forked from the MRCCSD code, and used an out-of-core sort. However, not all integrals are needed in MP2, so it's quite wasteful to sort all integrals and only use a subset, which inspired us to write an integral direct version. When the CINTS code from Psi3 was replaced, this integral direct code didn't make it into Psi4. It should be quite easy for me to write a density fitted version, which is an even better approach. I have a few other things to do first, but I'll reply to this message when the code is done. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/30#issuecomment-32127370
https://github.com/psi4/psi4/issues/32#issuecomment-32648789:284,Availability,error,error,284,"Err, that's confusing, the orbital file is already opened using the PSIO_OPEN_NEW flag, which should blow away the previous contents. The O_TRUNC flag is passed to ::open() inside PSIO::open, which is supposed to ""Delete any prior file content"". So, I don't get how we are getting an error about overwriting TOC entries in PSIO, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-32648789
https://github.com/psi4/psi4/issues/32#issuecomment-32649241:448,Availability,error,error,448,"Maybe the TOC data is read into memory before the O_TRUNC bit?. -Rob. On Fri, Jan 17, 2014 at 4:23 PM, David Sherrill notifications@github.comwrote:. > Err, that's confusing, the orbital file is already opened using the; > PSIO_OPEN_NEW flag, which should blow away the previous contents. The; > O_TRUNC flag is passed to ::open() inside PSIO::open, which is supposed to; > ""Delete any prior file content"". So, I don't get how we are getting an; > error about overwriting TOC entries in PSIO, etc.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4release/issues/32#issuecomment-32648789; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-32649241
https://github.com/psi4/psi4/issues/32#issuecomment-37134034:132,Availability,checkpoint,checkpoint,132,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034
https://github.com/psi4/psi4/issues/32#issuecomment-37134034:211,Availability,checkpoint,checkpoint,211,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034
https://github.com/psi4/psi4/issues/32#issuecomment-37134034:314,Performance,optimiz,optimization,314,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034
https://github.com/psi4/psi4/issues/32#issuecomment-37134034:189,Usability,simpl,simply,189,"I believe the problem here is not in the opening of the MO file (180) but in the attempt to write new MO energies into the existing checkpoint file. I'm looking at a possible fix that will simply delete the old checkpoint file in case the number of MOs changes, but this will likely break something else about the optimization...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37134034
https://github.com/psi4/psi4/issues/32#issuecomment-37137150:203,Availability,error,errors,203,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150
https://github.com/psi4/psi4/issues/32#issuecomment-37137150:506,Availability,down,down,506,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150
https://github.com/psi4/psi4/issues/32#issuecomment-37137150:145,Integrability,depend,dependencies,145,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150
https://github.com/psi4/psi4/issues/32#issuecomment-37137150:240,Testability,test,test,240,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150
https://github.com/psi4/psi4/issues/32#issuecomment-38125711:35,Availability,error,error,35,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711
https://github.com/psi4/psi4/issues/32#issuecomment-38125711:497,Performance,optimiz,optimization,497,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711
https://github.com/psi4/psi4/issues/32#issuecomment-38125711:274,Testability,test,test,274,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711
https://github.com/psi4/psi4/issues/32#issuecomment-38125711:354,Testability,test,test,354,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711
https://github.com/psi4/psi4/issues/32#issuecomment-38125711:425,Testability,test,test,425,"Ok yes Daniel was right, it was an error writing to file 32 not file 180 (I was misled because the last thing in output.dat was a line about file 180). If nmo increases, the problem can be fixed by just replacing file32 each time SCF finishes. I've implemented this and all test cases pass. If nmo decreases, the scf guess might fail, but in a couple of test cases it seems ok. I'm checking in these changes and adding a new test case that checks what happens when nmo increases during a geometry optimization. Pushing this to the psiworkweek branch but will incorporate into public branch in a few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-38125711
https://github.com/psi4/psi4/issues/34#issuecomment-34625278:132,Energy Efficiency,energy,energy,132,There is something wrong with the (ia|jb) block of integrals. This is probably why the first iteration of CCSD has zero correlation energy. Could you send your atomic coordinates so I can try to reproduce this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34625278
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:5861,Availability,avail,available,5861,"y: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 90390.34 mb; memory requirements = 29772.62 mb. Number of abc combinations: 46194526. Computing (T) correction... % complete total time; ```. Stderr. ```; PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: 17 (Incorrect block start address); PSIO_ERROR: unit = 255, errval = 17; PSIO_ERROR: 17 (Incorrect b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:2198,Energy Efficiency,energy,energy,2198,2.081511982 -6.077543015; H 4.251078949 -2.431689751 -7.082213768; C 2.689801382 -1.719555434 -5.786078093; H 1.854221802 -1.740304355 -6.500984287; N 2.362569887 -1.315933652 -4.529163145; C 3.275115300 -1.282414836 -3.531254094; H 2.908596400 -0.995167643 -2.544698473; C 4.606802267 -1.617801463 -3.784599319; H 5.321511729 -1.586242512 -2.959208135; C 4.983969180 -2.022014423 -5.070830353; H 6.015494848 -2.315587932 -5.285364808; C 0.935759635 -0.998151030 -4.240851382; H 0.534357988 -0.506562574 -5.138234696; H 0.939562254 -0.291970622 -3.396388025; C 0.153371123 -2.268353181 -3.933202696; H 0.586362975 -2.807317940 -3.077535365; H 0.159008115 -2.912490143 -4.825998788; H -0.891436693 -1.987652772 -3.718583292; C 2.800348332 -4.626744069 -3.792777198; N 2.802665756 -3.966107613 -2.790173312; N 2.684652290 -5.412141057 -4.861486044; C 3.505354375 -5.173049272 -5.878418578; N 4.138355900 -5.018501942 -6.888486303; }; set globals {; basis aug-cc-pVDZ; scf_type df; df_basis_cc cholesky; freeze_core True; guess sad; basis_guess 3-21G; }; energy('fno-df-ccsd(t)'); ```. Output. ```; *** at Wed Feb 5 05:26:47 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726127. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 29772.62 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural o,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:2661,Energy Efficiency,energy,energy,2661,696; H 0.939562254 -0.291970622 -3.396388025; C 0.153371123 -2.268353181 -3.933202696; H 0.586362975 -2.807317940 -3.077535365; H 0.159008115 -2.912490143 -4.825998788; H -0.891436693 -1.987652772 -3.718583292; C 2.800348332 -4.626744069 -3.792777198; N 2.802665756 -3.966107613 -2.790173312; N 2.684652290 -5.412141057 -4.861486044; C 3.505354375 -5.173049272 -5.878418578; N 4.138355900 -5.018501942 -6.888486303; }; set globals {; basis aug-cc-pVDZ; scf_type df; df_basis_cc cholesky; freeze_core True; guess sad; basis_guess 3-21G; }; energy('fno-df-ccsd(t)'); ```. Output. ```; *** at Wed Feb 5 05:26:47 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726127. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 29772.62 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058511 -3.8800058511 1.0189008043 350; 1 1 3 -3.8152481716 0.0647576795 0.2191661024 6471; 2 2 4 -3.9577344796 -0.1424863080 0.0847277059 6428; 3 3 5 -3.96829,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:3458,Energy Efficiency,Energy,Energy,3458,x integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726127. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 29772.62 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058511 -3.8800058511 1.0189008043 350; 1 1 3 -3.8152481716 0.0647576795 0.2191661024 6471; 2 2 4 -3.9577344796 -0.1424863080 0.0847277059 6428; 3 3 5 -3.9682900740 -0.0105555944 0.0382308599 6716; 4 4 6 -3.9680391582 0.0002509158 0.0104096296 6663; 5 5 7 -3.9686550395 -0.0006158812 0.0052763771 6753; 6 6 8 -3.9689037022 -0.0002486628 0.0017743273 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.00000003,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:3467,Energy Efficiency,Energy,Energy,3467,x integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726127. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 29772.62 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058511 -3.8800058511 1.0189008043 350; 1 1 3 -3.8152481716 0.0647576795 0.2191661024 6471; 2 2 4 -3.9577344796 -0.1424863080 0.0847277059 6428; 3 3 5 -3.9682900740 -0.0105555944 0.0382308599 6716; 4 4 6 -3.9680391582 0.0002509158 0.0104096296 6663; 5 5 7 -3.9686550395 -0.0006158812 0.0052763771 6753; 6 6 8 -3.9689037022 -0.0002486628 0.0017743273 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.00000003,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:4774,Energy Efficiency,energy,energy,4774, -0.0006158812 0.0052763771 6753; 6 6 8 -3.9689037022 -0.0002486628 0.0017743273 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:4818,Energy Efficiency,energy,energy,4818,8 -3.9689037022 -0.0002486628 0.0017743273 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *********************,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:4859,Energy Efficiency,energy,energy,4859, 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_thr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:4896,Energy Efficiency,energy,energy,4896,.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 90390.34 m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:4944,Energy Efficiency,energy,energy,4944,3 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 90390.34 mb; memory requirements = 29772.62 mb. Number of a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:4989,Energy Efficiency,energy,energy,4989,69 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 90390.34 mb; memory requirements = 29772.62 mb. Number of abc combinations: 46194526. Computing (T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:5031,Energy Efficiency,energy,energy,5031,.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 90390.34 mb; memory requirements = 29772.62 mb. Number of abc combinations: 46194526. Computing (T) correction... % complete total time; ```.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-34826327:5069,Energy Efficiency,energy,energy,5069,"18; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.0000000320 0.0000002062 6997; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 6968. CCSD iterations converged!. T1 diagnostic: 0.014742939325; D1 diagnostic: 0.048426600123. OS MP2 FNO correction: -0.000025194213; SS MP2 FNO correction: -0.000006680788; MP2 FNO correction: -0.000031875001. OS MP2 correlation energy: -2.840624216016; SS MP2 correlation energy: -1.039413510111; MP2 correlation energy: -3.880037726127; * MP2 total energy: -1132.741364981384. OS CCSD correlation energy: -3.064993697167; SS CCSD correlation energy: -0.903832488611; CCSD correlation energy: -3.968826185778; * CCSD total energy: -1132.830153441035. Total time for CCSD iterations: 1811317.23 s (user); 19173.39 s (system); 130498 s (total). Time per iteration: 95332.49 s (user); 1009.13 s (system); 6868.32 s (total). *** tstop() called on r3540 at Thu Feb 6 18:51:34 2014; Module time:; user time = 1837223.92 seconds = 30620.40 minutes; system time = 19850.04 seconds = 330.83 minutes; total time = 134687 seconds = 2244.78 minutes; Total time:; user time = 1839675.94 seconds = 30661.27 minutes; system time = 19901.43 seconds = 331.69 minutes; total time = 134880 seconds = 2248.00 minutes. *** tstart() called on r3540; *** at Thu Feb 6 19:04:50 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 90390.34 mb; memory requirements = 29772.62 mb. Number of abc combinations: 46194526. Computing (T) correction... % complete total time; ```. Stderr. ```; PSIO_ERROR: unit = 255, errv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327
https://github.com/psi4/psi4/issues/34#issuecomment-37975681:15,Deployability,update,update,15,"Hi Eugene, Any update on this one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-37975681
https://github.com/psi4/psi4/issues/34#issuecomment-37976516:99,Testability,test,tests,99,"No, not yet. The job is so big I get distracted waiting for it to crash. I just set up a few mores tests to try to diagnose it again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-37976516
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4269,Availability,avail,available,4269,9949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 55,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:1050,Energy Efficiency,energy,energy,1050,"bly come a little closer to the borderline where this issue does/does not occur. Seems like it's not related to the low-memory algorithm (I've been using some 500gb RAM machines where the following jobs fit nicely). The first snippet of output completes successfully, the second does not... They are both very similarly sized, which is why I think they might be helpful. As you can see, these jobs are very lengthy... I would be more than happy to supply the inputs, however be mindful that they were running with 64 threads (32 physical cores, hyperthreaded) and 500Gb of ram. ```; *** at Fri Mar 7 12:33:06 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726326. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. memory requirements for CCSD(T): 433739.41 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058514 -3.8800058514 1.0189008044 626; 1 1 3 -3.8152481717 0.0647576797 0.2191661023 24884; 2 2 4 -3.9577344796 -0.1424863079 0.0847277058 25298; 3 3 5 -3.9682900741 -0.0105555944 0.0382308599 25123; 4 4 6 -3.968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:1793,Energy Efficiency,Energy,Energy,1793,******************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726326. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. memory requirements for CCSD(T): 433739.41 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058514 -3.8800058514 1.0189008044 626; 1 1 3 -3.8152481717 0.0647576797 0.2191661023 24884; 2 2 4 -3.9577344796 -0.1424863079 0.0847277058 25298; 3 3 5 -3.9682900741 -0.0105555944 0.0382308599 25123; 4 4 6 -3.9680391583 0.0002509158 0.0104096296 25396; 5 5 7 -3.9686550395 -0.0006158812 0.0052763771 25237; 6 6 8 -3.9689037023 -0.0002486628 0.0017743273 25192; 7 7 9 -3.9688426840 0.0000610183 0.0009217340 25030; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.96879,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:1802,Energy Efficiency,Energy,Energy,1802,******************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726326. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. memory requirements for CCSD(T): 433739.41 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058514 -3.8800058514 1.0189008044 626; 1 1 3 -3.8152481717 0.0647576797 0.2191661023 24884; 2 2 4 -3.9577344796 -0.1424863079 0.0847277058 25298; 3 3 5 -3.9682900741 -0.0105555944 0.0382308599 25123; 4 4 6 -3.9680391583 0.0002509158 0.0104096296 25396; 5 5 7 -3.9686550395 -0.0006158812 0.0052763771 25237; 6 6 8 -3.9689037023 -0.0002486628 0.0017743273 25192; 7 7 9 -3.9688426840 0.0000610183 0.0009217340 25030; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.96879,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3128,Energy Efficiency,energy,energy,3128,0.0052763771 25237; 6 6 8 -3.9689037023 -0.0002486628 0.0017743273 25192; 7 7 9 -3.9688426840 0.0000610183 0.0009217340 25030; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. **********,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3172,Energy Efficiency,energy,energy,3172,3 -0.0002486628 0.0017743273 25192; 7 7 9 -3.9688426840 0.0000610183 0.0009217340 25030; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. ***********************************************,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3213,Energy Efficiency,energy,energy,3213,-3.9688426840 0.0000610183 0.0009217340 25030; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; **********,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3250,Energy Efficiency,energy,energy,3250,5030; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; **************************************************,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3298,Energy Efficiency,energy,energy,3298,17 25349; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3343,Energy Efficiency,energy,energy,3343,7508 0.0001579755 24900; 10 8 3 -3.9688036163 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3385,Energy Efficiency,energy,energy,3385,3 -0.0000122594 0.0000701594 25130; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Com,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:3423,Energy Efficiency,energy,energy,3423,4 -3.9687942649 0.0000093514 0.0000293354 24791; 12 8 6 -3.9687961342 -0.0000018693 0.0000116248 24666; 13 8 5 -3.9687949038 0.0000012304 0.0000064734 24643; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 24607; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 24850; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 24767; 17 8 2 -3.9687942776 -0.0000000239 0.0000003851 24603; 18 8 3 -3.9687943096 -0.0000000320 0.0000002062 24718; 19 8 6 -3.9687943108 -0.0000000012 0.0000000881 25198. CCSD iterations converged!. T1 diagnostic: 0.014742939319; D1 diagnostic: 0.048426600222. OS MP2 FNO correction: -0.000025194191; SS MP2 FNO correction: -0.000006680779; MP2 FNO correction: -0.000031874970. OS MP2 correlation energy: -2.840624216126; SS MP2 correlation energy: -1.039413510200; MP2 correlation energy: -3.880037726326; * MP2 total energy: -1132.741364989949. OS CCSD correlation energy: -3.064993697148; SS CCSD correlation energy: -0.903832488652; CCSD correlation energy: -3.968826185800; * CCSD total energy: -1132.830153449423. Total time for CCSD iterations: 4253910.43 s (user); 6108342.47 s (system); 475421 s (total). Time per iteration: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4561,Energy Efficiency,energy,energy,4561,: 223890.02 s (user); 321491.71 s (system); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; **************************,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4605,Energy Efficiency,energy,energy,4605,ystem); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4645,Energy Efficiency,energy,energy,4645,() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:5925,Energy Efficiency,energy,energy,5925,ime = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 F,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:6668,Energy Efficiency,Energy,Energy,6668, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:6677,Energy Efficiency,Energy,Energy,6677, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:6974,Energy Efficiency,energy,energy,6974, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7018,Energy Efficiency,energy,energy,7018, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7059,Energy Efficiency,energy,energy,7059, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7096,Energy Efficiency,energy,energy,7096, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7144,Energy Efficiency,energy,energy,7144, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7189,Energy Efficiency,energy,energy,7189, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7231,Energy Efficiency,energy,energy,7231, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/34#issuecomment-38020193:7269,Energy Efficiency,energy,energy,7269, = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 FNO correction: -4.017895394144. OS MP2 correlation energy: -2.981564397886; SS MP2 correlation energy: -1.036330996258; MP2 correlation energy: -4.017895394144; * MP2 total energy: -1429.124041911880. OS CCSD correlation energy: -2.981564397886; SS CCSD correlation energy: -1.036330996258; CCSD correlation energy: -4.017895394144; * CCSD total energy: -1429.124041911880. Total time for CCSD iterations: 19691.81 s (user); 294.98 s (system); 1164 s (total). Time per iteration: inf s (user); inf s (system); inf s (total); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193
https://github.com/psi4/psi4/issues/35#issuecomment-35248787:19,Testability,test,test,19,"Ah, guess I didn't test the code with integral direct SCF. Should be an easy fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35248787
https://github.com/psi4/psi4/issues/35#issuecomment-35249012:88,Availability,error,error,88,"Hello! Thanks for the reply. I initially tried with with df SCF, but that gave the same error... changed it to direct to see if that would make a difference... but alas no.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35249012
https://github.com/psi4/psi4/issues/35#issuecomment-35249235:14,Integrability,wrap,wrapper,14,"Yeh, the MRCC wrapper code requires that the traditional two electron integrals be on disk (not there with DF methods or integral direct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35249235
https://github.com/psi4/psi4/issues/35#issuecomment-41624543:53,Availability,error,error,53,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543
https://github.com/psi4/psi4/issues/35#issuecomment-41624543:551,Availability,error,error,551,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543
https://github.com/psi4/psi4/issues/35#issuecomment-41624543:345,Testability,test,test,345,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543
https://github.com/psi4/psi4/issues/35#issuecomment-41624543:282,Usability,simpl,simplify,282,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543
https://github.com/psi4/psi4/issues/35#issuecomment-41633408:332,Availability,error,error,332,"You may have to wait a bit before you get a response on this one, as the team member working on it (Jet) just got married this weekend. :). ## -TDC . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Apr 28, 2014, at 6:57 PM, rxk900 notifications@github.com wrote:. > Hello,; > Has this been resolved? I have just hit that error:; > iwl_buf_init: Can't open file 33; > with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; > I'm using a fresh build I pulled(?) yesterday.; > Best wishes,; > Rika; > ; > molecule caffeine {; > units bohr; > 0 1; > C 1.50 -0.505274704 0.000000; > C -0.535187033 -2.058190923 0.000000; > C 2.65 -4.522014770 0.000000; > C 1.346731167 2.284891446 0.000000; > C -3.463010598 1.525507419 0.000000; > C -1.745695607 5.842896101 0.000000; > C -5.228750999 -2.835032850 0.000000; > C 6.295922772 -1.343301717 0.000000; > N 3.617453017 -2.104182389 0.000000; > N 0.151176399 -4.614309103 0.000000; > N -3.029497084 -1.135014970 0.000000; > N -1.247933362 3.102880179 0.000000; > O 3.102683166 3.787581194 0.000000; > O -5.585618888 2.429058396 0.000000; > H 3.895327083 -6.157733721 0.000000; > H -2.816386000 6.395195000 -1.672580; > H -2.816386000 6.395195000 1.672580; > H 0.068926104 6.808767386 0.000000; > H -6.392104000 -2.520913000 -1.673960; > H -6.392104000 -2.520913000 1.673960; > H -4.537919087 -4.771667968 0.000000; > H 7.459103496 -3.040539942 0.000000; > H 6.719940000 -0.221440000 1.677441; > H 6.719940000 -0.221440000 -1.677441; > }; > ; > set basis cc-pvtz; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41633408
https://github.com/psi4/psi4/issues/35#issuecomment-41633408:834,Availability,error,error,834,"You may have to wait a bit before you get a response on this one, as the team member working on it (Jet) just got married this weekend. :). ## -TDC . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Apr 28, 2014, at 6:57 PM, rxk900 notifications@github.com wrote:. > Hello,; > Has this been resolved? I have just hit that error:; > iwl_buf_init: Can't open file 33; > with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; > I'm using a fresh build I pulled(?) yesterday.; > Best wishes,; > Rika; > ; > molecule caffeine {; > units bohr; > 0 1; > C 1.50 -0.505274704 0.000000; > C -0.535187033 -2.058190923 0.000000; > C 2.65 -4.522014770 0.000000; > C 1.346731167 2.284891446 0.000000; > C -3.463010598 1.525507419 0.000000; > C -1.745695607 5.842896101 0.000000; > C -5.228750999 -2.835032850 0.000000; > C 6.295922772 -1.343301717 0.000000; > N 3.617453017 -2.104182389 0.000000; > N 0.151176399 -4.614309103 0.000000; > N -3.029497084 -1.135014970 0.000000; > N -1.247933362 3.102880179 0.000000; > O 3.102683166 3.787581194 0.000000; > O -5.585618888 2.429058396 0.000000; > H 3.895327083 -6.157733721 0.000000; > H -2.816386000 6.395195000 -1.672580; > H -2.816386000 6.395195000 1.672580; > H 0.068926104 6.808767386 0.000000; > H -6.392104000 -2.520913000 -1.673960; > H -6.392104000 -2.520913000 1.673960; > H -4.537919087 -4.771667968 0.000000; > H 7.459103496 -3.040539942 0.000000; > H 6.719940000 -0.221440000 1.677441; > H 6.719940000 -0.221440000 -1.677441; > }; > ; > set basis cc-pvtz; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41633408
https://github.com/psi4/psi4/issues/35#issuecomment-41633408:628,Testability,test,test,628,"You may have to wait a bit before you get a response on this one, as the team member working on it (Jet) just got married this weekend. :). ## -TDC . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Apr 28, 2014, at 6:57 PM, rxk900 notifications@github.com wrote:. > Hello,; > Has this been resolved? I have just hit that error:; > iwl_buf_init: Can't open file 33; > with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; > I'm using a fresh build I pulled(?) yesterday.; > Best wishes,; > Rika; > ; > molecule caffeine {; > units bohr; > 0 1; > C 1.50 -0.505274704 0.000000; > C -0.535187033 -2.058190923 0.000000; > C 2.65 -4.522014770 0.000000; > C 1.346731167 2.284891446 0.000000; > C -3.463010598 1.525507419 0.000000; > C -1.745695607 5.842896101 0.000000; > C -5.228750999 -2.835032850 0.000000; > C 6.295922772 -1.343301717 0.000000; > N 3.617453017 -2.104182389 0.000000; > N 0.151176399 -4.614309103 0.000000; > N -3.029497084 -1.135014970 0.000000; > N -1.247933362 3.102880179 0.000000; > O 3.102683166 3.787581194 0.000000; > O -5.585618888 2.429058396 0.000000; > H 3.895327083 -6.157733721 0.000000; > H -2.816386000 6.395195000 -1.672580; > H -2.816386000 6.395195000 1.672580; > H 0.068926104 6.808767386 0.000000; > H -6.392104000 -2.520913000 -1.673960; > H -6.392104000 -2.520913000 1.673960; > H -4.537919087 -4.771667968 0.000000; > H 7.459103496 -3.040539942 0.000000; > H 6.719940000 -0.221440000 1.677441; > H 6.719940000 -0.221440000 -1.677441; > }; > ; > set basis cc-pvtz; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41633408
https://github.com/psi4/psi4/issues/35#issuecomment-41633408:565,Usability,simpl,simplify,565,"You may have to wait a bit before you get a response on this one, as the team member working on it (Jet) just got married this weekend. :). ## -TDC . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Apr 28, 2014, at 6:57 PM, rxk900 notifications@github.com wrote:. > Hello,; > Has this been resolved? I have just hit that error:; > iwl_buf_init: Can't open file 33; > with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; > I'm using a fresh build I pulled(?) yesterday.; > Best wishes,; > Rika; > ; > molecule caffeine {; > units bohr; > 0 1; > C 1.50 -0.505274704 0.000000; > C -0.535187033 -2.058190923 0.000000; > C 2.65 -4.522014770 0.000000; > C 1.346731167 2.284891446 0.000000; > C -3.463010598 1.525507419 0.000000; > C -1.745695607 5.842896101 0.000000; > C -5.228750999 -2.835032850 0.000000; > C 6.295922772 -1.343301717 0.000000; > N 3.617453017 -2.104182389 0.000000; > N 0.151176399 -4.614309103 0.000000; > N -3.029497084 -1.135014970 0.000000; > N -1.247933362 3.102880179 0.000000; > O 3.102683166 3.787581194 0.000000; > O -5.585618888 2.429058396 0.000000; > H 3.895327083 -6.157733721 0.000000; > H -2.816386000 6.395195000 -1.672580; > H -2.816386000 6.395195000 1.672580; > H 0.068926104 6.808767386 0.000000; > H -6.392104000 -2.520913000 -1.673960; > H -6.392104000 -2.520913000 1.673960; > H -4.537919087 -4.771667968 0.000000; > H 7.459103496 -3.040539942 0.000000; > H 6.719940000 -0.221440000 1.677441; > H 6.719940000 -0.221440000 -1.677441; > }; > ; > set basis cc-pvtz; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41633408
https://github.com/psi4/psi4/issues/36#issuecomment-35448161:10,Usability,clear,clear,10,"And to be clear, the following works fine. I just don't understand why CMake doesn't do this for me. I blame CMake devs for this btw, not PSI4 friends. ```; cmake .. -DLAPACK=""-framework Accelerate""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35448161
https://github.com/psi4/psi4/issues/36#issuecomment-35465591:264,Integrability,wrap,wrapper,264,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591
https://github.com/psi4/psi4/issues/36#issuecomment-35465591:500,Integrability,wrap,wrapper,500,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591
https://github.com/psi4/psi4/issues/36#issuecomment-35465591:248,Modifiability,config,configure,248,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591
https://github.com/psi4/psi4/issues/36#issuecomment-35465591:334,Modifiability,config,configure,334,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591
https://github.com/psi4/psi4/issues/36#issuecomment-35465591:582,Safety,detect,detection,582,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591
https://github.com/psi4/psi4/issues/36#issuecomment-35465591:15,Usability,feedback,feedback,15,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591
https://github.com/psi4/psi4/issues/36#issuecomment-122119411:28,Safety,detect,detect,28,We had a major cmake / math-detect revamp of the code recently. Things should work more smoothly in the new version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122119411
https://github.com/psi4/psi4/issues/36#issuecomment-122120131:163,Deployability,release,release,163,"Actually, you still do have to pass `--accelerate` to `setup`, as it's not on by default. @robertodr , is there a reason accelerate shouldn't be on by default for release builds?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122120131
https://github.com/psi4/psi4/issues/36#issuecomment-122123072:976,Deployability,release,release,976,"We should not have to explicitly state the usage of the Accelerate; framework. The test for the system BLAS is sufficient as libblas.\* and; liblapack.\* both reference Accelerate. This has been the case for the last; several versions of Mac OS X. Is this not the case of other people's Macs?. ls -l /usr/lib/libblas\* /usr/lib/liblapack*; /usr/lib/libblas.dylib ->; ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; /usr/lib/liblapack.dylib ->; ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib. -Jet. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Jul 16, 2015 at 6:18 PM, Lori A. Burns notifications@github.com; wrote:. > Actually, you still do have to pass --accelerate to setup, as it's not on; > by default. @robertodr https://github.com/robertodr , is there a reason; > accelerate shouldn't be on by default for release builds?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/36#issuecomment-122120131.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122123072
https://github.com/psi4/psi4/issues/36#issuecomment-122123072:83,Testability,test,test,83,"We should not have to explicitly state the usage of the Accelerate; framework. The test for the system BLAS is sufficient as libblas.\* and; liblapack.\* both reference Accelerate. This has been the case for the last; several versions of Mac OS X. Is this not the case of other people's Macs?. ls -l /usr/lib/libblas\* /usr/lib/liblapack*; /usr/lib/libblas.dylib ->; ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; /usr/lib/liblapack.dylib ->; ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib. -Jet. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Jul 16, 2015 at 6:18 PM, Lori A. Burns notifications@github.com; wrote:. > Actually, you still do have to pass --accelerate to setup, as it's not on; > by default. @robertodr https://github.com/robertodr , is there a reason; > accelerate shouldn't be on by default for release builds?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/36#issuecomment-122120131.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122123072
https://github.com/psi4/psi4/issues/36#issuecomment-122124114:1253,Deployability,release,release,1253,"My laptops finds accelerate on Yosemite without any options set as well. Could this be a Xcode issue?. -Daniel Smith; Sent from my iPhone. . > On Jul 16, 2015, at 18:37, Justin Turney notifications@github.com wrote:; > ; > We should not have to explicitly state the usage of the Accelerate; > framework. The test for the system BLAS is sufficient as libblas.\* and; > liblapack.\* both reference Accelerate. This has been the case for the last; > several versions of Mac OS X. Is this not the case of other people's Macs?; > ; > -Jet; > ; > ls -l /usr/lib/libblas\* /usr/lib/liblapack*; > /usr/lib/libblas.dylib ->; > ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; > /usr/lib/liblapack.dylib ->; > ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Thu, Jul 16, 2015 at 6:18 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Actually, you still do have to pass --accelerate to setup, as it's not on; > > by default. @robertodr https://github.com/robertodr , is there a reason; > > accelerate shouldn't be on by default for release builds?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/36#issuecomment-122120131.; > > ; > > —; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122124114
https://github.com/psi4/psi4/issues/36#issuecomment-122124114:308,Testability,test,test,308,"My laptops finds accelerate on Yosemite without any options set as well. Could this be a Xcode issue?. -Daniel Smith; Sent from my iPhone. . > On Jul 16, 2015, at 18:37, Justin Turney notifications@github.com wrote:; > ; > We should not have to explicitly state the usage of the Accelerate; > framework. The test for the system BLAS is sufficient as libblas.\* and; > liblapack.\* both reference Accelerate. This has been the case for the last; > several versions of Mac OS X. Is this not the case of other people's Macs?; > ; > -Jet; > ; > ls -l /usr/lib/libblas\* /usr/lib/liblapack*; > /usr/lib/libblas.dylib ->; > ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; > /usr/lib/liblapack.dylib ->; > ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Thu, Jul 16, 2015 at 6:18 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Actually, you still do have to pass --accelerate to setup, as it's not on; > > by default. @robertodr https://github.com/robertodr , is there a reason; > > accelerate shouldn't be on by default for release builds?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/36#issuecomment-122120131.; > > ; > > —; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122124114
https://github.com/psi4/psi4/issues/36#issuecomment-122294961:169,Deployability,install,installation,169,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961
https://github.com/psi4/psi4/issues/36#issuecomment-122294961:265,Deployability,install,installations,265,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961
https://github.com/psi4/psi4/issues/36#issuecomment-122294961:70,Safety,detect,detecting,70,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961
https://github.com/psi4/psi4/issues/36#issuecomment-122294961:133,Safety,detect,detected,133,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961
https://github.com/psi4/psi4/issues/36#issuecomment-122294961:513,Safety,detect,detected,513,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961
https://github.com/psi4/psi4/issues/37#issuecomment-121347393:166,Modifiability,variab,variables,166,"- [x] If sticking with Ed's SAPT module, make a energies_ member in the class, and save all the little pieces to that map.; - [x] Assign all the little pieces to PSI variables with names in `https://github.com/cdsgroup/qcdb/qcdb/psivarrosetta.py`; - [x] Sum them up according to Fig 1 from aforementioned paper; - [x] Alter driver to do more sapt levels; - [x] Alter driver to incorporate the dMP2; - [x] Check. Parts of below may be handy. ```; # SAPT-DFT; qcdb.compare_values(-4.3034, h2kc * df['SAPTDFT-SA-adz' ]['S22-2'], digits, 'SAPTDFT-SA-adz'); qcdb.compare_values(-4.6994, h2kc * df['SAPTDFT-SA-atz' ]['S22-2'], digits, 'SAPTDFT-SA-atz'); qcdb.compare_values(-4.8234, h2kc * df['SAPTDFT-SA-aqz' ]['S22-2'], digits, 'SAPTDFT-SA-aqz'). # SAPT0; qcdb.compare_values(-5.3837, h2kc * df['SAPT0-SA-adz' ]['S22-2'], digits, 'SAPT0-SA-adz'); qcdb.compare_values(-5.6258, h2kc * df['SAPT0-SA-atz' ]['S22-2'], digits, 'SAPT0-SA-atz'); qcdb.compare_values(-5.7281, h2kc * df['SAPT0-SA-aqz' ]['S22-2'], digits, 'SAPT0-SA-aqz'); qcdb.compare_values(-5.7476, h2kc * df['SAPT0-SA-a5z' ]['S22-2'], digits, 'SAPT0-SA-a5z'). # sSAPT0; qcdb.compare_values(-5.3440, h2kc * df['SAPT0S-SA-adz' ]['S22-2'], digits, 'SAPT0S-SA-adz'); qcdb.compare_values(-5.5828, h2kc * df['SAPT0S-SA-atz' ]['S22-2'], digits, 'SAPT0S-SA-atz'); qcdb.compare_values(-5.6852, h2kc * df['SAPT0S-SA-aqz' ]['S22-2'], digits, 'SAPT0S-SA-aqz'); qcdb.compare_values(-5.7045, h2kc * df['SAPT0S-SA-a5z' ]['S22-2'], digits, 'SAPT0S-SA-a5z'). # SCS-SAPT0; qcdb.compare_values(-5.2855, h2kc * df['SAPTSCS-SA-adz' ]['S22-2'], digits, 'SAPTSCS-SA-adz'); qcdb.compare_values(-5.5244, h2kc * df['SAPTSCS-SA-atz' ]['S22-2'], digits, 'SAPTSCS-SA-atz'); qcdb.compare_values(-5.6297, h2kc * df['SAPTSCS-SA-aqz' ]['S22-2'], digits, 'SAPTSCS-SA-aqz'); qcdb.compare_values(-5.6508, h2kc * df['SAPTSCS-SA-a5z' ]['S22-2'], digits, 'SAPTSCS-SA-a5z'). # SAPT2; qcdb.compare_values(-4.2041, h2kc * df['SAPT2-SA-adz' ]['S22-2'], digits, 'SAPT2-SA-adz'); qcdb.compa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/37#issuecomment-121347393
https://github.com/psi4/psi4/issues/37#issuecomment-176528304:30,Deployability,update,updated,30,"Printing through SAPT modules updated with a24c32fefdc47feebc8c2bbdbfbc737e17dfc75d, SAPT section in Psi4 manual updated as well with b96745b43112f629146394e9fd57fdbf2aece8fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/37#issuecomment-176528304
https://github.com/psi4/psi4/issues/37#issuecomment-176528304:113,Deployability,update,updated,113,"Printing through SAPT modules updated with a24c32fefdc47feebc8c2bbdbfbc737e17dfc75d, SAPT section in Psi4 manual updated as well with b96745b43112f629146394e9fd57fdbf2aece8fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/37#issuecomment-176528304
https://github.com/psi4/psi4/issues/39#issuecomment-272698064:63,Testability,test,test,63,"@loriab I think I have these reimplemented in 1.2, do you have test cases for them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-272698064
https://github.com/psi4/psi4/issues/39#issuecomment-272725478:62,Testability,test,test,62,"* https://github.com/psi4/psi4/blob/master/samples/dft-b2plyp/test.in#L48-L51; * raw energies for DSD-PBEP86. ```; dhdftusemefiles/S22-DSDPBEP86-nfc-CP-adz.dsdpbep86.usemeraw:S22-1 -112.90909305 -56.45238118 -56.45238118 ; dhdftusemefiles/S22-DSDPBEP86-nfc-adz.dsdpbep86.usemeraw:S22-1 -112.90909305 -56.45198932 -56.45198932 ; ```. * a variety from the dhdft paper. only dsdpbep86 actually a scs-dh. there's wiggle room on the run-time conditions, so see how useful these are at first pass. ```; #S22-1, all adz, nothing fc (that is, b2plyp, dsdpbep86, pbe02, wb97x-2 all non-frozen-core). ans = {}; ans['cp'] = {}; ans['uncp'] = {}. ans['uncp']['B2PLYP/aug-cc-pvdz'] = -2.8486; ans['uncp']['B2PLYP-D3/aug-cc-pvdz'] = -3.3262; ans['uncp']['B3LYP/aug-cc-pvdz'] = -2.3856; ans['uncp']['B3LYP-D3/aug-cc-pvdz'] = -3.3022; ans['uncp']['B97-D3/aug-cc-pvdz'] = -3.1218; ans['uncp']['LCVV10/aug-cc-pvdz'] = -3.2298; ans['uncp']['M052X/aug-cc-pvdz'] = -3.3324; ans['uncp']['M062X/aug-cc-pvdz'] = -3.4611; ans['uncp']['M08HX/aug-cc-pvdz'] = -3.7030; ans['uncp']['M08SO/aug-cc-pvdz'] = -3.4907; ans['uncp']['M11/aug-cc-pvdz'] = -3.2400; ans['uncp']['M11L/aug-cc-pvdz'] = -2.5651; ans['uncp']['PBE/aug-cc-pvdz'] = -3.0191; ans['uncp']['PBE0/aug-cc-pvdz'] = -2.9546; ans['uncp']['PBE02/aug-cc-pvdz'] = -3.2897; ans['uncp']['PBE0-D3/aug-cc-pvdz'] = -3.5428; ans['uncp']['PBE-D3/aug-cc-pvdz'] = -3.5915; ans['uncp']['VV10/aug-cc-pvdz'] = -3.6379; ans['uncp']['DLDF+D/aug-cc-pvdz'] = -3.1606; ans['uncp']['WB97X-2/aug-cc-pvdz'] = -3.6211; ans['uncp']['WB97X-D/aug-cc-pvdz'] = -3.2200; ans['uncp']['WB97X-V/aug-cc-pvdz'] = -3.2482; ans['uncp']['DSDPBEP86-D2OPT/aug-cc-pvdz'] = -3.6113; ans['uncp']['DSDPBEP86/aug-cc-pvdz'] = -3.2076; ans['uncp']['DSDPBEP86-D2 /aug-cc-pvdz'] = -3.5902; ans['uncp']['DSDPBEP86-D3BJ /aug-cc-pvdz'] = -3.4531; ; ans['cp' ]['B2PLYP/aug-cc-pvdz'] = -2.4331; ans['cp' ]['B2PLYP-D3/aug-cc-pvdz'] = -2.9106; ans['cp' ]['B3LYP/aug-cc-pvdz'] = -2.1021; ans['cp' ]['B3LYP-D3/aug-cc-pvdz'] = -3.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-272725478
https://github.com/psi4/psi4/issues/39#issuecomment-274263328:6,Deployability,update,update,6,"As an update, these will be enabled in the Psi4 1.2 patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-274263328
https://github.com/psi4/psi4/issues/39#issuecomment-274263328:52,Deployability,patch,patch,52,"As an update, these will be enabled in the Psi4 1.2 patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-274263328
https://github.com/psi4/psi4/issues/40#issuecomment-37977939:54,Availability,avail,available,54,Testing different methods to see which properties are available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37977939
https://github.com/psi4/psi4/issues/40#issuecomment-37977939:0,Testability,Test,Testing,0,Testing different methods to see which properties are available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37977939
https://github.com/psi4/psi4/issues/40#issuecomment-37993139:86,Availability,avail,available,86,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139
https://github.com/psi4/psi4/issues/40#issuecomment-37993139:345,Deployability,update,updated,345,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139
https://github.com/psi4/psi4/issues/40#issuecomment-37993139:377,Deployability,update,updated,377,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139
https://github.com/psi4/psi4/issues/40#issuecomment-38212166:383,Availability,error,error,383,"I put a patch to DF-MP2 code, so it computes the one-electron properties with property() function. I also added capability to use property() for the DETCI one-electron and transition properties. An example would be something like this:; property('cisd', properties=['transition_dipole']); As in the CC code, the properties=[] argument has to be specified, otherwise python throws an error. The list of properties for DETCI so far is limited to 'dipole', 'quadrupole', 'transition_dipole', and 'transition_quadrupole', but can be augmented easily if needed. Let me know if more functionality is needed. ; In the next few days I'll add support of property() for DCFT. I'll e-mail Ugur and ask if he can do the same. I'll also modify the manual and create a table with methods and references that can be used with property() function. But, besides that, we can probably close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38212166
https://github.com/psi4/psi4/issues/40#issuecomment-38212166:8,Deployability,patch,patch,8,"I put a patch to DF-MP2 code, so it computes the one-electron properties with property() function. I also added capability to use property() for the DETCI one-electron and transition properties. An example would be something like this:; property('cisd', properties=['transition_dipole']); As in the CC code, the properties=[] argument has to be specified, otherwise python throws an error. The list of properties for DETCI so far is limited to 'dipole', 'quadrupole', 'transition_dipole', and 'transition_quadrupole', but can be augmented easily if needed. Let me know if more functionality is needed. ; In the next few days I'll add support of property() for DCFT. I'll e-mail Ugur and ask if he can do the same. I'll also modify the manual and create a table with methods and references that can be used with property() function. But, besides that, we can probably close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38212166
https://github.com/psi4/psi4/issues/40#issuecomment-38213099:56,Energy Efficiency,charge,charges,56,"What about just the relaxed density matrix, and partial charges?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213099
https://github.com/psi4/psi4/issues/40#issuecomment-38213986:148,Energy Efficiency,charge,charges,148,"The relaxed density matrix is computed every time property() is executed. Some methods dump it to disk, but some only store it in memory. As to the charges, property() has the ability to compute Mulliken charges, and for most of the methods implemented it already prints them out at the end of the computation, even if not explicitly requested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213986
https://github.com/psi4/psi4/issues/40#issuecomment-38213986:204,Energy Efficiency,charge,charges,204,"The relaxed density matrix is computed every time property() is executed. Some methods dump it to disk, but some only store it in memory. As to the charges, property() has the ability to compute Mulliken charges, and for most of the methods implemented it already prints them out at the end of the computation, even if not explicitly requested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38213986
https://github.com/psi4/psi4/issues/40#issuecomment-189349922:623,Availability,avail,available,623,"I agree that we don't want properties computations done internally --- we; want them done in a unified way through OEProp. However, we do (I guess?); want the user syntax properties = [ ... ] or whatever Daniel C. cooked up.; My understanding is that the CC properties user input syntax only works for; CC modules, which is not good. Here's an example from cc52:. property('ccsd',properties=['roa_tensor']). The reason Daniel developed this is because different modules need to be; run depending on the requested property. This is not usually the case for; non-CC codes, but it is confusing to users to have this mechanism available; for CC properties but not for other properties. I am fine with moving this over to some other more unified github issue, so; long as it is tracked somewhere. On Fri, Feb 26, 2016 at 11:01 AM, Daniel Smith notifications@github.com; wrote:. > Effectively we have quite a few tickets relating to properties and OEProp.; > I would very much like to consolidate most of these tickets into one so we; > can figure out what actually needs to be done. In many ways we probably; > should not propagate the current way the cc codes are handling the; > properties internally (the syntax is great), especially with regard to; > properties through OEProp.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/40#issuecomment-189340270.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-189349922
https://github.com/psi4/psi4/issues/40#issuecomment-189349922:486,Integrability,depend,depending,486,"I agree that we don't want properties computations done internally --- we; want them done in a unified way through OEProp. However, we do (I guess?); want the user syntax properties = [ ... ] or whatever Daniel C. cooked up.; My understanding is that the CC properties user input syntax only works for; CC modules, which is not good. Here's an example from cc52:. property('ccsd',properties=['roa_tensor']). The reason Daniel developed this is because different modules need to be; run depending on the requested property. This is not usually the case for; non-CC codes, but it is confusing to users to have this mechanism available; for CC properties but not for other properties. I am fine with moving this over to some other more unified github issue, so; long as it is tracked somewhere. On Fri, Feb 26, 2016 at 11:01 AM, Daniel Smith notifications@github.com; wrote:. > Effectively we have quite a few tickets relating to properties and OEProp.; > I would very much like to consolidate most of these tickets into one so we; > can figure out what actually needs to be done. In many ways we probably; > should not propagate the current way the cc codes are handling the; > properties internally (the syntax is great), especially with regard to; > properties through OEProp.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/40#issuecomment-189340270.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-189349922
https://github.com/psi4/psi4/issues/40#issuecomment-213409294:557,Deployability,integrat,integrated,557,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294
https://github.com/psi4/psi4/issues/40#issuecomment-213409294:23,Integrability,interface,interface,23,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294
https://github.com/psi4/psi4/issues/40#issuecomment-213409294:557,Integrability,integrat,integrated,557,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294
https://github.com/psi4/psi4/issues/40#issuecomment-213409294:364,Testability,test,tests,364,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294
https://github.com/psi4/psi4/issues/40#issuecomment-213409294:407,Testability,test,test,407,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294
https://github.com/psi4/psi4/issues/42#issuecomment-182612789:97,Integrability,interface,interface,97,I think @matthewkennedy6 fixed this for frozen scans. It's just relaxed scans that still need an interface.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/42#issuecomment-182612789
https://github.com/psi4/psi4/issues/43#issuecomment-189541354:2786,Availability,avail,available,2786,"ab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?) another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets. (as noted in #144); - [x] 11. drop DUAL and pick up perhaps others in http://psicode.org/psi4manual/master/basissets_byfamily.html; - [x] 12. thoroughly update basisset.rst, especially examples; - [x] 13. reexamine the PSIPATH basis load ordering and make sure that there's a way to install new basissets in the conda package w/o overwriting library files; - [x] 14. the python object name (mybas in above) is the key handle by which a user-def basis can be reapplied to new molecules, but this can be anonymous (if mybas omitted definitely; and maybe if defined conventionally through ""set basis"" if all turned into functions). would be handy to have a name to print in the output file (some sort of aug-cc-pvdz+cc-pvdz+6-31g) as well as the handle by which it's retrievable. That's all I can think of for now",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354
https://github.com/psi4/psi4/issues/43#issuecomment-189541354:3143,Deployability,update,update,3143,"ux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?) another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets. (as noted in #144); - [x] 11. drop DUAL and pick up perhaps others in http://psicode.org/psi4manual/master/basissets_byfamily.html; - [x] 12. thoroughly update basisset.rst, especially examples; - [x] 13. reexamine the PSIPATH basis load ordering and make sure that there's a way to install new basissets in the conda package w/o overwriting library files; - [x] 14. the python object name (mybas in above) is the key handle by which a user-def basis can be reapplied to new molecules, but this can be anonymous (if mybas omitted definitely; and maybe if defined conventionally through ""set basis"" if all turned into functions). would be handy to have a name to print in the output file (some sort of aug-cc-pvdz+cc-pvdz+6-31g) as well as the handle by which it's retrievable. That's all I can think of for now. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354
https://github.com/psi4/psi4/issues/43#issuecomment-189541354:3273,Deployability,install,install,3273,"ux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?) another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets. (as noted in #144); - [x] 11. drop DUAL and pick up perhaps others in http://psicode.org/psi4manual/master/basissets_byfamily.html; - [x] 12. thoroughly update basisset.rst, especially examples; - [x] 13. reexamine the PSIPATH basis load ordering and make sure that there's a way to install new basissets in the conda package w/o overwriting library files; - [x] 14. the python object name (mybas in above) is the key handle by which a user-def basis can be reapplied to new molecules, but this can be anonymous (if mybas omitted definitely; and maybe if defined conventionally through ""set basis"" if all turned into functions). would be handy to have a name to print in the output file (some sort of aug-cc-pvdz+cc-pvdz+6-31g) as well as the handle by which it's retrievable. That's all I can think of for now. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354
https://github.com/psi4/psi4/issues/43#issuecomment-189541354:1473,Performance,load,loaded,1473,"is is more than we started with.; - [x] 1. `-DECONTRACT` handled c-side was fine as an initial hack. but I'd rather implement that function py-side so as to hand back the full basis set dictionary, just so they're treated like everything else. also, right now, this decontracts _everything_, that is orbital/fitting alike unless you explicitly specify them all.; - [x] 2. also, rename rel_basis. only proximity to other dkh/relativisitc keywords indicates that that's what it means.; - [x] 3. show how to build your own _named_ basis for orbital or fitting roles a la mints9; - [x] 4. prove that a `basis mybas {...}` -defined basis can work for a `db()` calc, that is, the basis isn't anonymous and can be reapplied to multiple molcules. fitting, too.; - [x] 5. see if any of the times moldules call pyconstruct_aux if they want to forcibly apply the puream of the orbital to the aux basis. i think scf does this but nowhere else.; - [x] 6. the python side of pyconstruct generates a nice compact summary of where basis functions are loaded from (like below). this would be very handle to print in output once per basis. problem is modules read basis sets over and over. so either that needs curtailing or pass a printornot flag to pyconstruct. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: CC-PVDZ; atoms 1 entry C line 130 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-z",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354
https://github.com/psi4/psi4/issues/43#issuecomment-189541354:1692,Performance,Load,Loading,1692," this decontracts _everything_, that is orbital/fitting alike unless you explicitly specify them all.; - [x] 2. also, rename rel_basis. only proximity to other dkh/relativisitc keywords indicates that that's what it means.; - [x] 3. show how to build your own _named_ basis for orbital or fitting roles a la mints9; - [x] 4. prove that a `basis mybas {...}` -defined basis can work for a `db()` calc, that is, the basis isn't anonymous and can be reapplied to multiple molcules. fitting, too.; - [x] 5. see if any of the times moldules call pyconstruct_aux if they want to forcibly apply the puream of the orbital to the aux basis. i think scf does this but nowhere else.; - [x] 6. the python side of pyconstruct generates a nice compact summary of where basis functions are loaded from (like below). this would be very handle to print in output once per basis. problem is modules read basis sets over and over. so either that needs curtailing or pass a printornot flag to pyconstruct. ```; => Loading Basis Set <=. Role: BASIS; Keyword: BASIS; Name: CC-PVDZ; atoms 1 entry C line 130 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354
https://github.com/psi4/psi4/issues/43#issuecomment-189541354:3223,Performance,load,load,3223,"ux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 2 entry O line 190 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; atoms 3-4 entry H line 20 file /Users/loriab/linux/psihub/master/psi4/lib/basis/cc-pvdz.gbs; ```; - [x] 7. soon after all the new basis stuff went in Nov 2014, Jet added another layer in qcdb pyconstruct to make CABS basis sets work. unfortunately, this broke one of the key principles/advantages of the new scheme. not that i remember exactly what that principle was, though it was probably that the basis could be re-constituted by `basis mybas {...}` mybas name; - [x] 8. fix the 5-zeta and 6-zeta orbital defaulting to quad-zeta fitting as in noted in #144 ; - [x] 9. Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes. (as noted in #144); - [x] 10. Create (maybe?) another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets. (as noted in #144); - [x] 11. drop DUAL and pick up perhaps others in http://psicode.org/psi4manual/master/basissets_byfamily.html; - [x] 12. thoroughly update basisset.rst, especially examples; - [x] 13. reexamine the PSIPATH basis load ordering and make sure that there's a way to install new basissets in the conda package w/o overwriting library files; - [x] 14. the python object name (mybas in above) is the key handle by which a user-def basis can be reapplied to new molecules, but this can be anonymous (if mybas omitted definitely; and maybe if defined conventionally through ""set basis"" if all turned into functions). would be handy to have a name to print in the output file (some sort of aug-cc-pvdz+cc-pvdz+6-31g) as well as the handle by which it's retrievable. That's all I can think of for now. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-189541354
https://github.com/psi4/psi4/issues/43#issuecomment-201953614:209,Availability,reliab,reliably,209,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614
https://github.com/psi4/psi4/issues/43#issuecomment-201953614:591,Availability,error,error,591,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614
https://github.com/psi4/psi4/issues/43#issuecomment-201953614:25,Deployability,install,installed,25,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614
https://github.com/psi4/psi4/issues/43#issuecomment-201953614:483,Safety,abort,aborts,483,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614
https://github.com/psi4/psi4/issues/43#issuecomment-202565127:206,Usability,user-friendly,user-friendly,206,"Yes, I'm afraid this really is so (http://psicode.org/psi4manual/master/basissets_tables.html#id13). It's the comma it really hates because that is the delimiter for a python list. This exception to psi4's user-friendly input has long pained me. I'll see if the input parser can't be persuaded to use commas ""correctly"" for basis set options, but if it can't be decoupled from array-type options, this oddity will have to remain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-202565127
https://github.com/psi4/psi4/issues/43#issuecomment-252771310:561,Testability,test,test,561,"@WDerricotte , @fevangelista . I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, `BASIS_X2C` (formerly `REL_BASIS`) will always default to the decontracted orbital basis, if not set outright (`set basis_x2c my_gigantic_uncontracted_basis`). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (`set basis cc-pvdz-decon`)? If so, what fitting basis should a `cc-pvdz-decon` use: `cc-pvdz-jkfit`, `cc-pvdz-jkfit-decon`, unknown so give up? All the X2C test cases are with `scf_type pk`, none with DF. Thanks for any hints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252771310
https://github.com/psi4/psi4/issues/43#issuecomment-252776511:186,Integrability,contract,contracted,186,"Decontracted orbital sets should go with decontracted fitting sets. The use of the decontracted basis in x2c is just in the diagonalization of T^2, so the orbitals are still solved in a contracted basis set. If you want to get orbitals / properties, then you might need to decontract the basis, although I'm not sure psi4 currently handles anything where core functions are that important.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252776511
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1811,Availability,error,error,1811,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:15,Deployability,update,update,15,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:258,Integrability,depend,dependency,258,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1426,Integrability,message,message,1426,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1592,Integrability,message,message,1592,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1713,Integrability,message,message,1713,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1800,Integrability,message,message,1800,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1861,Integrability,message,message,1861,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1909,Integrability,message,message,1909,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:241,Safety,risk,risk,241,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1528,Security,confidential,confidential,1528,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:193,Testability,test,tests,193,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252802760:1053,Testability,test,test,1053,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760
https://github.com/psi4/psi4/issues/43#issuecomment-252990815:218,Availability,toler,tolerant,218,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815
https://github.com/psi4/psi4/issues/43#issuecomment-252990815:15,Integrability,depend,dependency,15,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815
https://github.com/psi4/psi4/issues/43#issuecomment-252990815:237,Integrability,depend,dependencies,237,For the linear dependency problems you might want to have a look at Knizia et al in 10.1021/ct200239p. Replacing the use of inverse overlap matrices with the solution of linear equations makes the algorithms much more tolerant to linear dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252990815
https://github.com/psi4/psi4/issues/44#issuecomment-37577193:700,Availability,error,errors,700,"at one point, the plan was as follows:. Ok, looks like psi4 regularly goes through Ar, Dunning basis sets regularly go through Kr, and def2 through Rn. None of the 6-31g(*_) even make it to Ar. Looks like 3-21g covers the teaching range (through Xe). Def2-SV( P) covers through Rn, and at a quick glance, is 6-31g_-like is size. Since 3-21g is the default basis-guess is psi4 now, I propose that sto-3g, 3-21g, and all def2 basis sets be run out as far as emsl will take them insofar as plausible fitting basis sets can also be supplied. That will cover teaching elements and include a proper double- and triple-zeta for the adventurous research user, while ensuring that if basis set unavailability errors are thrown, it will be because the orbital basis is missing (which users may expect) as opposed to fitting bases missing (which is unfamiliar).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-37577193
https://github.com/psi4/psi4/issues/44#issuecomment-37578156:280,Availability,down,down,280,"The Karlsruhe basis sets should have pretty good fitting basis sets as well. AFAIK Pople basis sets are not really trustworthy (major deficiencies with two-electron completeness). You get better results with fewer functions with newer basis sets, and so IMHO one should play them down...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-37578156
https://github.com/psi4/psi4/issues/44#issuecomment-37579173:746,Availability,down,down,746,"I agree on modern basis sets as far as research. But for education, we want to support large swaths of the periodic table for hundreds of undergrads running the same calcs on a server, hence Pople. And yes, Karlsruhe fitting basis sets are the plan, both for adding them to the library and for defaulting to them (per-atom) when a fitting basis isn't defined for the orbital basis. On Mar 13, 2014, at 3:46 PM, Susi Lehtola notifications@github.com wrote:. > The Karlsruhe basis sets should have pretty good fitting basis sets as well.; > ; > AFAIK Pople basis sets are not really trustworthy (major deficiencies with two-electron completeness). You get better results with fewer functions with newer basis sets, and so IMHO one should play them down...; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-37579173
https://github.com/psi4/psi4/issues/44#issuecomment-182604995:640,Availability,avail,available,640,"Ok, Nov 2014 (around https://github.com/psi4/psi4private/commit/986b28fdeabeabf43a79b08de5b5e79141719d84 ), the new basis set handling went in. When an auxiliary basis set isn't explicitly specified by the user (in fact explicitly setting is not reccommended as the internal defaults are superior), it looks on a per-atom basis (other def.) for the correct auxiliary basis for that orbital basis (e.g., `aug-cc-pvdz-ri` for `aug-cc-pvdz` and `cc-pvdz-ri` for `sto-3g`), then failing that uses ~ `def2-qzvpp` fitting basis sets. The def2's are defined through Kr w/o ECPs (psi4 has no ECPs), so you should never get an ""auxilliary basis not available"" for elements <=Kr. I think that's fulfilling our educational obligation. You still can get some oddities (see https://github.com/psi4/psi4public/issues/144), but the intent of this ticket is met.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/44#issuecomment-182604995
https://github.com/psi4/psi4/issues/46#issuecomment-37943521:446,Performance,load,loaded,446,"We can certainly shift some of the logic over to Python. It will be a good idea to perhaps construct a mapping of atoms to basis sets that are included in the standard Psi4 basis set library. . The current way that libmints determines if a basis set exists for an atom is to parse the entire basis set file (e.g. cc-pvdz.gbs) for the atom entry. In thinking about this, what libmints does is actually really bad since every time the basis set is loaded in the hard drive is nailed. If basis sets do not use a lot of memory maybe we should keep a global cache for the life of a calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37943521
https://github.com/psi4/psi4/issues/46#issuecomment-37943521:553,Performance,cache,cache,553,"We can certainly shift some of the logic over to Python. It will be a good idea to perhaps construct a mapping of atoms to basis sets that are included in the standard Psi4 basis set library. . The current way that libmints determines if a basis set exists for an atom is to parse the entire basis set file (e.g. cc-pvdz.gbs) for the atom entry. In thinking about this, what libmints does is actually really bad since every time the basis set is loaded in the hard drive is nailed. If basis sets do not use a lot of memory maybe we should keep a global cache for the life of a calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37943521
https://github.com/psi4/psi4/issues/46#issuecomment-37943521:35,Testability,log,logic,35,"We can certainly shift some of the logic over to Python. It will be a good idea to perhaps construct a mapping of atoms to basis sets that are included in the standard Psi4 basis set library. . The current way that libmints determines if a basis set exists for an atom is to parse the entire basis set file (e.g. cc-pvdz.gbs) for the atom entry. In thinking about this, what libmints does is actually really bad since every time the basis set is loaded in the hard drive is nailed. If basis sets do not use a lot of memory maybe we should keep a global cache for the life of a calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37943521
https://github.com/psi4/psi4/issues/46#issuecomment-37953151:289,Performance,cache,cached,289,"This sounds good, especially as it would seem to enable custom basis sets (e.g., dz on C1, tz on C2, atz on H, user-supplied mybasis on remainder) to be condensed into one name/entity (though could it be re-issued after a new molecule's defined?). What type of info do you think should be cached: atom/basisname or atom/extract_of_gbs_file or atom/BasisSet object (py translation of libmints object)? . Simply adding a member fn to basisset in libmints that returns T/F for a given library basis name and element name is seemingly the easiest way of addressing the issue (though doesn't cover case where C1 and C2 perhaps have different library bases). Having a full BasisSet and BasisParser python classes is the other end of the code-to-add scale. But then, we could have a Molecule respond with its full set of default fitting basis mix, all py-side. (And I could write GENBAS entries w/o libmints.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37953151
https://github.com/psi4/psi4/issues/46#issuecomment-37953151:403,Usability,Simpl,Simply,403,"This sounds good, especially as it would seem to enable custom basis sets (e.g., dz on C1, tz on C2, atz on H, user-supplied mybasis on remainder) to be condensed into one name/entity (though could it be re-issued after a new molecule's defined?). What type of info do you think should be cached: atom/basisname or atom/extract_of_gbs_file or atom/BasisSet object (py translation of libmints object)? . Simply adding a member fn to basisset in libmints that returns T/F for a given library basis name and element name is seemingly the easiest way of addressing the issue (though doesn't cover case where C1 and C2 perhaps have different library bases). Having a full BasisSet and BasisParser python classes is the other end of the code-to-add scale. But then, we could have a Molecule respond with its full set of default fitting basis mix, all py-side. (And I could write GENBAS entries w/o libmints.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-37953151
https://github.com/psi4/psi4/issues/46#issuecomment-121348229:22,Testability,test,tests,22,"There's some docs and tests still to do, but the intent of this issue is satisfied as of Nov 2014.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/46#issuecomment-121348229
https://github.com/psi4/psi4/issues/49#issuecomment-37945473:63,Deployability,install,install,63,There should not be any issue with this. We can just tar up an install and make sure to tell people to set PSIDATADIR/PSI4DATADIR to the correct location. Macs in the wild have a standard set of libraries. At one point I was working on getting Psi4 to automatically determine the value of PSIDATADIR based on the location of the psi4 binary but I can't seem to find it in the code. Maybe we should get someone to work on it and then we don't need to require end users to set this variable if we just distribute binaries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-37945473
https://github.com/psi4/psi4/issues/49#issuecomment-37945473:480,Modifiability,variab,variable,480,There should not be any issue with this. We can just tar up an install and make sure to tell people to set PSIDATADIR/PSI4DATADIR to the correct location. Macs in the wild have a standard set of libraries. At one point I was working on getting Psi4 to automatically determine the value of PSIDATADIR based on the location of the psi4 binary but I can't seem to find it in the code. Maybe we should get someone to work on it and then we don't need to require end users to set this variable if we just distribute binaries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-37945473
https://github.com/psi4/psi4/issues/49#issuecomment-215210776:218,Modifiability,plugin,plugin,218,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776
https://github.com/psi4/psi4/issues/49#issuecomment-215210776:241,Modifiability,plugin,plugin,241,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776
https://github.com/psi4/psi4/issues/49#issuecomment-215210776:260,Modifiability,plugin,plugin-makefile,260,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776
https://github.com/psi4/psi4/issues/49#issuecomment-215210776:332,Modifiability,plugin,plugins,332,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776
https://github.com/psi4/psi4/issues/49#issuecomment-215210776:360,Modifiability,plugin,plugin-using-a-conda-pre-compiled-binary,360,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776
https://github.com/psi4/psi4/issues/49#issuecomment-215210776:468,Testability,test,testing,468,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776
https://github.com/psi4/psi4/issues/51#issuecomment-37975385:143,Testability,log,logic,143,"Just discussed this with the team. Unfortunately we don't see a straightforward way to add this capability to SAPT without adding some complex logic, and SAPT dying in the middle of a calculation seems rare enough that we're reluctant to add the complex logic to fix something that shouldn't be happening often. Sorry!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-37975385
https://github.com/psi4/psi4/issues/51#issuecomment-37975385:254,Testability,log,logic,254,"Just discussed this with the team. Unfortunately we don't see a straightforward way to add this capability to SAPT without adding some complex logic, and SAPT dying in the middle of a calculation seems rare enough that we're reluctant to add the complex logic to fix something that shouldn't be happening often. Sorry!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-37975385
https://github.com/psi4/psi4/issues/51#issuecomment-37977917:45,Performance,queue,queue,45,"Ah, I see, you're running out of time in the queue. If there is more demand for this, we can revisit the question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-37977917
https://github.com/psi4/psi4/issues/51#issuecomment-174418021:179,Performance,queue,queue,179,"I am running expensive SAPT calculations and psi4 dies due to time limit.; My calculations reached upto "" CHF Iterations converged "" and then killed due to teh ; time limit of my queue system. It is possible to add restart option to sapt ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-174418021
https://github.com/psi4/psi4/issues/51#issuecomment-177233740:486,Availability,avail,available,486,"@jgonthier is there any easy way to turn on or off different components of the SAPT computation? That is, compute only the electrostatic and induction terms, or only the dispersion terms, etc. That might be easier to do than (and/or an initial step towards) full restart capability. @loriab it would be interesting to debate this as a use-case for more general restart capabilities. Where do we log the info about how far the computation has gotten? And what information is going to be available for the restart calculation? In a cluster computing environment, the scratch files are going to be gone. We could save the orbitals (although that's probably not the rate-determining step of most SAPT computations, regardless of the SAPT order). Other stuff is probably too large to save anywhere for a restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177233740
https://github.com/psi4/psi4/issues/51#issuecomment-177233740:395,Testability,log,log,395,"@jgonthier is there any easy way to turn on or off different components of the SAPT computation? That is, compute only the electrostatic and induction terms, or only the dispersion terms, etc. That might be easier to do than (and/or an initial step towards) full restart capability. @loriab it would be interesting to debate this as a use-case for more general restart capabilities. Where do we log the info about how far the computation has gotten? And what information is going to be available for the restart calculation? In a cluster computing environment, the scratch files are going to be gone. We could save the orbitals (although that's probably not the rate-determining step of most SAPT computations, regardless of the SAPT order). Other stuff is probably too large to save anywhere for a restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177233740
https://github.com/psi4/psi4/issues/51#issuecomment-177299693:15,Integrability,depend,depends,15,"@CDSherrill It depends on which SAPT computation. For SAPT0, it should be pretty straightforward as there is no intermediate reuse. If we go to higher SAPT order, it may require a little bit more work as I believe Ed's code is preparing integral files and writing them to disk at some point. In any case, it's probably the easiest way to implement a restart, yes.; @similt : Which SAPT level do you need ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177299693
https://github.com/psi4/psi4/issues/51#issuecomment-178215766:191,Deployability,update,update,191,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766
https://github.com/psi4/psi4/issues/51#issuecomment-178215766:1420,Energy Efficiency,energy,energy,1420,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766
https://github.com/psi4/psi4/issues/51#issuecomment-178215766:508,Performance,perform,perform,508,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766
https://github.com/psi4/psi4/issues/51#issuecomment-178215766:1057,Usability,Simpl,Simple,1057,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766
https://github.com/psi4/psi4/issues/51#issuecomment-179278518:134,Energy Efficiency,energy,energy,134,"@jgonthier Thanks a lot for your effort. Now I could calculate each sapt0 term separately. ; But when I tried to use restart option ( energy('sapt0',restart_file=['f1','f2'])), programs runs as usual, scf doesn't finish in 1 step. How to fix this problem ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-179278518
https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1062,Energy Efficiency,energy,energy,1062,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000
https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1352,Energy Efficiency,energy,energy,1352,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000
https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1602,Energy Efficiency,energy,energy,1602,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000
https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1152,Performance,LOAD,LOAD,1152,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000
https://github.com/psi4/psi4/issues/54#issuecomment-276722757:105,Availability,error,error,105,"Closing this out, if someone has an input where this fails please post a new issue with the reproducible error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/54#issuecomment-276722757
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:677,Availability,error,error,677,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:927,Availability,Error,Error,927,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:957,Availability,Error,Error,957,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:582,Integrability,message,message,582,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:727,Integrability,depend,dependencies,727,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:106,Modifiability,config,configure,106,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40186517:263,Safety,detect,detect,263,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517
https://github.com/psi4/psi4/issues/55#issuecomment-40240628:39,Availability,down,download,39,"I don't know, but it should presumably download that tar file from the appropriate place (sourceforge?). Perhaps you can set up the tar file where it expects. I'm not a psi4 developer - I only use it for comparing energies occasionally. Perhaps someone else has sorted that error out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40240628
https://github.com/psi4/psi4/issues/55#issuecomment-40240628:274,Availability,error,error,274,"I don't know, but it should presumably download that tar file from the appropriate place (sourceforge?). Perhaps you can set up the tar file where it expects. I'm not a psi4 developer - I only use it for comparing energies occasionally. Perhaps someone else has sorted that error out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40240628
https://github.com/psi4/psi4/issues/55#issuecomment-40244096:155,Availability,error,error,155,"Thank you. I can see the following files already in the boost directory:. boost_1_55_0.tar.gz CMakeLists.txt Makefile.in. but I do not know why I got this error --- a bug in PSI4?? Anyway, I have managed to compile PSI4 using the GNU automake tools.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40244096
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:184,Availability,echo,echo,184,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:427,Deployability,INSTALL,INSTALL,427,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:461,Deployability,Configurat,Configuration,461,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:523,Deployability,install,installed,523,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:565,Deployability,install,installation,565,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:632,Deployability,install,installed,632,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:2019,Deployability,install,installation,2019,"he user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.; > ; > ## ; > ; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/56; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:217,Modifiability,variab,variable,217,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:461,Modifiability,Config,Configuration,461,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:1424,Modifiability,variab,variable,1424," from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:2187,Modifiability,variab,variable,2187,"he user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.; > ; > ## ; > ; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/56; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:991,Security,access,access,991,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40206429:1947,Testability,test,testing,1947,"he user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.; > ; > ## ; > ; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/56; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429
https://github.com/psi4/psi4/issues/56#issuecomment-40277811:74,Deployability,install,installed,74,"Many thanks for your help! Your comment is very useful to me. Now, I have installed PSI4 successfully.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40277811
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:963,Energy Efficiency,energy,energy,963,"An input deck would be nice. I'm sure Ed Hohenstein could probably answer; in more detail, but the SAPT codes in PSI4 are designed for SMP parallelism; on a single node, using a mix of OpenMP and threaded BLAS. Moreover, with; high-level SAPT jobs (2+3, etc), there is a non-trivial amount of I/O to be; performed (certainly much less than without DF, but still non-trivial).; Using a build with icpc/MKL, a dedicated scratch array, 64 GB of memory,; and 6 or 8 cores (a single i7 or two quad-core Xeons), we are able to run; SAPT2+3(CCD) jobs with up to 1100 nbf/30 atoms (in an aTZ basis) in about a; week of wall time. Much larger than this and the memory will certainly; become rate limiting. Are you guys trying to run this over a pNFS or something? What BLAS are you; linking against?. -Rob. On Mon, Apr 28, 2014 at 8:03 PM, rxk900 notifications@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2145,Energy Efficiency,energy,energy,2145,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2343,Integrability,depend,depend,2343,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:304,Performance,perform,performed,304,"An input deck would be nice. I'm sure Ed Hohenstein could probably answer; in more detail, but the SAPT codes in PSI4 are designed for SMP parallelism; on a single node, using a mix of OpenMP and threaded BLAS. Moreover, with; high-level SAPT jobs (2+3, etc), there is a non-trivial amount of I/O to be; performed (certainly much less than without DF, but still non-trivial).; Using a build with icpc/MKL, a dedicated scratch array, 64 GB of memory,; and 6 or 8 cores (a single i7 or two quad-core Xeons), we are able to run; SAPT2+3(CCD) jobs with up to 1100 nbf/30 atoms (in an aTZ basis) in about a; week of wall time. Much larger than this and the memory will certainly; become rate limiting. Are you guys trying to run this over a pNFS or something? What BLAS are you; linking against?. -Rob. On Mon, Apr 28, 2014 at 8:03 PM, rxk900 notifications@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:1990,Performance,load,load,1990,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2127,Performance,perform,performance,2127,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2614,Testability,test,test,2614,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946
https://github.com/psi4/psi4/issues/57#issuecomment-41634364:207,Security,confidential,confidentiality,207,"OK, I'll contact user about the input deck - is there some suitable address to send such things in case the user doesn't want his input paraded in public (doesn't happen often but we have had users play the confidentiality card)?; Machine in question is http://nci.org.au/nci-systems/national-facility/peak-system/raijin/; Intel 12 and 13 compilers with MKL (-mkl=parallel) for BLAS.; Our nodes are 16 core (2 oct-core sandybridge) with 32/64/128 GB memory.; We have local (< 440GB) and global scratch and we run over a lustre filesystem.; I don't think IO is the issue as we ran it through Darshan on some fast disks the sysguys were trying out and the time didn't change much and the Darshan report didn't find anything.; The job we profiled was 36 atoms /640 primary,2424 auxiliary bf 'sapt2+3-ct' and took 200 hour on 16 processors so that sounds in line with your experience. The trouble was (I don't have the numbers to hand ) but it took much the same time on 4 and 8 processors. I didn't go anywhere near the 1000 hr job!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41634364
https://github.com/psi4/psi4/issues/57#issuecomment-42150482:1679,Energy Efficiency,energy,energy,1679,0000 1.703107000; H 3.762882000 -0.842463000 0.783360000; H 4.146010000 0.670138000 -0.091664000; C 2.086723000 2.112200000 0.786974000; H 2.554904000 2.486532000 1.695110000; H 1.033654000 2.388008000 0.788088000. ## H 2.582213000 2.494888000 -0.107984000. -1 1; N 2.550604000 3.185553000 5.509348000; S 3.865000000 2.665127000 4.746515000; O 4.891829000 2.292305000 5.715170000; O 3.642766000 1.773130000 3.581966000; S 1.025248000 3.068609000 4.995638000; O 0.246352000 4.189349000 5.513482000; O 0.836696000 2.658767000 3.587628000; C 0.411145000 1.571382000 5.965005000; F 0.501921000 1.762057000 7.282003000; F -0.875249000 1.329423000 5.650112000; F 1.131303000 0.476913000 5.635681000; C 4.516291000 4.244100000 3.945648000; F 4.803355000 5.175437000 4.855959000; F 5.632032000 3.964007000 3.245064000; F 3.602028000 4.743185000 3.087596000; units angstrom; no_reorient; symmetry c1; }. set globals {; basis cc-pVDZ; scf_type DF; freeze_core True; guess sad ; basis_guess 3-21G; }. energy('sapt2+3-ct'). # This isn't the actual desired job but bowdlerised for testing purposes with resources used:. ```; Resource Usage on 2014-04-15 19:15:49.729365:; JobId: 3541235.r-man2 ; Project: z00 ; Exit Status: 1 (Linux Signal 1); Service Units: 234.73; NCPUs Requested: 4 NCPUs Used: 4; CPU Time Used: 166:41:09; Memory Requested: 10gb Memory Used: 6gb; Vmem Used: 6gb; Walltime requested: 75:00:00 Walltime Used: 58:40:56; jobfs request: 20480mb jobfs used: 14975mb; ```. # . # . ```; Resource Usage on 2014-04-08 04:57:17.482814:; JobId: 3502869.r-man2 ; Project: z00 ; Exit Status: 1 (Linux Signal 1); Service Units: 363.16; NCPUs Requested: 8 NCPUs Used: 8; CPU Time Used: 202:02:19; Memory Requested: 10gb Memory Used: 6gb; Vmem Used: 6gb; Walltime requested: 60:00:00 Walltime Used: 45:23:42; jobfs request: 20480mb jobfs used: 14975mb; ```. # . # . ```; Resource Usage on 2014-02-12 22:00:42.199941:; JobId: 2430324.r-man2 ; Project: z00 ; Exit Status: 0 (Linux Signal 0); Service Units: 511.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-42150482
https://github.com/psi4/psi4/issues/57#issuecomment-42150482:1757,Testability,test,testing,1757,H 4.146010000 0.670138000 -0.091664000; C 2.086723000 2.112200000 0.786974000; H 2.554904000 2.486532000 1.695110000; H 1.033654000 2.388008000 0.788088000. ## H 2.582213000 2.494888000 -0.107984000. -1 1; N 2.550604000 3.185553000 5.509348000; S 3.865000000 2.665127000 4.746515000; O 4.891829000 2.292305000 5.715170000; O 3.642766000 1.773130000 3.581966000; S 1.025248000 3.068609000 4.995638000; O 0.246352000 4.189349000 5.513482000; O 0.836696000 2.658767000 3.587628000; C 0.411145000 1.571382000 5.965005000; F 0.501921000 1.762057000 7.282003000; F -0.875249000 1.329423000 5.650112000; F 1.131303000 0.476913000 5.635681000; C 4.516291000 4.244100000 3.945648000; F 4.803355000 5.175437000 4.855959000; F 5.632032000 3.964007000 3.245064000; F 3.602028000 4.743185000 3.087596000; units angstrom; no_reorient; symmetry c1; }. set globals {; basis cc-pVDZ; scf_type DF; freeze_core True; guess sad ; basis_guess 3-21G; }. energy('sapt2+3-ct'). # This isn't the actual desired job but bowdlerised for testing purposes with resources used:. ```; Resource Usage on 2014-04-15 19:15:49.729365:; JobId: 3541235.r-man2 ; Project: z00 ; Exit Status: 1 (Linux Signal 1); Service Units: 234.73; NCPUs Requested: 4 NCPUs Used: 4; CPU Time Used: 166:41:09; Memory Requested: 10gb Memory Used: 6gb; Vmem Used: 6gb; Walltime requested: 75:00:00 Walltime Used: 58:40:56; jobfs request: 20480mb jobfs used: 14975mb; ```. # . # . ```; Resource Usage on 2014-04-08 04:57:17.482814:; JobId: 3502869.r-man2 ; Project: z00 ; Exit Status: 1 (Linux Signal 1); Service Units: 363.16; NCPUs Requested: 8 NCPUs Used: 8; CPU Time Used: 202:02:19; Memory Requested: 10gb Memory Used: 6gb; Vmem Used: 6gb; Walltime requested: 60:00:00 Walltime Used: 45:23:42; jobfs request: 20480mb jobfs used: 14975mb; ```. # . # . ```; Resource Usage on 2014-02-12 22:00:42.199941:; JobId: 2430324.r-man2 ; Project: z00 ; Exit Status: 0 (Linux Signal 0); Service Units: 511.06; NCPUs Requested: 16 NCPUs Used: 16; CPU Time Used: 224:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-42150482
https://github.com/psi4/psi4/issues/57#issuecomment-122118602:93,Testability,test,tests,93,Sorry we haven't had an opportunity to follow up on this. We need to do some general scaling tests with many of the parts of Psi4. We tested SAPT0 more extensively than SAPT2+(3) in terms of scaling. In general SAPT0 scales reasonably well at least up to 8 cores. Would have expected similar results for SAPT2+(3) unless perhaps the I/O is beginning to have a serious effect.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-122118602
https://github.com/psi4/psi4/issues/57#issuecomment-122118602:134,Testability,test,tested,134,Sorry we haven't had an opportunity to follow up on this. We need to do some general scaling tests with many of the parts of Psi4. We tested SAPT0 more extensively than SAPT2+(3) in terms of scaling. In general SAPT0 scales reasonably well at least up to 8 cores. Would have expected similar results for SAPT2+(3) unless perhaps the I/O is beginning to have a serious effect.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-122118602
https://github.com/psi4/psi4/issues/57#issuecomment-122122695:209,Performance,load,load,209,"Not sure whether the group concerned are still working on this. I haven't looked at this since. However, I do remember it isn't IO as we took it through Darshan which is an IO profiler.; It did have a feel of load balancing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-122122695
https://github.com/psi4/psi4/issues/57#issuecomment-135840223:244,Deployability,pipeline,pipeline,244,"Hello,. The short answer is, at the moment, no. As said above, nothing in these equations prevents parallelism, but the equations are extremely complex and so is the code...; Improving the parallelism of SAPT0, which is much simpler, is on the pipeline though.; Sorry we can't help more for now, but if you know someone who can code, contributions are welcome!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-135840223
https://github.com/psi4/psi4/issues/57#issuecomment-135840223:225,Usability,simpl,simpler,225,"Hello,. The short answer is, at the moment, no. As said above, nothing in these equations prevents parallelism, but the equations are extremely complex and so is the code...; Improving the parallelism of SAPT0, which is much simpler, is on the pipeline though.; Sorry we can't help more for now, but if you know someone who can code, contributions are welcome!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-135840223
https://github.com/psi4/psi4/issues/57#issuecomment-136233334:64,Usability,learn,learning,64,"Hi,. I'd be happy to help with code--it would be an interesting learning experience. But I'd probably only be able to find time after I finish my PhD.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-136233334
https://github.com/psi4/psi4/issues/57#issuecomment-170066558:205,Performance,load,load,205,"If you do end up working on it, we would love to incorporate your codes; however, for the time being we are going to close this issue as our resident SAPT code expert will not have a chance to improve the load balancing anytime soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-170066558
https://github.com/psi4/psi4/issues/59#issuecomment-43508954:123,Energy Efficiency,energy,energy,123,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954
https://github.com/psi4/psi4/issues/59#issuecomment-43508954:366,Energy Efficiency,energy,energy,366,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954
https://github.com/psi4/psi4/issues/59#issuecomment-43508954:880,Energy Efficiency,energy,energy,880,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954
https://github.com/psi4/psi4/issues/59#issuecomment-43508954:1068,Energy Efficiency,energy,energy,1068,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954
https://github.com/psi4/psi4/issues/59#issuecomment-43508954:560,Safety,detect,detects,560,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954
https://github.com/psi4/psi4/issues/59#issuecomment-43508954:21,Usability,clear,clear,21,"It's not immediately clear to me why no_com and no_reorient are required to get energies right in this case. Shouldn't the energy be invariant to the choice of coordinate system?. ## -Daniel . Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On May 19, 2014, at 10:01 AM, Eugene DePrince notifications@github.com wrote:. > If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case.; > ; > molecule beh2 {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > }; > molecule beh2_nocom {; > Be 0.0 0.0 z; > H 0.0 1.0 0.0; > H 0.0 -1.0 0.0; > nocom; > no_reorient; > }; > activate(beh2); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2.z = z; > e = energy('scf'); > print z,e; > set guess read; > print ''; > ; > activate(beh2_nocom); > set basis sto-3g; > set guess sad; > for i in range (1,41):; > z = i*0.1; > beh2_nocom.z = z; > e = energy('scf'); > print z,e; > set guess read; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43508954
https://github.com/psi4/psi4/issues/59#issuecomment-43509699:137,Deployability,update,updated,137,"Without nocom, the first time the energy is computed, the center of mass is shifted to the origin, and all of the stored coordinates are updated. If change beh2.z to a new value, I might be expecting all of the other coordinates to still be where I specified them, not at their com-shifted values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43509699
https://github.com/psi4/psi4/issues/59#issuecomment-43509699:34,Energy Efficiency,energy,energy,34,"Without nocom, the first time the energy is computed, the center of mass is shifted to the origin, and all of the stored coordinates are updated. If change beh2.z to a new value, I might be expecting all of the other coordinates to still be where I specified them, not at their com-shifted values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43509699
https://github.com/psi4/psi4/issues/60#issuecomment-53036550:113,Energy Efficiency,charge,charges,113,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550
https://github.com/psi4/psi4/issues/60#issuecomment-53036550:234,Energy Efficiency,Charge,Charges,234,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550
https://github.com/psi4/psi4/issues/60#issuecomment-53036550:331,Energy Efficiency,Charge,Charges,331,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550
https://github.com/psi4/psi4/issues/60#issuecomment-53036550:445,Energy Efficiency,charge,charges,445,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550
https://github.com/psi4/psi4/issues/60#issuecomment-53036550:41,Performance,load,loading,41,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550
https://github.com/psi4/psi4/issues/60#issuecomment-53036550:11,Testability,test,testing,11,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:734,Deployability,update,update,734,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:318,Energy Efficiency,charge,charges,318,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:385,Energy Efficiency,Charge,Charges,385,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:86,Integrability,contract,contraction,86,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:525,Integrability,contract,contraction,525,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:165,Performance,load,loaded,165,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:251,Performance,load,loaded,251,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:185,Testability,log,log,185,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53039792:557,Testability,log,log,557,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792
https://github.com/psi4/psi4/issues/60#issuecomment-53050174:132,Integrability,contract,contraction,132,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174
https://github.com/psi4/psi4/issues/60#issuecomment-53050174:295,Integrability,contract,contraction,295,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174
https://github.com/psi4/psi4/issues/60#issuecomment-53050174:717,Integrability,contract,contraction,717,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174
https://github.com/psi4/psi4/issues/60#issuecomment-53050174:250,Performance,load,loaded,250,"I got in touch with the developer of Molden. He mentioned that his program can fix some of the mistakes in the normalization of the contraction coefficients but not all. That is why the ORCA and PSI4 molden files gave the same results when they were loaded into Molden, despite having different contraction coefficients. In principle, the source code of molden is the authoritative source for the definition of the file format. The code can be found here:. http://www.cmbi.ru.nl/molden/. The relevant files are rdmolf.f, renorm.f and basprt.f. I'm not an expert on fortran77, so I won't be able to get a definitive answer this way. Since, the conventions are the same as these of the Gaussian94 basis set format, the contraction coefficients are given under the assumption that the primitives are normalized. It is also assumed that the normalization is done for pure (spherical) functions, irrespective of the use of Cartesian basis functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53050174
https://github.com/psi4/psi4/issues/60#issuecomment-54483620:267,Deployability,patch,patch,267,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620
https://github.com/psi4/psi4/issues/60#issuecomment-54483620:124,Energy Efficiency,charge,charges,124,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620
https://github.com/psi4/psi4/issues/60#issuecomment-54483620:148,Energy Efficiency,Charge,Charges,148,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620
https://github.com/psi4/psi4/issues/60#issuecomment-54483620:232,Energy Efficiency,Charge,Charges,232,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1778,Availability,error,error,1778," 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sok",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:2116,Availability,Error,Error,2116,".000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:2162,Availability,error,error,2162,"9 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graph",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1612,Energy Efficiency,energy,energy,1612,"xcited states; > ; > Input File; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graphyne using basis cc-pvdz; > ; > memory 5000 mb; > ; > molecule Graphyne {; > 0 1; > C 1.396 0.000 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1930,Energy Efficiency,energy,energy,1930," -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1952,Energy Efficiency,energy,energy,1952," -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; > W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; > and T. D. Crawford, WIREs Comput. Mol. Sci., (2011) (doi: 10.1002/wcms.93); > ; > ```; > Additional Contributions by; > ```; > ; > ## A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; > ; > Process ID: 4249; > PSI4DATADIR: /usr/local/psi4/share/psi; > ; > Using LocalCommunicator (Number of processes = 1); > ; > Memory level set to 256.000 MB; > ; > ## =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:4054,Energy Efficiency,energy,energy,4054,"level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graphyne using basis cc-pvdz; > ; > memory 5000 mb; > ; > molecule Graphyne {; > 0 1; > C 1.396 0.000 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > thisenergy = energy('fci'); > ; > Memory set to 5.000 GiB by Python script.; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:39:34 2014; > ; > ```; > ---------------------------------------------------------; > SCF; > by Justin Turney, Rob Parrish, and Andy Simmonett; > RHF Reference; > 1 Threads, 5000 MiB Core; > ---------------------------------------------------------; > ```; > ; > ==> Geometry <==; > ; > Molecular point group: c1; > Full point group: D2h; > ; > Geometry (in Angstrom), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -2.013000000000 0.000000000000 0.000000000000; > C -2.711000000000 1.209000000000 0.000000000000; > C -4.107000000000 1.209000000000 0.000000000000; > C -4.805000000000 0.000000000000 0.000000000000; > C -4.107000000000 -1.209000000000 0.000000000000; > C -2.711000000000 -1.209000000000 0.000000000000; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:4563,Energy Efficiency,charge,charge,4563,"; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > thisenergy = energy('fci'); > ; > Memory set to 5.000 GiB by Python script.; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:39:34 2014; > ; > ```; > ---------------------------------------------------------; > SCF; > by Justin Turney, Rob Parrish, and Andy Simmonett; > RHF Reference; > 1 Threads, 5000 MiB Core; > ---------------------------------------------------------; > ```; > ; > ==> Geometry <==; > ; > Molecular point group: c1; > Full point group: D2h; > ; > Geometry (in Angstrom), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -2.013000000000 0.000000000000 0.000000000000; > C -2.711000000000 1.209000000000 0.000000000000; > C -4.107000000000 1.209000000000 0.000000000000; > C -4.805000000000 0.000000000000 0.000000000000; > C -4.107000000000 -1.209000000000 0.000000000000; > C -2.711000000000 -1.209000000000 0.000000000000; > H -2.169000000000 2.147000000000 0.000000000000; > H -4.649000000000 2.147000000000 0.000000000000; > H -5.888000000000 0.000000000000 0.000000000000; > H -4.649000000000 -2.147000000000 0.000000000000; > H -2.169000000000 -2.147000000000 0.000000000000; > C -0.611000000000 0.000000000000 0.000000000000; > C 0.611000000000 0.000000000000 0.000000000000; > C 2.013000000000 0.000000000000 0.000000000000; > C 4.805000000000 0.000000000000 0.000000000000;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:5947,Energy Efficiency,Charge,Charge,5947,0000000 2.147000000000 0.000000000000; > H -5.888000000000 0.000000000000 0.000000000000; > H -4.649000000000 -2.147000000000 0.000000000000; > H -2.169000000000 -2.147000000000 0.000000000000; > C -0.611000000000 0.000000000000 0.000000000000; > C 0.611000000000 0.000000000000 0.000000000000; > C 2.013000000000 0.000000000000 0.000000000000; > C 4.805000000000 0.000000000000 0.000000000000; > C 4.107000000000 1.209000000000 0.000000000000; > C 2.711000000000 1.209000000000 0.000000000000; > C 2.711000000000 -1.209000000000 0.000000000000; > C 4.107000000000 -1.209000000000 0.000000000000; > H 4.649000000000 2.147000000000 0.000000000000; > H 2.169000000000 2.147000000000 0.000000000000; > H 5.888000000000 0.000000000000 0.000000000000; > H 2.169000000000 -2.147000000000 0.000000000000; > H 4.649000000000 -2.147000000000 0.000000000000; > ```; > ; > Running in c1 symmetry.; > ; > Nuclear repulsion = 697.113178296437809; > ; > Charge = 0; > Multiplicity = 1; > Electrons = 94; > Nalpha = 47; > Nbeta = 47; > ; > ==> Algorithm <==; > ; > SCF Algorithm Type is OUT_OF_CORE.; > DIIS enabled.; > MOM disabled.; > Fractional occupation disabled.; > Guess Type is CORE.; > Energy threshold = 1.00e-08; > Density threshold = 1.00e-10; > Integral threshold = 0.00e+00; > ; > ==> Primary Basis <==; > ; > Basis Set: CC-PVDZ; > Number of shells: 114; > Number of basis function: 246; > Number of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions pe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:6187,Energy Efficiency,Energy,Energy,6187,"0000; > C -0.611000000000 0.000000000000 0.000000000000; > C 0.611000000000 0.000000000000 0.000000000000; > C 2.013000000000 0.000000000000 0.000000000000; > C 4.805000000000 0.000000000000 0.000000000000; > C 4.107000000000 1.209000000000 0.000000000000; > C 2.711000000000 1.209000000000 0.000000000000; > C 2.711000000000 -1.209000000000 0.000000000000; > C 4.107000000000 -1.209000000000 0.000000000000; > H 4.649000000000 2.147000000000 0.000000000000; > H 2.169000000000 2.147000000000 0.000000000000; > H 5.888000000000 0.000000000000 0.000000000000; > H 2.169000000000 -2.147000000000 0.000000000000; > H 4.649000000000 -2.147000000000 0.000000000000; > ```; > ; > Running in c1 symmetry.; > ; > Nuclear repulsion = 697.113178296437809; > ; > Charge = 0; > Multiplicity = 1; > Electrons = 94; > Nalpha = 47; > Nbeta = 47; > ; > ==> Algorithm <==; > ; > SCF Algorithm Type is OUT_OF_CORE.; > DIIS enabled.; > MOM disabled.; > Fractional occupation disabled.; > Guess Type is CORE.; > Energy threshold = 1.00e-08; > Density threshold = 1.00e-10; > Integral threshold = 0.00e+00; > ; > ==> Primary Basis <==; > ; > Basis Set: CC-PVDZ; > Number of shells: 114; > Number of basis function: 246; > Number of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:7832,Energy Efficiency,Energy,Energy,7832,"r of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using Symmetric Orthogonalization.; > SCF Guess: Core (One-Electron) Hamiltonian.; > ; > ==> Iterations <==; > ; > ```; > Total Energy Delta E RMS |[F,P]|; > ```; > ; > @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02; > @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; > @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; > @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; > @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; > @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; > @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; > @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1.17738e-03 DIIS; > @DF-RHF iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; > @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; > @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; > @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; > @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; > @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; > @D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15018,Energy Efficiency,Energy,Energy,15018,"86; > 183A 1.950596 184A 1.955082 185A 1.962510; > 186A 1.987883 187A 1.992233 188A 2.021730; > 189A 2.047832 190A 2.054449 191A 2.063391; > 192A 2.073995 193A 2.089810 194A 2.098059; > 195A 2.119505 196A 2.136885 197A 2.139951; > 198A 2.143625 199A 2.144516 200A 2.149966; > 201A 2.153416 202A 2.160845 203A 2.177753; > 204A 2.193917 205A 2.249401 206A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15077,Energy Efficiency,Energy,Energy,15077,"2.021730; > 189A 2.047832 190A 2.054449 191A 2.063391; > 192A 2.073995 193A 2.089810 194A 2.098059; > 195A 2.119505 196A 2.136885 197A 2.139951; > 198A 2.143625 199A 2.144516 200A 2.149966; > 201A 2.153416 202A 2.160845 203A 2.177753; > 204A 2.193917 205A 2.249401 206A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system ti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15154,Energy Efficiency,Energy,Energy,15154,"1; > 192A 2.073995 193A 2.089810 194A 2.098059; > 195A 2.119505 196A 2.136885 197A 2.139951; > 198A 2.143625 199A 2.144516 200A 2.149966; > 201A 2.153416 202A 2.160845 203A 2.177753; > 204A 2.193917 205A 2.249401 206A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 52",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15200,Energy Efficiency,Energy,Energy,15200," 196A 2.136885 197A 2.139951; > 198A 2.143625 199A 2.144516 200A 2.149966; > 201A 2.153416 202A 2.160845 203A 2.177753; > 204A 2.193917 205A 2.249401 206A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15248,Energy Efficiency,Energy,Energy,15248,"99A 2.144516 200A 2.149966; > 201A 2.153416 202A 2.160845 203A 2.177753; > 204A 2.193917 205A 2.249401 206A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15306,Energy Efficiency,Energy,Energy,15306,"160845 203A 2.177753; > 204A 2.193917 205A 2.249401 206A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15358,Energy Efficiency,Energy,Energy,15358,"6A 2.259315; > 207A 2.260884 208A 2.264073 209A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:15395,Energy Efficiency,Energy,Energy,15395,"A 2.270343; > 210A 2.290240 211A 2.296245 212A 2.304338; > 213A 2.316737 214A 2.379290 215A 2.453589; > 216A 2.461743 217A 2.495632 218A 2.498678; > 219A 2.519294 220A 2.562708 221A 2.608244; > 222A 2.726412 223A 2.739216 224A 2.753717; > 225A 2.766537 226A 2.769494 227A 2.781755; > 228A 2.786035 229A 2.802889 230A 2.877816; > 231A 2.934217 232A 2.946283 233A 2.971176; > 234A 2.978125 235A 3.021450 236A 3.025068; > 237A 3.055308 238A 3.105407 239A 3.192416; > 240A 3.230170 241A 3.237091 242A 3.270263; > 243A 3.501427 244A 3.509120 245A 3.988816; > 246A 4.002956; > ; > Final Occupation by Irrep:; > A; > DOCC [ 47 ]; > ; > Energy converged.; > ; > @RHF https://github.com/RHF Final Energy: -535.97469065986820; > ; > => Energetics <=; > ; > Nuclear Repulsion Energy = 697.1131782964378090; > One-Electron Energy = -2106.2189353611356637; > Two-Electron Energy = 873.1310664048263561; > DFT Exchange-Correlation Energy = 0.0000000000000000; > Empirical Dispersion Energy = 0.0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 201",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:17081,Energy Efficiency,energy,energy,17081,".0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 2014; > ; > ---; > - TRANSQT2: Program to transform integrals from *; > - the SO basis to the MO basis. *; > - *; > - Daniel, David, & Justin *; > **************************************************; > ; > ## Input parameters:; > ; > Wave function = DETCI; > Backtransform = No; > Print Level = 1; > Print TEIs = No; > Reference wfn = RHF; > Derivative = None; > Delete TEI File = Yes; > Memory (Mbytes) = 5000.0; > Cache Level = 2; > Cache Type = LRU; > ; > ## Chkpt Parameters:; > ; > Number of irreps = 1; > Number of SOs = 246; > Number of MOs = 246; > Number of active MOs = 232; > ; > Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ; > ---; > ; > A 246 14 33 0 199 0; > ; > Nuclear Rep. energy (chkpt) = 697.11317829643781; > SCF energy (chkpt) = -535.97469065986820; > ; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (pq,rs) nbuckets = 2; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/61.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:17124,Energy Efficiency,energy,energy,17124,".0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 2014; > ; > ---; > - TRANSQT2: Program to transform integrals from *; > - the SO basis to the MO basis. *; > - *; > - Daniel, David, & Justin *; > **************************************************; > ; > ## Input parameters:; > ; > Wave function = DETCI; > Backtransform = No; > Print Level = 1; > Print TEIs = No; > Reference wfn = RHF; > Derivative = None; > Delete TEI File = Yes; > Memory (Mbytes) = 5000.0; > Cache Level = 2; > Cache Type = LRU; > ; > ## Chkpt Parameters:; > ; > Number of irreps = 1; > Number of SOs = 246; > Number of MOs = 246; > Number of active MOs = 232; > ; > Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ; > ---; > ; > A 246 14 33 0 199 0; > ; > Nuclear Rep. energy (chkpt) = 697.11317829643781; > SCF energy (chkpt) = -535.97469065986820; > ; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (pq,rs) nbuckets = 2; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/61.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:6707,Integrability,Wrap,Wrapper,6707,".888000000000 0.000000000000 0.000000000000; > H 2.169000000000 -2.147000000000 0.000000000000; > H 4.649000000000 -2.147000000000 0.000000000000; > ```; > ; > Running in c1 symmetry.; > ; > Nuclear repulsion = 697.113178296437809; > ; > Charge = 0; > Multiplicity = 1; > Electrons = 94; > Nalpha = 47; > Nbeta = 47; > ; > ==> Algorithm <==; > ; > SCF Algorithm Type is OUT_OF_CORE.; > DIIS enabled.; > MOM disabled.; > Fractional occupation disabled.; > Guess Type is CORE.; > Energy threshold = 1.00e-08; > Density threshold = 1.00e-10; > Integral threshold = 0.00e+00; > ; > ==> Primary Basis <==; > ; > Basis Set: CC-PVDZ; > Number of shells: 114; > Number of basis function: 246; > Number of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:9465,Integrability,Wrap,Wrapper,9465,"25 -5.38996e-02 3.40988e-04 DIIS; > @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; > @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; > @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; > @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; > @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; > @DF-RHF iter 15: -535.97367316705004 -2.38416e-07 5.52742e-07 DIIS; > @DF-RHF iter 16: -535.97367321567344 -4.86234e-08 2.27016e-07 DIIS; > @DF-RHF iter 17: -535.97367322279683 -7.12339e-09 4.03379e-08 DIIS; > @DF-RHF iter 18: -535.97367322291711 -1.20281e-10 1.51493e-08 DIIS; > @DF-RHF iter 19: -535.97367322293508 -1.79625e-11 3.82698e-09 DIIS; > @DF-RHF iter 20: -535.97367322293599 -9.09495e-13 1.05449e-09 DIIS; > @DF-RHF iter 21: -535.97367322293462 1.36424e-12 2.43431e-10 DIIS; > @DF-RHF iter 22: -535.97367322293553 -9.09495e-13 9.68772e-11 DIIS; > ; > DF guess converged.; > ; > ==> Integral Setup <==; > ; > MINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 238922952 non-zero two-electron integrals.; > Stored in file 33.; > ; > ==> DiskJK: Disk-Based J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > Memory (MB): 3576; > Schwarz Cutoff: 1E-12; > ; > @RHF https://github.com/RHF iter 23: -535.97469002803746 -1.01681e-03; > 4.55914e-06 DIIS; > @RHF https://github.com/RHF iter 24: -535.97469062826895 -6.00231e-07; > 9.20453e-07 DIIS; > @RHF https://github.com/RHF iter 25: -535.97469065540940 -2.71405e-08; > 3.52409e-07 D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:7347,Performance,Cache,Cache,7347,"er of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using Symmetric Orthogonalization.; > SCF Guess: Core (One-Electron) Hamiltonian.; > ; > ==> Iterations <==; > ; > ```; > Total Energy Delta E RMS |[F,P]|; > ```; > ; > @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02; > @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; > @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; > @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; > @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; > @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; > @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; > @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:16801,Performance,Cache,Cache,16801,".0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 2014; > ; > ---; > - TRANSQT2: Program to transform integrals from *; > - the SO basis to the MO basis. *; > - *; > - Daniel, David, & Justin *; > **************************************************; > ; > ## Input parameters:; > ; > Wave function = DETCI; > Backtransform = No; > Print Level = 1; > Print TEIs = No; > Reference wfn = RHF; > Derivative = None; > Delete TEI File = Yes; > Memory (Mbytes) = 5000.0; > Cache Level = 2; > Cache Type = LRU; > ; > ## Chkpt Parameters:; > ; > Number of irreps = 1; > Number of SOs = 246; > Number of MOs = 246; > Number of active MOs = 232; > ; > Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ; > ---; > ; > A 246 14 33 0 199 0; > ; > Nuclear Rep. energy (chkpt) = 697.11317829643781; > SCF energy (chkpt) = -535.97469065986820; > ; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (pq,rs) nbuckets = 2; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/61.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/61#issuecomment-58650322:16820,Performance,Cache,Cache,16820,".0000000000000000; > Total Energy = -535.9746906598714986; > ; > Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; > ==> Properties <==; > ; > Properties computed using the SCF density density matrix; > Nuclear Dipole Moment: (a.u.); > X: 0.0000 Y: 0.0000 Z: 0.0000; > ; > Electronic Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000; > ; > Dipole Moment: (a.u.); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Dipole Moment: (Debye); > X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000; > ; > Saving occupied orbitals to File 180.; > ; > **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; > Module time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > Total time:; > user time = 515.17 seconds = 8.59 minutes; > system time = 10.04 seconds = 0.17 minutes; > total time = 527 seconds = 8.78 minutes; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:48:21 2014; > ; > ---; > - TRANSQT2: Program to transform integrals from *; > - the SO basis to the MO basis. *; > - *; > - Daniel, David, & Justin *; > **************************************************; > ; > ## Input parameters:; > ; > Wave function = DETCI; > Backtransform = No; > Print Level = 1; > Print TEIs = No; > Reference wfn = RHF; > Derivative = None; > Delete TEI File = Yes; > Memory (Mbytes) = 5000.0; > Cache Level = 2; > Cache Type = LRU; > ; > ## Chkpt Parameters:; > ; > Number of irreps = 1; > Number of SOs = 246; > Number of MOs = 246; > Number of active MOs = 232; > ; > Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ; > ---; > ; > A 246 14 33 0 199 0; > ; > Nuclear Rep. energy (chkpt) = 697.11317829643781; > SCF energy (chkpt) = -535.97469065986820; > ; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (pq,rs) nbuckets = 2; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/61.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322
https://github.com/psi4/psi4/issues/62#issuecomment-122011825:118,Energy Efficiency,efficient,efficient,118,Unfortunately the DETCI code is primarily meant to do highly-correlated CI computations like Full CI. It is not super-efficient for CISD and can't handle systems this big.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/62#issuecomment-122011825
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:134,Energy Efficiency,Energy,Energy,134,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:164,Energy Efficiency,Energy,Energy,164,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:1030,Energy Efficiency,Energy,Energy,1030,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:1076,Energy Efficiency,energy,energy,1076,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:1316,Energy Efficiency,energy,energy,1316,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:1374,Energy Efficiency,energy,energy,1374,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010043:809,Modifiability,plugin,plugin,809,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043
https://github.com/psi4/psi4/issues/63#issuecomment-62010136:26,Energy Efficiency,Energy,Energy,26,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136
https://github.com/psi4/psi4/issues/63#issuecomment-62010136:812,Energy Efficiency,Energy,Energy,812,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136
https://github.com/psi4/psi4/issues/63#issuecomment-62010136:858,Energy Efficiency,energy,energy,858,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136
https://github.com/psi4/psi4/issues/63#issuecomment-62010136:1098,Energy Efficiency,energy,energy,1098,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136
https://github.com/psi4/psi4/issues/63#issuecomment-62010136:1156,Energy Efficiency,energy,energy,1156,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136
https://github.com/psi4/psi4/issues/63#issuecomment-62010136:591,Modifiability,plugin,plugin,591,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136
https://github.com/psi4/psi4/issues/63#issuecomment-122112904:28,Availability,robust,robust,28,We will try to write a more robust default guess in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-122112904
https://github.com/psi4/psi4/issues/65#issuecomment-72927187:347,Modifiability,plugin,plugin,347,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187
https://github.com/psi4/psi4/issues/65#issuecomment-72927187:98,Safety,avoid,avoid,98,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187
https://github.com/psi4/psi4/issues/65#issuecomment-72927187:557,Safety,avoid,avoid,557,"Yes, the integrals are recomputed every time a new DiskJK is built. There; is presently no way to avoid this. If you are being hamstrung by the AO; integrals, I recommend a DFJK object or perhaps a DirectJK object. Best,. -Rob. On Wed, Feb 4, 2015 at 1:59 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > I'm using DiskJK in a plugin:; > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292; > . Does it reuse the existing disk AO integrals or does it recompute them?; > In case of the latter: How do I avoid this? Is there a way to fetch the JK; > from the wavefunction object or the environment?; > ; > Thank you for your time and answer!; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/65.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/65#issuecomment-72927187
https://github.com/psi4/psi4/issues/66#issuecomment-73061426:1003,Deployability,update,updated,1003," Sebastian,. Which version of Psi is this, beta5? We have been having a little trouble; reproducing the problem. Also, do you have a .psi4rc file, and if so, what's in it?. Thanks,; David. On Wed, Feb 4, 2015 at 5:47 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > The input file for the problem described below:; > ; > molecule C6H6 {; > 0 1; > C 0.0 1.855 0.0; > C 0.0 -1.855 0.0; > C 1.6064771240201337 0.9275 0.0; > C 1.6064771240201337 -0.9275 0.0; > C -1.6064771240201337 0.9275 0.0; > C -1.6064771240201337 -0.9275 0.0; > H 0.0 3.289 0.0; > H 0.0 -3.289 0.0; > H 2.848357553047019 1.6445 0.0; > H 2.848357553047019 -1.6445 0.0; > H -2.848357553047019 1.6445 0.0; > H -2.848357553047019 -1.6445 0.0; > units au; > }; > ; > set basis cc-pVDZ; > set reference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.850111145",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426
https://github.com/psi4/psi4/issues/66#issuecomment-73061426:1057,Energy Efficiency,charge,charge,1057," Sebastian,. Which version of Psi is this, beta5? We have been having a little trouble; reproducing the problem. Also, do you have a .psi4rc file, and if so, what's in it?. Thanks,; David. On Wed, Feb 4, 2015 at 5:47 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > The input file for the problem described below:; > ; > molecule C6H6 {; > 0 1; > C 0.0 1.855 0.0; > C 0.0 -1.855 0.0; > C 1.6064771240201337 0.9275 0.0; > C 1.6064771240201337 -0.9275 0.0; > C -1.6064771240201337 0.9275 0.0; > C -1.6064771240201337 -0.9275 0.0; > H 0.0 3.289 0.0; > H 0.0 -3.289 0.0; > H 2.848357553047019 1.6445 0.0; > H 2.848357553047019 -1.6445 0.0; > H -2.848357553047019 1.6445 0.0; > H -2.848357553047019 -1.6445 0.0; > units au; > }; > ; > set basis cc-pVDZ; > set reference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.850111145",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426
https://github.com/psi4/psi4/issues/66#issuecomment-73061426:2493,Energy Efficiency,charge,charge,2493," -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.8501111451 0.4908118984 0.0000000000; > C 0.8501111451 -0.4908118984 0.0000000000; > C -0.8501111451 0.4908118984 0.0000000000; > C -0.8501111451 -0.4908118984 0.0000000000; > H -0.0000000000 1.7404639720 0.0000000000; > H 0.0000000000 -1.7404639720 -0.0000000000; > H 1.5072860141 0.8702319860 0.0000000000; > H 1.5072860141 -0.8702319860 0.0000000000; > H -1.5072860141 0.8702319860 0.0000000000; > H -1.5072860141 -0.8702319860 0.0000000000; > ```; > ; > The new SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > In other folders (than /tmp) it works fine. Maybe change the naming scheme?; > ; > Best,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/66.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426
https://github.com/psi4/psi4/issues/66#issuecomment-73061426:880,Performance,optimiz,optimize,880," Sebastian,. Which version of Psi is this, beta5? We have been having a little trouble; reproducing the problem. Also, do you have a .psi4rc file, and if so, what's in it?. Thanks,; David. On Wed, Feb 4, 2015 at 5:47 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > The input file for the problem described below:; > ; > molecule C6H6 {; > 0 1; > C 0.0 1.855 0.0; > C 0.0 -1.855 0.0; > C 1.6064771240201337 0.9275 0.0; > C 1.6064771240201337 -0.9275 0.0; > C -1.6064771240201337 0.9275 0.0; > C -1.6064771240201337 -0.9275 0.0; > H 0.0 3.289 0.0; > H 0.0 -3.289 0.0; > H 2.848357553047019 1.6445 0.0; > H 2.848357553047019 -1.6445 0.0; > H -2.848357553047019 1.6445 0.0; > H -2.848357553047019 -1.6445 0.0; > units au; > }; > ; > set basis cc-pVDZ; > set reference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.850111145",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426
https://github.com/psi4/psi4/issues/66#issuecomment-73061426:931,Performance,optimiz,optimization,931," Sebastian,. Which version of Psi is this, beta5? We have been having a little trouble; reproducing the problem. Also, do you have a .psi4rc file, and if so, what's in it?. Thanks,; David. On Wed, Feb 4, 2015 at 5:47 PM, Sebastian Wouters notifications@github.com; wrote:. > Hi,; > ; > The input file for the problem described below:; > ; > molecule C6H6 {; > 0 1; > C 0.0 1.855 0.0; > C 0.0 -1.855 0.0; > C 1.6064771240201337 0.9275 0.0; > C 1.6064771240201337 -0.9275 0.0; > C -1.6064771240201337 0.9275 0.0; > C -1.6064771240201337 -0.9275 0.0; > H 0.0 3.289 0.0; > H 0.0 -3.289 0.0; > H 2.848357553047019 1.6445 0.0; > H 2.848357553047019 -1.6445 0.0; > H -2.848357553047019 1.6445 0.0; > H -2.848357553047019 -1.6445 0.0; > units au; > }; > ; > set basis cc-pVDZ; > set reference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.850111145",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426
https://github.com/psi4/psi4/issues/66#issuecomment-73061426:1800,Performance,optimiz,optimization,1800,"eference rhf; > set e_convergence 1e-12; > set d_convergence 1e-12; > set ints_tolerance 0.0; > ; > optimize('b3lyp'); > ; > When you run the geometry optimization in the /tmp folder, the geometry of; > the SCF doesn't get updated:; > ; > First SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.606477124020 0.927500000000 0.000000000000; > C -1.606477124020 -0.927500000000 0.000000000000; > H -0.000000000000 3.289000000000 0.000000000000; > H 0.000000000000 -3.289000000000 0.000000000000; > H 2.848357553047 1.644500000000 0.000000000000; > H 2.848357553047 -1.644500000000 0.000000000000; > H -2.848357553047 1.644500000000 0.000000000000; > H -2.848357553047 -1.644500000000 0.000000000000; > ```; > ; > At the end of optking:; > ; > ```; > Writing optimization data to binary file.; > Structure for next step:; > Cartesian Geometry (in Angstrom); > C -0.0000000000 0.9816237969 0.0000000000; > C 0.0000000000 -0.9816237969 0.0000000000; > C 0.8501111451 0.4908118984 0.0000000000; > C 0.8501111451 -0.4908118984 0.0000000000; > C -0.8501111451 0.4908118984 0.0000000000; > C -0.8501111451 -0.4908118984 0.0000000000; > H -0.0000000000 1.7404639720 0.0000000000; > H 0.0000000000 -1.7404639720 -0.0000000000; > H 1.5072860141 0.8702319860 0.0000000000; > H 1.5072860141 -0.8702319860 0.0000000000; > H -1.5072860141 0.8702319860 0.0000000000; > H -1.5072860141 -0.8702319860 0.0000000000; > ```; > ; > The new SCF:; > ; > Geometry (in Bohr), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -0.000000000000 1.855000000000 0.000000000000; > C 0.000000000000 -1.855000000000 0.000000000000; > C 1.606477124020 0.927500000000 0.000000000000; > C 1.606477124020 -0.927500000000 0.000000000000; > C -1.60647",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73061426
https://github.com/psi4/psi4/issues/66#issuecomment-73074811:204,Modifiability,plugin,plugin,204,"Dear David,. It's psi4 beta 5, and I don't have a .psi4rc file. I use Ubuntu 14.04.1 LTS, have compiled psi4 with the intel compiler, with MKL, with boost from the debian package repository, and with the plugin option on. For the rest I didn't set any options. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73074811
https://github.com/psi4/psi4/issues/66#issuecomment-73293029:43,Availability,error,error,43,"Hi Sebastian,. I'm unable to reproduce the error. Could you send me the output file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73293029
https://github.com/psi4/psi4/issues/66#issuecomment-73297994:89,Availability,error,error,89,"Hi Justin,. My /tmp was erased, so it took me a while before being able to reproduce the error.; What was happening is the following:; - I started off with a really bad geometry and a certain order of C an H atoms.; - After a while, I killed psi4 to generate a new input file with D2h symmetry. Therefore I reordered the C and H atoms to corresponding D2h pairs.; - So in the folder (the problem would happen in any folder), filename.moleculename.intco was still there from the previous atom ordering.; - Psi4 tried to combine the new molecule with the old filename.moleculename.intco, and it got nowhere. It restrained the update steps to negligibly small displacements. ==> So how about changing filename.moleculename.intco > filename.moleculename.pid.intco ?. Best,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73297994
https://github.com/psi4/psi4/issues/66#issuecomment-73297994:624,Deployability,update,update,624,"Hi Justin,. My /tmp was erased, so it took me a while before being able to reproduce the error.; What was happening is the following:; - I started off with a really bad geometry and a certain order of C an H atoms.; - After a while, I killed psi4 to generate a new input file with D2h symmetry. Therefore I reordered the C and H atoms to corresponding D2h pairs.; - So in the folder (the problem would happen in any folder), filename.moleculename.intco was still there from the previous atom ordering.; - Psi4 tried to combine the new molecule with the old filename.moleculename.intco, and it got nowhere. It restrained the update steps to negligibly small displacements. ==> So how about changing filename.moleculename.intco > filename.moleculename.pid.intco ?. Best,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73297994
https://github.com/psi4/psi4/issues/67#issuecomment-122116635:174,Modifiability,plugin,plugins,174,"The short answer is that there's not a built-in way to do this. However, it shouldn't be too hard to backtransform the TPDM for some small case. The default backtransform in plugins/backtrans/ is not smart enough to know about the CI ordering of the MO's, so it won't work as-is. Perhaps if someone on the team has a little time on their hands they might look into this more. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/67#issuecomment-122116635
https://github.com/psi4/psi4/issues/68#issuecomment-73895052:224,Usability,clear,clearer,224,"OK, found it. The overlap is zero for those orbitals. But I was under the impression that `sointegrals` gave me all unique integrals because of symmetry, including those that are zero due to the overlap. This should be made clearer in the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73895052
https://github.com/psi4/psi4/issues/68#issuecomment-73899555:38,Modifiability,plugin,plugin,38,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555
https://github.com/psi4/psi4/issues/68#issuecomment-73899555:658,Modifiability,plugin,plugin,658,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555
https://github.com/psi4/psi4/issues/68#issuecomment-73899555:966,Usability,clear,clearer,966,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555
https://github.com/psi4/psi4/issues/68#issuecomment-73899555:1347,Usability,clear,clearer,1347,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555
https://github.com/psi4/psi4/issues/68#issuecomment-73901139:298,Modifiability,plugin,plugin,298,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139
https://github.com/psi4/psi4/issues/68#issuecomment-73901139:946,Modifiability,plugin,plugin,946,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139
https://github.com/psi4/psi4/issues/68#issuecomment-73901139:1269,Usability,clear,clearer,1269,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139
https://github.com/psi4/psi4/issues/68#issuecomment-73901139:1684,Usability,clear,clearer,1684,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139
https://github.com/psi4/psi4/pull/71#issuecomment-76407683:268,Modifiability,flexible,flexible,268,"If something is meant to be part of the output, I would argue that the correct way to do this is to print to the outfile instance (which is set to stdout if the user wants that). I claim responsibility for this glitch, and any like it; they resulted from trying to be flexible in my automated changes by supporting the old, non-uniform, way of printing. I've made the necessary changes in both the public and private branches to this file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/71#issuecomment-76407683
https://github.com/psi4/psi4/issues/74#issuecomment-76630641:36,Availability,error,error,36,"Yes, that’s exactly how to fix that error. The API changed in Nov. (couple weeks ago for the public mirror), but stray cases like you found are still popping up. Thanks for the catch. Lori. > On Mar 1, 2015, at 3:53 PM, wpoely86 notifications@github.com wrote:; > ; > I was trying the sointegrals plugin with 14c78ea https://github.com/psi4/psi4public/commit/14c78eabdca86f8e094576890518d93d300d2500 but I got a exception:; > ; > RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; > GDB show this as the traceback:; > ; > #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; > #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; > #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; > #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; > Has something in the API changed that needs changing in the plugin?; > Replacing the line; > ; > shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; > with; > ; > shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; > seems to help. Is this the correct way of handling this?; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/74.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76630641
https://github.com/psi4/psi4/issues/74#issuecomment-76630641:297,Modifiability,plugin,plugin,297,"Yes, that’s exactly how to fix that error. The API changed in Nov. (couple weeks ago for the public mirror), but stray cases like you found are still popping up. Thanks for the catch. Lori. > On Mar 1, 2015, at 3:53 PM, wpoely86 notifications@github.com wrote:; > ; > I was trying the sointegrals plugin with 14c78ea https://github.com/psi4/psi4public/commit/14c78eabdca86f8e094576890518d93d300d2500 but I got a exception:; > ; > RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; > GDB show this as the traceback:; > ; > #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; > #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; > #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; > #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; > Has something in the API changed that needs changing in the plugin?; > Replacing the line; > ; > shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; > with; > ; > shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; > seems to help. Is this the correct way of handling this?; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/74.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76630641
https://github.com/psi4/psi4/issues/74#issuecomment-76630641:988,Modifiability,plugin,plugin,988,"Yes, that’s exactly how to fix that error. The API changed in Nov. (couple weeks ago for the public mirror), but stray cases like you found are still popping up. Thanks for the catch. Lori. > On Mar 1, 2015, at 3:53 PM, wpoely86 notifications@github.com wrote:; > ; > I was trying the sointegrals plugin with 14c78ea https://github.com/psi4/psi4public/commit/14c78eabdca86f8e094576890518d93d300d2500 but I got a exception:; > ; > RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; > GDB show this as the traceback:; > ; > #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; > #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; > #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; > #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; > Has something in the API changed that needs changing in the plugin?; > Replacing the line; > ; > shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; > with; > ; > shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; > seems to help. Is this the correct way of handling this?; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/74.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76630641
https://github.com/psi4/psi4/issues/74#issuecomment-76747218:225,Modifiability,plugin,plugin,225,"I've hit another issue. [sointegral.cc](https://github.com/psi4/psi4public/blob/master/src/lib/libmints/sointegral.cc#L409-L410) seems to assume that their are as many `TwoBodyAOInt` as threads. At least in the `sointegrals` plugin, this is not the case and you get a segfault. The easy fix is to limit to one thread but there should be a better solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76747218
https://github.com/psi4/psi4/issues/76#issuecomment-78986839:258,Deployability,release,release,258,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839
https://github.com/psi4/psi4/issues/76#issuecomment-78986839:484,Energy Efficiency,energy,energy,484,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839
https://github.com/psi4/psi4/issues/76#issuecomment-78986839:467,Performance,perform,performing,467,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:630,Energy Efficiency,adapt,adapt,630,"Sebastian, my apologies for the forthcoming long response, which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3152,Energy Efficiency,allocate,allocates,3152,"reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1880,Integrability,Message,Message,1880,"ng, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1939,Integrability,Message,Message,1939,"n before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solut",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2670,Integrability,wrap,wrapper,2670,"c.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. Th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2963,Integrability,wrap,wrapper,2963," The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated wit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3204,Integrability,interface,interface,3204,"reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3333,Integrability,interface,interface,3333," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3419,Integrability,Message,Message,3419," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3447,Integrability,Message,Message,3447," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3802,Integrability,message,message,3802," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:4072,Integrability,wrap,wrapper,4072," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:630,Modifiability,adapt,adapt,630,"Sebastian, my apologies for the forthcoming long response, which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1106,Testability,log,logged,1106," which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:1118,Testability,log,logical,1118," which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2577,Testability,log,logic,2577,"ance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867
https://github.com/psi4/psi4/issues/77#issuecomment-83085867:626,Deployability,continuous,continuous,626,"Hi Ryan,. Capturing cout in a string or stringstream and feeding it to psi::PsiOutStream is OK if the message to be printed is limited in time and volume. If by calling a single function of a library, it executes for a long time and prints a lot of lines over its execution time, it might be good to have a way to intermediary feed them to the psi::PsiOutStream. Else you have to wait till the end of execution to get any information at all. If something goes wrong, you then also don't get an indication where things might have gone wrong. So is there a possibility to redirect cout's stream directly to psi::outfile, with a continuous output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83085867
https://github.com/psi4/psi4/issues/77#issuecomment-83085867:102,Integrability,message,message,102,"Hi Ryan,. Capturing cout in a string or stringstream and feeding it to psi::PsiOutStream is OK if the message to be printed is limited in time and volume. If by calling a single function of a library, it executes for a long time and prints a lot of lines over its execution time, it might be good to have a way to intermediary feed them to the psi::PsiOutStream. Else you have to wait till the end of execution to get any information at all. If something goes wrong, you then also don't get an indication where things might have gone wrong. So is there a possibility to redirect cout's stream directly to psi::outfile, with a continuous output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83085867
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:510,Deployability,continuous,continuously,510,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:569,Integrability,wrap,wrapper,569,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:476,Safety,detect,detect,476,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:303,Security,access,access,303,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:50,Testability,log,logic,50,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:269,Usability,simpl,simply,269,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/77#issuecomment-83124188:580,Usability,simpl,simply,580,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:140,Deployability,integrat,integrate,140,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:140,Integrability,integrat,integrate,140,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:154,Modifiability,plugin,plugins,154,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:424,Modifiability,plugin,plugins,424,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:556,Modifiability,plugin,plugins,556,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:669,Modifiability,plugin,plugins,669,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-83015983:194,Testability,test,test,194,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983
https://github.com/psi4/psi4/issues/78#issuecomment-86676981:16,Modifiability,plugin,plugins,16,"Ok, the example plugins build automatically again and are incorporated into the testing system. The `-DENABLE_PLUGINS` option, btw, only controls whether these example plugins are built automatically, as opposed to in earlier build schemes where it actually controlled whether `-fpic` was used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-86676981
https://github.com/psi4/psi4/issues/78#issuecomment-86676981:168,Modifiability,plugin,plugins,168,"Ok, the example plugins build automatically again and are incorporated into the testing system. The `-DENABLE_PLUGINS` option, btw, only controls whether these example plugins are built automatically, as opposed to in earlier build schemes where it actually controlled whether `-fpic` was used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-86676981
https://github.com/psi4/psi4/issues/78#issuecomment-86676981:80,Testability,test,testing,80,"Ok, the example plugins build automatically again and are incorporated into the testing system. The `-DENABLE_PLUGINS` option, btw, only controls whether these example plugins are built automatically, as opposed to in earlier build schemes where it actually controlled whether `-fpic` was used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-86676981
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:113,Availability,error,error,113,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:247,Availability,error,error,247,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:380,Availability,error,error,380,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:663,Deployability,install,installed,663,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:36,Energy Efficiency,energy,energy,36,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:58,Energy Efficiency,energy,energy,58,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:1210,Energy Efficiency,charge,charge,1210," related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > scf('energy'); > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/79.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:2006,Energy Efficiency,energy,energy,2006," related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > scf('energy'); > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/79.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:253,Integrability,message,message,253,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:386,Integrability,message,messages,386,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:704,Integrability,message,message,704,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/79#issuecomment-94352477:1183,Testability,test,test,1183," related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > scf('energy'); > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/79.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477
https://github.com/psi4/psi4/issues/81#issuecomment-104680424:208,Availability,toler,tolerates,208,"Rethinking this, I think the MPI process ID would be a better labeling system than process ID. On a Linux box, the max process ID is 32,768 by default (although it can be made higher if you know your machine tolerates integers larger than 16-bit). Anyways, assuming each MPI process spawns on a separate node, and that the node determines the process ID independently of the other nodes, it's straightforward to show that given n nodes, the probability, p, of two MPI processes having the same process ID is given by: p=1-exp(-(n)(n-1)/65,536). Of note, 213 nodes lead to a 50% probability and 550 nodes lead to a 99% probability. Hence, if we are going to be massively parallel I think we have to be careful about our usage of process IDs, as they will not be as unique as we are used to thinking they are.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-104680424
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:782,Availability,checkpoint,checkpointing,782,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1500,Availability,error,error,1500,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1392,Deployability,update,update,1392,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1506,Integrability,message,messages,1506,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1515,Safety,detect,detection,1515,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:451,Security,access,access,451,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/81#issuecomment-119230390:817,Usability,simpl,simply,817,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390
https://github.com/psi4/psi4/issues/82#issuecomment-95674415:6,Availability,error,error,6,"If an error occurs, it occurs again when you call ""make"". So if you now call ""make VERBOSE=1"" instead, you should get the specific info you're looking for.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/82#issuecomment-95674415
https://github.com/psi4/psi4/issues/83#issuecomment-96099675:262,Deployability,toggle,toggle,262,"@CDSherrill Here's a numpy-free input, should you want to test. Problem is NUM_ROOTS, not loop or zmat. ```; memory 20 Gb. molecule H2 {; 0 1; He; He 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; ## NUM_ROOTS 5; basis cc-pvdz; num_roots 2 # toggle this on/off for badness; }. rlist = [1.00, 10.1, 0.5]. for r in rlist:; H2.R = r; energy('fci') # or cisd; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96099675
https://github.com/psi4/psi4/issues/83#issuecomment-96099675:351,Energy Efficiency,energy,energy,351,"@CDSherrill Here's a numpy-free input, should you want to test. Problem is NUM_ROOTS, not loop or zmat. ```; memory 20 Gb. molecule H2 {; 0 1; He; He 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; ## NUM_ROOTS 5; basis cc-pvdz; num_roots 2 # toggle this on/off for badness; }. rlist = [1.00, 10.1, 0.5]. for r in rlist:; H2.R = r; energy('fci') # or cisd; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96099675
https://github.com/psi4/psi4/issues/83#issuecomment-96099675:58,Testability,test,test,58,"@CDSherrill Here's a numpy-free input, should you want to test. Problem is NUM_ROOTS, not loop or zmat. ```; memory 20 Gb. molecule H2 {; 0 1; He; He 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; ## NUM_ROOTS 5; basis cc-pvdz; num_roots 2 # toggle this on/off for badness; }. rlist = [1.00, 10.1, 0.5]. for r in rlist:; H2.R = r; energy('fci') # or cisd; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96099675
https://github.com/psi4/psi4/issues/83#issuecomment-96190725:136,Availability,error,error,136,"@loriab You can also drop the loop and just put `H2.R=1`. Futhermore, add `OPDM yes` and even with `num_roots 1`, it will give the same error. So there's probably an error in saving the eigenvectors. I don't need the 0.1 point, the np.arange command will give a list starting at 1.0 and increasing with 0.1 until 10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96190725
https://github.com/psi4/psi4/issues/83#issuecomment-96190725:166,Availability,error,error,166,"@loriab You can also drop the loop and just put `H2.R=1`. Futhermore, add `OPDM yes` and even with `num_roots 1`, it will give the same error. So there's probably an error in saving the eigenvectors. I don't need the 0.1 point, the np.arange command will give a list starting at 1.0 and increasing with 0.1 until 10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96190725
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:39,Availability,error,error,39,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:517,Availability,Error,Error,517,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:529,Availability,Error,Error,529,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:536,Availability,Error,Error,536,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:617,Availability,error,error,617,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:326,Energy Efficiency,energy,energy,326,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-170686261:346,Energy Efficiency,energy,energy,346,"Still a problem with new CI code. Full error:. ```; PSIO_ERROR: Can't find TOC Entry buffer_ 0; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 41, in <module>; File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/theoryfs2/ds/richard/SrcFiles/psi4clean/lib/python/proc.py"", line 2797, in run_detci; psi4.detci(); RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /theoryfs2/ds/richard/SrcFiles/psi4clean/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-170686261
https://github.com/psi4/psi4/issues/83#issuecomment-190697268:97,Availability,error,error,97,"Yes, the CIVector was never written so when the OPDM code wanted this from disk we saw the above error. @wpoely86 I have been making another pass at the CI code to clean up outstanding issues. Besides the issues already posted here to GitHub do you have any other requests/suggestions/problems?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-190697268
https://github.com/psi4/psi4/issues/84#issuecomment-97962390:259,Usability,feedback,feedback,259,"Hmmm. Looks like something I introduced with the changes to OEProp. It's almost certainly an issue related to combining AO and SO dimensions somewhere. I'll fish through the code, hopefully by the weekend, and try to find the culprit. Thanks for the detailed feedback,. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/84#issuecomment-97962390
https://github.com/psi4/psi4/issues/84#issuecomment-102086526:40,Availability,down,down,40,Thanks @andysim. Were you able to track down the fault?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/84#issuecomment-102086526
https://github.com/psi4/psi4/issues/84#issuecomment-102086526:49,Availability,fault,fault,49,Thanks @andysim. Were you able to track down the fault?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/84#issuecomment-102086526
https://github.com/psi4/psi4/issues/84#issuecomment-104781915:199,Testability,test,test,199,"Sorry it took me so long; I've been traveling quite a bit for work, and didn't get time to look into the problem. I believe I found the culprit, and just pushed a fix into the repo. Could you please test it with a basis that uses spherical harmonics (e.g. cc-pVDZ) and let me know if you get the expected results? Sorry again for my tardiness in fixing this problem. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/84#issuecomment-104781915
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2318,Availability,avail,available,2318,"itude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a share",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:3200,Availability,error,errors,3200,"perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; I think many of them are nice, and simplify code (except for auto, which I still facepalm on). I'm curious to hear other developers' thoughts on the matter. Edit: clean-up, clarification, and removal of repost of initial post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:3461,Availability,error,errors,3461,"perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; I think many of them are nice, and simplify code (except for auto, which I still facepalm on). I'm curious to hear other developers' thoughts on the matter. Edit: clean-up, clarification, and removal of repost of initial post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:44,Deployability,update,update,44,"@Harvey the immediate answer is you need to update your compiler; however; the repeated occurrence of this problem suggests it may be necessary to; revisit the decision to use C++11. @developers what versions of compilers are we willing to support? The; decision to start using C++11 limits us to Intel15 for full compliance (or; Intel13 for about 90% compliance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:832,Integrability,wrap,wrap,832,"@Harvey the immediate answer is you need to update your compiler; however; the repeated occurrence of this problem suggests it may be necessary to; revisit the decision to use C++11. @developers what versions of compilers are we willing to support? The; decision to start using C++11 limits us to Intel15 for full compliance (or; Intel13 for about 90% compliance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:1416,Integrability,depend,depending,1416,"liance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2570,Integrability,depend,dependency,2570,"le is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2688,Integrability,wrap,wrapper,2688,"place 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:2207,Performance,perform,performance,2207,"normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:1652,Testability,log,logic,1652,"me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us havin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:1712,Testability,log,logic,1712,"ows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes aroun",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/issues/85#issuecomment-97772824:3729,Usability,simpl,simplify,3729,"perhaps this analogy will help: anytime you have used a Python tuple, the only true equivalent is a variadic template. Rvalue references are probably the only other feature I'd label as an essential C++11 feature. Not supporting them can lead to needing extensive code redesign or major performance hits when objects interact. With foresight, rvalue references can be simulated by unique pointers (available in Boost), but the reality is it is often hard to have such foresight. As for the other main C++11 features, standard library implementations of shared/unique pointers, the new chrono and random number generator libraries are all in Boost, a dependency I foresee us having forever. Lamdas are syntactic sugar for static functions. Strong enums are just little wrapper classes around a primitive type . Initializer lists are perhaps borderline essential, but ultimately I think are not needed when you realize that they have always existed for primitive data types, and a constructor is meant to provide essentially the same support for user created objects. The auto keyword is an abomination and should never be used [there is a big difference between you knowing what type something is and the compiler knowing what type something is; the compiler has caught many of my errors where I thought I was getting an object of type T, but really it was type M (usually failing to dereference a shared pointer). If M has the same members as T, auto will allow this behavior to work, undermining the type system and leading to hard to find errors, in my opinion]. The nullptr type is nice, but the fringe cases I've seen where standard NULL fails to accomplish the same behavior are bit contrived. . I think those are the main features of C++11 that people would be using; I think many of them are nice, and simplify code (except for auto, which I still facepalm on). I'm curious to hear other developers' thoughts on the matter. Edit: clean-up, clarification, and removal of repost of initial post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824
https://github.com/psi4/psi4/pull/87#issuecomment-98021606:24,Availability,error,error,24,There's also an obvious error if `#` appears within a string literal. But that's for another day.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/87#issuecomment-98021606
https://github.com/psi4/psi4/issues/88#issuecomment-98488186:474,Availability,fault,fault,474,"I've fixed this, but the changes haven't been synched to psi4public yet. Will do that this week. . Sent from my iPhone. > On May 3, 2015, at 8:00 AM, wpoely86 notifications@github.com wrote:; > ; > psi4 --version gives:; > ; > (gdb) r; > Starting program: /home/ward/tmp/psi4release/build2/bin/psi4 --version; > [Thread debugging using libthread_db enabled]; > Using host libthread_db library ""/lib64/libthread_db.so.1"".; > ; > Program received signal SIGSEGV, Segmentation fault.; > std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > 51 if (__os.tie() && __os.good()); > Missing separate debuginfos, use: debuginfo-install python-libs-2.7.8-9.fc21.x86_64; > (gdb) bt; > #0 std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > #1 0x000000390e699869 in std::__ostream_insert<char, std::char_traits<char> > (__out=..., __s=__s@entry=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __n=76); > at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream_insert.h:82; > #2 0x0000000001e6bd18 in operator<< std::char_traits<char > (__s=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __out=...) at /usr/include/c++/4.9.2/ostream:535; > #3 Write2Buffer<char*> (Input=<synthetic pointer>, this=0x0) at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.h:157; > #4 psi::PsiOutStream::Printf (this=0x0, format=format@entry=0x204e9c0 "" "", '-' <repeats 71 times>, ""\n"") at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.cc:82; > #5 0x00000000008a79bf in psi::print_version () at /home/ward/tmp/psi4release/build2/src/bin/psi4/version.cc:38; > #6 0x00000000008e2d57 in psi::psi_start (argc=argc@entry=2, argv=argv@entry=0x7fffffffd798) at /home/ward/tmp/psi4release/src/bin/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98488186
https://github.com/psi4/psi4/issues/88#issuecomment-98488186:751,Deployability,install,install,751,"I've fixed this, but the changes haven't been synched to psi4public yet. Will do that this week. . Sent from my iPhone. > On May 3, 2015, at 8:00 AM, wpoely86 notifications@github.com wrote:; > ; > psi4 --version gives:; > ; > (gdb) r; > Starting program: /home/ward/tmp/psi4release/build2/bin/psi4 --version; > [Thread debugging using libthread_db enabled]; > Using host libthread_db library ""/lib64/libthread_db.so.1"".; > ; > Program received signal SIGSEGV, Segmentation fault.; > std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > 51 if (__os.tie() && __os.good()); > Missing separate debuginfos, use: debuginfo-install python-libs-2.7.8-9.fc21.x86_64; > (gdb) bt; > #0 std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > #1 0x000000390e699869 in std::__ostream_insert<char, std::char_traits<char> > (__out=..., __s=__s@entry=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __n=76); > at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream_insert.h:82; > #2 0x0000000001e6bd18 in operator<< std::char_traits<char > (__s=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __out=...) at /usr/include/c++/4.9.2/ostream:535; > #3 Write2Buffer<char*> (Input=<synthetic pointer>, this=0x0) at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.h:157; > #4 psi::PsiOutStream::Printf (this=0x0, format=format@entry=0x204e9c0 "" "", '-' <repeats 71 times>, ""\n"") at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.cc:82; > #5 0x00000000008a79bf in psi::print_version () at /home/ward/tmp/psi4release/build2/src/bin/psi4/version.cc:38; > #6 0x00000000008e2d57 in psi::psi_start (argc=argc@entry=2, argv=argv@entry=0x7fffffffd798) at /home/ward/tmp/psi4release/src/bin/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98488186
https://github.com/psi4/psi4/issues/88#issuecomment-98490617:160,Deployability,integrat,integrate,160,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617
https://github.com/psi4/psi4/issues/88#issuecomment-98490617:442,Deployability,continuous,continuous,442,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617
https://github.com/psi4/psi4/issues/88#issuecomment-98490617:453,Deployability,integrat,integration,453,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617
https://github.com/psi4/psi4/issues/88#issuecomment-98490617:160,Integrability,integrat,integrate,160,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617
https://github.com/psi4/psi4/issues/88#issuecomment-98490617:453,Integrability,integrat,integration,453,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617
https://github.com/psi4/psi4/issues/88#issuecomment-98490617:525,Safety,safe,safe,525,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:480,Deployability,integrat,integrate,480,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:776,Deployability,continuous,continuous,776,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:787,Deployability,integrat,integration,787,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:480,Integrability,integrat,integrate,480,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:787,Integrability,integrat,integration,787,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:27,Safety,avoid,avoid,27,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98491250:862,Safety,safe,safe,862,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1061,Availability,down,down,1061,"/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Plea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:348,Deployability,release,release,348,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:510,Deployability,release,release,510,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:873,Deployability,update,updates,873,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:893,Deployability,release,releases,893,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1209,Deployability,release,released,1209,"familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > Why don't you keep the sensiti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1338,Deployability,update,update,1338,"eason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > Why don't you keep the sensitive new code in separate branches of your; > > (private) fork of the psi4public repo and only merge when the paper is; > > ready? Or only use the private repo for that kind of stuff and push; > > everything still straight to the public repo?; > > I think you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1027,Security,access,access,1027,"/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Plea",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1399,Security,access,access,1399,"eason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > Why don't you keep the sensitive new code in separate branches of your; > > (private) fork of the psi4public repo and only merge when the paper is; > > ready? Or only use the private repo for that kind of stuff and push; > > everything still straight to the public repo?; > > I think you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98498738:578,Testability,test,test,578,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1888,Availability,down,down,1888,"ing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1168,Deployability,release,release,1168," repository. And it doesn’t allow you to make private a fork of a public repo, though there does seem to be an alternative: https://help.github.com/articles/duplicating-a-repository/ https://help.github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago whe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1330,Deployability,release,release,1330,"github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1700,Deployability,update,updates,1700,"te master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1720,Deployability,release,releases,1720,"te master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:2036,Deployability,release,released,2036,"r with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:2172,Deployability,update,update,2172,"private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > > ; > > > Why don't you keep the sensitive new code in separate branches of your; > > > (private) fork of the psi4public repo and only merge when the paper is; > > > ready? Or only use the private repo for that kind of stuff and push; > > > everything still",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:730,Safety,safe,safe,730,"Github also complicates things regarding private/public. It doesn’t allow mixing public and private branches in a repository. And it doesn’t allow you to make private a fork of a public repo, though there does seem to be an alternative: https://help.github.com/articles/duplicating-a-repository/ https://help.github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working toget",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1854,Security,access,access,1854,"ing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:2233,Security,access,access,2233,"private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions.; > ; > Andy.; > ; > > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > > ; > > I think the short answer may be that a lot of the developers are still used; > > to version control models like SVN or CVS.; > > ; > > Honestly I think you have the right idea though, with git there really; > > isn't a need for two repositories for an open source code so long as we; > > adopt the accompanying philosophy. It's now a matter of getting everyone; > > on board.; > > ; > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > > ; > > > Why don't you keep the sensitive new code in separate branches of your; > > > (private) fork of the psi4public repo and only merge when the paper is; > > > ready? Or only use the private repo for that kind of stuff and push; > > > everything still",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1398,Testability,test,test,1398,"github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924
https://github.com/psi4/psi4/issues/89#issuecomment-98491129:4,Usability,learn,learnimg,4,"I'm learnimg the world isn't ready for C++11 yet, and I'm in the process of; phasing it out of my codes. Anyways, my timer relies on Boost. What I do; is ripped right out of the Boost example for how to determine the; uncertainty in their timers, the sampling rate may be a bit high if there; ends up being 5000000 calls though. I'm not sure what you mean exactly by; separate thread. The uncertainty in each timer is a hardware feature so on; a heterogeneous cluster each mpi process needs to sample. This is only; done once at startup. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:. > @ryanmrichard https://github.com/ryanmrichard any reason the; > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > just do it a in a different thread?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/89#issuecomment-98490177.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98491129
https://github.com/psi4/psi4/issues/89#issuecomment-98491231:161,Usability,learn,learnimg,161,"Yeah, it just needs to be turned into a user-option (defaulted off). -Rob. On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; wrote:. > I'm learnimg the world isn't ready for C++11 yet, and I'm in the process of; > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > is ripped right out of the Boost example for how to determine the; > uncertainty in their timers, the sampling rate may be a bit high if there; > ends up being 5000000 calls though. I'm not sure what you mean exactly by; > separate thread. The uncertainty in each timer is a hardware feature so on; > a heterogeneous cluster each mpi process needs to sample. This is only; > done once at startup.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > just do it a in a different thread?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/89#issuecomment-98490177.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/89#issuecomment-98491129.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98491231
https://github.com/psi4/psi4/issues/89#issuecomment-98492851:646,Usability,learn,learnimg,646,"Default off seems silly if we report times. The user has a right to know; how accurate those times are. If 5 seconds really bothers everyone I vote; for a timing flag that enables/disables all timings. I think that's the; wrong approach though and it makes more sense to examine the sampling; parameters of the timer. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:. > Yeah, it just needs to be turned into a user-option (defaulted off).; > ; > -Rob; > ; > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > wrote:; > ; > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the process; > > of; > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > is ripped right out of the Boost example for how to determine the; > > uncertainty in their timers, the sampling rate may be a bit high if there; > > ends up being 5000000 calls though. I'm not sure what you mean exactly by; > > separate thread. The uncertainty in each timer is a hardware feature so; > > on; > > a heterogeneous cluster each mpi process needs to sample. This is only; > > done once at startup.; > > ; > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > > ; > > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > > just do it a in a different thread?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/89#issuecomment-98490177.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/89#issuecomment-98491129.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/89#issuecomment-98491231.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98492851
https://github.com/psi4/psi4/issues/89#issuecomment-98494117:947,Usability,learn,learnimg,947,"Many users start Psi hundreds to thousands of times for certain types of; applications studies, with each job taking a few seconds. Now we are; potentially doubling that time. -Rob. On Sun, May 3, 2015 at 11:19 AM, Ryan Richard notifications@github.com; wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process; > > > of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I; > > > do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > > > ; > > > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > > > just do it a in a different thread?; > > > > ; > > > > —; > > > > Reply to this email directly or view it on ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98494117
https://github.com/psi4/psi4/issues/89#issuecomment-98495103:409,Deployability,release,releases,409,"Look at some of the other issues on this wiki. Numerous people are; compiling Psi4 with almost 10 year old compilers. I get it though, once you; have a cluster running you don't want to touch anything in case you break; it. In my experience your average super computer on the otherhand is a year; or two out of date. Compilers like Intel, that I swear by, only are fully; C++11 compliant with the most recent releases. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:19 AM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495103
https://github.com/psi4/psi4/issues/89#issuecomment-98495103:1248,Usability,learn,learnimg,1248," a year; or two out of date. Compilers like Intel, that I swear by, only are fully; C++11 compliant with the most recent releases. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:19 AM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github.com wrote:; > > > ; > > > > @ryanmrichard https://github.com/ryanmrichard any reason the; > > > > high_resolution_clock of C++11 isn't good enough? Or maybe you should; > > > > just do it a in a different thread?; > > > > ; > > > > —; > > > > Reply to this email directly or view it on ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495103
https://github.com/psi4/psi4/issues/89#issuecomment-98495163:14,Testability,test,testing,14,"And if you're testing stuff and playing around, that 5 seconds is also very very annoying. . But again, any reason why simply using `high_resolution_clock` from Boost/C++11 isn't good enough? On most systems, the accuracy will be more then enough for practical purposes. The actual sampling to determine the accuracy can be activated by a user-option?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495163
https://github.com/psi4/psi4/issues/89#issuecomment-98495163:119,Usability,simpl,simply,119,"And if you're testing stuff and playing around, that 5 seconds is also very very annoying. . But again, any reason why simply using `high_resolution_clock` from Boost/C++11 isn't good enough? On most systems, the accuracy will be more then enough for practical purposes. The actual sampling to determine the accuracy can be activated by a user-option?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495163
https://github.com/psi4/psi4/issues/89#issuecomment-98496155:82,Usability,simpl,simply,82,"It's been awhile since I made that class but I seem to recall the high res timers simply report time in nanoseconds, they aren't necessarily that accurate. I'll look into this more tomorrow. Also I didn't realize so many users are running such short jobs. It would be interesting to make a wiki page where groups posted what features of Psi4 they use along with typical applications. This data would be very interesting in terms of code design and would allow better tailoring to their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98496155
https://github.com/psi4/psi4/issues/89#issuecomment-98518253:149,Availability,down,down,149,"My sincerest apologies to the Psi4 community, I didn't even begin to fathom that these timers were going to be such a fiasco. I dropped the sampling down to 1 point per timer so I expect they should be invisible now, but I can't confirm this at the moment. If someone wants to check this and close the issue if it's been resolved I would appreciate it. In the meantime I'll have to look into VTune as it appears to do everything I was making these timers do, but with a pretty GUI interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98518253
https://github.com/psi4/psi4/issues/89#issuecomment-98518253:481,Integrability,interface,interface,481,"My sincerest apologies to the Psi4 community, I didn't even begin to fathom that these timers were going to be such a fiasco. I dropped the sampling down to 1 point per timer so I expect they should be invisible now, but I can't confirm this at the moment. If someone wants to check this and close the issue if it's been resolved I would appreciate it. In the meantime I'll have to look into VTune as it appears to do everything I was making these timers do, but with a pretty GUI interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98518253
https://github.com/psi4/psi4/pull/91#issuecomment-105535771:69,Modifiability,plugin,plugin,69,@loriab Is this still an issue? I know you had done some work on the plugin build semantics recently,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/91#issuecomment-105535771
https://github.com/psi4/psi4/issues/92#issuecomment-99127921:528,Energy Efficiency,energy,energy,528,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921
https://github.com/psi4/psi4/issues/92#issuecomment-99127921:585,Energy Efficiency,energy,energy,585,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921
https://github.com/psi4/psi4/issues/92#issuecomment-99127921:625,Energy Efficiency,energy,energy,625,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921
https://github.com/psi4/psi4/issues/92#issuecomment-99127921:873,Energy Efficiency,energy,energy,873,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921
https://github.com/psi4/psi4/issues/92#issuecomment-99127921:895,Energy Efficiency,energy,energy,895,"Try sticking a clean() between the two calcs. There were some reasons we didn’t want to force this but instead leave it to the user/programmer. See if that helps. Lori. > On May 5, 2015, at 11:58 AM, wpoely86 notifications@github.com wrote:; > ; > Input file:; > ; > import molutil; > ; > molecule h2o {; > 0 1; > O; > H 1 r; > H 1 r 2 104.479848; > units angstrom; > }; > ; > molecule beh2 {; > 0 1; > Be 0 0 0 ; > H 0 0 r; > H 0 0 -r; > units angstrom; > }; > ; > set basis sto-3g; > ; > beh2.r=1; > molutil.activate(beh2); > energy('fci'); > ; > h2o.r=1; > molutil.activate(h2o); > energy('fci'); > will calculate the FCI energy of the BeH2 molecule, then do the RHF of H2O but at start of the detci module it will give:; > ; > Traceback (most recent call last):; > File ""<string>"", line 40, in <module>; > File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; > procedures['energy'][lowername](lowername, **kwargs); > File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; > psi4.detci(); > RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; > Seems like something should be reinitialized after activating a new molecule. Done with 521f06a https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/92.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/92#issuecomment-99127921
https://github.com/psi4/psi4/issues/94#issuecomment-100760375:18,Availability,error,errors,18,"I've seen similar errors when Python versions are mixed. Use which python and which python-config to check your shell versions. Use ldd bin/psi4 to check the linked version. Boost also could have been built against a diff Python. If there's any mismatch identified or possible, try passing --python to setup (setup --help for details) and letting psi4 build the packaged boost. No turning off Python for psi4, I'm afraid. It's integral to the executable. . Sent from my iPhone. > On May 11, 2015, at 12:11 AM, Vladimir notifications@github.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375
https://github.com/psi4/psi4/issues/94#issuecomment-100760375:1644,Availability,error,error,1644,"ub.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; > http://packages.ubuntu.com/trusty/libboost-all-dev; > ; > My python interpreter support UCS-4.; > ; > python -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > python3 -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; > in particular, I only need to generate MOLDEN file from SCF calculations.; > ; > With respect, Vladimir.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375
https://github.com/psi4/psi4/issues/94#issuecomment-100760375:1928,Availability,avail,available,1928,"ub.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; > http://packages.ubuntu.com/trusty/libboost-all-dev; > ; > My python interpreter support UCS-4.; > ; > python -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > python3 -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; > in particular, I only need to generate MOLDEN file from SCF calculations.; > ; > With respect, Vladimir.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375
https://github.com/psi4/psi4/issues/94#issuecomment-100760375:1850,Deployability,install,installed,1850,"ub.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; > http://packages.ubuntu.com/trusty/libboost-all-dev; > ; > My python interpreter support UCS-4.; > ; > python -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > python3 -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; > in particular, I only need to generate MOLDEN file from SCF calculations.; > ; > With respect, Vladimir.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375
https://github.com/psi4/psi4/issues/94#issuecomment-100760375:91,Modifiability,config,config,91,"I've seen similar errors when Python versions are mixed. Use which python and which python-config to check your shell versions. Use ldd bin/psi4 to check the linked version. Boost also could have been built against a diff Python. If there's any mismatch identified or possible, try passing --python to setup (setup --help for details) and letting psi4 build the packaged boost. No turning off Python for psi4, I'm afraid. It's integral to the executable. . Sent from my iPhone. > On May 11, 2015, at 12:11 AM, Vladimir notifications@github.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375
https://github.com/psi4/psi4/issues/94#issuecomment-100760375:2349,Safety,avoid,avoid,2349,"ub.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 that included in distro.; > http://packages.ubuntu.com/trusty/libboost-all-dev; > ; > My python interpreter support UCS-4.; > ; > python -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > python3 -c ""import sys; print(sys.maxunicode)""; > returns 1114111; > ; > Could you clarify my issue or can I compile Psi4 without puthon support to avoid this issue?; > in particular, I only need to generate MOLDEN file from SCF calculations.; > ; > With respect, Vladimir.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1750,Deployability,patch,patch,1750,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:2448,Deployability,Patch,Patch,2448,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:2509,Deployability,patch,patch,2509,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:273,Modifiability,variab,variables,273,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:328,Modifiability,variab,variable,328,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:800,Modifiability,variab,variables,800,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1789,Modifiability,variab,variables,1789,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:513,Safety,avoid,avoid,513,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1924,Safety,safe,safe,1924,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059
https://github.com/psi4/psi4/pull/97#issuecomment-105040869:128,Modifiability,variab,variable,128,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869
https://github.com/psi4/psi4/pull/97#issuecomment-105040869:691,Modifiability,variab,variable,691,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869
https://github.com/psi4/psi4/pull/97#issuecomment-105040869:725,Safety,safe,safe,725,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869
https://github.com/psi4/psi4/pull/97#issuecomment-105055171:568,Deployability,upgrade,upgrade,568,"Looking into your first point more it appears you are correct and TMPDIR is; a Linux standard so I agree we should honor that within Psi4. You don't have to convince me of the merits of C++11 I'm fully on board; with it; however its use needs to be weighed against what our users are; willing to do because we dont want to alienate them nor do we want to have; to write each code twice, once for C98 and once for C++11. In particular,; those compilers you listed are all fairly new, less than 1 year old to a; couple years. I don't think we can force all our users to upgrade to stuff; that new. If you are not a Linux sys admin type, upgrading can be quite; the feat. Furthermore, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171
https://github.com/psi4/psi4/pull/97#issuecomment-105055171:1669,Modifiability,variab,variable,1669,"re, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171
https://github.com/psi4/psi4/pull/97#issuecomment-105055171:2261,Modifiability,variab,variable,2261,"s that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105040869.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171
https://github.com/psi4/psi4/pull/97#issuecomment-105055171:2295,Safety,safe,safe,2295,"s that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really see no reason why there should be hardcoded default for this.; > ; > I also disagree with your C++11 sentiment. I think this is an excellent; > example why C++11 is long overdue. If something as trivial as fetching a; > environment variable is not guaranteed thread safe...; > There are now more than enough compilers that support it: Clang since 3.4,; > GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the; > largest part of C++14. If you are using old compilers for calculations,; > you're wasting computational time and money IMHO.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105040869.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171
https://github.com/psi4/psi4/pull/97#issuecomment-105055171:1006,Usability,feedback,feedback,1006,"nt more it appears you are correct and TMPDIR is; a Linux standard so I agree we should honor that within Psi4. You don't have to convince me of the merits of C++11 I'm fully on board; with it; however its use needs to be weighed against what our users are; willing to do because we dont want to alienate them nor do we want to have; to write each code twice, once for C98 and once for C++11. In particular,; those compilers you listed are all fairly new, less than 1 year old to a; couple years. I don't think we can force all our users to upgrade to stuff; that new. If you are not a Linux sys admin type, upgrading can be quite; the feat. Furthermore, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171
https://github.com/psi4/psi4/pull/97#issuecomment-105055171:1073,Usability,feedback,feedback,1073,"nt more it appears you are correct and TMPDIR is; a Linux standard so I agree we should honor that within Psi4. You don't have to convince me of the merits of C++11 I'm fully on board; with it; however its use needs to be weighed against what our users are; willing to do because we dont want to alienate them nor do we want to have; to write each code twice, once for C98 and once for C++11. In particular,; those compilers you listed are all fairly new, less than 1 year old to a; couple years. I don't think we can force all our users to upgrade to stuff; that new. If you are not a Linux sys admin type, upgrading can be quite; the feat. Furthermore, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to the HPC; > world.; > I really",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171
https://github.com/psi4/psi4/pull/97#issuecomment-105170511:510,Availability,avail,available,510,"I can only strongly recommend to use a build system. I'm involved with [Easybuild](https://hpcugent.github.io/easybuild/) which has support for psi4. Building psi4 with the GCC 5 is reduced to a one line command: it will build everything, starting from binutils and gcc. It only requires a non-ancient version of gcc to be present (I think, no lower than 3.0 or so).; With the help of modules, you can easily support multiple versions of compilers (and software) Our HPC systems currently has 5 version of GCC available (4.6-5.1) and 11 versions of intel compiler (11-2015.1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105170511
https://github.com/psi4/psi4/pull/97#issuecomment-105170511:182,Energy Efficiency,reduce,reduced,182,"I can only strongly recommend to use a build system. I'm involved with [Easybuild](https://hpcugent.github.io/easybuild/) which has support for psi4. Building psi4 with the GCC 5 is reduced to a one line command: it will build everything, starting from binutils and gcc. It only requires a non-ancient version of gcc to be present (I think, no lower than 3.0 or so).; With the help of modules, you can easily support multiple versions of compilers (and software) Our HPC systems currently has 5 version of GCC available (4.6-5.1) and 11 versions of intel compiler (11-2015.1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105170511
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:313,Availability,avail,available,313,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:414,Deployability,install,installed,414,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:573,Deployability,patch,patch,573,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:373,Integrability,depend,dependencies,373,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:1238,Integrability,depend,dependencies,1238,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:267,Modifiability,extend,extend,267,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:666,Modifiability,plugin,plugins,666,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:1285,Performance,load,load,1285,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105224328:395,Safety,avoid,avoid,395,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:779,Availability,avail,available,779,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:883,Deployability,install,installed,883,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1048,Deployability,patch,patch,1048,"nd hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC sub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:842,Integrability,depend,dependencies,842,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1746,Integrability,depend,dependencies,1746,"d distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not; > a trivial task.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105224328.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:730,Modifiability,extend,extend,730,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1147,Modifiability,plugin,plugins,1147," this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1800,Performance,load,load,1800,"d distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not; > a trivial task.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105224328.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105251086:864,Safety,avoid,avoid,864,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086
https://github.com/psi4/psi4/pull/97#issuecomment-105252795:111,Deployability,install,install,111,"No, Easybuild has support for Psi4. Maybe mentioning it in the documentation would be nice? Next to the manual install?. The point I'm trying to make here is that users should use (or tell their sysadmins to) a module system. It's no problem than to use old and new compilers and to support C++11/14/17.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105252795
https://github.com/psi4/psi4/pull/97#issuecomment-105262783:492,Deployability,install,install,492,"There's currently a build documentation rewrite underway (to reflect the; cmake build system). I suspect that a section on using Psi4 with Easybuild; could be added as well, particularly since it sounds like no code work on; our end. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 11:34 AM, ""wpoely86"" notifications@github.com wrote:. > No, Easybuild has support for Psi4. Maybe mentioning it in the; > documentation would be nice? Next to the manual install?; > ; > The point I'm trying to make here is that users should use (or tell their; > sysadmins to) a module system. It's no problem than to use old and new; > compilers and to support C++11/14/17.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105252795.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105262783
https://github.com/psi4/psi4/pull/97#issuecomment-105262783:40,Modifiability,rewrite,rewrite,40,"There's currently a build documentation rewrite underway (to reflect the; cmake build system). I suspect that a section on using Psi4 with Easybuild; could be added as well, particularly since it sounds like no code work on; our end. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 11:34 AM, ""wpoely86"" notifications@github.com wrote:. > No, Easybuild has support for Psi4. Maybe mentioning it in the; > documentation would be nice? Next to the manual install?; > ; > The point I'm trying to make here is that users should use (or tell their; > sysadmins to) a module system. It's no problem than to use old and new; > compilers and to support C++11/14/17.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105252795.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105262783
https://github.com/psi4/psi4/pull/97#issuecomment-105554198:57,Modifiability,variab,variable,57,"Where was/is the check for the PSI_SCRATCH environmental variable? I'm okay with supporting the standard TMPDIR and family of variables, but I'd also like to see PSI_SCRATCH checked as not to break things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105554198
https://github.com/psi4/psi4/pull/97#issuecomment-105554198:126,Modifiability,variab,variables,126,"Where was/is the check for the PSI_SCRATCH environmental variable? I'm okay with supporting the standard TMPDIR and family of variables, but I'd also like to see PSI_SCRATCH checked as not to break things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105554198
https://github.com/psi4/psi4/issues/98#issuecomment-105167250:532,Integrability,Contract,Contract,532,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250
https://github.com/psi4/psi4/issues/98#issuecomment-105167250:895,Integrability,rout,routines,895,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250
https://github.com/psi4/psi4/issues/98#issuecomment-105167250:1245,Modifiability,plugin,plugin,1245,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250
https://github.com/psi4/psi4/issues/98#issuecomment-105167250:1317,Modifiability,plugin,plugin,1317,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250
https://github.com/psi4/psi4/issues/98#issuecomment-105167250:189,Performance,perform,perform,189,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250
https://github.com/psi4/psi4/issues/98#issuecomment-105167250:767,Safety,avoid,avoid,767,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250
https://github.com/psi4/psi4/issues/98#issuecomment-105182036:511,Modifiability,plugin,plugin,511,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036
https://github.com/psi4/psi4/issues/98#issuecomment-105182036:872,Performance,perform,performs,872,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036
https://github.com/psi4/psi4/issues/98#issuecomment-105182036:1004,Safety,avoid,avoid,1004,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036
https://github.com/psi4/psi4/issues/98#issuecomment-105182036:232,Testability,test,test,232,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036
https://github.com/psi4/psi4/issues/98#issuecomment-105227460:73,Modifiability,plugin,plugin,73,"Thank you for posting your very useful code snippets, Sebastian. Another plugin that may be useful is the MOIntegrals plugin that comes with Psi4. The command:. ```; ints.transform_tei(MOSpace::all, MOSpace::all, MOSpace::all, MOSpace::all);; ```. can be replaced with:. ```; ints.transform_tei(MOSpace::occ, MOSpace::occ, MOSpace::occ, MOSpace::occ);; ```. to generate only the occupied space integrals instead of the full set. By default the integral transformation object will neglect frozen orbitals. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105227460
https://github.com/psi4/psi4/issues/98#issuecomment-105227460:118,Modifiability,plugin,plugin,118,"Thank you for posting your very useful code snippets, Sebastian. Another plugin that may be useful is the MOIntegrals plugin that comes with Psi4. The command:. ```; ints.transform_tei(MOSpace::all, MOSpace::all, MOSpace::all, MOSpace::all);; ```. can be replaced with:. ```; ints.transform_tei(MOSpace::occ, MOSpace::occ, MOSpace::occ, MOSpace::occ);; ```. to generate only the occupied space integrals instead of the full set. By default the integral transformation object will neglect frozen orbitals. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105227460
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:86,Modifiability,plugin,plugin,86,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:223,Modifiability,plugin,plugin,223,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:291,Modifiability,plugin,plugin,291,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:429,Modifiability,plugin,plugin,429,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:467,Modifiability,plugin,plugin,467,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:623,Modifiability,plugin,plugin,623,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:679,Modifiability,plugin,plugin,679,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:1031,Modifiability,plugin,plugin,1031,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105276187:1117,Modifiability,variab,variable,1117,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187
https://github.com/psi4/psi4/issues/98#issuecomment-105341330:614,Modifiability,plugin,plugin,614,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330
https://github.com/psi4/psi4/issues/98#issuecomment-105341330:1512,Modifiability,variab,variables,1512,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330
https://github.com/psi4/psi4/issues/98#issuecomment-105341330:1092,Performance,perform,performed,1092,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:311,Modifiability,plugin,plugin,311,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:475,Modifiability,variab,variables,475,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:1549,Modifiability,plugin,plugin,1549,"characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"";",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:2450,Modifiability,variab,variables,2450,"ather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78""; > ; > ALL THE BEST; > LUCA; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/98#issuecomment-105341330. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:143,Performance,perform,performing,143,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:2049,Performance,perform,performed,2049,"ather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you see a full 2- electron integral calculation is performed for ALL; > basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; > I would like to circumvent this heavy calculation for the case of larger; > molecules.; > ; > Any way i try your advice but may i know at which line of fcidump.cc i; > have to copy and paste; > 781-811 and 814-858 lines of dmrgscf.cc ?; > ; > Furthermore may i know what is the x matrix : ""Number of variables in the; > x-matrix = 1032""; > and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78""; > ; > ALL THE BEST; > LUCA; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/98#issuecomment-105341330. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105429617:426,Usability,learn,learn,426,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617
https://github.com/psi4/psi4/issues/98#issuecomment-105440640:691,Modifiability,plugin,plugin,691,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640
https://github.com/psi4/psi4/issues/98#issuecomment-105440640:430,Performance,perform,performing,430,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640
https://github.com/psi4/psi4/issues/98#issuecomment-105440640:271,Safety,avoid,avoided,271,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640
https://github.com/psi4/psi4/issues/98#issuecomment-105440640:580,Safety,avoid,avoiding,580,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640
https://github.com/psi4/psi4/issues/98#issuecomment-105440640:110,Testability,test,testing,110,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640
https://github.com/psi4/psi4/issues/98#issuecomment-122110515:99,Energy Efficiency,reduce,reduce,99,"Hi Luca,. Yes, Sebastian is right, freezing molecular orbitals unfortunately does not allow you to reduce the number of atomic orbital integrals to compute. That's because every atomic orbital integral can contribute to a molecular orbital integral, unless special tricks are used. Such tricks are not really trivial and require some significant work to utilize. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-122110515
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:65,Availability,error,error,65,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:341,Availability,error,error,341,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:716,Availability,Error,Error,716,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:789,Availability,Error,Error,789,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:815,Availability,Error,Error,815,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:82,Integrability,depend,dependencies,82,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/100#issuecomment-105456704:577,Safety,abort,aborted,577,"I just tried to recompile from scratch as well, and got the same error:. Scanning dependencies of target versioned_code; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/version.cc.o; [ 98%] Building CXX object; src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o; /home/seba/psi4public/src/bin/psi4/python.cc(764): error: identifier; ""PSI_VERSION"" is undefined; return PSI_VERSION;; ^. /home/seba/psi4public/src/bin/psi4/python.cc(1217): warning #1011: missing; return statement at end of non-void function ""py_psi_get_normalmodes""; }; ^. compilation aborted for /home/seba/psi4public/src/bin/psi4/python.cc (code; 2); make[2]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/python.cc.o] Error; 2; make[1]: **\* [src/bin/psi4/CMakeFiles/versioned_code.dir/all] Error 2; make: **\* [all] Error 2. 2015-05-26 10:52 GMT+02:00 wpoely86 notifications@github.com:. > The gitversion.h does #undef PSI_VERSION which makes the file; > src/bin/psi4/python.cc fail to build as it needs a PSI_VERSION.; > ; > What is the idea here? Why no PSI_VERSION?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/100. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/100#issuecomment-105456704
https://github.com/psi4/psi4/issues/102#issuecomment-107072181:38,Energy Efficiency,energy,energy,38,"There's a bypass_scf=True argument to energy() that may help. Look in proc.py if I don't have the syntax quite right. . Sent from my iPhone. > On May 30, 2015, at 12:08 PM, wpoely86 notifications@github.com wrote:; > ; > It's not clear to me if it's possible to start from a previous calculated rhf result to do for example ccsd(t). Can this be done? If I keep the scratch dir, and use the -r parameters with guess read, it will start from the rhf solution of the previous run, but it will still do the rhf calculation and integral transformations. I would like it to directly start with the ccsd(t) calculation, and not redo the rhf calculation. Is this currently possible?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072181
https://github.com/psi4/psi4/issues/102#issuecomment-107072181:230,Usability,clear,clear,230,"There's a bypass_scf=True argument to energy() that may help. Look in proc.py if I don't have the syntax quite right. . Sent from my iPhone. > On May 30, 2015, at 12:08 PM, wpoely86 notifications@github.com wrote:; > ; > It's not clear to me if it's possible to start from a previous calculated rhf result to do for example ccsd(t). Can this be done? If I keep the scratch dir, and use the -r parameters with guess read, it will start from the rhf solution of the previous run, but it will still do the rhf calculation and integral transformations. I would like it to directly start with the ccsd(t) calculation, and not redo the rhf calculation. Is this currently possible?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072181
https://github.com/psi4/psi4/issues/102#issuecomment-107072636:121,Availability,fault,fault,121,"Unfortunately, that causes a crash. The `transqt2` starts but fails:. ```; Program received signal SIGSEGV, Segmentation fault.; 0x00000000012fd9df in psi::transqt2::get_moinfo (options=...) at /home/ward/tmp/psi4release/src/bin/transqt2/get_moinfo.cc:114; 114 moinfo.frdocc[h] = Process::environment.wavefunction()->frzcpi()[h];; ```. Seems like some things are not properly initialized when bypassing scf?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/102#issuecomment-107072636
https://github.com/psi4/psi4/issues/103#issuecomment-109846967:126,Energy Efficiency,energy,energy,126,"Fixed by 6f6d3aa1d039e4501bc5c5dc4190da1758e1c889 though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for energy() was a bad idea (by me) a few years ago (except for ""hf"" itself). Nevertheless, as this ticket points out, having defined these names only for energy() confounds the driver logic. These convenience names are now in place for gradient() and property(). I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(), prop() if others concur with my present assessment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-109846967
https://github.com/psi4/psi4/issues/103#issuecomment-109846967:277,Energy Efficiency,energy,energy,277,"Fixed by 6f6d3aa1d039e4501bc5c5dc4190da1758e1c889 though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for energy() was a bad idea (by me) a few years ago (except for ""hf"" itself). Nevertheless, as this ticket points out, having defined these names only for energy() confounds the driver logic. These convenience names are now in place for gradient() and property(). I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(), prop() if others concur with my present assessment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-109846967
https://github.com/psi4/psi4/issues/103#issuecomment-109846967:440,Energy Efficiency,energy,energy,440,"Fixed by 6f6d3aa1d039e4501bc5c5dc4190da1758e1c889 though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for energy() was a bad idea (by me) a few years ago (except for ""hf"" itself). Nevertheless, as this ticket points out, having defined these names only for energy() confounds the driver logic. These convenience names are now in place for gradient() and property(). I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(), prop() if others concur with my present assessment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-109846967
https://github.com/psi4/psi4/issues/103#issuecomment-109846967:307,Testability,log,logic,307,"Fixed by 6f6d3aa1d039e4501bc5c5dc4190da1758e1c889 though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for energy() was a bad idea (by me) a few years ago (except for ""hf"" itself). Nevertheless, as this ticket points out, having defined these names only for energy() confounds the driver logic. These convenience names are now in place for gradient() and property(). I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(), prop() if others concur with my present assessment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-109846967
https://github.com/psi4/psi4/issues/103#issuecomment-110021718:50,Energy Efficiency,energy,energy,50,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718
https://github.com/psi4/psi4/issues/103#issuecomment-110021718:201,Energy Efficiency,energy,energy,201,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718
https://github.com/psi4/psi4/issues/103#issuecomment-110021718:498,Energy Efficiency,energy,energy,498,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718
https://github.com/psi4/psi4/issues/103#issuecomment-110021718:655,Energy Efficiency,energy,energy,655,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718
https://github.com/psi4/psi4/issues/103#issuecomment-110021718:828,Energy Efficiency,energy,energy,828,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718
https://github.com/psi4/psi4/issues/103#issuecomment-110021718:685,Testability,log,logic,685,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718
https://github.com/psi4/psi4/issues/103#issuecomment-110147470:41,Energy Efficiency,energy,energy,41,The modification sounds fine to me. Will energy('hf') assume something about reference? e.g. rhf for closed shells and rohf for open shells. Or does the user have to always specify reference?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110147470
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:323,Deployability,toggle,toggle,323,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:76,Energy Efficiency,energy,energy,76,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:137,Energy Efficiency,energy,energy,137,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:214,Energy Efficiency,energy,energy,214,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:251,Energy Efficiency,energy,energy,251,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:366,Energy Efficiency,energy,energy,366,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:456,Energy Efficiency,energy,energy,456,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:525,Energy Efficiency,energy,energy,525,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:583,Energy Efficiency,energy,energy,583,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:662,Energy Efficiency,energy,energy,662,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:777,Energy Efficiency,energy,energy,777,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:847,Energy Efficiency,energy,energy,847,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:1924,Energy Efficiency,energy,energy,1924,". Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2084,Energy Efficiency,energy,energy,2084,"you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2407,Energy Efficiency,energy,energy,2407,"I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110021718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2568,Energy Efficiency,energy,energy,2568,"I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110021718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2747,Energy Efficiency,energy,energy,2747,"I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110021718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:753,Integrability,wrap,wrap,753,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:823,Integrability,wrap,wrap,823,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2598,Testability,log,logic,2598,"I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110021718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:277,Availability,avail,available,277,"Is there an advantage to doing. gradient('b3lyp'). instead of. set reference rks; set dft_functional b3lyp; gradient('scf')?. I guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1086,Deployability,toggle,toggle,1086," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:791,Energy Efficiency,energy,energy,791," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:866,Energy Efficiency,energy,energy,866," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:959,Energy Efficiency,energy,energy,959," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1008,Energy Efficiency,energy,energy,1008," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1137,Energy Efficiency,energy,energy,1137," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1243,Energy Efficiency,energy,energy,1243," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1326,Energy Efficiency,energy,energy,1326," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1390,Energy Efficiency,energy,energy,1390," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1480,Energy Efficiency,energy,energy,1480," guess the former is certainly shorter. But primarily I'm wondering; whether one is easier to check than the other regarding whether the; gradient is available. We need to know on a functional-by-functional basis; whether we have analytic gradients or not. If that's much easier to handle; with one style vs the other, that would be an argument for doing it that; way. Then we can decide what to do with the HF cases to make them play; nicely with our desired solution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1604,Energy Efficiency,energy,energy,1604,"ution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1677,Energy Efficiency,energy,energy,1677,":. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:2832,Energy Efficiency,energy,energy,2832,"y an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:2998,Energy Efficiency,energy,energy,2998,"ut some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:3377,Energy Efficiency,energy,energy,3377," Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > .; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:3556,Energy Efficiency,energy,energy,3556," Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > .; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:3748,Energy Efficiency,energy,energy,3748," Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > .; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1580,Integrability,wrap,wrap,1580,"ution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1650,Integrability,wrap,wrap,1650,":. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110194494:3586,Testability,log,logic,3586," Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > .; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:1447,Availability,avail,available,1447,"h), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:729,Deployability,Integrat,Integrate,729,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2327,Deployability,toggle,toggle,2327,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:135,Energy Efficiency,energy,energy,135,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:559,Energy Efficiency,energy,energy,559,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:816,Energy Efficiency,energy,energy,816,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:1998,Energy Efficiency,energy,energy,1998,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2083,Energy Efficiency,energy,energy,2083,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2188,Energy Efficiency,energy,energy,2188,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2245,Energy Efficiency,energy,energy,2245,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2384,Energy Efficiency,energy,energy,2384,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2502,Energy Efficiency,energy,energy,2502,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2595,Energy Efficiency,energy,energy,2595,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2663,Energy Efficiency,energy,energy,2663,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2761,Energy Efficiency,energy,energy,2761,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2891,Energy Efficiency,energy,energy,2891,"ub.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2966,Energy Efficiency,energy,energy,2966," > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting refer",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4171,Energy Efficiency,energy,energy,4171,"ence, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if othe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4343,Energy Efficiency,energy,energy,4343," appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if others concur with my present assessment.; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub; > > > > <https://gith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4752,Energy Efficiency,energy,energy,4752,"> ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if others concur with my present assessment.; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub; > > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > > .; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub <; > > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.; > > ; > >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4939,Energy Efficiency,energy,energy,4939," not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if others concur with my present assessment.; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub; > > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > > .; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub <; > > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110194494.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:5139,Energy Efficiency,energy,energy,5139," not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if others concur with my present assessment.; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub; > > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > > .; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub <; > > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110194494.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:729,Integrability,Integrat,Integrate,729,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:755,Integrability,rout,routines,755,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2867,Integrability,wrap,wrap,2867,"ub.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2937,Integrability,wrap,wrap,2937," > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting refer",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4969,Testability,log,logic,4969," not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if others concur with my present assessment.; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub; > > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967; > > > > .; > > > > ; > > > > —; > > > > Reply to this email directly or view it on GitHub <; > > > > https://github.com/psi4/psi4public/issues/103#issuecomment-110021718>.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-110183382.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110194494.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772
https://github.com/psi4/psi4/issues/103#issuecomment-121430626:451,Energy Efficiency,adapt,adapt,451,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626
https://github.com/psi4/psi4/issues/103#issuecomment-121430626:552,Energy Efficiency,energy,energy,552,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626
https://github.com/psi4/psi4/issues/103#issuecomment-121430626:718,Energy Efficiency,adapt,adapt,718,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626
https://github.com/psi4/psi4/issues/103#issuecomment-121430626:451,Modifiability,adapt,adapt,451,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626
https://github.com/psi4/psi4/issues/103#issuecomment-121430626:718,Modifiability,adapt,adapt,718,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626
https://github.com/psi4/psi4/issues/103#issuecomment-121430626:410,Testability,test,test,410,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626
https://github.com/psi4/psi4/issues/105#issuecomment-144729559:212,Availability,error,error,212,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559
https://github.com/psi4/psi4/issues/105#issuecomment-144729559:295,Availability,error,error,295,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559
https://github.com/psi4/psi4/issues/105#issuecomment-144729559:133,Energy Efficiency,energy,energy,133,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559
https://github.com/psi4/psi4/issues/105#issuecomment-144729559:422,Energy Efficiency,energy,energy,422,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559
https://github.com/psi4/psi4/issues/105#issuecomment-144729559:301,Integrability,message,message,301,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559
https://github.com/psi4/psi4/issues/105#issuecomment-144729559:267,Usability,simpl,simplified,267,"Hi, I'm new with Psi4 so my problem could be a little naive, I'm dealing with a similar issue than @autolife , when I try to run the energy calculation of a silver containing molecule, I get stuck with basis set error (STO-3G). In the following lines I have pasted a simplified input.in and the error message. . Thanks in advance ; Matias . ---. molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set basis sto-3g; energy('df-mp2'); set molden_write true. ## property('df-mp2', properties=['MULLIKEN_CHARGES']). qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: ['AG']; Basis Sets: ['cc-pvdz-ri', 'def2-qzvpp-jkfit']; File Path: , /home/matias/anaconda/share/psi/basis; Input Blocks:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144729559
https://github.com/psi4/psi4/issues/105#issuecomment-144734918:57,Availability,error,error,57,"@loriab can correct me if I'm mistaken, but I think your error is occurring because STO-3G doesn't have a fitting basis. Try using one of our ""hidden"" features, conventional, non-DF MP2; details on how to do this can be found at this link:; http://www.psicode.org/psi4manual/master/occ.html; ,but amount to replacing `'df-mp2'` with `'conv-mp2'`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144734918
https://github.com/psi4/psi4/issues/105#issuecomment-144746819:487,Energy Efficiency,energy,energy,487,"As the above posts have stated Ag is your problem. That being said STO-3G is defined for Ag, without an ECP, so the calculation you are trying to do should work with the correct set of options (and if it doesn't that's a bug). I suspect the problem is that conv-mp2 is still trying to use a DF-HF reference, so let's turn that off too. Try this input:. ```; molecule {; 1 1; Ag 0.37900000 -2.54600000 8.09100000; }. set{; basis sto-3g; df_scf_guess false; scf_type direct; guess sad; }; energy('conv-mp2'); set molden_write true; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144746819
https://github.com/psi4/psi4/issues/105#issuecomment-144750805:120,Availability,error,error,120,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805
https://github.com/psi4/psi4/issues/105#issuecomment-144750805:679,Availability,Error,Error,679,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805
https://github.com/psi4/psi4/issues/105#issuecomment-144750805:818,Availability,error,error,818,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805
https://github.com/psi4/psi4/issues/105#issuecomment-144750805:395,Energy Efficiency,energy,energy,395,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805
https://github.com/psi4/psi4/issues/105#issuecomment-144750805:415,Energy Efficiency,energy,energy,415,"I don't want to take more of your time.; I tried the input that you sent me and the calculation ends with the following error. ---. PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 23, in <module>; File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; run_conv_omp2(name, **kwargs); File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in run_conv_omp2; psi4.occ(); RuntimeError: PSIO Error. ---. In the input you used some keywords that i'm not familiar with, so i have to study the manual a little more, to understand the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144750805
https://github.com/psi4/psi4/issues/105#issuecomment-144751892:291,Availability,error,error,291,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892
https://github.com/psi4/psi4/issues/105#issuecomment-144751892:875,Availability,Error,Error,875,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892
https://github.com/psi4/psi4/issues/105#issuecomment-144751892:1018,Availability,error,error,1018,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892
https://github.com/psi4/psi4/issues/105#issuecomment-144751892:563,Energy Efficiency,energy,energy,563,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892
https://github.com/psi4/psi4/issues/105#issuecomment-144751892:585,Energy Efficiency,energy,energy,585,"Change:. scf_type pk. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Oct 1, 2015 at 10:50 AM, mberdakin notifications@github.com wrote:. > I don't want to take more of your time.; > I tried the input that you sent me and the calculation ends with the; > ; > ## following error; > ; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File """", line 23, in; > File ""/home/matias/anaconda/share/psi/python/driver.py"", line 637, in; > energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 582, in run_mp2; > run_conv_omp2(name, **kwargs); > File ""/home/matias/anaconda/share/psi/python/proc.py"", line 538, in; > run_conv_omp2; > psi4.occ(); > ; > ## RuntimeError: PSIO Error; > ; > In the input you used some keywords that i'm not familiar with, so i have; > to study the manual a little more, to understand the error.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/105#issuecomment-144750805.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144751892
https://github.com/psi4/psi4/issues/105#issuecomment-144769489:304,Availability,avail,available,304,"It's not too complicated. The below is equivalent and slightly preferred. ```; set {; basis sto-3g # minimal orbital basis set; df_scf_guess false # usually, psi4 saves time by doing most of the HF iterations using density fitting then only a few with the full integrals. Since fitting basis sets aren't available, this skips the density fitting iterations.; scf_type direct # selects a non-density-fitting algorithm for the HF; guess sad # a better guess to start the HF iterations; sad is nearly always the best guess; mp2_type conv # selects a non-density-fitting algorithm for the MP2; }; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144769489
https://github.com/psi4/psi4/issues/105#issuecomment-144769489:593,Energy Efficiency,energy,energy,593,"It's not too complicated. The below is equivalent and slightly preferred. ```; set {; basis sto-3g # minimal orbital basis set; df_scf_guess false # usually, psi4 saves time by doing most of the HF iterations using density fitting then only a few with the full integrals. Since fitting basis sets aren't available, this skips the density fitting iterations.; scf_type direct # selects a non-density-fitting algorithm for the HF; guess sad # a better guess to start the HF iterations; sad is nearly always the best guess; mp2_type conv # selects a non-density-fitting algorithm for the MP2; }; energy('mp2'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/105#issuecomment-144769489
https://github.com/psi4/psi4/issues/106#issuecomment-119739035:212,Availability,avail,available,212,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035
https://github.com/psi4/psi4/issues/106#issuecomment-119739035:256,Availability,avail,available,256,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035
https://github.com/psi4/psi4/issues/106#issuecomment-119739035:388,Deployability,Update,Update,388,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035
https://github.com/psi4/psi4/issues/107#issuecomment-121080590:169,Energy Efficiency,energy,energy,169,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590
https://github.com/psi4/psi4/issues/107#issuecomment-121080590:239,Energy Efficiency,energy,energy,239,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590
https://github.com/psi4/psi4/issues/107#issuecomment-121080590:591,Integrability,rout,route,591,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590
https://github.com/psi4/psi4/issues/107#issuecomment-121080590:225,Testability,test,test,225,"No UHF-MP2 gradients in my code. Sorry. -Rob. On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns notifications@github.com; wrote:. > for df-mp2, these are the cases:; > uhf energy: good, this is is Rob's code (we're pretty sure; test); > rohf energy: we think this may be in Rob's code, but not verified vs other; > codes; > uhf grad: we think this may be in Rob's code, but not verified vs other; > codes; > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > w/o subsequent opt; > ; > ticket task: verify the above with the code and with the authors. if; > needed, re-route in driver (see mp2_type as example in proc.py. If; > anything looks to hard or want to defer, create a new ticket for it, and do; > all you can to close out this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121080590
https://github.com/psi4/psi4/issues/107#issuecomment-121081025:512,Energy Efficiency,energy,energy,512,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025
https://github.com/psi4/psi4/issues/107#issuecomment-121081025:584,Energy Efficiency,energy,energy,584,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025
https://github.com/psi4/psi4/issues/107#issuecomment-121081025:169,Integrability,rout,route,169,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025
https://github.com/psi4/psi4/issues/107#issuecomment-121081025:952,Integrability,rout,route,952,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025
https://github.com/psi4/psi4/issues/107#issuecomment-121081025:121,Testability,test,tested,121,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025
https://github.com/psi4/psi4/issues/107#issuecomment-121081025:568,Testability,test,test,568,"We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were hopeful. Were we mistaken or was it not finished or not tested, or what’s the status. Anyway ok, can re-route through Ugur’s code. Lori. > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com wrote:; > ; > No UHF-MP2 gradients in my code. Sorry.; > ; > -Rob; > ; > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com <mailto:notifications@github.com>>; > wrote:; > ; > > for df-mp2, these are the cases:; > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > rohf energy: we think this may be in Rob's code, but not verified vs other; > > codes; > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > codes; > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2; > > w/o subsequent opt; > > ; > > ticket task: verify the above with the code and with the authors. if; > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > anything looks to hard or want to defer, create a new ticket for it, and do; > > all you can to close out this one.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > <https://github.com/psi4/psi4public/issues/107 <https://github.com/psi4/psi4public/issues/107>>.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/107#issuecomment-121080590.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081025
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:754,Energy Efficiency,energy,energy,754,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:828,Energy Efficiency,energy,energy,828,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:368,Integrability,rout,route,368,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:1226,Integrability,rout,route,1226,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:14,Testability,stub,stubs,14,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:310,Testability,test,tested,310,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/107#issuecomment-121081364:810,Testability,test,test,810,"That was just stubs in case I ever got around to it. No significant code; along those lines was completed. -Rob. On Mon, Jul 13, 2015 at 3:35 PM, psi4 notifications@github.com wrote:. > We saw some `!restricted` in src/bin/dfmp2/corr_grad.cc and were; > hopeful. Were we mistaken or was it not finished or not tested, or what’s; > the status.; > ; > Anyway ok, can re-route through Ugur’s code.; > ; > Lori; > ; > > On Jul 13, 2015, at 6:32 PM, Rob Parrish notifications@github.com; > > wrote:; > > ; > > No UHF-MP2 gradients in my code. Sorry.; > > ; > > -Rob; > > ; > > On Mon, Jul 13, 2015 at 3:30 PM, Lori A. Burns <notifications@github.com; > > <mailto:notifications@github.com>>; > > wrote:; > > ; > > > for df-mp2, these are the cases:; > > > uhf energy: good, this is is Rob's code (we're pretty sure; test); > > > rohf energy: we think this may be in Rob's code, but not verified vs; > > > other; > > > codes; > > > uhf grad: we think this may be in Rob's code, but not verified vs other; > > > codes; > > > rohf grad: no good. Ugur doesn't support rohf scf being fed into his; > > > omp2; > > > w/o subsequent opt; > > > ; > > > ticket task: verify the above with the code and with the authors. if; > > > needed, re-route in driver (see mp2_type as example in proc.py. If; > > > anything looks to hard or want to defer, create a new ticket for it,; > > > and do; > > > all you can to close out this one.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/107 <; > > > https://github.com/psi4/psi4public/issues/107>>.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4public/issues/107#issuecomment-121080590>.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/107#issuecomment-121081025.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/107#issuecomment-121081364
https://github.com/psi4/psi4/issues/108#issuecomment-272697987:55,Usability,guid,guide,55,You can also use: https://codecov.io/gh/psi4/psi4 as a guide to find code that is not covered.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/108#issuecomment-272697987
https://github.com/psi4/psi4/issues/111#issuecomment-122005457:264,Deployability,patch,patch,264,"If you like, we have conda boost packages for py3 in the omnia suite https://github.com/omnia-md/conda-recipes, https://anaconda.org/omnia/boost/files. Feel free to copy / take. Note that if yoy use boost 1.58.0, there is a bug in the py3 support that you need to patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/111#issuecomment-122005457
https://github.com/psi4/psi4/issues/112#issuecomment-121294877:121,Testability,test,test,121,"Modified sirius.chem.vt.edu sphinxman pages to redirect to . http://www.psicode.org/psi4manual/master/index.html. Please test at your convenience, loriab.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121294877
https://github.com/psi4/psi4/issues/112#issuecomment-121372040:60,Performance,cache,cache,60,"Ok, I didn't get the redirect on Chrome until I cleared the cache, but now it works nicely. Firefox, too. I think redirect 'latest' as well as 'master', then that bullet's done, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121372040
https://github.com/psi4/psi4/issues/112#issuecomment-121372040:48,Usability,clear,cleared,48,"Ok, I didn't get the redirect on Chrome until I cleared the cache, but now it works nicely. Firefox, too. I think redirect 'latest' as well as 'master', then that bullet's done, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121372040
https://github.com/psi4/psi4/issues/112#issuecomment-121379741:387,Availability,down,down,387,"Done with that bullet, but I think also the other two. I dumped a tarball of the sirius trac website on psicode.org as trac@sirius.chem.vt.edu.tgz. In addition, I pulled the docs from the old 4.0b2, 4.0b3, 4.0b4, and 4.0b5 dockers from sirius and moved them into place in html/psi4manual on psicode.org. Please take a look and see that you're in agreement with all this. I may then shut down trac on sirius.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121379741
https://github.com/psi4/psi4/issues/112#issuecomment-121394983:23,Availability,fault,fault,23,"The 4.0b5 issue was my fault, and I've fixed it now. That was my original attempt at a redirect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121394983
https://github.com/psi4/psi4/issues/112#issuecomment-121398769:17,Integrability,wrap,wraps,17,"Yes, works! That wraps up the documentation shuffling, I think. Provides all the good stuff of the trac page is in the 116MB `db/trac.db` file, that tarball looks good, too. Another issue closed, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121398769
https://github.com/psi4/psi4/issues/112#issuecomment-121439521:10,Availability,down,down,10,I've shut down the trac pages of sirius.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/112#issuecomment-121439521
https://github.com/psi4/psi4/issues/114#issuecomment-381460426:185,Availability,error,error,185,"Now throws `ValidationError: Inconsistent or unspecified chg/mult: sys chg: -2.0, frag chg: [None, None], sys mult: 1, frag mult: [None, None]` at parse-time rather than mysterious SCF error at Runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/114#issuecomment-381460426
https://github.com/psi4/psi4/issues/114#issuecomment-381460426:12,Security,Validat,ValidationError,12,"Now throws `ValidationError: Inconsistent or unspecified chg/mult: sys chg: -2.0, frag chg: [None, None], sys mult: 1, frag mult: [None, None]` at parse-time rather than mysterious SCF error at Runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/114#issuecomment-381460426
https://github.com/psi4/psi4/issues/115#issuecomment-122486808:199,Energy Efficiency,energy,energy,199,here's a minimal input for debugging. ```; molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis cc-pvdz; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-122486808
https://github.com/psi4/psi4/issues/115#issuecomment-122544746:449,Energy Efficiency,energy,energy,449,"Thanks, Lori. I’m still tied up with work in St Louis, but will get on this as soon as I get back to UT. It should be easy to find, I hope. > On Jul 18, 2015, at 12:46 AM, Lori A. Burns notifications@github.com wrote:; > ; > here's a minimal input for debugging; > ; > molecule {; > efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; > --; > O 4.0 0.0 0.0; > H 4.7 0.7 0.0; > H 3.3 -0.7 0.0; > --; > efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; > }; > ; > set basis cc-pvdz; > energy('scf'); > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/115#issuecomment-122486808.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-122544746
https://github.com/psi4/psi4/issues/115#issuecomment-124225470:188,Testability,test,test,188,"The commit above was probably necessary (solves the segfault) but not sufficient, as spherical basis wavefunction polarization energies still off. Necessary analogous q-chem calcs run and test prepared such that when https://github.com/psi4/psi4public/blob/master/tests/libefp/libefp-qchem-qmefp-puream-sp /input.dat passes, this issue is fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-124225470
https://github.com/psi4/psi4/issues/115#issuecomment-124225470:264,Testability,test,tests,264,"The commit above was probably necessary (solves the segfault) but not sufficient, as spherical basis wavefunction polarization energies still off. Necessary analogous q-chem calcs run and test prepared such that when https://github.com/psi4/psi4public/blob/master/tests/libefp/libefp-qchem-qmefp-puream-sp /input.dat passes, this issue is fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-124225470
https://github.com/psi4/psi4/issues/115#issuecomment-171483571:321,Testability,test,tests,321,"I'm about to commit the appropriate changes; it was just a silly dimensioning issue, as expected. Sorry for completely forgetting about this, and thanks to @CDSherrill for reminding me. Would you mind running it through your inputs as an extra set of checks, @loriab? Also, would you mind making the necessary cleanup in tests/libefp? I can get to it later if not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171483571
https://github.com/psi4/psi4/issues/115#issuecomment-171507574:30,Testability,test,test,30,"Yay, indeed! Just checked the test cases and all 5 pass. Added the last output.ref with 0ee93a3 . Did you have any other tests/libefp cleanup in mind?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171507574
https://github.com/psi4/psi4/issues/115#issuecomment-171507574:121,Testability,test,tests,121,"Yay, indeed! Just checked the test cases and all 5 pass. Added the last output.ref with 0ee93a3 . Did you have any other tests/libefp cleanup in mind?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171507574
https://github.com/psi4/psi4/issues/115#issuecomment-171512142:43,Integrability,message,message,43,"Sorry, @loriab, I didn't see your previous message announcing the cleanup and introduction of the new qmefp-puream test. I think it's all good as-is, but the folders qc-scfefp-sp1 and qc-scfefp-sp2 appear to not contain an input.dat. Should they be deleted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171512142
https://github.com/psi4/psi4/issues/115#issuecomment-171512142:115,Testability,test,test,115,"Sorry, @loriab, I didn't see your previous message announcing the cleanup and introduction of the new qmefp-puream test. I think it's all good as-is, but the folders qc-scfefp-sp1 and qc-scfefp-sp2 appear to not contain an input.dat. Should they be deleted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171512142
https://github.com/psi4/psi4/issues/115#issuecomment-171512822:39,Testability,test,tests,39,"Ok, yeah, I have many misc. dirs in my tests/libefp, too. But the github repo looks clean.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171512822
https://github.com/psi4/psi4/issues/116#issuecomment-121737099:15,Testability,test,test,15,"I just added a test case. Documentation is already in place, but it should probably be expanded with instructions on how to use .cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-121737099
https://github.com/psi4/psi4/issues/116#issuecomment-122019947:36,Testability,test,test,36,"I need some help with the cube prop test case. The way I set the test case requires comparing the cube files generated with some reference cube files, stored in tests/cubeprop. How can I copy these files in the directory in which tests are executed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122019947
https://github.com/psi4/psi4/issues/116#issuecomment-122019947:65,Testability,test,test,65,"I need some help with the cube prop test case. The way I set the test case requires comparing the cube files generated with some reference cube files, stored in tests/cubeprop. How can I copy these files in the directory in which tests are executed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122019947
https://github.com/psi4/psi4/issues/116#issuecomment-122019947:161,Testability,test,tests,161,"I need some help with the cube prop test case. The way I set the test case requires comparing the cube files generated with some reference cube files, stored in tests/cubeprop. How can I copy these files in the directory in which tests are executed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122019947
https://github.com/psi4/psi4/issues/116#issuecomment-122019947:230,Testability,test,tests,230,"I need some help with the cube prop test case. The way I set the test case requires comparing the cube files generated with some reference cube files, stored in tests/cubeprop. How can I copy these files in the directory in which tests are executed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122019947
https://github.com/psi4/psi4/issues/116#issuecomment-122034848:150,Testability,test,tests,150,"I didn't realized you had opened an issue, I fixed it for you in commit 42345de37df6827356fe7215aa2745b36c946d9e. If you are still interested look at tests/cubeprop/CMakeLists.txt basically the command is:. ``` cmake; file(COPY <name> DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122034848
https://github.com/psi4/psi4/issues/117#issuecomment-121810936:164,Energy Efficiency,energy,energy,164,I'd be happy to pick this one up if no one else is working on it. I just want to clarify is the desired behavior of something like this:. set dft_functional b3lyp; energy('scf'). Should this run the dft or HF calculation? (amusing the user or the solution to #118 has set the reference properly) Currently this would do the the HF.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121810936
https://github.com/psi4/psi4/issues/117#issuecomment-121817414:118,Energy Efficiency,energy,energy,118,"It'd be great if you wanted to work on this. I'm fine with the current behavior, that the `set dft_functional b3lyp\n energy('scf')` runs scf. It's the `energy('b3lyp')` notation that we want to be user friendly, and that's already satisfied. Ok to keep the `set dft_functional b3lyp` notation straightforward and less user-friendly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121817414
https://github.com/psi4/psi4/issues/117#issuecomment-121817414:153,Energy Efficiency,energy,energy,153,"It'd be great if you wanted to work on this. I'm fine with the current behavior, that the `set dft_functional b3lyp\n energy('scf')` runs scf. It's the `energy('b3lyp')` notation that we want to be user friendly, and that's already satisfied. Ok to keep the `set dft_functional b3lyp` notation straightforward and less user-friendly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121817414
https://github.com/psi4/psi4/issues/117#issuecomment-121817414:319,Usability,user-friendly,user-friendly,319,"It'd be great if you wanted to work on this. I'm fine with the current behavior, that the `set dft_functional b3lyp\n energy('scf')` runs scf. It's the `energy('b3lyp')` notation that we want to be user friendly, and that's already satisfied. Ok to keep the `set dft_functional b3lyp` notation straightforward and less user-friendly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-121817414
https://github.com/psi4/psi4/issues/117#issuecomment-192512210:50,Usability,feedback,feedback,50,"@amjames Excellent, I have received very positive feedback from other folks so I think I will go ahead and close this. We can always open a new issue if we run into problems, but its been about 6 months of everything working well so I think we are fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/117#issuecomment-192512210
https://github.com/psi4/psi4/issues/118#issuecomment-170147040:173,Energy Efficiency,energy,energy,173,"AJ made this comment:. My implementation involved handling cases where the user sets a hf reference and calls a dft method. For example if the input is,. set reference rhf. energy('b3lyp). the reference option will be set to rks. The goal there was to keep the energy('method') interface user friendly. If/when psi4public/118 is implemented the smart-reference should be able to handle those conflicts and my checks for these conflicts can probably be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/118#issuecomment-170147040
https://github.com/psi4/psi4/issues/118#issuecomment-170147040:261,Energy Efficiency,energy,energy,261,"AJ made this comment:. My implementation involved handling cases where the user sets a hf reference and calls a dft method. For example if the input is,. set reference rhf. energy('b3lyp). the reference option will be set to rks. The goal there was to keep the energy('method') interface user friendly. If/when psi4public/118 is implemented the smart-reference should be able to handle those conflicts and my checks for these conflicts can probably be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/118#issuecomment-170147040
https://github.com/psi4/psi4/issues/118#issuecomment-170147040:278,Integrability,interface,interface,278,"AJ made this comment:. My implementation involved handling cases where the user sets a hf reference and calls a dft method. For example if the input is,. set reference rhf. energy('b3lyp). the reference option will be set to rks. The goal there was to keep the energy('method') interface user friendly. If/when psi4public/118 is implemented the smart-reference should be able to handle those conflicts and my checks for these conflicts can probably be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/118#issuecomment-170147040
https://github.com/psi4/psi4/issues/119#issuecomment-130327172:39,Availability,fault,faults,39,"I can confirm this issue. The code seg faults only when calling gradient(df-mp2). If I run energy(dfmp2), it seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130327172
https://github.com/psi4/psi4/issues/119#issuecomment-130327172:91,Energy Efficiency,energy,energy,91,"I can confirm this issue. The code seg faults only when calling gradient(df-mp2). If I run energy(dfmp2), it seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130327172
https://github.com/psi4/psi4/issues/119#issuecomment-130852343:266,Availability,fault,fault,266,"Working Notes:. PSI4: Git: Rev {master} ad9c3d9; Config: RHEL/icpc/MKL/Debug; Hardware: i7x6, 64GB, 2TB. Running with GDB:. 30 GB/12 threads - passes, max memory ~27 GB, ~25 mins; 40 GB/12 threads - Segfault! . Source:. Program received signal SIGSEGV, Segmentation fault.; 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; (gdb) bt; #0 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; #2 0x0000000001bc54f7 in psi::dfmp2::RDFMP2::form_L (this=0xeb31d30); at /theoryfs2/ds/parrish/psi4public/src/bin/dfmp2/mp2.cc:1912. mp2.cc:1912 zeros Gmn, a three-center tensor which is currently 1896 x 1086^2 = 2236134816, which as we all know is just above 2^31 - 1 = 2147483647. So I suspect:. frame 1; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; 1002 memset(&(matrix_[h][0][0]), 0, size);; (gdb) print size; $1 = 18446744057257762112. Yep, matrix zero is FUBAR. The offending line is matrix.cc:999:. ```; size = rowspi_[h] * colspi_[h^symmetry_] * sizeof(double);; ```. Changed to:. ```; size = rowspi_[h] * ((size_t) colspi_[h^symmetry_]) * sizeof(double);; ```. Ed and I once worked out that casting to size_t works properly if the left-most element in a chain of integer multiplies is size_t. But I don't completely trust that, and so often do all work in size_t. I'll close if working in another half hour.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130852343
https://github.com/psi4/psi4/issues/119#issuecomment-130852343:49,Modifiability,Config,Config,49,"Working Notes:. PSI4: Git: Rev {master} ad9c3d9; Config: RHEL/icpc/MKL/Debug; Hardware: i7x6, 64GB, 2TB. Running with GDB:. 30 GB/12 threads - passes, max memory ~27 GB, ~25 mins; 40 GB/12 threads - Segfault! . Source:. Program received signal SIGSEGV, Segmentation fault.; 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; (gdb) bt; #0 0x00007ffff1293cad in __memset_sse2 () from /lib64/libc.so.6; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; #2 0x0000000001bc54f7 in psi::dfmp2::RDFMP2::form_L (this=0xeb31d30); at /theoryfs2/ds/parrish/psi4public/src/bin/dfmp2/mp2.cc:1912. mp2.cc:1912 zeros Gmn, a three-center tensor which is currently 1896 x 1086^2 = 2236134816, which as we all know is just above 2^31 - 1 = 2147483647. So I suspect:. frame 1; #1 0x0000000003529efb in psi::Matrix::zero (this=0xe7b9350); at /theoryfs2/ds/parrish/psi4public/src/lib/libmints/matrix.cc:1002; 1002 memset(&(matrix_[h][0][0]), 0, size);; (gdb) print size; $1 = 18446744057257762112. Yep, matrix zero is FUBAR. The offending line is matrix.cc:999:. ```; size = rowspi_[h] * colspi_[h^symmetry_] * sizeof(double);; ```. Changed to:. ```; size = rowspi_[h] * ((size_t) colspi_[h^symmetry_]) * sizeof(double);; ```. Ed and I once worked out that casting to size_t works properly if the left-most element in a chain of integer multiplies is size_t. But I don't completely trust that, and so often do all work in size_t. I'll close if working in another half hour.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/119#issuecomment-130852343
https://github.com/psi4/psi4/issues/120#issuecomment-123386691:14,Availability,error,errors,14,Can I see the errors from RHEL7 conda? I can't reproduce this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-123386691
https://github.com/psi4/psi4/issues/120#issuecomment-123392969:258,Availability,error,errors,258,"One of my runs had one of the fnocc's failing. I'm wondering if a run; through Valgrind is needed. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Tue, Jul 21, 2015 at 12:07 PM, Eugene DePrince notifications@github.com; wrote:. > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/120#issuecomment-123386691.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-123392969
https://github.com/psi4/psi4/issues/120#issuecomment-124137136:17,Usability,clear,clear,17,"Yes, fnocc looks clear across the dashboard. Go ahead and close those two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/120#issuecomment-124137136
https://github.com/psi4/psi4/issues/121#issuecomment-123386880:14,Availability,error,errors,14,Can I see the errors from RHEL7 conda? I can't reproduce this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123386880
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:522,Availability,avail,available,522,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:770,Availability,error,errors,770,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:25,Testability,test,testboard,25,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:45,Testability,test,testDetails,45,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:61,Testability,test,test,61,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:94,Testability,test,testboard,94,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:114,Testability,test,testDetails,114,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123394642:130,Testability,test,test,130,"Not too helpful: https://testboard.org/cdash/testDetails.php?test=1588753&build=22769 https://testboard.org/cdash/testDetails.php?test=1588753&build=22769. And when I run it outright (not nightly build) it passes. End of output file from nightly build below. But it’s not showing up as timed out. **\* tstart() called on psinet; **\* at Tue Jul 21 03:07:41 2015. ```; *******************************************************; * *; * QCISD(T) *; * *; *******************************************************. num_threads: 1; available memory: 244.14 mb; memory requirements: 0.52 mb. Number of ijk combinations: 20. Computing (T) correction... % complete total time; ```. > On Jul 21, 2015, at 12:08 PM, Eugene DePrince notifications@github.com wrote:; > ; > Can I see the errors from RHEL7 conda? I can't reproduce this one.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/121#issuecomment-123386880.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123394642
https://github.com/psi4/psi4/issues/121#issuecomment-123504435:29,Availability,failure,failures,29,"Ryan has seen some test case failures because of IO issues from tests running in parallel. This is (T), so a possibility. I've set the nightly build script to run in serial tonight, so we'll see if this gets pinned down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123504435
https://github.com/psi4/psi4/issues/121#issuecomment-123504435:215,Availability,down,down,215,"Ryan has seen some test case failures because of IO issues from tests running in parallel. This is (T), so a possibility. I've set the nightly build script to run in serial tonight, so we'll see if this gets pinned down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123504435
https://github.com/psi4/psi4/issues/121#issuecomment-123504435:19,Testability,test,test,19,"Ryan has seen some test case failures because of IO issues from tests running in parallel. This is (T), so a possibility. I've set the nightly build script to run in serial tonight, so we'll see if this gets pinned down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123504435
https://github.com/psi4/psi4/issues/121#issuecomment-123504435:64,Testability,test,tests,64,"Ryan has seen some test case failures because of IO issues from tests running in parallel. This is (T), so a possibility. I've set the nightly build script to run in serial tonight, so we'll see if this gets pinned down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123504435
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:638,Availability,Fault,Fault,638," ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2985,Availability,error,errors,2985,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:3098,Availability,ERROR,ERROR,3098,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:3120,Availability,error,errors,3120,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:3187,Availability,fault,fault,3187,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:447,Energy Efficiency,energy,energy,447,"The problem is not IO issues from parallel testing. The problem is an actual, reproducible segfault on the testing machine. On psinet, this input:. ```; cdsgroup@bash:psinet:/scratch/cdsgroup/conda-builds/work/tests/fnocc2: cat alt.in ; molecule {; O 0.000000000000 0.000000000000 -0.066736129322; H 0.000000000000 -0.763241114523 0.529575400775; H 0.000000000000 0.763241114523 0.529575400775; }. set scf_type out_of_core; set basis 6-311G(D_P). energy('qcisd(t)'); ```. gives a valgrind output the end of which is:. ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2533,Energy Efficiency,allocate,allocated,2533,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2961,Safety,detect,detected,2961,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:43,Testability,test,testing,43,"The problem is not IO issues from parallel testing. The problem is an actual, reproducible segfault on the testing machine. On psinet, this input:. ```; cdsgroup@bash:psinet:/scratch/cdsgroup/conda-builds/work/tests/fnocc2: cat alt.in ; molecule {; O 0.000000000000 0.000000000000 -0.066736129322; H 0.000000000000 -0.763241114523 0.529575400775; H 0.000000000000 0.763241114523 0.529575400775; }. set scf_type out_of_core; set basis 6-311G(D_P). energy('qcisd(t)'); ```. gives a valgrind output the end of which is:. ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:107,Testability,test,testing,107,"The problem is not IO issues from parallel testing. The problem is an actual, reproducible segfault on the testing machine. On psinet, this input:. ```; cdsgroup@bash:psinet:/scratch/cdsgroup/conda-builds/work/tests/fnocc2: cat alt.in ; molecule {; O 0.000000000000 0.000000000000 -0.066736129322; H 0.000000000000 -0.763241114523 0.529575400775; H 0.000000000000 0.763241114523 0.529575400775; }. set scf_type out_of_core; set basis 6-311G(D_P). energy('qcisd(t)'); ```. gives a valgrind output the end of which is:. ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/121#issuecomment-123755185:210,Testability,test,tests,210,"The problem is not IO issues from parallel testing. The problem is an actual, reproducible segfault on the testing machine. On psinet, this input:. ```; cdsgroup@bash:psinet:/scratch/cdsgroup/conda-builds/work/tests/fnocc2: cat alt.in ; molecule {; O 0.000000000000 0.000000000000 -0.066736129322; H 0.000000000000 -0.763241114523 0.529575400775; H 0.000000000000 0.763241114523 0.529575400775; }. set scf_type out_of_core; set basis 6-311G(D_P). energy('qcisd(t)'); ```. gives a valgrind output the end of which is:. ```; ==14111== ; ==14111== Process terminating with default action of signal 11 (SIGSEGV); ==14111== General Protection Fault; ==14111== at 0x13A3EBF: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x686B882: __kmp_invoke_microtask (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6845324: __kmp_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x6826B2E: __kmpc_fork_call (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x13A13D1: psi::fnocc::CoupledCluster::triples() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x134038C: psi::fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185
https://github.com/psi4/psi4/issues/122#issuecomment-121703284:111,Testability,test,test,111,This job fails because the basis set needs ecps for the atoms in the input file. I have removed the largeatoms test case from the cmake input file with commit a2cc71d4233c1f944436ee7e7b19ae5a62885e05,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/122#issuecomment-121703284
https://github.com/psi4/psi4/issues/123#issuecomment-121703072:5,Testability,test,test,5,This test case does not work for my mac.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/123#issuecomment-121703072
https://github.com/psi4/psi4/issues/123#issuecomment-121730465:260,Availability,toler,tolerance,260,This test case uses analytic frequencies and requests that a three and five point finite-difference calculation is run. The original comparisons were a bit tight (0.1 and 0.001 cm^-1). I switched the reference data to finite difference values and loosened the tolerance check to a wavenumber. 903bb0e380ecf8304875409b73fb19d69c6f393a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/123#issuecomment-121730465
https://github.com/psi4/psi4/issues/123#issuecomment-121730465:5,Testability,test,test,5,This test case uses analytic frequencies and requests that a three and five point finite-difference calculation is run. The original comparisons were a bit tight (0.1 and 0.001 cm^-1). I switched the reference data to finite difference values and loosened the tolerance check to a wavenumber. 903bb0e380ecf8304875409b73fb19d69c6f393a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/123#issuecomment-121730465
https://github.com/psi4/psi4/issues/125#issuecomment-121717882:5,Testability,test,test,5,This test case is failing. Optking says that the test case does not converge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121717882
https://github.com/psi4/psi4/issues/125#issuecomment-121717882:49,Testability,test,test,49,This test case is failing. Optking says that the test case does not converge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121717882
https://github.com/psi4/psi4/issues/125#issuecomment-121739386:62,Integrability,depend,dependency,62,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386
https://github.com/psi4/psi4/issues/125#issuecomment-121739386:127,Integrability,depend,dependency,127,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386
https://github.com/psi4/psi4/issues/125#issuecomment-121739386:245,Performance,optimiz,optimizer,245,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386
https://github.com/psi4/psi4/issues/125#issuecomment-121739386:4,Testability,test,test,4,"The test case is trying to figure out whether or not a linear dependency messes up the calculation. It appears that the linear dependency is not messing up the calculation and the issue is that the final energies do not match. At some point the optimizer must have changed and as a result the energies no longer match to five decimal places, but rather to only three. I loosened the check to three decimal places. Commit 3bc5f146dfbbc6a09d9ccbe034f2ffdd7d32d6e9 fixes this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/125#issuecomment-121739386
https://github.com/psi4/psi4/issues/126#issuecomment-121706906:109,Energy Efficiency,Energy,Energy,109,Confirmed this bug. The CI DIPOLE and CI QUADROPOLE is exactly zero. Probably not getting set in the code. . Energy is correct.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/126#issuecomment-121706906
https://github.com/psi4/psi4/issues/127#issuecomment-121666120:13,Testability,test,test,13,dfomp2-grad1 test is PASSED on my computer. I can not reproduce problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121666120
https://github.com/psi4/psi4/issues/127#issuecomment-121683761:120,Performance,optimiz,optimized,120,"I have fixed the problem. it is a little bit weird to me why the following breaks the gradient code. I just try to save optimized MOs to wfn. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; CmoA->to_shared_matrix(Ca);; SharedMatrix moA = Process::environment.wavefunction()->Ca();; moA->copy(Ca);; ```. where CmoA is the my MO coeff. matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121683761
https://github.com/psi4/psi4/issues/127#issuecomment-121957186:63,Performance,optimiz,optimized,63,"What was the solution to this? We probably do want to save the optimized orbitals to the wfn. Did you have to turn that off, Ugur?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121957186
https://github.com/psi4/psi4/issues/127#issuecomment-121961115:50,Energy Efficiency,energy,energy,50,"Hi David,. Previously I was saving MOs just after energy computation, before gradients. Now, I move it to end of the code. Hence, presently I am saving MOs when everything is completely finished.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-121961115
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2452,Availability,error,error,2452," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:443,Deployability,release,release,443,"I think this could be due to the fact that Matrix::copy() will reallocate the matrix if the matrix being copied has a different size or number of irreps:. void Matrix::copy(const Matrix\* cp); {; // Make sure we are the same size as cp; bool same = true;; if (nirrep_ != cp->nirrep_ || symmetry_ != cp->symmetry_) {; same = false;; }; else {; if (colspi_ != cp->colspi_ || rowspi_ != cp->rowspi_); same = false;; }. ```; if (same == false) {; release();; nirrep_ = cp->nirrep_;; symmetry_ = cp->symmetry_;; rowspi_ = Dimension(nirrep_);; colspi_ = Dimension(nirrep_);; for (int i=0; i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2067,Integrability,message,message,2067," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2233,Integrability,message,message,2233," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2354,Integrability,message,message,2354," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2441,Integrability,message,message,2441," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2502,Integrability,message,message,2502," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2550,Integrability,message,message,2550," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2169,Security,confidential,confidential,2169," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/127#issuecomment-122116756:1047,Testability,test,tested,1047," to the fact that Matrix::copy() will reallocate the matrix if the matrix being copied has a different size or number of irreps:. void Matrix::copy(const Matrix\* cp); {; // Make sure we are the same size as cp; bool same = true;; if (nirrep_ != cp->nirrep_ || symmetry_ != cp->symmetry_) {; same = false;; }; else {; if (colspi_ != cp->colspi_ || rowspi_ != cp->rowspi_); same = false;; }. ```; if (same == false) {; release();; nirrep_ = cp->nirrep_;; symmetry_ = cp->symmetry_;; rowspi_ = Dimension(nirrep_);; colspi_ = Dimension(nirrep_);; for (int i=0; i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756
https://github.com/psi4/psi4/issues/128#issuecomment-121666223:13,Testability,test,test,13,dfomp2-grad2 test is PASSED on my computer. I can not reproduce problem.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/128#issuecomment-121666223
https://github.com/psi4/psi4/issues/128#issuecomment-121684025:120,Performance,optimiz,optimized,120,"I have fixed the problem. it is a little bit weird to me why the following breaks the gradient code. I just try to save optimized MOs to wfn. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; CmoA->to_shared_matrix(Ca);; SharedMatrix moA = Process::environment.wavefunction()->Ca();; moA->copy(Ca);; ```. where CmoA is the my MO coeff. matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/128#issuecomment-121684025
https://github.com/psi4/psi4/issues/129#issuecomment-121719138:27,Testability,test,test,27,It does seem that the only test cases failing are two of the test suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-121719138
https://github.com/psi4/psi4/issues/129#issuecomment-121719138:61,Testability,test,test,61,It does seem that the only test cases failing are two of the test suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-121719138
https://github.com/psi4/psi4/issues/129#issuecomment-121720706:47,Testability,test,test,47,"Ok, go ahead and comment them out and make the test case work. We'll get Rob's opinion before finally closing the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-121720706
https://github.com/psi4/psi4/issues/129#issuecomment-123487770:48,Deployability,update,update,48,"Ok, I think this all goes back to the physconst update that introduced a discontinuity in the reference for two points: (wait for full load and jump) https://github.com/psi4/psi4/commit/64ea27fc1afc8fbcaf87eb03304eb8b40e99bf23#diff-4fd9a0a7922adf8bb30dbcc1278ab5d0R12 and following line (6.2 and 6.3 occ). Going to reset the reference unless @robparrish says nay. Also going to set non-zero for 6.5 occ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-123487770
https://github.com/psi4/psi4/issues/129#issuecomment-123487770:135,Performance,load,load,135,"Ok, I think this all goes back to the physconst update that introduced a discontinuity in the reference for two points: (wait for full load and jump) https://github.com/psi4/psi4/commit/64ea27fc1afc8fbcaf87eb03304eb8b40e99bf23#diff-4fd9a0a7922adf8bb30dbcc1278ab5d0R12 and following line (6.2 and 6.3 occ). Going to reset the reference unless @robparrish says nay. Also going to set non-zero for 6.5 occ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-123487770
https://github.com/psi4/psi4/issues/129#issuecomment-124147126:53,Availability,fault,faults,53,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126
https://github.com/psi4/psi4/issues/129#issuecomment-124147126:403,Testability,test,tests,403,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126
https://github.com/psi4/psi4/issues/129#issuecomment-124147126:660,Testability,test,testboard,660,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126
https://github.com/psi4/psi4/issues/129#issuecomment-124147126:727,Testability,test,testboard,727,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126
https://github.com/psi4/psi4/issues/129#issuecomment-124147126:794,Testability,test,testboard,794,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126
https://github.com/psi4/psi4/issues/129#issuecomment-157785748:49,Availability,reliab,reliably,49,frac test cast truncated to a couple points that reliably converge across computers via 9439a808a05c48b0ee3c7d319998721bd38e403b. the end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-157785748
https://github.com/psi4/psi4/issues/129#issuecomment-157785748:5,Testability,test,test,5,frac test cast truncated to a couple points that reliably converge across computers via 9439a808a05c48b0ee3c7d319998721bd38e403b. the end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-157785748
https://github.com/psi4/psi4/issues/130#issuecomment-121651466:56,Testability,test,tests,56,"cc54 or cc55? Francesco reported the latter, and my own tests also flag it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121651466
https://github.com/psi4/psi4/issues/130#issuecomment-121651794:8,Testability,test,testboard,8,https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121651794
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:751,Availability,error,error,751,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:366,Integrability,message,message,366,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:532,Integrability,message,message,532,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:653,Integrability,message,message,653,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:740,Integrability,message,message,740,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:801,Integrability,message,message,801,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:849,Integrability,message,message,849,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:468,Security,confidential,confidential,468,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121658832:150,Testability,test,testboard,150,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832
https://github.com/psi4/psi4/issues/130#issuecomment-121981133:34,Availability,error,error,34,"The cdash report indicates a PSIO error with the SO overlap integrals, but I can't reproduce it on any of my systems. The error happened so quickly (0.05 s) for your build, that I suspect the error was due to something other than the CC code (though most of the other test cases passed). Can you try it again? @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981133
https://github.com/psi4/psi4/issues/130#issuecomment-121981133:122,Availability,error,error,122,"The cdash report indicates a PSIO error with the SO overlap integrals, but I can't reproduce it on any of my systems. The error happened so quickly (0.05 s) for your build, that I suspect the error was due to something other than the CC code (though most of the other test cases passed). Can you try it again? @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981133
https://github.com/psi4/psi4/issues/130#issuecomment-121981133:192,Availability,error,error,192,"The cdash report indicates a PSIO error with the SO overlap integrals, but I can't reproduce it on any of my systems. The error happened so quickly (0.05 s) for your build, that I suspect the error was due to something other than the CC code (though most of the other test cases passed). Can you try it again? @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981133
https://github.com/psi4/psi4/issues/130#issuecomment-121981133:268,Testability,test,test,268,"The cdash report indicates a PSIO error with the SO overlap integrals, but I can't reproduce it on any of my systems. The error happened so quickly (0.05 s) for your build, that I suspect the error was due to something other than the CC code (though most of the other test cases passed). Can you try it again? @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981133
https://github.com/psi4/psi4/issues/130#issuecomment-121981549:68,Deployability,release,release-conda,68,"Also, I note that your latest cdash build named LAB-intel15.0.3-mkl-release-conda doesn't show a cc54 crash. Strangeness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981549
https://github.com/psi4/psi4/issues/132#issuecomment-121978883:36,Testability,test,test,36,I believe this is corrected. Please test @fevangelista . Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121978883
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:782,Availability,error,error,782,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:397,Integrability,message,message,397,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:563,Integrability,message,message,563,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:684,Integrability,message,message,684,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:771,Integrability,message,message,771,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:832,Integrability,message,message,832,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:880,Integrability,message,message,880,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:499,Security,confidential,confidential,499,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/132#issuecomment-121991365:197,Testability,test,test,197,"Recompiling, I’ll let you know what I find. On Jul 16, 2015, at 10:48 AM, T. Daniel Crawford <notifications@github.com<mailto:notifications@github.com>> wrote:. I believe this is corrected. Please test @fevangelistahttps://github.com/fevangelista . Thanks!. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/132#issuecomment-121978883. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121991365
https://github.com/psi4/psi4/issues/142#issuecomment-171780349:58,Deployability,install,installed,58,"Great. And it looks like everything in `lib/scripts` gets installed, so no special action needed there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/142#issuecomment-171780349
https://github.com/psi4/psi4/issues/143#issuecomment-121821246:0,Deployability,Update,Updated,0,Updated manual and keyword section in private repo.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/143#issuecomment-121821246
https://github.com/psi4/psi4/issues/144#issuecomment-163827788:246,Availability,avail,available,246,"Maybe:; - Switch out Pople basis fitting bases to appropriate-zeta def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element holes.; - Create another layer of defaulting so that aug-cc-pvdz orbital uses aug-cc-pvdz-ri/jkfit when available (as at present), then def2-tzvp-ri/jkfit (not at present), then the ultimate default def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on supposedly cheap orbital basis sets.; - Disqualify default for 5Z and 6Z basis sets. if aug-cc-pv5/6Z-ri/jkfit aren't defined for a certain element, we've nothing to put in their place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/144#issuecomment-163827788
https://github.com/psi4/psi4/issues/144#issuecomment-163943998:360,Availability,avail,available,360,"Sounds reasonable. On Thursday, December 10, 2015, Lori A. Burns notifications@github.com; wrote:. > Maybe:; > - Switch out Pople basis fitting bases to appropriate-zeta; > def2-*-ri/jkfit, rather than Dunning ri/jkfit, as former has fewer element; > holes.; > - Create another layer of defaulting so that aug-cc-pvdz orbital uses; > aug-cc-pvdz-ri/jkfit when available (as at present), then; > def2-tzvp-ri/jkfit (not at present), then the ultimate default; > def2-qzvpp-ri/jkfit (as at present). This way don't get high AM cost on; > supposedly cheap orbital basis sets.; > - Disqualify default for 5Z and 6Z basis sets. if; > aug-cc-pv5/6Z-ri/jkfit aren't defined for a certain element, we've nothing; > to put in their place.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/144#issuecomment-163827788.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/144#issuecomment-163943998
https://github.com/psi4/psi4/issues/145#issuecomment-122013214:404,Availability,error,error,404,"3N-6 = 30 SALCs. There is no symmetry to exploit, as recognized or not by libmints. Here are the 3 point formulas O(1/h^2):; For diagonal:; [f(1,0) + f(-1,0) - 2f(0,0)]/(h^2); Off-diagonal; [f(1,1)+f(-1,-1)+2f(0,0) -f(1,0) -f(-1,0) -f(0,1) -f(0,-1)]/(2h^2). So the diagonal of the Hessian costs 30*2 = 60.; The off-diagonal costs an additional (29 \* 30 / 2 = 465 entries) times 2 = 870.; If there is an error, it is in libmints symmetry detection - not findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122013214
https://github.com/psi4/psi4/issues/145#issuecomment-122013214:438,Safety,detect,detection,438,"3N-6 = 30 SALCs. There is no symmetry to exploit, as recognized or not by libmints. Here are the 3 point formulas O(1/h^2):; For diagonal:; [f(1,0) + f(-1,0) - 2f(0,0)]/(h^2); Off-diagonal; [f(1,1)+f(-1,-1)+2f(0,0) -f(1,0) -f(-1,0) -f(0,1) -f(0,-1)]/(2h^2). So the diagonal of the Hessian costs 30*2 = 60.; The off-diagonal costs an additional (29 \* 30 / 2 = 465 entries) times 2 = 870.; If there is an error, it is in libmints symmetry detection - not findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122013214
https://github.com/psi4/psi4/issues/145#issuecomment-122027995:3,Deployability,Rolling,Rolling,3,"Hi Rolling,. Thank you very much for the explanation. I have calculated number of perturbed geometries assuming 3-point formulas are used for the Hessian. Therefore the calculated number of 930 appeared to me too large. However, considering the formula used for off-diagonal elements, it is no more a 3-point formula. . For efficient computation of frequencies we need to implement mode=sow for findif of gradients, which would dramatically decrease the cost of frequencies. @loriab @psi-rking",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122027995
https://github.com/psi4/psi4/issues/145#issuecomment-122027995:324,Energy Efficiency,efficient,efficient,324,"Hi Rolling,. Thank you very much for the explanation. I have calculated number of perturbed geometries assuming 3-point formulas are used for the Hessian. Therefore the calculated number of 930 appeared to me too large. However, considering the formula used for off-diagonal elements, it is no more a 3-point formula. . For efficient computation of frequencies we need to implement mode=sow for findif of gradients, which would dramatically decrease the cost of frequencies. @loriab @psi-rking",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122027995
https://github.com/psi4/psi4/pull/147#issuecomment-122058381:10,Deployability,update,update,10,"With this update, dfocc.rst should also be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/147#issuecomment-122058381
https://github.com/psi4/psi4/issues/149#issuecomment-122461767:31,Availability,down,down,31,"Thanks, @ssh2. @tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by https://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122461767
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:281,Availability,down,down,281,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:977,Availability,error,error,977,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:592,Integrability,message,message,592,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:758,Integrability,message,message,758,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:879,Integrability,message,message,879,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:966,Integrability,message,message,966,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:1027,Integrability,message,message,1027,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:1075,Integrability,message,message,1075,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:694,Security,confidential,confidential,694,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122476853:55,Testability,test,test,55,"Lori, is there a way to link examples in the manual to test case input files?. Francesco. On Jul 17, 2015, at 8:50 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Thanks, @ssh2https://github.com/ssh2. @tmpchemhttps://github.com/tmpchem hunted down all the malfunctioning manual entries this week. Two bullets fixed by psi4/psi4@e1bae5bhttps://github.com/psi4/psi4/commit/e1bae5b028c15aef889480978e4f70d247f8821e. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122461767. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122476853
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:1018,Availability,error,error,1018,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:633,Integrability,message,message,633,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:799,Integrability,message,message,799,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:920,Integrability,message,message,920,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:1007,Integrability,message,message,1007,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:1068,Integrability,message,message,1068,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:1116,Integrability,message,message,1116,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122478325:735,Security,confidential,confidential,735,"Great and thanks!. Francesco. On Jul 17, 2015, at 11:04 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. Yes, if you look at the source of http://psicode.org/psi4manual/master/_sources/tutorial.txt , there's statements like .. literalinclude:: /../../../../samples/tu6-cp-ne2/input.dat that directly include sample files in the documentation. It can also be trimmed like so:. .. literalinclude:: /../../../../lib/python/p4const/physconst.py; :lines: 25-. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/149#issuecomment-122477178. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122478325
https://github.com/psi4/psi4/issues/149#issuecomment-122484876:248,Availability,avail,available,248,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876
https://github.com/psi4/psi4/issues/149#issuecomment-122484876:58,Energy Efficiency,energy,energy,58,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876
https://github.com/psi4/psi4/issues/149#issuecomment-122484876:152,Energy Efficiency,energy,energy,152,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876
https://github.com/psi4/psi4/issues/149#issuecomment-122484876:168,Energy Efficiency,energy,energy,168,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876
https://github.com/psi4/psi4/issues/149#issuecomment-122484876:423,Energy Efficiency,energy,energy,423,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876
https://github.com/psi4/psi4/issues/149#issuecomment-122484876:440,Testability,test,tests,440,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876
https://github.com/psi4/psi4/issues/149#issuecomment-124904274:194,Availability,error,error,194,"Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:. molecule {; Mg; }; set basis aug-cc-pvdz-dk; set relativistic dkh; energy('scf'). ---. I got this error output:; Traceback (most recent call last):; File ""<string>"", line 20, in <module>; RuntimeError: DKH is not a valid choice",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124904274
https://github.com/psi4/psi4/issues/149#issuecomment-124904274:163,Energy Efficiency,energy,energy,163,"Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:. molecule {; Mg; }; set basis aug-cc-pvdz-dk; set relativistic dkh; energy('scf'). ---. I got this error output:; Traceback (most recent call last):; File ""<string>"", line 20, in <module>; RuntimeError: DKH is not a valid choice",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124904274
https://github.com/psi4/psi4/issues/149#issuecomment-124907212:371,Availability,error,error,371,"Did you compile the code with a Fortran compiler? One is required for using DKH. > On Jul 25, 2015, at 6:07 PM, Hassenky notifications@github.com wrote:; > ; > Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:; > ; > molecule {; > Mg; > }; > set basis aug-cc-pvdz-dk; > set relativistic dkh; > energy('scf'); > ; > I got this error output:; > Traceback (most recent call last):; > File """", line 20, in ; > RuntimeError: DKH is not a valid choice; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124907212
https://github.com/psi4/psi4/issues/149#issuecomment-124907212:339,Energy Efficiency,energy,energy,339,"Did you compile the code with a Fortran compiler? One is required for using DKH. > On Jul 25, 2015, at 6:07 PM, Hassenky notifications@github.com wrote:; > ; > Are there other ways to deal with Douglas-Kroll-Hess (DKH) Hamiltonian? When running dk input:; > ; > molecule {; > Mg; > }; > set basis aug-cc-pvdz-dk; > set relativistic dkh; > energy('scf'); > ; > I got this error output:; > Traceback (most recent call last):; > File """", line 20, in ; > RuntimeError: DKH is not a valid choice; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124907212
https://github.com/psi4/psi4/issues/149#issuecomment-124953379:2,Deployability,install,installed,2,I installed psi4 from miniconda.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124953379
https://github.com/psi4/psi4/issues/149#issuecomment-124981398:314,Deployability,install,installed,314,"True, due to a recently noticed oddity of the cmake build system, I can't build dkh w/o also building pcmsolver and that's not quite ready for public use. If you'd like dkh, I can see about including it. . Lori. Sent from my iPhone. > On Jul 26, 2015, at 2:40 AM, Hassenky notifications@github.com wrote:; > ; > I installed psi4 from miniconda.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124981398
https://github.com/psi4/psi4/issues/149#issuecomment-125218069:215,Performance,perform,performed,215,"Thanks kannon92 . I'm actually employing x2c. However, all of my multi-reference (CASPT2, NEVPT2) and DFT results were done with DKH correction. Therefore I would like to use DKH correction for CCSD(T) calculations performed by PSI4 (easy to get scf convergence in comparison to others). Of course the report will be ....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-125218069
https://github.com/psi4/psi4/issues/150#issuecomment-123019591:992,Deployability,install,installation,992,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591
https://github.com/psi4/psi4/issues/150#issuecomment-123019591:1199,Integrability,interface,interfaces,1199,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591
https://github.com/psi4/psi4/issues/150#issuecomment-123019591:21,Safety,detect,detection,21,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591
https://github.com/psi4/psi4/issues/150#issuecomment-123019591:92,Safety,detect,detect,92,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591
https://github.com/psi4/psi4/issues/150#issuecomment-123019591:978,Safety,detect,detect,978,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591
https://github.com/psi4/psi4/issues/150#issuecomment-123084638:35,Testability,test,test,35,"I can try it out on ubuntu. A good test will also to run it actually on; debian/sid. Perhaps we can ask Michael?. 2015-07-20 17:37 GMT-04:00 Lori A. Burns notifications@github.com:. > Good point! I made commit 7e4889b; > https://github.com/psi4/psi4public/commit/7e4889b924e67be11c5f7b5d42c85673a90c5c17; > . If CMake pastes together a PATHS and PATH_SUFFIX and NAMES, it should; > get the Debian locations. If you should happen to try it out, let me know.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150#issuecomment-123051328. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123084638
https://github.com/psi4/psi4/issues/150#issuecomment-221836576:13,Testability,test,test,13,I can try to test PR #388 on top of 1.0rc on Debian this weekend along with the newly uploaded v1.7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-221836576
https://github.com/psi4/psi4/issues/150#issuecomment-223864136:208,Modifiability,plugin,plugin,208,"Only a year after the ticket, and I've finally reviewed the keywords. @SebWouters, @dgasmith, @kannon92, please find below an options mapping between the two versions of chemps2 embedded in psi4, the chemps2 plugin for psi4, and the chemps2 executable. Column [E] is what I would have named the options had this been an intrinsic psi4 module. My current philosophy wrt options of add-on modules in psi4 is to leave them exactly as they are in the add-on program (so that users of e.g., CheMPS2 in psi4 and pyscf control CheMPS2 with exactly the same set of options) then let a layer above the psi4 driver handle mappings of identical-intent keywords into the psi4-consistent set (so that users of psi4 can `set detci diis true` and `set dmrg diis false`). So, I propose that we go entirely with [D] if that's the official CheMPS2 options set or entirely with [E] as those are the psi4-like versions. I don't see much point in maintaining _three_ options sets. Thoughts?. ``` text; Various of the dmrg options map nicely in meaning onto psi4's; e/d/r_convergence options. But in dmrg, e/r_convergence must be; arrays of floats, not floats, so they need the dmrg_ prefix for; differentiation. So, d_convergence may as well match with dmrg_. ------------- ------------- --------------- ----------- --------------; [A] [B] [C] [D] [E]; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like; ------------- ------------- --------------- ----------- --------------; --> GLOBAL frozen_docc frozen_docc nocc frozen_docc; --> GLOBAL active active nact active; dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep/group/symmetry wfn_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states ArrayType; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence ArrayType; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps ArrayT",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223864136
https://github.com/psi4/psi4/issues/150#issuecomment-223864136:1368,Modifiability,plugin,plugins,1368,-----------; [A] [B] [C] [D] [E]; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like; ------------- ------------- --------------- ----------- --------------; --> GLOBAL frozen_docc frozen_docc nocc frozen_docc; --> GLOBAL active active nact active; dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep/group/symmetry wfn_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states ArrayType; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence ArrayType; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps ArrayType; --> dmrg_noiseprefactors dmrg_noiseprefactors sweep_noise_prefac dmrg_noise_magnitude ArrayType; (none) dmrg_dvdson_rtol dmrg_dvdson_rtol sweep_dvdson_rtol dmrg_r_convergence ArrayType; --> dmrg_print_corr dmrg_print_corr print_corr dmrg_corr_print; --> dmrg_chkpt dmrg_chkpt dmrg_mps_write; --> dmrg_store_unit dmrg_store_unit dmrg_unitary_write; --> dmrg_do_diis dmrg_do_diis dmrg_diis; --> dmrg_diis_branch dmrg_diis_branch scf_diis_thr dmrg_diis_start_convergence; --> dmrg_store_diis dmrg_store_diis dmrg_diis_write; dmrg_maxiter dmrg_max_iter dmrg_max_iter scf_max_iter dmrg_maxiter; --> dmrg_which_root dmrg_which_root excitation (offset-1) dmrg_follow_root; dmrg_avg_states dmrg_state_avg dmrg_state_avg scf_state_avg dmrg_avg_states; --> dmrg_active_space dmrg_active_space scf_active_space dmrg_scf_orbs; --> dmrg_loc_random dmrg_loc_random dmrg_local_init; (none) dmrg_caspt2 dmrg_caspt2 caspt2_calc dmrg_caspt2; (none) dmrg_caspt2_orb dmrg_caspt2_orb caspt2_orbs dmrg_caspt2_orbs; (none) dmrg_ipea dmrg_ipea caspt2_ipea dmrg_caspt2_ipea; (none) dmrg_imag_shift dmrg_imag_shift caspt2_imag dmrg_imag_level_shift; (none) dmrg_molden dmrg_molden dmrg_molden_write; (none) dmrg_density_ao dmrg_density_ao dmrg_opdm_ao_print. dumpfilename (fcidump) fcidump; nelectrons; nvir; caspt2_ch,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223864136
https://github.com/psi4/psi4/issues/150#issuecomment-223876187:151,Performance,optimiz,optimized,151,"I have no problem with this, but there should be more distinction in the nocc setting. For example, frozen_docc in CHEMPS2 means that the orbitals are optimized in the CASSCF procedure and are correlated in CASPT2. This corresponds to restricted_docc through psi4 lingo. frozen_docc (in psi4) typically means that the orbitals are ""frozen"" and are taken to be RHF orbitals. . In all, I would say that CHEMPS2 should use nocc -> restricted_docc rather than frozen_core.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223876187
https://github.com/psi4/psi4/issues/150#issuecomment-228951911:231,Modifiability,plugin,plugins,231,Switch from B/C --> F imminent. ```; ------------- ------------- --------------- ----------- -------------- -----------------; [A] [B] [C] [D] [E] [F]; Apr2015–Apr2016 May–Jun2016 late Jun 2016; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like psi4 1.0 dmrg 1.7; ------------- ------------- --------------- ----------- -------------- -----------------; --> GLOBAL frozen_docc frozen_docc nocc restricted_docc (edit) GLOBAL restricted_docc; --> GLOBAL active active nact active GLOBAL active (n/c); dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp dmrg_multiplicity; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep (edit) wfn_irrep dmrg_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states [] dmrg_sweep_states; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence [] dmrg_sweep_energy_conv; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence dmrg_scf_grad_thr; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps [] dmrg_sweep_max_sweeps; --> dmrg_noiseprefactors dmrg_noiseprefactors sweep_noise_prefac dmrg_noise_magnitude [] dmrg_sweep_noise_prefac; (none) dmrg_dvdson_rtol dmrg_dvdson_rtol sweep_dvdson_rtol dmrg_r_convergence [] dmrg_sweep_dvdson_rtol; --> dmrg_print_corr dmrg_print_corr print_corr dmrg_corr_print dmrg_print_corr (n/c); --> dmrg_chkpt dmrg_chkpt dmrg_mps_write dmrg_mps_write; --> dmrg_store_unit dmrg_store_unit dmrg_unitary_write dmrg_unitary_write; --> dmrg_do_diis dmrg_do_diis dmrg_diis dmrg_diis; --> dmrg_diis_branch dmrg_diis_branch scf_diis_thr dmrg_diis_start_convergence dmrg_scf_diis_thr; --> dmrg_store_diis dmrg_store_diis dmrg_diis_write dmrg_diis_write; dmrg_maxiter dmrg_max_iter dmrg_max_iter scf_max_iter dmrg_maxiter dmrg_scf_max_iter; --> dmrg_which_root dmrg_which_root excitation (offset-1) dmrg_follow_root dmrg_excitation; dmrg_avg_states dmrg_state_avg dmrg_state_avg scf_state_avg dmrg_avg_states dmrg_scf_state_avg; --> dmrg_active_space dmrg_activ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-228951911
https://github.com/psi4/psi4/issues/151#issuecomment-122894706:240,Usability,simpl,simple,240,"There's also a lingering plan (perhaps for later this summer, when a few; other projects are finished) to write a GPLv2-licensed periodic HF integral; C-library in the Chan group: https://github.com/SebWouters/PauliNG.; The idea is to be a simple and lightweight library to provide integrals for; post-HF calculations in periodic systems. Currently, we use mainly VASP; here by fitting Gaussian ERI with a quadrature of plane waves. 2015-07-20 9:54 GMT-04:00 Ryan Richard notifications@github.com:. > It's on my todo list, but a long way from realization so it's not going to; > happen anytime soon. VASP and Crystal are the usual gotos for this sort of; > thing.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/151#issuecomment-122892690. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/151#issuecomment-122894706
https://github.com/psi4/psi4/issues/151#issuecomment-122900049:27,Security,access,access,27,Unfortunately I don't have access to VASP/CRYSTAL as I am not associated with any institution/company... I am using Octopus for periodic systems now but considering alternatives.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/151#issuecomment-122900049
https://github.com/psi4/psi4/issues/153#issuecomment-124775223:110,Availability,error,error,110,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223
https://github.com/psi4/psi4/issues/153#issuecomment-124775223:34,Performance,optimiz,optimization,34,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223
https://github.com/psi4/psi4/issues/153#issuecomment-124775223:346,Performance,optimiz,optimization,346,"A few preliminaries:; 1. Does the optimization succeed if you don't use finite differences?; 2. Does the same error occur if you don't freeze the com and prevent rotation? I don't know if the automatically generated displacement coordinates make sense with these restrictions applied.; 3. What is at the bottom of the output file, e.g., were any optimization steps taken?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124775223
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:240,Deployability,update,update,240,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:324,Deployability,update,update,324,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:135,Energy Efficiency,Energy,Energy,135,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:468,Energy Efficiency,energy,energy,468,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:53,Performance,optimiz,optimization,53,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:224,Performance,Perform,Performing,224,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-124906121:350,Performance,optimiz,optimization,350,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121
https://github.com/psi4/psi4/issues/153#issuecomment-126177998:2692,Availability,error,error,2692,"------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51141760 -1.84e-02 1.84e-02 4.83e-03 o 2.71e-01 9.38e-02 o ~; 16 -609.46604175 4.54e-02 6.62e-02 1.90e-02 o 1.47e-01 5.38e-02 o ~; 17 -609.50752379 -4.15e-02 3.93e-02 8.01e-03 o 1.44e-01 4.93e-02 o ~; 18 -609.50243791 5.09e-03 4.01e-02 1.12e-02 o 2.42e-01 7.18e-02 o ~; 19 -609.48911958 1.33e-02 7.26e-02 1.74e-02 o 1.09e-01 4.09e-02 o ~; 20 -609.51528318 -2.62e-02 9.87e-03 2.56e-03 o 1.78e-01 5.73e-02 o ~; 21 -609.51351330 1.77e-03 1.38e-02 3.38e-03 o 1.74e-01 4.56e-02 o ~; 22 -609.51620753 -2.69e-03 3.27e-03 1.32e-03 o 5.00e-02 1.16e-02 o ~; 23 -609.51663430 -4.27e-04 2.26e-03 7.58e-04 o 1.86e-01 2.83e-02 o ~; 24 -609.51722373 -5.89e-04 2.81e-03 9.14e-04 o 2.33e-01 3.45e-02 o ~; ```. error is same as OP reports. Below shows starting (L) and final (R) geometries. <img width=""1357"" alt=""screen shot 2015-07-29 at 3 55 39 pm"" src=""https://cloud.githubusercontent.com/assets/2314730/8975665/110d0ab0-3650-11e5-9c6f-5358f4f84105.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998
https://github.com/psi4/psi4/issues/153#issuecomment-126177998:711,Energy Efficiency,Energy,Energy,711,"Here's same job with more ""normal"" input. ```; memory 2500 mb. molecule struct {; units angstrom; 0 1; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set basis 6-31G*; optimize('scf'); ```. and output. ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998
https://github.com/psi4/psi4/issues/153#issuecomment-126177998:564,Performance,optimiz,optimize,564,"Here's same job with more ""normal"" input. ```; memory 2500 mb. molecule struct {; units angstrom; 0 1; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set basis 6-31G*; optimize('scf'); ```. and output. ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -609.21574955 -6.09e+02 4.65e-02 1.39e-02 o 1.70e-01 5.38e-02 o ~; 2 -609.24416188 -2.84e-02 1.95e-02 4.94e-03 o 3.67e-01 6.90e-02 o ~; 3 -609.26373458 -1.96e-02 4.03e-02 1.34e-02 o 4.00e-01 1.12e-01 o ~; 4 -609.29180689 -2.81e-02 4.13e-02 1.19e-02 o 3.28e-01 7.61e-02 o ~; 5 -609.31034726 -1.85e-02 6.99e-02 1.39e-02 o 3.38e-01 6.27e-02 o ~; 6 -609.33098015 -2.06e-02 4.29e-02 1.03e-02 o 4.77e-01 7.89e-02 o ~; 7 -609.36524125 -3.43e-02 4.11e-02 7.82e-03 o 7.04e-01 1.05e-01 o ~; 8 -609.41234162 -4.71e-02 4.58e-02 8.89e-03 o 5.68e-01 1.12e-01 o ~; 9 -609.44676585 -3.44e-02 4.83e-02 1.17e-02 o 6.15e-01 9.91e-02 o ~; 10 -609.49528129 -4.85e-02 4.44e-02 1.07e-02 o 4.17e-01 1.12e-01 o ~; 11 -609.37833924 1.17e-01 1.22e-01 3.06e-02 o 2.26e-01 6.51e-02 o ~; 12 -609.49194948 -1.14e-01 6.74e-02 1.50e-02 o 2.98e-01 6.15e-02 o ~; 13 -609.50472895 -1.28e-02 4.41e-02 7.46e-03 o 6.15e-01 9.60e-02 o ~; 14 -609.49299554 1.17e-02 5.21e-02 1.31e-02 o 4.25e-01 7.90e-02 o ~; 15 -609.51",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126177998
https://github.com/psi4/psi4/issues/153#issuecomment-126509903:64,Availability,error,error,64,"It looks like an interesting optimization problem, and a memory error. I; will take a detailed look at it when I get back from vacation next week. On Thu, Jul 30, 2015 at 8:11 AM, Lori A. Burns notifications@github.com; wrote:. > Yes, I agree it looks messed up. Added the further info in last post for; > @psi-rking https://github.com/psi-rking; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-126342063.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126509903
https://github.com/psi4/psi4/issues/153#issuecomment-126509903:29,Performance,optimiz,optimization,29,"It looks like an interesting optimization problem, and a memory error. I; will take a detailed look at it when I get back from vacation next week. On Thu, Jul 30, 2015 at 8:11 AM, Lori A. Burns notifications@github.com; wrote:. > Yes, I agree it looks messed up. Added the further info in last post for; > @psi-rking https://github.com/psi-rking; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-126342063.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-126509903
https://github.com/psi4/psi4/issues/153#issuecomment-127808983:223,Availability,redundant,redundant,223,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983
https://github.com/psi4/psi4/issues/153#issuecomment-127808983:284,Performance,optimiz,optimizations,284,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983
https://github.com/psi4/psi4/issues/153#issuecomment-127808983:416,Performance,optimiz,optimization,416,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983
https://github.com/psi4/psi4/issues/153#issuecomment-127808983:12,Safety,abort,aborting,12,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983
https://github.com/psi4/psi4/issues/153#issuecomment-127808983:223,Safety,redund,redundant,223,"optking was aborting prematurely. I just pushed the fix to the problem. For this case I found consecutive_backsteps = 2 [or more], as well as dynamic_level = 1 to now be helpful. (Don't use both at once as that is somewhat redundant.) Sometime I will type up some tips on problematic optimizations. But now optking will at least move you substantially closer to the minimum. Though one may always have to restart an optimization, these options will minimize the manual effort necessary.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-127808983
https://github.com/psi4/psi4/issues/153#issuecomment-128100571:409,Availability,redundant,redundant,409,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571
https://github.com/psi4/psi4/issues/153#issuecomment-128100571:57,Performance,optimiz,optimizations,57,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571
https://github.com/psi4/psi4/issues/153#issuecomment-128100571:473,Performance,optimiz,optimizations,473,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571
https://github.com/psi4/psi4/issues/153#issuecomment-128100571:608,Performance,optimiz,optimization,608,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571
https://github.com/psi4/psi4/issues/153#issuecomment-128100571:189,Safety,abort,aborting,189,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571
https://github.com/psi4/psi4/issues/153#issuecomment-128100571:409,Safety,redund,redundant,409,"Hi Rollin,. Yes, some tips in the manual about difficult optimizations would be helpful!. David. On Tue, Aug 4, 2015 at 9:02 PM, Rollin King notifications@github.com; wrote:. > optking was aborting prematurely. I just pushed the fix to the problem.; > For this case I found consecutive_backsteps = 2 [or more], as well as; > dynamic_level = 1 to now be helpful. (Don't use both at once as that is; > somewhat redundant.) Sometime I will type up some tips on problematic; > optimizations. But now optking will at least move you substantially closer; > to the minimum. Though one may always have to restart an optimization,; > these options will minimize the manual effort necessary.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/153#issuecomment-127808983.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-128100571
https://github.com/psi4/psi4/issues/154#issuecomment-125036757:124,Availability,avail,available,124,"Sorry, I'll fix it in a couple days. For the moment, install an older version from before lastfriday. You can get a list of available versions on the anaconda.org/psi4 and directions for installing a particular version at the docs page.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-125036757
https://github.com/psi4/psi4/issues/154#issuecomment-125036757:53,Deployability,install,install,53,"Sorry, I'll fix it in a couple days. For the moment, install an older version from before lastfriday. You can get a list of available versions on the anaconda.org/psi4 and directions for installing a particular version at the docs page.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-125036757
https://github.com/psi4/psi4/issues/154#issuecomment-125036757:187,Deployability,install,installing,187,"Sorry, I'll fix it in a couple days. For the moment, install an older version from before lastfriday. You can get a list of available versions on the anaconda.org/psi4 and directions for installing a particular version at the docs page.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-125036757
https://github.com/psi4/psi4/issues/154#issuecomment-126179884:8,Availability,error,error,8,This is error after updating to PSi4 278:; error while loading shared libraries: libifport.so.5: cannot open shared object file: No such file or directory. But I think it can be overcome by adding intel lib into PATH. Thank you Loriab.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126179884
https://github.com/psi4/psi4/issues/154#issuecomment-126179884:43,Availability,error,error,43,This is error after updating to PSi4 278:; error while loading shared libraries: libifport.so.5: cannot open shared object file: No such file or directory. But I think it can be overcome by adding intel lib into PATH. Thank you Loriab.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126179884
https://github.com/psi4/psi4/issues/154#issuecomment-126179884:55,Performance,load,loading,55,This is error after updating to PSi4 278:; error while loading shared libraries: libifport.so.5: cannot open shared object file: No such file or directory. But I think it can be overcome by adding intel lib into PATH. Thank you Loriab.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126179884
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:178,Availability,avail,available,178,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:232,Availability,down,downloaded,232,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:378,Availability,down,download,378,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:438,Availability,error,error,438,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:793,Availability,error,errors,793,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:351,Deployability,install,install,351,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:391,Deployability,install,installation,391,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126180494:655,Integrability,depend,dependency,655,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494
https://github.com/psi4/psi4/issues/154#issuecomment-126183761:134,Availability,error,error,134,I am adding intel ib into the PATH and it is running flawlessly right now. I am checking dkh running and will report here. //////This error happens after installing a fresh PSI4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126183761
https://github.com/psi4/psi4/issues/154#issuecomment-126183761:154,Deployability,install,installing,154,I am adding intel ib into the PATH and it is running flawlessly right now. I am checking dkh running and will report here. //////This error happens after installing a fresh PSI4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126183761
https://github.com/psi4/psi4/issues/154#issuecomment-126185144:12,Testability,test,test,12,"For the dkh test in sample directory, It is fine. So, it is better if users set environment including intel lib of compiler themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126185144
https://github.com/psi4/psi4/issues/154#issuecomment-126863294:61,Availability,down,downloading,61,"As of 0.2.287, conda binary is building chemps2 and properly downloading dependency hdf5 from defaults and gsl from copy of asmeurer's into psi4 channel. As of 0.2.291 (42175a9cc2a2ba082c33a676c0bc518125f5f445), conda binary is building dkh and properly linking _static_ Fortran libraries so no user PATH manipulations necessary. Checked, but please report if ever otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126863294
https://github.com/psi4/psi4/issues/154#issuecomment-126863294:73,Integrability,depend,dependency,73,"As of 0.2.287, conda binary is building chemps2 and properly downloading dependency hdf5 from defaults and gsl from copy of asmeurer's into psi4 channel. As of 0.2.291 (42175a9cc2a2ba082c33a676c0bc518125f5f445), conda binary is building dkh and properly linking _static_ Fortran libraries so no user PATH manipulations necessary. Checked, but please report if ever otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126863294
https://github.com/psi4/psi4/issues/155#issuecomment-125475542:7,Testability,test,test,7,"A good test case might be the Cadmium-imidazole complex in; http://www.chem.duke.edu/~xqhu/geoms.tar.gz; in the 3-21G basis which fails to converge with plain DIIS, see; http://dx.doi.org/10.1063/1.3304922",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-125475542
https://github.com/psi4/psi4/issues/155#issuecomment-125707354:39,Testability,test,test,39,"Daniel, I have some non-converging UHF test cases for DIIS when your code; is ready to handle them. 2015-07-28 2:59 GMT-04:00 Susi Lehtola notifications@github.com:. > A good test case might be the Cadmium-imidazole complex in; > http://www.chem.duke.edu/~xqhu/geoms.tar.gz; > in the 3-21G basis which fails to converge with plain DIIS, see; > http://dx.doi.org/10.1063/1.3304922; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/155#issuecomment-125475542.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-125707354
https://github.com/psi4/psi4/issues/155#issuecomment-125707354:175,Testability,test,test,175,"Daniel, I have some non-converging UHF test cases for DIIS when your code; is ready to handle them. 2015-07-28 2:59 GMT-04:00 Susi Lehtola notifications@github.com:. > A good test case might be the Cadmium-imidazole complex in; > http://www.chem.duke.edu/~xqhu/geoms.tar.gz; > in the 3-21G basis which fails to converge with plain DIIS, see; > http://dx.doi.org/10.1063/1.3304922; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/155#issuecomment-125475542.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-125707354
https://github.com/psi4/psi4/issues/155#issuecomment-126317935:45,Availability,error,errors,45,"It's possible recent changes have introduced errors with the v15 Intel compilers. See, e.g.,. https://testboard.org/cdash/buildSummary.php?buildid=24529. The overall dashboard is here, and you can see that all instances of the v15 builds have started dying in libscfsolver/hf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126317935
https://github.com/psi4/psi4/issues/155#issuecomment-126317935:102,Testability,test,testboard,102,"It's possible recent changes have introduced errors with the v15 Intel compilers. See, e.g.,. https://testboard.org/cdash/buildSummary.php?buildid=24529. The overall dashboard is here, and you can see that all instances of the v15 builds have started dying in libscfsolver/hf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126317935
https://github.com/psi4/psi4/issues/155#issuecomment-126337647:378,Testability,test,test,378,@lothian I've determined on my boxes where the compile failed it due to Intel compilers still use my gcc headers for the standard library. My gcc compilers on that box are a little dated (version 4.3.4) which do not provide the C++11 std::to_string functions. Is this the case for you?. I have some implementations of this function in one of our libraries just need to put in a test whether to include them or not.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126337647
https://github.com/psi4/psi4/issues/155#issuecomment-126341283:30,Integrability,wrap,wrappers,30,Which is essentially what the wrappers I wrote do.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126341283
https://github.com/psi4/psi4/issues/155#issuecomment-184815478:51,Deployability,update,update,51,This is now implemented with the wavefunction_pass update. Please post any issues that you may have with SOSCF in a new issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-184815478
https://github.com/psi4/psi4/issues/157#issuecomment-128487955:223,Availability,error,error,223,"So, no look running it with GDB. ; I did find that there seems to be a problem with fread for this system. If fread is successful, it should return the size of the type that is read, but it is returning a value of 0. ; The error is happening on the loop that is started on line 720 of lreri.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/157#issuecomment-128487955
https://github.com/psi4/psi4/issues/157#issuecomment-128492830:88,Integrability,message,message,88,"FYI you can link to the actual code line by clicking on it and pasting the URL into the message (I then got fancy and renamed the link, so you don't see some horrendous url).... [lreri.cc:720](https://github.com/psi4/psi4public/blob/master/src/lib/libthce/lreri.cc#L720). and as you can see by following said link, line 720 is a blank line above a constructor definition...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/157#issuecomment-128492830
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:396,Availability,ERROR,ERROR,396,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:429,Availability,ERROR,ERROR,429,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:462,Availability,ERROR,ERROR,462,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:495,Availability,ERROR,ERROR,495,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:528,Availability,ERROR,ERROR,528,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:561,Availability,ERROR,ERROR,561,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:594,Availability,ERROR,ERROR,594,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:627,Availability,ERROR,ERROR,627,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:660,Availability,ERROR,ERROR,660,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:693,Availability,ERROR,ERROR,693,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:726,Availability,ERROR,ERROR,726,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:759,Availability,ERROR,ERROR,759,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:792,Availability,ERROR,ERROR,792,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:825,Availability,ERROR,ERROR,825,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:858,Availability,ERROR,ERROR,858,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:891,Availability,ERROR,ERROR,891,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:924,Availability,ERROR,ERROR,924,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:957,Availability,ERROR,ERROR,957,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:990,Availability,ERROR,ERROR,990,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:1023,Availability,ERROR,ERROR,1023,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:1056,Availability,ERROR,ERROR,1056,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:1089,Availability,ERROR,ERROR,1089,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:1122,Availability,ERROR,ERROR,1122,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:1155,Availability,ERROR,ERROR,1155,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:1188,Availability,ERROR,ERROR,1188,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129556718:62,Energy Efficiency,energy,energy,62,"I find it troubling that on my computer the nuclear repulsion energy is ""inf"":. ```; Running in c1 symmetry. Rotational constants: A = 0.00468 B = 0.00339 C = 0.00276 [cm^-1]; Rotational constants: A = 140.36411 B = 101.76200 C = 82.71015 [MHz]; Nuclear repulsion = inf; ```. Looking at your input I see duplicated atoms. I've modified my local copy of Psi4 to report the duplicated atoms:. ```; ERROR: Atom 51 near to atom 26.; ERROR: Atom 52 near to atom 27.; ERROR: Atom 53 near to atom 28.; ERROR: Atom 54 near to atom 29.; ERROR: Atom 55 near to atom 30.; ERROR: Atom 56 near to atom 31.; ERROR: Atom 57 near to atom 32.; ERROR: Atom 58 near to atom 33.; ERROR: Atom 59 near to atom 34.; ERROR: Atom 60 near to atom 35.; ERROR: Atom 61 near to atom 36.; ERROR: Atom 62 near to atom 37.; ERROR: Atom 63 near to atom 38.; ERROR: Atom 64 near to atom 39.; ERROR: Atom 65 near to atom 40.; ERROR: Atom 66 near to atom 41.; ERROR: Atom 67 near to atom 42.; ERROR: Atom 68 near to atom 43.; ERROR: Atom 69 near to atom 44.; ERROR: Atom 70 near to atom 45.; ERROR: Atom 71 near to atom 46.; ERROR: Atom 72 near to atom 47.; ERROR: Atom 73 near to atom 48.; ERROR: Atom 74 near to atom 49.; ERROR: Atom 75 near to atom 50.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129556718
https://github.com/psi4/psi4/issues/158#issuecomment-129559902:45,Availability,error,error,45,"Yes, you're correct. Turns out I made a copy error that added duplicates of lines 26-50 at the end of the file. Thank you, sorry for the waste in time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/158#issuecomment-129559902
https://github.com/psi4/psi4/pull/160#issuecomment-130013400:70,Availability,error,error,70,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400
https://github.com/psi4/psi4/pull/160#issuecomment-130013400:286,Energy Efficiency,energy,energy,286,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400
https://github.com/psi4/psi4/pull/160#issuecomment-130013400:306,Energy Efficiency,energy,energy,306,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400
https://github.com/psi4/psi4/pull/160#issuecomment-130013400:9,Testability,test,tested,9,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400
https://github.com/psi4/psi4/pull/160#issuecomment-130014713:49,Availability,down,down,49,I saw one like that before. I'll try to track it down. I haven't tested this PR against py2 though. Do you have any idea if any custom from_python typemaps / convereters are registered currently registered?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130014713
https://github.com/psi4/psi4/pull/160#issuecomment-130014713:65,Testability,test,tested,65,I saw one like that before. I'll try to track it down. I haven't tested this PR against py2 though. Do you have any idea if any custom from_python typemaps / convereters are registered currently registered?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130014713
https://github.com/psi4/psi4/pull/160#issuecomment-130114755:45,Testability,test,tests,45,@rmcgibbo Looks like that fixed it. Once the tests finish on my box I'll merge in the changes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130114755
https://github.com/psi4/psi4/pull/160#issuecomment-130115325:26,Availability,failure,failures,26,There might still be more failures. I was seeing an infinite loop somewhere with a `__getattribute__` recursively calling itself in `libmintsmolecule.py` I think.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130115325
https://github.com/psi4/psi4/pull/160#issuecomment-130115735:27,Availability,failure,failures,27,"Okay, I'll report back any failures I have.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130115735
https://github.com/psi4/psi4/pull/160#issuecomment-130116000:258,Usability,clear,clear,258,"I'd bet that's the dratted feature that let's you set a molecule w/o fully specifying it. Enables `molecule mol {He 0 0 0\nHe 0 0 x}\n mol.x = 2.0`. It's set up to closely mimic same in libmints. Makes qcdb.Molecule un-pickleable. Basically, known issue, no clear remedy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130116000
https://github.com/psi4/psi4/pull/160#issuecomment-130281544:4,Testability,test,tests,4,All tests (except the normal failing ones) has passed on my box with Python2. I'm going to accept the pull request.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130281544
https://github.com/psi4/psi4/issues/161#issuecomment-130114938:117,Modifiability,config,configure,117,"Are you building with pcmsolver on? I think @robertodr will have to answer the why in your link. I think most people configure through the setup script, not with cmake directly. With cmake directly and without pcmsolver, https://github.com/psi4/psi4meta/blob/master/conda-recipies/psi4/build.sh has been working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130114938
https://github.com/psi4/psi4/issues/161#issuecomment-130116528:280,Modifiability,config,configured,280,"Hmm, okay. Not building with pcmsolver. I'll trying using the setup script, if that's the standard flow. I did look a lot at your conda recipe, and that's part of what got me confused. I think it has to do with caching of CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT when cmake is configured multiple times, but idk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130116528
https://github.com/psi4/psi4/issues/161#issuecomment-130117260:130,Modifiability,config,configure,130,"Ah, the conda recipe may not be catching the problem if involving caching since always invoked fresh. Yes, at least try a `setup` configure and look at https://github.com/psi4/psi4public/wiki/8_FAQ_Contents#how-to-see-what-setup-and-cmake-commands-are-active-for-the-object-directory to see if it can help debug your direct cmake build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130117260
https://github.com/psi4/psi4/issues/161#issuecomment-130121250:125,Modifiability,variab,variable,125,"Also, if you run `setup`, then `cd obj; make`, but realize something was set wrong (e.g. the path to libpython.so, the cmake variable `PYTHON_LIBRARY`), and then modify within cmake (`ccmake ..` and change a setting, hit `g` to regenerate), the build system doesn't seem to realize that nothing has changed and skip the appropriate stuff. I just did this, and we're rebuilding all the libint files :(",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130121250
https://github.com/psi4/psi4/issues/161#issuecomment-130123186:178,Availability,down,down,178,"That's using `cmake` beyond my experience, as I blow away the objdir if changing cmake variables. @robertodr will have to comment if what you describe is intended behavior. Dial down angular momentum to 4 if you're rebuilding a lot. My thanks to whoever, years ago, fixed the parallel integrals build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130123186
https://github.com/psi4/psi4/issues/161#issuecomment-130123186:87,Modifiability,variab,variables,87,"That's using `cmake` beyond my experience, as I blow away the objdir if changing cmake variables. @robertodr will have to comment if what you describe is intended behavior. Dial down angular momentum to 4 if you're rebuilding a lot. My thanks to whoever, years ago, fixed the parallel integrals build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130123186
https://github.com/psi4/psi4/issues/162#issuecomment-130121457:95,Deployability,install,installation,95,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457
https://github.com/psi4/psi4/issues/162#issuecomment-130121457:151,Deployability,install,install,151,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457
https://github.com/psi4/psi4/issues/162#issuecomment-130121457:446,Deployability,install,install,446,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457
https://github.com/psi4/psi4/issues/162#issuecomment-130121457:76,Modifiability,plugin,plugin,76,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457
https://github.com/psi4/psi4/issues/162#issuecomment-130121457:290,Modifiability,plugin,plugins,290,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457
https://github.com/psi4/psi4/issues/162#issuecomment-130121457:391,Modifiability,plugin,plugins,391,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457
https://github.com/psi4/psi4/issues/162#issuecomment-130124191:248,Deployability,install,installed,248,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191
https://github.com/psi4/psi4/issues/162#issuecomment-130124191:292,Deployability,install,installed,292,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191
https://github.com/psi4/psi4/issues/162#issuecomment-130124191:33,Modifiability,plugin,plugin,33,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191
https://github.com/psi4/psi4/issues/162#issuecomment-130124191:52,Modifiability,plugin,plugins,52,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191
https://github.com/psi4/psi4/issues/162#issuecomment-130124191:82,Modifiability,plugin,plugin,82,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191
https://github.com/psi4/psi4/issues/162#issuecomment-130124191:183,Modifiability,plugin,plugin,183,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191
https://github.com/psi4/psi4/issues/162#issuecomment-135774593:16,Modifiability,plugin,plugins,16,All we need for plugins are the headers to create the .so file and the psi4 executable to run against.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-135774593
https://github.com/psi4/psi4/issues/162#issuecomment-135855397:198,Deployability,install,install,198,"Looks like the includes in the makefile still reference the source directory, and some of the necessary includes, e.g. https://github.com/psi4/psi4public/tree/master/include, aren't copied into the install directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-135855397
https://github.com/psi4/psi4/pull/164#issuecomment-131092144:132,Testability,test,test,132,"Okay, I might've jumped the gun on this. It's not working on my Mac box. It might just be my box and not others. Could someone else test on their system? The issue I'm seeing is my system Python 2 libraries are not being added to the link command. Will test against my homebrew version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131092144
https://github.com/psi4/psi4/pull/164#issuecomment-131092144:253,Testability,test,test,253,"Okay, I might've jumped the gun on this. It's not working on my Mac box. It might just be my box and not others. Could someone else test on their system? The issue I'm seeing is my system Python 2 libraries are not being added to the link command. Will test against my homebrew version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131092144
https://github.com/psi4/psi4/pull/164#issuecomment-131141242:246,Testability,test,test,246,"Yes, this breaks psi on my macbook. On Aug 14, 2015, at 8:24 AM, Justin Turney notifications@github.com wrote:. > Okay, I might've jumped the gun on this. It's not working on my Mac box. It might just be my box and not others. Could someone else test on their system? The issue I'm seeing is my system Python 2 libraries are not being added to the link command. Will test against my homebrew version.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131141242
https://github.com/psi4/psi4/pull/164#issuecomment-131141242:367,Testability,test,test,367,"Yes, this breaks psi on my macbook. On Aug 14, 2015, at 8:24 AM, Justin Turney notifications@github.com wrote:. > Okay, I might've jumped the gun on this. It's not working on my Mac box. It might just be my box and not others. Could someone else test on their system? The issue I'm seeing is my system Python 2 libraries are not being added to the link command. Will test against my homebrew version.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131141242
https://github.com/psi4/psi4/pull/164#issuecomment-131148909:371,Testability,test,test,371,"Can you post the output?; On Aug 14, 2015 8:09 AM, ""Eugene DePrince"" notifications@github.com wrote:. > Yes, this breaks psi on my macbook.; > ; > On Aug 14, 2015, at 8:24 AM, Justin Turney notifications@github.com; > wrote:; > ; > > Okay, I might've jumped the gun on this. It's not working on my Mac box.; > > It might just be my box and not others. Could someone else test on their; > > system? The issue I'm seeing is my system Python 2 libraries are not being; > > added to the link command. Will test against my homebrew version.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/164#issuecomment-131141242.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131148909
https://github.com/psi4/psi4/pull/164#issuecomment-131148909:502,Testability,test,test,502,"Can you post the output?; On Aug 14, 2015 8:09 AM, ""Eugene DePrince"" notifications@github.com wrote:. > Yes, this breaks psi on my macbook.; > ; > On Aug 14, 2015, at 8:24 AM, Justin Turney notifications@github.com; > wrote:; > ; > > Okay, I might've jumped the gun on this. It's not working on my Mac box.; > > It might just be my box and not others. Could someone else test on their; > > system? The issue I'm seeing is my system Python 2 libraries are not being; > > added to the link command. Will test against my homebrew version.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/164#issuecomment-131141242.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131148909
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:8014,Availability,error,errors,8014,"ct const&, char const*, boost::python::api::object const&) in libboost_python-1_57.a(object_protocol.o); ""_PyErr_Fetch"", referenced from:; psi::HandleError() in libfrag.a(LibFragDriver.cc.o); ""_PyErr_Format"", referenced from:; boost::python::pytype_check(_typeobject*, _object*) in libboost_python-1_57.a(from_python.o); boost::python::objects::(anonymous namespace)::callable_check(_object*) in libboost_python-1_57.a(class.o); boost::python::objects::function::add_to_namespace(boost::python::api::object const&, char const*, boost::python::api::object const&, char const*) in libboost_python-1_57.a(function.o); boost::python::converter::registration::get_class_object() const in libboost_python-1_57.a(registry.o); ""_PyErr_NewException"", referenced from:; boost::python::objects::function::argument_error(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyErr_NoMemory"", referenced from:; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); ""_PyErr_Occurred"", referenced from:; boost::python::len(boost::python::api::object const&) in python.cc.o; boost::python::len(boost::python::api::object const&) in libparallel2.a(LibParallelHelper.cc.o); boost::python::len(boost::python::api::object const&) in libmints.a(matrix.cc.o); boost::python::len(boost::python::api::object const&) in libfindif.a(fd_hessian_0.cc.o); boost::python::len(boost::python::api::object const&) in libfindif.a(fd_1_0.cc.o); boost::python::len(boost::python::api::object const&) in libfindif.a(fd_freq_0.cc.o); boost::python::len(boost::python::api::object const&) in libfindif.a(fd_freq_1.cc.o); ...; ""_PyErr_Print"", referenced from:; psi::Python::run(__sFILE*) in python.cc.o; psi::Dispersion::compute_energy(boost::shared_ptr<psi::Molecule>) in libdisp.a(dispersion.cc.o); psi::Dispersion::compute_gradient(boost::shared_ptr<psi::Molecule>) in libdisp.a(dispersion.cc.o); psi::SuperFunctional::build(std::__1::basic_string<char, std::__1::char_traits<char>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:22674,Availability,error,errors,22674,"> > >, true>, boost::python::detail::no_proxy_helper<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true>, boost::python::detail::container_element<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true> >, unsigned long>, boost::shared_ptr<psi::Matrix>, unsigned long>::base_get_slice_data(std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >&, PySliceObject*, unsigned long&, unsigned long&) in export_mints.cc.o; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); ""_PyExc_OverflowError"", referenced from:; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned long>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned int>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned short>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned char>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyExc_ReferenceError"", referenced from:; boost::python::converter::(anonymous namespace)::lvalue_result_from_python(_object*, boost::python::converter::registration const&, char const*) in libbo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:22814,Availability,error,errors,22814,"psi::Matrix> > >, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true>, boost::python::detail::container_element<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true> >, unsigned long>, boost::shared_ptr<psi::Matrix>, unsigned long>::base_get_slice_data(std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >&, PySliceObject*, unsigned long&, unsigned long&) in export_mints.cc.o; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); ""_PyExc_OverflowError"", referenced from:; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned long>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned int>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned short>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned char>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyExc_ReferenceError"", referenced from:; boost::python::converter::(anonymous namespace)::lvalue_result_from_python(_object*, boost::python::converter::registration const&, char const*) in libboost_python-1_57.a(from_python.o); ""_PyExc_RuntimeError"", referenced from:; translate_psi_exception(psi::PsiException const&) in python.cc.o;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:24069,Availability,error,errors,24069,"nsigned int>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned short>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::unsigned_int_rvalue_from_python<unsigned char>::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyExc_ReferenceError"", referenced from:; boost::python::converter::(anonymous namespace)::lvalue_result_from_python(_object*, boost::python::converter::registration const&, char const*) in libboost_python-1_57.a(from_python.o); ""_PyExc_RuntimeError"", referenced from:; translate_psi_exception(psi::PsiException const&) in python.cc.o; _no_init in libboost_python-1_57.a(class.o); boost::python::objects::(anonymous namespace)::get_class(boost::python::type_info) in libboost_python-1_57.a(class.o); boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); boost::python::objects::function::add_to_namespace(boost::python::api::object const&, char const*, boost::python::api::object const&, char const*) in libboost_python-1_57.a(function.o); boost::python::detail::pure_virtual_called() in libboost_python-1_57.a(function.o); boost::python::(anonymous namespace)::instance_reduce(boost::python::api::object) in libboost_python-1_57.a(pickle_support.o); ...; ""_PyExc_StopIteration"", referenced from:; boost::python::objects::stop_iteration_error() in libboost_python-1_57.a(iterator.o); ""_PyExc_TypeError"", referenced from:; boost::python::indexing_suite<std::__1::vector<double, std::__1::allocator<double> >, boost::python::detail::final_vector_derived_policies<std::__1::vector<double, std::__1::allocator<double> >, true>, true, false, double, unsigned long, double>::base_set_item(std::__1::vector<double, std::__1::allocator<double> >&, _object*, _object*) in export_mints.cc.o; boost::python::vector_indexing_suite<std::__1::vector<double, st",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:27861,Availability,error,errors,27861,"erived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true>, true, false, boost::shared_ptr<psi::Matrix>, unsigned long, boost::shared_ptr<psi::Matrix> >::base_set_item(std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >&, _object*, _object*) in export_mints.cc.o; boost::python::vector_indexing_suite<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true, boost::python::detail::final_vector_derived_policies<std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >, true> >::base_append(std::__1::vector<boost::shared_ptr<psi::Matrix>, std::__1::allocator<boost::shared_ptr<psi::Matrix> > >&, boost::python::api::object) in export_mints.cc.o; ...; ""_PyExc_ValueError"", referenced from:; boost::python::handle_exception_impl(boost::function0<void>) in libboost_python-1_57.a(errors.o); ""_PyFile_AsFile"", referenced from:; boost::python::exec_file(boost::python::str, boost::python::api::object, boost::python::api::object) in libboost_python-1_57.a(exec.o); ""_PyFile_FromString"", referenced from:; boost::python::exec_file(boost::python::str, boost::python::api::object, boost::python::api::object) in libboost_python-1_57.a(exec.o); ""_PyFloat_FromDouble"", referenced from:; boost::python::to_python_value<double const&>::operator()(double const&) const in export_mints.cc.o; boost::python::to_python_value<double&>::operator()(double const&) const in export_mints.cc.o; boost::python::converter::arg_to_python<double>::arg_to_python(double const&) in export_mints.cc.o; boost::python::to_python_value<double const&>::operator()(double const&) const in export_functional.cc.o; boost::python::to_python_value<double const&>::operator()(double const&) const in export_chkpt.cc.o; boost::python::to_python_value<double const&>::operator()(double const&) const in export_blas_lapack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:77193,Availability,error,error,77193,"persion::compute_gradient(boost::shared_ptr<psi::Molecule>) in libdisp.a(dispersion.cc.o); psi::SuperFunctional::build(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int) in libfunctional.a(superfactory.cc.o); ""_Py_SetProgramName"", referenced from:; psi::Python::run(__sFILE*) in python.cc.o; ""__PyEval_SliceIndex"", referenced from:; boost::python::api::(anonymous namespace)::apply_slice(_object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); boost::python::api::(anonymous namespace)::assign_slice(_object*, _object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); ""__PyObject_New"", referenced from:; boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.o); ""__PyType_Lookup"", referenced from:; boost::python::class_setattro(_object*, _object*, _object*) in libboost_python-1_57.a(class.o); ""__Py_NoneStruct"", referenced from:; boost::python::detail::none() in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIOManager>::convertible(_object*) in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::operator()() const in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::pointer_arg_from_python(_object*) in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIO>::convertible(_object*) in export_psio.cc.o; boost::python::api::object::object() in export_psio.cc.o; boost::python::detail::none() in export_mints.cc.o; ...; ""__Py_NotImplementedStruct"", referenced from:; boost::python::objects::(anonymous namespace)::not_implemented(_object*, _object*) in libboost_python-1_57.a(function.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:77291,Availability,Error,Error,77291,"persion::compute_gradient(boost::shared_ptr<psi::Molecule>) in libdisp.a(dispersion.cc.o); psi::SuperFunctional::build(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int) in libfunctional.a(superfactory.cc.o); ""_Py_SetProgramName"", referenced from:; psi::Python::run(__sFILE*) in python.cc.o; ""__PyEval_SliceIndex"", referenced from:; boost::python::api::(anonymous namespace)::apply_slice(_object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); boost::python::api::(anonymous namespace)::assign_slice(_object*, _object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); ""__PyObject_New"", referenced from:; boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.o); ""__PyType_Lookup"", referenced from:; boost::python::class_setattro(_object*, _object*, _object*) in libboost_python-1_57.a(class.o); ""__Py_NoneStruct"", referenced from:; boost::python::detail::none() in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIOManager>::convertible(_object*) in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::operator()() const in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::pointer_arg_from_python(_object*) in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIO>::convertible(_object*) in export_psio.cc.o; boost::python::api::object::object() in export_psio.cc.o; boost::python::detail::none() in export_mints.cc.o; ...; ""__Py_NotImplementedStruct"", referenced from:; boost::python::objects::(anonymous namespace)::not_implemented(_object*, _object*) in libboost_python-1_57.a(function.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:77352,Availability,Error,Error,77352,"persion::compute_gradient(boost::shared_ptr<psi::Molecule>) in libdisp.a(dispersion.cc.o); psi::SuperFunctional::build(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int) in libfunctional.a(superfactory.cc.o); ""_Py_SetProgramName"", referenced from:; psi::Python::run(__sFILE*) in python.cc.o; ""__PyEval_SliceIndex"", referenced from:; boost::python::api::(anonymous namespace)::apply_slice(_object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); boost::python::api::(anonymous namespace)::assign_slice(_object*, _object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); ""__PyObject_New"", referenced from:; boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.o); ""__PyType_Lookup"", referenced from:; boost::python::class_setattro(_object*, _object*, _object*) in libboost_python-1_57.a(class.o); ""__Py_NoneStruct"", referenced from:; boost::python::detail::none() in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIOManager>::convertible(_object*) in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::operator()() const in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::pointer_arg_from_python(_object*) in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIO>::convertible(_object*) in export_psio.cc.o; boost::python::api::object::object() in export_psio.cc.o; boost::python::detail::none() in export_mints.cc.o; ...; ""__Py_NotImplementedStruct"", referenced from:; boost::python::objects::(anonymous namespace)::not_implemented(_object*, _object*) in libboost_python-1_57.a(function.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:77377,Availability,Error,Error,77377,"persion::compute_gradient(boost::shared_ptr<psi::Molecule>) in libdisp.a(dispersion.cc.o); psi::SuperFunctional::build(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, int) in libfunctional.a(superfactory.cc.o); ""_Py_SetProgramName"", referenced from:; psi::Python::run(__sFILE*) in python.cc.o; ""__PyEval_SliceIndex"", referenced from:; boost::python::api::(anonymous namespace)::apply_slice(_object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); boost::python::api::(anonymous namespace)::assign_slice(_object*, _object*, _object*, _object*) in libboost_python-1_57.a(object_protocol.o); ""__PyObject_New"", referenced from:; boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.o); ""__PyType_Lookup"", referenced from:; boost::python::class_setattro(_object*, _object*, _object*) in libboost_python-1_57.a(class.o); ""__Py_NoneStruct"", referenced from:; boost::python::detail::none() in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIOManager>::convertible(_object*) in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::operator()() const in export_psio.cc.o; boost::python::converter::pointer_arg_from_python<char const*>::pointer_arg_from_python(_object*) in export_psio.cc.o; boost::python::converter::shared_ptr_from_python<psi::PSIO>::convertible(_object*) in export_psio.cc.o; boost::python::api::object::object() in export_psio.cc.o; boost::python::detail::none() in export_mints.cc.o; ...; ""__Py_NotImplementedStruct"", referenced from:; boost::python::objects::(anonymous namespace)::not_implemented(_object*, _object*) in libboost_python-1_57.a(function.o); ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [bin/psi4] Error 1; make[1]: *** [src/bin/psi4/CMakeFiles/psi4.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:5776,Deployability,update,update,5776,":call(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyDict_Type"", referenced from:; boost::python::converter::pyobject_type<boost::python::dict, &(PyDict_Type)>::get_pytype() in export_mints.cc.o; boost::python::converter::pyobject_type<boost::python::dict, &(PyDict_Type)>::check(_object*) in python.cc.o; boost::python::converter::pyobject_type<boost::python::dict, &(PyDict_Type)>::get_pytype() in python.cc.o; boost::python::converter::pytype_object_manager_traits<&(PyDict_Type), boost::python::dict>::adopt(_object*) in libmints.a(basisset.cc.o); boost::python::detail::dict_base::call(boost::python::api::object const&) in libboost_python-1_57.a(dict.o); boost::python::detail::(anonymous namespace)::check_exact(boost::python::detail::dict_base const*) in libboost_python-1_57.a(dict.o); boost::python::detail::register_dict_pytype_ptr::register_dict_pytype_ptr() in libboost_python-1_57.a(dict.o); ...; ""_PyDict_Update"", referenced from:; boost::python::detail::dict_base::update(boost::python::api::object const&) in libboost_python-1_57.a(dict.o); ""_PyDict_Values"", referenced from:; boost::python::detail::dict_base::values() const in libboost_python-1_57.a(dict.o); ""_PyErr_Clear"", referenced from:; boost::python::objects::instance_new(_typeobject*, _object*, _object*) in libboost_python-1_57.a(class.o); boost::python::api::getattr(boost::python::api::object const&, boost::python::api::object const&, boost::python::api::object const&) in libboost_python-1_57.a(object_protocol.o); boost::python::api::getattr(boost::python::api::object const&, char const*, boost::python::api::object const&) in libboost_python-1_57.a(object_protocol.o); boost::python::objects::function::call(_object*, _object*) const in libboost_python-1_57.a(function.o); boost::python::objects::function::add_to_namespace(boost::python::api::object const&, char const*, boost::python::api::object const&, char const*) in libboost_python-1_57.a(function.o); ""_PyErr_ExceptionMatches"", refere",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:70786,Deployability,install,install,70786,"g const&, bool const&) in libmints.a(onebody.cc.o); ...; ""_PyTuple_Size"", referenced from:; boost::python::objects::function::call(_object*, _object*) const in libboost_python-1_57.a(function.o); boost::python::objects::function::argument_error(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyTuple_Type"", referenced from:; boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::check(_object*) in export_mints.cc.o; boost::python::detail::tuple_base::call(boost::python::api::object const&) in libboost_python-1_57.a(tuple.o); boost::python::detail::register_tuple_pytype_ptr::register_tuple_pytype_ptr() in libboost_python-1_57.a(tuple.o); boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::get_pytype() in libboost_python-1_57.a(pickle_support.o); ""_PyType_GenericAlloc"", referenced from:; boost::python::objects::class_type_object in libboost_python-1_57.a(class.o); ""_PyType_IsSubtype"", referenced from:; boost::python::instance_holder::install(_object*) in libboost_python-1_57.a(class.o); boost::python::objects::find_instance_impl(_object*, boost::python::type_info, bool) in libboost_python-1_57.a(class.o); boost::python::objects::(anonymous namespace)::new_class(char const*, unsigned long, boost::python::type_info const*, char const*) in libboost_python-1_57.a(class.o); boost::python::instance_holder::allocate(_object*, unsigned long, unsigned long) in libboost_python-1_57.a(class.o); boost::python::instance_holder::deallocate(_object*, void*) in libboost_python-1_57.a(class.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ...; ""_PyType_Ready"", referenced from:; boost::python::objects::static_data() in libboost_python-1_57.a(class.o); boost::python::objects::cl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:41829,Energy Efficiency,allocate,allocate,41829,".cc.o; boost::python::to_python_value<unsigned long const&>::operator()(unsigned long const&) const in python.cc.o; boost::python::converter::arg_to_python<unsigned long>::arg_to_python(unsigned long const&) in libmints.a(matrix.cc.o); boost::python::converter::arg_to_python<unsigned long>::arg_to_python(unsigned long const&) in libboost_python-1_57.a(class.o); boost::python::converter::arg_to_python<unsigned int>::arg_to_python(unsigned int const&) in libboost_python-1_57.a(function.o); boost::python::converter::arg_to_python<unsigned int>::arg_to_python(unsigned int const&) in libboost_python-1_57.a(enum.o); ...; ""_PyLong_Type"", referenced from:; boost::python::converter::(anonymous namespace)::long_long_rvalue_from_python_base::get_pytype() in libboost_python-1_57.a(builtin_converters.o); ""_PyMem_Free"", referenced from:; boost::python::instance_holder::deallocate(_object*, void*) in libboost_python-1_57.a(class.o); ""_PyMem_Malloc"", referenced from:; boost::python::instance_holder::allocate(_object*, unsigned long, unsigned long) in libboost_python-1_57.a(class.o); ""_PyMethod_New"", referenced from:; boost::python::objects::function_descr_get(_object*, _object*, _object*) in libboost_python-1_57.a(function.o); ""_PyModule_GetDict"", referenced from:; psi::BasisSet::pyconstruct_auxiliary(boost::shared_ptr<psi::Molecule> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in libmints.a(basisset.cc.o); psi::BasisSet::pyconstruct_combined(boost::shared_ptr<psi::Molecule> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:71160,Energy Efficiency,allocate,allocate,71160,"PyTuple_Type)>::check(_object*) in export_mints.cc.o; boost::python::detail::tuple_base::call(boost::python::api::object const&) in libboost_python-1_57.a(tuple.o); boost::python::detail::register_tuple_pytype_ptr::register_tuple_pytype_ptr() in libboost_python-1_57.a(tuple.o); boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::get_pytype() in libboost_python-1_57.a(pickle_support.o); ""_PyType_GenericAlloc"", referenced from:; boost::python::objects::class_type_object in libboost_python-1_57.a(class.o); ""_PyType_IsSubtype"", referenced from:; boost::python::instance_holder::install(_object*) in libboost_python-1_57.a(class.o); boost::python::objects::find_instance_impl(_object*, boost::python::type_info, bool) in libboost_python-1_57.a(class.o); boost::python::objects::(anonymous namespace)::new_class(char const*, unsigned long, boost::python::type_info const*, char const*) in libboost_python-1_57.a(class.o); boost::python::instance_holder::allocate(_object*, unsigned long, unsigned long) in libboost_python-1_57.a(class.o); boost::python::instance_holder::deallocate(_object*, void*) in libboost_python-1_57.a(class.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ...; ""_PyType_Ready"", referenced from:; boost::python::objects::static_data() in libboost_python-1_57.a(class.o); boost::python::objects::class_metatype() in libboost_python-1_57.a(class.o); boost::python::objects::class_type() in libboost_python-1_57.a(class.o); boost::python::objects::function::function(boost::python::objects::py_function const&, boost::python::detail::keyword const*, unsigned int) in libboost_python-1_57.a(function.o); boost::python::objects::make_nurse_and_patient(_object*, _object*) in libboost_python-1_57.a(life_support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131149225:3323,Usability,clear,clear,3323," const&, char const*, boost::python::api::object const&, char const*) in libboost_python-1_57.a(function.o); ""_PyComplex_ImagAsDouble"", referenced from:; boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyComplex_RealAsDouble"", referenced from:; boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyComplex_Type"", referenced from:; boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_pytype() in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ""_PyDict_Clear"", referenced from:; boost::python::detail::dict_base::clear() in libboost_python-1_57.a(dict.o); ""_PyDict_Copy"", referenced from:; boost::python::detail::dict_base::copy() in libboost_python-1_57.a(dict.o); ""_PyDict_GetItem"", referenced from:; boost::python::detail::dict_base::get(boost::python::api::object const&) const in libboost_python-1_57.a(dict.o); boost::python::objects::function::call(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyDict_GetItemString"", referenced from:; psi::BasisSet::pyconstruct_auxiliary(boost::shared_ptr<psi::Molecule> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in libmints.a(basisset.cc.o); ""_PyDict_Items"", referenced from:; boost",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:8689,Availability,error,errors,8689," const&) in; > libboost_python-1_57.a(object_protocol.o); > ""_PyErr_Fetch"", referenced from:; > psi::HandleError() in libfrag.a(LibFragDriver.cc.o); > ""_PyErr_Format"", referenced from:; > boost::python::pytype_check(_typeobject_, _object_) in; > libboost_python-1_57.a(from_python.o); > boost::python::objects::(anonymous; > namespace)::callable_check(_object_) in libboost_python-1_57.a(class.o); > ; > boost::python::objects::function::add_to_namespace(boost::python::api::object; > const&, char const_, boost::python::api::object const&, char const_) in; > libboost_python-1_57.a(function.o); > boost::python::converter::registration::get_class_object() const in; > libboost_python-1_57.a(registry.o); > ""_PyErr_NewException"", referenced from:; > boost::python::objects::function::argument_error(_object_,; > _object_) const in libboost_python-1_57.a(function.o); > ""_PyErr_NoMemory"", referenced from:; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ""_PyErr_Occurred"", referenced from:; > boost::python::len(boost::python::api::object const&) in python.cc.o; > boost::python::len(boost::python::api::object const&) in; > libparallel2.a(LibParallelHelper.cc.o); > boost::python::len(boost::python::api::object const&) in; > libmints.a(matrix.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_hessian_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_1_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_freq_0.cc.o); > boost::python::len(boost::python::api::object const&) in; > libfindif.a(fd_freq_1.cc.o); > ...; > ""_PyErr_Print"", referenced from:; > psi::Python::run(__sFILE*) in python.cc.o; > psi::Dispersion::compute_energy(boost::shared_ptrpsi::Molecule); > in libdisp.a(dispersion.cc.o); > psi::Dispersion::compute_gradient(boost::shared_ptrpsi::Molecule); > in libdisp.a(dispersion.cc.o); > psi::SuperFunctional::build(std::__1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:24016,Availability,error,errors,24016,"on::detail::no_proxy_helperstd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >,; > boost::python::detail::final_vector_derived_policiesstd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true>,; > boost::python::detail::container_elementstd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, unsigned long,; > boost::python::detail::final_vector_derived_policies<std::__1::vector&lt; > ;boost::shared_ptr<psi::Matrix>,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true> >, unsigned; > long>, boost::shared_ptrpsi::Matrix, unsigned; > long>::base_get_slice_data(std::__1::vectorboost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >&, PySliceObject_,; > unsigned long&, unsigned long&) in export_mints.cc.o; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ""_PyExc_OverflowError"", referenced from:; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > long>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > int>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > short>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > char>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > ""_PyExc_ReferenceError"", referenced from:; > boost::python::converter::(anonymous; > namespace)::lvalue_result_from_python(_object_,; > boost::python::conv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:24163,Availability,error,errors,24163,"n::detail::final_vector_derived_policiesstd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true>,; > boost::python::detail::container_elementstd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, unsigned long,; > boost::python::detail::final_vector_derived_policies<std::__1::vector&lt; > ;boost::shared_ptr<psi::Matrix>,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true> >, unsigned; > long>, boost::shared_ptrpsi::Matrix, unsigned; > long>::base_get_slice_data(std::__1::vectorboost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >&, PySliceObject_,; > unsigned long&, unsigned long&) in export_mints.cc.o; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ""_PyExc_OverflowError"", referenced from:; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > long>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > int>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > short>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > char>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > ""_PyExc_ReferenceError"", referenced from:; > boost::python::converter::(anonymous; > namespace)::lvalue_result_from_python(_object_,; > boost::python::converter::registration const&, char const*) in; > libboost_python-1_57.a(from_python.o); > ""_PyExc_RuntimeError"", referenced from:; > translate_psi_ex",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:25482,Availability,error,errors,25482,"on-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > short>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::unsigned_int_rvalue_from_python<unsigned; > char>::extract(_object_) in libboost_python-1_57.a(builtin_converters.o); > ""_PyExc_ReferenceError"", referenced from:; > boost::python::converter::(anonymous; > namespace)::lvalue_result_from_python(_object_,; > boost::python::converter::registration const&, char const*) in; > libboost_python-1_57.a(from_python.o); > ""_PyExc_RuntimeError"", referenced from:; > translate_psi_exception(psi::PsiException const&) in python.cc.o; > _no_init in libboost_python-1_57.a(class.o); > boost::python::objects::(anonymous; > namespace)::get_class(boost::python::type_info) in; > libboost_python-1_57.a(class.o); > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ; > boost::python::objects::function::add_to_namespace(boost::python::api::object; > const&, char const_, boost::python::api::object const&, char const_) in; > libboost_python-1_57.a(function.o); > boost::python::detail::pure_virtual_called() in; > libboost_python-1_57.a(function.o); > boost::python::(anonymous; > namespace)::instance_reduce(boost::python::api::object) in; > libboost_python-1_57.a(pickle_support.o); > ...; > ""_PyExc_StopIteration"", referenced from:; > boost::python::objects::stop_iteration_error() in; > libboost_python-1_57.a(iterator.o); > ""_PyExc_TypeError"", referenced from:; > boost::python::indexing_suite<std::__1::vector<double,; > std::__1::allocator<double> >,; > boost::python::detail::final_vector_derived_policies<std::__1::vector<double,; > std::__1::allocator<double> >, true>, true, false, double, unsigned long,; > double>::base_set_item(std::__1::vector<double, std::__1::allocator<double>; > &, _object_, _object_) in export_mints.cc.o; > boost::pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:29445,Availability,error,errors,29445,"vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true>, true, false,; > boost::shared_ptrpsi::Matrix, unsigned long,; > boost::shared_ptrpsi::Matrix; > ::base_set_item(std::__1::vectorboost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >&, _object_,; > _object_) in export_mints.cc.o; > ; > boost::python::vector_indexing_suitestd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true,; > boost::python::detail::final_vector_derived_policiesstd::__1::vector<boost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >, true>; > ::base_append(std::__1::vectorboost::shared_ptr<psi::Matrix,; > std::__1::allocatorboost::shared_ptr<psi::Matrix > >&,; > boost::python::api::object) in export_mints.cc.o; > ...; > ""_PyExc_ValueError"", referenced from:; > boost::python::handle_exception_impl(boost::function0<void>) in; > libboost_python-1_57.a(errors.o); > ""_PyFile_AsFile"", referenced from:; > boost::python::exec_file(boost::python::str,; > boost::python::api::object, boost::python::api::object) in; > libboost_python-1_57.a(exec.o); > ""_PyFile_FromString"", referenced from:; > boost::python::exec_file(boost::python::str,; > boost::python::api::object, boost::python::api::object) in; > libboost_python-1_57.a(exec.o); > ""_PyFloat_FromDouble"", referenced from:; > boost::python::to_python_value<double const&>::operator()(double; > const&) const in export_mints.cc.o; > boost::python::to_python_value<double&>::operator()(double const&); > const in export_mints.cc.o; > ; > boost::python::converter::arg_to_python<double>::arg_to_python(double; > const&) in export_mints.cc.o; > boost::python::to_python_value<double const&>::operator()(double; > const&) const in export_functional.cc.o; > boost::python::to_python_value<double const&>::operator()(double; > const&) const in export_chkpt.cc.o; > boost::python::to_python_value<double const&>::",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:6336,Deployability,update,update,6336,"57.a(function.o); > ""_PyDict_Type"", referenced from:; > boost::python::converter::pyobject_type<boost::python::dict,; > &(PyDict_Type)>::get_pytype() in export_mints.cc.o; > boost::python::converter::pyobject_type<boost::python::dict,; > &(PyDict_Type)>::check(_object*) in python.cc.o; > boost::python::converter::pyobject_type<boost::python::dict,; > &(PyDict_Type)>::get_pytype() in python.cc.o; > ; > boost::python::converter::pytype_object_manager_traits<&(PyDict_Type),; > boost::python::dict>::adopt(_object_) in libmints.a(basisset.cc.o); > boost::python::detail::dict_base::call(boost::python::api::object; > const&) in libboost_python-1_57.a(dict.o); > boost::python::detail::(anonymous; > namespace)::check_exact(boost::python::detail::dict_base const_) in; > libboost_python-1_57.a(dict.o); > ; > boost::python::detail::register_dict_pytype_ptr::register_dict_pytype_ptr(); > in libboost_python-1_57.a(dict.o); > ...; > ""_PyDict_Update"", referenced from:; > boost::python::detail::dict_base::update(boost::python::api::object; > const&) in libboost_python-1_57.a(dict.o); > ""_PyDict_Values"", referenced from:; > boost::python::detail::dict_base::values() const in; > libboost_python-1_57.a(dict.o); > ""_PyErr_Clear"", referenced from:; > boost::python::objects::instance_new(_typeobject_, _object_,; > _object_) in libboost_python-1_57.a(class.o); > boost::python::api::getattr(boost::python::api::object const&,; > boost::python::api::object const&, boost::python::api::object const&) in; > libboost_python-1_57.a(object_protocol.o); > boost::python::api::getattr(boost::python::api::object const&, char; > const_, boost::python::api::object const&) in; > libboost_python-1_57.a(object_protocol.o); > boost::python::objects::function::call(_object_, _object_) const in; > libboost_python-1_57.a(function.o); > ; > boost::python::objects::function::add_to_namespace(boost::python::api::object; > const&, char const_, boost::python::api::object const&, char const_) in; > libboost_python-1_5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:44176,Energy Efficiency,allocate,allocate,44176,"; > const&>::operator()(unsigned long const&) const in python.cc.o; > boost::python::converter::arg_to_python<unsigned; > long>::arg_to_python(unsigned long const&) in libmints.a(matrix.cc.o); > boost::python::converter::arg_to_python<unsigned; > long>::arg_to_python(unsigned long const&) in; > libboost_python-1_57.a(class.o); > boost::python::converter::arg_to_python<unsigned; > int>::arg_to_python(unsigned int const&) in; > libboost_python-1_57.a(function.o); > boost::python::converter::arg_to_python<unsigned; > int>::arg_to_python(unsigned int const&) in libboost_python-1_57.a(enum.o); > ...; > ""_PyLong_Type"", referenced from:; > boost::python::converter::(anonymous; > namespace)::long_long_rvalue_from_python_base::get_pytype() in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyMem_Free"", referenced from:; > boost::python::instance_holder::deallocate(_object_, void_) in; > libboost_python-1_57.a(class.o); > ""_PyMem_Malloc"", referenced from:; > boost::python::instance_holder::allocate(_object_, unsigned long,; > unsigned long) in libboost_python-1_57.a(class.o); > ""_PyMethod_New"", referenced from:; > boost::python::objects::function_descr_get(_object_, _object_,; > _object*) in libboost_python-1_57.a(function.o); > ""_PyModule_GetDict"", referenced from:; > ; > psi::BasisSet::pyconstruct_auxiliary(boost::shared_ptrpsi::Molecule; > const&, std::__1::basic_string<char, std::__1::char_traits<char>,; > std::__1::allocator<char> > const&, std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> > const&,; > std::__1::basic_string<char, std::__1::char_traits<char>,; > std::__1::allocator<char> > const&, std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in; > libmints.a(basisset.cc.o); > ; > psi::BasisSet::pyconstruct_combined(boost::shared_ptrpsi::Molecule; > const&, std::__1::vector<std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> >,; > std::__1::",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131150834:3747,Usability,clear,clear,3747,"t&, char const_) in; > libboost_python-1_57.a(function.o); > ""_PyComplex_ImagAsDouble"", referenced from:; > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::extract(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyComplex_RealAsDouble"", referenced from:; > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::extract(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyComplex_Type"", referenced from:; > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::get_pytype() in; > libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::extract(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > boost::python::converter::(anonymous; > namespace)::complex_rvalue_from_python::get_slot(_object_) in; > libboost_python-1_57.a(builtin_converters.o); > ""_PyDict_Clear"", referenced from:; > boost::python::detail::dict_base::clear() in; > libboost_python-1_57.a(dict.o); > ""_PyDict_Copy"", referenced from:; > boost::python::detail::dict_base::copy() in; > libboost_python-1_57.a(dict.o); > ""_PyDict_GetItem"", referenced from:; > boost::python::detail::dict_base::get(boost::python::api::object; > const&) const in libboost_python-1_57.a(dict.o); > boost::python::objects::function::call(_object_, _object_) const in; > libboost_python-1_57.a(function.o); > ""_PyDict_GetItemString"", referenced from:; > ; > psi::BasisSet::pyconstruct_auxiliary(boost::shared_ptrpsi::Molecule; > const&, std::__1::basic_string<char, std::__1::char_traits<char>,; > std::__1::allocator<char> > const&, std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> > const&,; > std::__1::basic_string<char, std::__1::char_traits<char>,; > std::__1::allocator<char> > const&, std::__1::basic_string<char,; > std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in; > libmints.a(basiss",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131150834
https://github.com/psi4/psi4/pull/164#issuecomment-131152671:19,Modifiability,Config,ConfigPython,19,I've found that in ConfigPython.cmake PYTHON_LIBRARY is being used but in the link in src/bin/psi4 PYTHON_LIBRARIES is being used. Once I made the change in src/bin/psi4 I was able to link.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152671
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5270,Integrability,interface,interfaced,5270,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:461,Modifiability,variab,variable,461,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:571,Modifiability,variab,variable,571,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:685,Modifiability,variab,variable,685,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:777,Modifiability,variab,variable,777,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:871,Modifiability,variab,variable,871,`CMakeCache`:. ```; Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=Boost_PYTHON_LIBRARY_DEBUG-NOTFOUND; Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=Boost_PYTHON_LIBRARY_RELEASE-NOTFOUND; PYTHON_EXECUTABLE:FILEPATH=/Users/loriab/anaconda/bin/python; PYTHON_INCLUDE_DIR:PATH=/Users/loriab/anaconda/include/python2.7; PYTHON_INTERPRETER:UNINITIALIZED=/Users/loriab/anaconda/bin/python; PYTHON_LIBRARY:FILEPATH=/Users/loriab/anaconda/lib/libpython2.7.dylib; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_DEBUG; Boost_PYTHON_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: Boost_PYTHON_LIBRARY_RELEASE; Boost_PYTHON_LIBRARY_RELEASE-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_EXECUTABLE; PYTHON_EXECUTABLE-ADVANCED:INTERNAL=0; //ADVANCED property for variable: PYTHON_INCLUDE_DIR; PYTHON_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: PYTHON_LIBRARY; PYTHON_LIBRARY-ADVANCED:INTERNAL=1; ```. setup output:. ```; -- The CXX compiler identification is AppleClang 6.1.0.6020053; -- The C compiler identification is AppleClang 6.1.0.6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5316,Modifiability,Config,Configuring,5316,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1451,Performance,Perform,Performing,1451,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1487,Performance,Perform,Performing,1487,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1902,Performance,Perform,Performing,1902,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1943,Performance,Perform,Performing,1943,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2028,Performance,Perform,Performing,2028,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2069,Performance,Perform,Performing,2069,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2153,Performance,Perform,Performing,2153,compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2194,Performance,Perform,Performing,2194,ting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2279,Performance,Perform,Performing,2279,orking C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2320,Performance,Perform,Performing,2320, for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2404,Performance,Perform,Performing,2404, Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2445,Performance,Perform,Performing,2445, Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2530,Performance,Perform,Performing,2530,und following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Perfo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2571,Performance,Perform,Performing,2571,-- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2656,Performance,Perform,Performing,2656,tializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Per,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2697,Performance,Perform,Performing,2697,- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Per,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2779,Performance,Perform,Performing,2779,variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2820,Performance,Perform,Performing,2820,ict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2900,Performance,Perform,Performing,2900,forming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2941,Performance,Perform,Performing,2941,forming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3021,Performance,Perform,Performing,3021,- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3062,Performance,Perform,Performing,3062,- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETEC,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3149,Performance,Perform,Performing,3149,erforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3190,Performance,Perform,Performing,3190,erforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3276,Performance,Perform,Performing,3276,rforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specif,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3317,Performance,Perform,Performing,3317,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3404,Performance,Perform,Performing,3404,rming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3445,Performance,Perform,Performing,3445,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3531,Performance,Perform,Performing,3531,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3572,Performance,Perform,Performing,3572,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3659,Performance,Perform,Performing,3659,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3700,Performance,Perform,Performing,3700,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3787,Performance,Perform,Performing,3787,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3828,Performance,Perform,Performing,3828,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3912,Performance,Perform,Performing,3912,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3953,Performance,Perform,Performing,3953,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:4035,Performance,Perform,Performing,4035,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:4076,Performance,Perform,Performing,4076,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1194,Safety,Detect,Detecting,1194,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1230,Safety,Detect,Detecting,1230,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1376,Safety,Detect,Detecting,1376,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1410,Safety,Detect,Detecting,1410,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1462,Testability,Test,Test,1462,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1498,Testability,Test,Test,1498,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1913,Testability,Test,Test,1913,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:1954,Testability,Test,Test,1954,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2039,Testability,Test,Test,2039,6020053; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try Open,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2080,Testability,Test,Test,2080,; -- Check for working CXX compiler: /usr/bin/g++; -- Check for working CXX compiler: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2164,Testability,Test,Test,2164,: /usr/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test Op,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2205,Testability,Test,Test,2205, compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test Op,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2290,Testability,Test,Test,2290, compiler: /usr/bin/gcc; -- Check for working C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test O,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2331,Testability,Test,Test,2331,king C compiler: /usr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test O,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2415,Testability,Test,Test,2415,ng C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2456,Testability,Test,Test,2456,ing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2541,Testability,Test,Test,2541,owing supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2582,Testability,Test,Test,2582,c__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2667,Testability,Test,Test,2667,_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2708,Testability,Test,Test,2708,r; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2790,Testability,Test,Test,2790,_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2831,Testability,Test,Test,2831,ord; -- keyword found : __restrict__; -- Try OpenMP C flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Perfor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2911,Testability,Test,Test,2911,Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Pe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:2952,Testability,Test,Test,2952,Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Pe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3032,Testability,Test,Test,3032,ming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3073,Testability,Test,Test,3073,ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3160,Testability,Test,Test,3160,g Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3201,Testability,Test,Test,3201,g Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3287,Testability,Test,Test,3287, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3328,Testability,Test,Test,3328, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3415,Testability,Test,Test,3415,st OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SY,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3456,Testability,Test,Test,3456,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3542,Testability,Test,Test,3542,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3583,Testability,Test,Test,3583,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3670,Testability,Test,Test,3670,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3711,Testability,Test,Test,3711,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3798,Testability,Test,Test,3798,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3839,Testability,Test,Test,3839,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3923,Testability,Test,Test,3923,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:3964,Testability,Test,Test,3964,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:4046,Testability,Test,Test,4046,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:4087,Testability,Test,Test,4087,rforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5294,Testability,Test,Test,5294,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863
https://github.com/psi4/psi4/pull/164#issuecomment-134687960:149,Deployability,install,install,149,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960
https://github.com/psi4/psi4/pull/164#issuecomment-134687960:474,Deployability,install,install,474,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960
https://github.com/psi4/psi4/pull/164#issuecomment-134687960:300,Modifiability,config,configure,300,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960
https://github.com/psi4/psi4/pull/164#issuecomment-134687960:38,Safety,detect,detection,38,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960
https://github.com/psi4/psi4/pull/164#issuecomment-134687960:610,Safety,detect,detection,610,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960
https://github.com/psi4/psi4/pull/164#issuecomment-134772723:194,Modifiability,config,configure,194,@loriab: can you try with https://github.com/psi4/psi4public/commit/0e7d3c9e2d11df2e54cd258a4453894efca059b7? it fixes the problem (which I can reproduce) on my machine. unfortunately you can't configure the cmake search order as much as I would like.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134772723
https://github.com/psi4/psi4/pull/164#issuecomment-134831094:10,Deployability,patch,patch,10,"With that patch, the conda build works very nicely w/o forcing `-DPYTHON_LIBRARY`. Thank you. I'd like to absorb 0e7d3c9 into the repository, but I confess I can't find it. It's not a commit to master, a branch, a pull request, or a fork, just a lone commit on a tree. I'll accept the commit if I can find it, otherwise will push re-created commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134831094
https://github.com/psi4/psi4/issues/168#issuecomment-135167238:302,Testability,test,tests,302,"I don't find any problems with it when running plain `ctest -R pywrap-freq-e-sowreap`. But in a larger sense, you're quite right that it's not doing anything. Back in the pre-CMake day, the Makefile took additional steps and actually ran all those displacements https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in , then ran https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests so as to make a proper test case. This multi-psi4 invokation hasn't yet been ported to the CMake/CTest system. So it's good that this is a ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-135167238
https://github.com/psi4/psi4/issues/168#issuecomment-135167238:394,Testability,test,tests,394,"I don't find any problems with it when running plain `ctest -R pywrap-freq-e-sowreap`. But in a larger sense, you're quite right that it's not doing anything. Back in the pre-CMake day, the Makefile took additional steps and actually ran all those displacements https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in , then ran https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests so as to make a proper test case. This multi-psi4 invokation hasn't yet been ported to the CMake/CTest system. So it's good that this is a ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-135167238
https://github.com/psi4/psi4/issues/168#issuecomment-135167238:422,Testability,test,tests,422,"I don't find any problems with it when running plain `ctest -R pywrap-freq-e-sowreap`. But in a larger sense, you're quite right that it's not doing anything. Back in the pre-CMake day, the Makefile took additional steps and actually ran all those displacements https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in , then ran https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests so as to make a proper test case. This multi-psi4 invokation hasn't yet been ported to the CMake/CTest system. So it's good that this is a ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-135167238
https://github.com/psi4/psi4/issues/168#issuecomment-135167238:451,Testability,test,test,451,"I don't find any problems with it when running plain `ctest -R pywrap-freq-e-sowreap`. But in a larger sense, you're quite right that it's not doing anything. Back in the pre-CMake day, the Makefile took additional steps and actually ran all those displacements https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in , then ran https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests so as to make a proper test case. This multi-psi4 invokation hasn't yet been ported to the CMake/CTest system. So it's good that this is a ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-135167238
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:164,Testability,test,tests,164,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:284,Testability,test,testresults,284,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:296,Testability,log,log,296,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:369,Testability,test,tests,369,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:497,Testability,test,testing,497,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:526,Testability,test,tests,526,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:574,Testability,test,tests,574,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157477226:602,Testability,test,tests,602,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:758,Energy Efficiency,energy,energy,758,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:422,Performance,Perform,Performing,422,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:503,Performance,Perform,Performing,503,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:32,Testability,test,tests,32,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:179,Testability,test,tests,179,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:322,Testability,test,tests,322,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:376,Testability,test,tests,376,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:1060,Testability,test,tests,1060,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/168#issuecomment-157541405:1826,Testability,test,tests,1826,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:727,Availability,error,error,727,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:342,Integrability,message,message,342,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:508,Integrability,message,message,508,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:629,Integrability,message,message,629,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:716,Integrability,message,message,716,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:777,Integrability,message,message,777,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:825,Integrability,message,message,825,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-132368809:444,Security,confidential,confidential,444,"Default on a Mac, 2.7.3 I guess. Francesco. On Aug 18, 2015, at 5:59 PM, Justin Turney <notifications@github.com<mailto:notifications@github.com>> wrote:. Hmmm, which version of Python are you using?. ## . Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/169#issuecomment-132368503. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-132368809
https://github.com/psi4/psi4/issues/169#issuecomment-133175539:388,Availability,error,error,388,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539
https://github.com/psi4/psi4/issues/169#issuecomment-133175539:394,Integrability,message,message,394,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539
https://github.com/psi4/psi4/issues/169#issuecomment-133175539:599,Integrability,wrap,wrappers,599,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539
https://github.com/psi4/psi4/issues/169#issuecomment-133175539:664,Integrability,wrap,wrappers,664,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539
https://github.com/psi4/psi4/issues/169#issuecomment-133179959:590,Availability,error,error,590,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959
https://github.com/psi4/psi4/issues/169#issuecomment-133179959:596,Integrability,message,message,596,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959
https://github.com/psi4/psi4/issues/169#issuecomment-133179959:808,Integrability,wrap,wrappers,808,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959
https://github.com/psi4/psi4/issues/169#issuecomment-133179959:875,Integrability,wrap,wrappers,875,"I suspect this has to do with the python3 fixes. Will take a look tomorrow. . Sent from my iPhone. > On Aug 20, 2015, at 5:08 PM, fevangelista notifications@github.com wrote:; > ; > Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py; > ; > ```; > future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); > temp = future_re.sub(future_replace, temp); > #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); > ```; > ; > but then I get this other error message (even with the newest commit):; > ; > Traceback (most recent call last):; > File ""<string>"", line 6, in <module>; > File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; > from wrappers import *; > File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; > from driver import *; > File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; > from interface_cfour import *; > File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; > import qcdb; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/**init**.py"", line 35, in <module>; > from .molecule import Molecule; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; > from .libmintsmolecule import *; > File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; > from oldpymodules import OrderedDict; > ImportError: No module named oldpymodules; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133179959
https://github.com/psi4/psi4/issues/169#issuecomment-133203439:34,Testability,test,tested,34,"I think this must be python2.6. I tested `re.sub` in 2.7.10 and 2.6.9, and `re.sub` takes `flags` just fine as a kwarg in 2.7.10, but not in 2.6.9.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133203439
https://github.com/psi4/psi4/issues/169#issuecomment-133204949:123,Availability,fault,fault,123,"`ImportError: No module named oldpymodules`. yeah, this is py26. the code is missing a leading `.` for absolute import. my fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133204949
https://github.com/psi4/psi4/issues/171#issuecomment-133543130:92,Testability,test,test,92,"That did not change the behavior. I noticed that INTEGRAL_PACKAGE is printed for the dfccd1 test (and others) and lists INTEGRAL_PACKAGE = ERD as expected, even without specifying that in the input file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133543130
https://github.com/psi4/psi4/issues/171#issuecomment-133544184:64,Testability,log,logs,64,I also experienced no change by trying that. Watching the build logs I noticed both ERD and LibInt are built. I do not recall this being the default behavior when I was using ERD about a year ago. Is it possible some of the CMake infrastructure changes caused this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133544184
https://github.com/psi4/psi4/issues/171#issuecomment-133544723:47,Deployability,Patch,Patch,47,"Ah, ok. I think I see the problem in the code. Patch coming shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133544723
https://github.com/psi4/psi4/issues/171#issuecomment-133548088:16,Testability,test,testing,16,Try pulling and testing now. I am unable to test it on my box.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133548088
https://github.com/psi4/psi4/issues/171#issuecomment-133548088:44,Testability,test,test,44,Try pulling and testing now. I am unable to test it on my box.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133548088
https://github.com/psi4/psi4/issues/173#issuecomment-135746478:65,Deployability,patch,patch,65,@keipertk Did you experience anything like this after the libERD patch the other day?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-135746478
https://github.com/psi4/psi4/issues/173#issuecomment-272780463:126,Deployability,integrat,integrates,126,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463
https://github.com/psi4/psi4/issues/173#issuecomment-272780463:77,Energy Efficiency,energy,energy,77,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463
https://github.com/psi4/psi4/issues/173#issuecomment-272780463:126,Integrability,integrat,integrates,126,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463
https://github.com/psi4/psi4/issues/175#issuecomment-137552779:181,Modifiability,rewrite,rewrite,181,"Thanks. The detci module is undergoing C++ modernization and the addition of many new features. Your issue https://github.com/psi4/psi4public/issues/92 for instance is fixed in the rewrite. Detci's file management is getting re-aligned with Psi4's too. We'll definitely check that your problem isn't present in the new version (the elimination of global (to detci) variables helps for these multiple invokation cases). And if @CDSherrill confirms that the OPDM and `rsp` don't mix, will add to docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-137552779
https://github.com/psi4/psi4/issues/175#issuecomment-137552779:365,Modifiability,variab,variables,365,"Thanks. The detci module is undergoing C++ modernization and the addition of many new features. Your issue https://github.com/psi4/psi4public/issues/92 for instance is fixed in the rewrite. Detci's file management is getting re-aligned with Psi4's too. We'll definitely check that your problem isn't present in the new version (the elimination of global (to detci) variables helps for these multiple invokation cases). And if @CDSherrill confirms that the OPDM and `rsp` don't mix, will add to docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-137552779
https://github.com/psi4/psi4/issues/175#issuecomment-137667288:201,Energy Efficiency,energy,energy,201,"@loriab the issue is not the multiple invocation. Whatever method I use (davidson, olsen, ...), whatever start guess vector, etc: in ALL cases (except exact diagonalization), detci finds an impossible energy value. The way the OPDM is currently being build requires information from the davidson algorithm. It can be work around but the current code doesn't allow you to build an opdm with rsp.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-137667288
https://github.com/psi4/psi4/issues/175#issuecomment-170681070:68,Energy Efficiency,energy,energy,68,This does not appear to be fixed with the new CI code. I now get an energy of -1492.0189996...; Likely related to issue #69,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-170681070
https://github.com/psi4/psi4/issues/175#issuecomment-217275131:13,Availability,down,down,13,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131
https://github.com/psi4/psi4/issues/175#issuecomment-217275131:297,Deployability,patch,patch,297,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131
https://github.com/psi4/psi4/issues/175#issuecomment-217275131:503,Energy Efficiency,energy,energy,503,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131
https://github.com/psi4/psi4/issues/175#issuecomment-217275131:708,Safety,avoid,avoid,708,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131
https://github.com/psi4/psi4/issues/175#issuecomment-217275131:775,Usability,simpl,simply,775,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131
https://github.com/psi4/psi4/issues/179#issuecomment-174013642:58,Performance,optimiz,optimizing,58,"To solve:; - find a system that becomes a car wreck while optimizing frozen coords and w/o `no_reorient` & `no_com`. (probably intermolecular optimization). see tests opt-[6789] for frozen opt examples.; - check that opt healed w/`no_reorient` & `no_com`; - around here (https://github.com/psi4/psi4/blob/master/lib/python/driver.py#L1193), test if any of those freeze options were set `psi4.get_option('OPTKING', 'FREEZE<fill in>')` and if so, add. ``` python; molecule.fix_orientation(True); molecule.fix_com(True) ; molecule.update_geometry(); ```; - check all working",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-174013642
https://github.com/psi4/psi4/issues/179#issuecomment-174013642:142,Performance,optimiz,optimization,142,"To solve:; - find a system that becomes a car wreck while optimizing frozen coords and w/o `no_reorient` & `no_com`. (probably intermolecular optimization). see tests opt-[6789] for frozen opt examples.; - check that opt healed w/`no_reorient` & `no_com`; - around here (https://github.com/psi4/psi4/blob/master/lib/python/driver.py#L1193), test if any of those freeze options were set `psi4.get_option('OPTKING', 'FREEZE<fill in>')` and if so, add. ``` python; molecule.fix_orientation(True); molecule.fix_com(True) ; molecule.update_geometry(); ```; - check all working",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-174013642
https://github.com/psi4/psi4/issues/179#issuecomment-174013642:161,Testability,test,tests,161,"To solve:; - find a system that becomes a car wreck while optimizing frozen coords and w/o `no_reorient` & `no_com`. (probably intermolecular optimization). see tests opt-[6789] for frozen opt examples.; - check that opt healed w/`no_reorient` & `no_com`; - around here (https://github.com/psi4/psi4/blob/master/lib/python/driver.py#L1193), test if any of those freeze options were set `psi4.get_option('OPTKING', 'FREEZE<fill in>')` and if so, add. ``` python; molecule.fix_orientation(True); molecule.fix_com(True) ; molecule.update_geometry(); ```; - check all working",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-174013642
https://github.com/psi4/psi4/issues/179#issuecomment-174013642:341,Testability,test,test,341,"To solve:; - find a system that becomes a car wreck while optimizing frozen coords and w/o `no_reorient` & `no_com`. (probably intermolecular optimization). see tests opt-[6789] for frozen opt examples.; - check that opt healed w/`no_reorient` & `no_com`; - around here (https://github.com/psi4/psi4/blob/master/lib/python/driver.py#L1193), test if any of those freeze options were set `psi4.get_option('OPTKING', 'FREEZE<fill in>')` and if so, add. ``` python; molecule.fix_orientation(True); molecule.fix_com(True) ; molecule.update_geometry(); ```; - check all working",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-174013642
https://github.com/psi4/psi4/issues/179#issuecomment-212570814:21,Testability,test,test,21,@tparker36 Can I get test case where this dies horribly?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212570814
https://github.com/psi4/psi4/issues/179#issuecomment-212574454:17,Performance,optimiz,optimization,17,".Any constrained optimization example where ""no_com"" and/or ""no_reorient""; isn't in the molecule input section and the geometry isn't in the standard; nuclear orientation. The job won't fail, but the constrained coordinates; will not be identical to their original values in the final output. -Trent. On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; wrote:. > @tparker36 https://github.com/tparker36 Can I get test case where this; > dies horribly?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/179#issuecomment-212570814. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212574454
https://github.com/psi4/psi4/issues/179#issuecomment-212574454:433,Testability,test,test,433,".Any constrained optimization example where ""no_com"" and/or ""no_reorient""; isn't in the molecule input section and the geometry isn't in the standard; nuclear orientation. The job won't fail, but the constrained coordinates; will not be identical to their original values in the final output. -Trent. On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; wrote:. > @tparker36 https://github.com/tparker36 Can I get test case where this; > dies horribly?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/179#issuecomment-212570814. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212574454
https://github.com/psi4/psi4/issues/179#issuecomment-212579530:143,Performance,optimiz,optimization,143,"Example attached. Thanks,. -Trent. On Wed, Apr 20, 2016 at 3:41 PM, Trent Parker <; trent.michael.parker@gmail.com> wrote:. > .Any constrained optimization example where ""no_com"" and/or ""no_reorient""; > isn't in the molecule input section and the geometry isn't in the standard; > nuclear orientation. The job won't fail, but the constrained coordinates; > will not be identical to their original values in the final output.; > ; > -Trent; > ; > On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > @tparker36 https://github.com/tparker36 Can I get test case where this; > > dies horribly?; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/179#issuecomment-212570814; > ; > ## ; > ; > Trent Parker; > Sherrill Research Group; > Georgia Institute of Technology; > ; > Center for Computational Molecular Science and Technology; > School of Chemistry and Biochemistry; > 4201 Molecular Science and Engineering Building; > ; > 901 Atlantic Drive NW; > Atlanta, GA 30332. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212579530
https://github.com/psi4/psi4/issues/179#issuecomment-212579530:586,Testability,test,test,586,"Example attached. Thanks,. -Trent. On Wed, Apr 20, 2016 at 3:41 PM, Trent Parker <; trent.michael.parker@gmail.com> wrote:. > .Any constrained optimization example where ""no_com"" and/or ""no_reorient""; > isn't in the molecule input section and the geometry isn't in the standard; > nuclear orientation. The job won't fail, but the constrained coordinates; > will not be identical to their original values in the final output.; > ; > -Trent; > ; > On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > @tparker36 https://github.com/tparker36 Can I get test case where this; > > dies horribly?; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/179#issuecomment-212570814; > ; > ## ; > ; > Trent Parker; > Sherrill Research Group; > Georgia Institute of Technology; > ; > Center for Computational Molecular Science and Technology; > School of Chemistry and Biochemistry; > 4201 Molecular Science and Engineering Building; > ; > 901 Atlantic Drive NW; > Atlanta, GA 30332. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212579530
https://github.com/psi4/psi4/issues/180#issuecomment-139102907:32,Deployability,configurat,configuration,32,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907
https://github.com/psi4/psi4/issues/180#issuecomment-139102907:332,Deployability,release,release,332,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907
https://github.com/psi4/psi4/issues/180#issuecomment-139102907:291,Integrability,rout,routines,291,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907
https://github.com/psi4/psi4/issues/180#issuecomment-139102907:32,Modifiability,config,configuration,32,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907
https://github.com/psi4/psi4/issues/180#issuecomment-139102907:146,Performance,optimiz,optimized,146,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907
https://github.com/psi4/psi4/issues/180#issuecomment-139103808:206,Performance,optimiz,optimization,206,"I've linked the Fedora package to a separately compiled libint package (also in the official Fedora repository) for which LIBINT_MAX_AM = 11, LIBINT_OPT_AM = 7, and it would seem that at least MP2 geometry optimization works with cc-pV6Z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139103808
https://github.com/psi4/psi4/issues/180#issuecomment-139112245:95,Integrability,rout,routines,95,I am not really sure about all the LIBINT commands as I try to avoid dealing with the integral routines. I typically just pass a --max-am-eri=7 to my setup script so I can compile with higher angular momentum.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139112245
https://github.com/psi4/psi4/issues/180#issuecomment-139112245:63,Safety,avoid,avoid,63,I am not really sure about all the LIBINT commands as I try to avoid dealing with the integral routines. I typically just pass a --max-am-eri=7 to my setup script so I can compile with higher angular momentum.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139112245
https://github.com/psi4/psi4/issues/182#issuecomment-142095780:17,Testability,test,test,17,"The casscf-sa-sp test case sounds like something similar to what you want? I am not sure you can really specify each CSF in PSI4, as e.g. with the ""ref"" card in MOLPRO, but I have to admit I am no expert on PSI4, just trying to help here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/182#issuecomment-142095780
https://github.com/psi4/psi4/issues/183#issuecomment-144069231:11,Availability,error,error,11,"The actual error is somewhere in the ellipses, so we will need more info. The fact that make is reporting that the error occurred in `src/lib/libpsipcm` suggests to me that it may be a problem with finding the PCM repo on GitHub, but I need more info to be sure. Can you run:. ```; export VERBOSE=1; ```. (in Bash) or:. ```; setenv VERBOSE 1; ```. (in TCSH)? ; Rerun the build command and then post the full output here. If you are curious, `VERBOSE` is the environment variable that tells CMake to spit out more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/183#issuecomment-144069231
https://github.com/psi4/psi4/issues/183#issuecomment-144069231:115,Availability,error,error,115,"The actual error is somewhere in the ellipses, so we will need more info. The fact that make is reporting that the error occurred in `src/lib/libpsipcm` suggests to me that it may be a problem with finding the PCM repo on GitHub, but I need more info to be sure. Can you run:. ```; export VERBOSE=1; ```. (in Bash) or:. ```; setenv VERBOSE 1; ```. (in TCSH)? ; Rerun the build command and then post the full output here. If you are curious, `VERBOSE` is the environment variable that tells CMake to spit out more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/183#issuecomment-144069231
https://github.com/psi4/psi4/issues/183#issuecomment-144069231:470,Modifiability,variab,variable,470,"The actual error is somewhere in the ellipses, so we will need more info. The fact that make is reporting that the error occurred in `src/lib/libpsipcm` suggests to me that it may be a problem with finding the PCM repo on GitHub, but I need more info to be sure. Can you run:. ```; export VERBOSE=1; ```. (in Bash) or:. ```; setenv VERBOSE 1; ```. (in TCSH)? ; Rerun the build command and then post the full output here. If you are curious, `VERBOSE` is the environment variable that tells CMake to spit out more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/183#issuecomment-144069231
https://github.com/psi4/psi4/issues/184#issuecomment-156220388:63,Availability,down,down,63,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388
https://github.com/psi4/psi4/issues/184#issuecomment-156220388:772,Deployability,A/B,A/Bohr,772,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388
https://github.com/psi4/psi4/issues/184#issuecomment-156220388:339,Security,access,access,339,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388
https://github.com/psi4/psi4/issues/184#issuecomment-156220388:162,Testability,test,test,162,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388
https://github.com/psi4/psi4/issues/184#issuecomment-156224641:34,Integrability,rout,routines,34,"Thank you for fixing the gradient routines. Having PSI4 gradients will be really helpful. I am calling PSI4 in my QMMM calculations, so I will run through some of my pre-made test cases and look at extern1 to confirm that I am doing everything correctly. Thanks,; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156224641
https://github.com/psi4/psi4/issues/184#issuecomment-156224641:175,Testability,test,test,175,"Thank you for fixing the gradient routines. Having PSI4 gradients will be really helpful. I am calling PSI4 in my QMMM calculations, so I will run through some of my pre-made test cases and look at extern1 to confirm that I am doing everything correctly. Thanks,; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156224641
https://github.com/psi4/psi4/issues/184#issuecomment-157532425:41,Testability,test,tests,41,I checked the gradients with my pre-made tests and everything seems to be working properly. Thanks.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-157532425
https://github.com/psi4/psi4/issues/185#issuecomment-152699235:121,Availability,avail,available,121,"Dear Vladimir,. For OCC module ""molden_write true"" option is not active. Hence for the conventional OO methods it is not available. But, for DFOCC module it should be. Hence, for DF/CD-OO methods you should be use the ""molden_write true"" option. Best ragrds,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152699235
https://github.com/psi4/psi4/issues/185#issuecomment-152722428:172,Performance,optimiz,optimized,172,"Many thanx Ugur, all works fine but sum of orbitals occupation in molden file is twice of electrons in RHF case.; Is there any plans to implement ""molden_write"" in Orbital optimized DCFT case?. Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152722428
https://github.com/psi4/psi4/issues/185#issuecomment-152724099:130,Testability,test,tested,130,"You are welcome!. I will take a look to the molden_write function for occupation numbers. It has been written a while ago but not tested well. If there is a bug in the molden_write function I will fix it. As far as I know for OO-DCFT there is also a molden_write option. . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152724099
https://github.com/psi4/psi4/issues/185#issuecomment-152726098:174,Availability,avail,available,174,"Hi Vladimir,. For RHF case I build the entire OPDM, however SCF code builds only alpha-part of it. MoldenWriter is a function of libmints and it assumes that only alpha-part available, then it scale the OPDM by 2. However, for DFOCC module it is unnecessary and therefore you obtain the twice of occupation numbers. . I will fix it and push my changes in a minute. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152726098
https://github.com/psi4/psi4/issues/185#issuecomment-152795096:188,Integrability,contract,contraction,188,"Hi, Ugur.; I've found that something had changed in molden file generation mechanism since https://github.com/psi4/psi4public/commit/521f06adb441ac1e2f1732eb1cd090190b409c49.; ""Normalized contraction coefficients"" in [GTO] section are differ. Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152795096
https://github.com/psi4/psi4/issues/185#issuecomment-152804235:130,Deployability,release,release,130,Anyhow MP2 orbital-optimization works (I compared it with ORCA OO-MP2).; It would be interesting to find out the date of df-ocepa release. Vladimir.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152804235
https://github.com/psi4/psi4/issues/185#issuecomment-152804235:19,Performance,optimiz,optimization,19,Anyhow MP2 orbital-optimization works (I compared it with ORCA OO-MP2).; It would be interesting to find out the date of df-ocepa release. Vladimir.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152804235
https://github.com/psi4/psi4/issues/185#issuecomment-152814498:364,Deployability,release,release,364,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498
https://github.com/psi4/psi4/issues/185#issuecomment-152814498:436,Deployability,release,release,436,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498
https://github.com/psi4/psi4/issues/185#issuecomment-152814498:708,Deployability,release,release,708,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498
https://github.com/psi4/psi4/issues/185#issuecomment-152814498:766,Deployability,release,released,766,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498
https://github.com/psi4/psi4/issues/185#issuecomment-152814498:646,Energy Efficiency,energy,energy,646,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498
https://github.com/psi4/psi4/issues/185#issuecomment-152814498:487,Performance,optimiz,optimized,487,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498
https://github.com/psi4/psi4/issues/185#issuecomment-152818239:752,Performance,Optimiz,Optimized,752,"Hi, Ugur; I've been doing Quantum Monte Calro calculations in CASINO program https://vallico.net/casinoqmc/; It uses Diffusion Monte Carlo (DMC) method for solving for the ground state of the many-body Schrödinger equation. In principle for bosonic state the DMC method is exact, but fermionic system has nodes and consequently regions of positive and negative sign, thus several well-controlled approximations must be introduced for calculations to remain tractable.; The fixed-node approximation, is the simplest of them ; http://web.ornl.gov/~pk7/thesis/pkthnode21.html#SECTION00844000000000000000; CASINO program takes initial MO from external MOLDEN file usually from HF calculation (if single reference WFN is suitable). But I found that Orbital Optimized MO turns out better in this case.; I usually doing calculations in large bases up to cc-pV6Z and pV7Z.; I do not know whether it is possible to do such a calculation in psi4. with respect, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152818239
https://github.com/psi4/psi4/issues/185#issuecomment-152818239:506,Usability,simpl,simplest,506,"Hi, Ugur; I've been doing Quantum Monte Calro calculations in CASINO program https://vallico.net/casinoqmc/; It uses Diffusion Monte Carlo (DMC) method for solving for the ground state of the many-body Schrödinger equation. In principle for bosonic state the DMC method is exact, but fermionic system has nodes and consequently regions of positive and negative sign, thus several well-controlled approximations must be introduced for calculations to remain tractable.; The fixed-node approximation, is the simplest of them ; http://web.ornl.gov/~pk7/thesis/pkthnode21.html#SECTION00844000000000000000; CASINO program takes initial MO from external MOLDEN file usually from HF calculation (if single reference WFN is suitable). But I found that Orbital Optimized MO turns out better in this case.; I usually doing calculations in large bases up to cc-pV6Z and pV7Z.; I do not know whether it is possible to do such a calculation in psi4. with respect, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152818239
https://github.com/psi4/psi4/issues/185#issuecomment-152821604:128,Integrability,depend,depending,128,"I think it is very possible to use Psi4 for large basis set calculations as long as you use df or cd approximations. Of course, depending on your molecular system you should provide enough memory for OO methods. Finally, you should compile your psi4 with ""--max-am-eri=7"" option, which is necessary for our integral library (libint). I guess our binary versions are also compiled with high angular momentum options. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152821604
https://github.com/psi4/psi4/issues/185#issuecomment-190770304:51,Availability,avail,available,51,"Just be aware that there aren't fitting basis sets available for 6Z & 7Z orbital basis sets (https://github.com/psi4/psi4/issues/144), so switching to df-oo won't really work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-190770304
https://github.com/psi4/psi4/issues/185#issuecomment-190775724:17,Deployability,update,updated,17,"@bozkaya Yes, we updated this file and `molden_write true` works for all OO and DCFT methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-190775724
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:242,Availability,avail,available,242,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:145,Energy Efficiency,energy,energy,145,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:166,Energy Efficiency,energy,energy,166,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:182,Energy Efficiency,energy,energy,182,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:204,Energy Efficiency,energy,energy,204,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:766,Energy Efficiency,energy,energy,766,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:785,Energy Efficiency,energy,energy,785,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:804,Energy Efficiency,energy,energy,804,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:895,Energy Efficiency,energy,energy,895,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:1406,Energy Efficiency,energy,energy,1406,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:1472,Energy Efficiency,energy,energy,1472,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/186#issuecomment-152699151:44,Performance,optimiz,optimized,44,"Dear Vladimir,. We have two kind of orbital-optimized (OO) methods now. The old codes are using conventional integrals and they can be called by energy('conv-omp2'), energy('omp3'), energy('omp2.5'), and energy('ocepa). All these methods are available in the OCC module and all methods of the OCC module take advantages of real Abelian point group symmetry. Recently, I have introduced a new module for OO methods as well as standard MP and CC methods, which is called as DFOCC module. In DFOCC module, we have density-fitting and Cholesky decomposition approximations for molecular integrals. Hence, the OO methods of DFOCC module are df-omp2, cd-omp2, df-omp3, cd-omp3, df-omp2.5, and cd-omp2.5. Df/cd-ocepa methods are coming soon. These methods can be called by energy('df-omp2'), energy('df-omp3'), energy('df-omp2.5'), and cd versions can be run similarly. All methods of DFOCC module has energy and gradients (RHF and UHF). Please note that when you asked df and cd methods you should set ""scf_type df"" and ""scf_type cd"", respectively. Further, DFOCC module does NOT use the molecular symmetry. All DFOCC methods are greatly faster than their conventional counterparts. For a discussion of timing for OMP2, OO-RI-MP2 of orca, and our new DF/CD-OMP2 you may want to read our recent paper, J. Chem. Theory Comput., 2014, 10 (6), pp 2371–2378 (DOI:10.1021/ct500231c). Finally, please note when you set energy('omp2') the df-omp2 code runs, for old code you should use energy('conv-omp2'). For more details please refer to our manual section OCC/DFOCC. . As a conclusion, do not worry about the symmetry if your main concern is the efficiency . The present DF/CD-OO methods are greatly faster than the conventional OO methods. Best regards,; Ugur Bozkaya",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/186#issuecomment-152699151
https://github.com/psi4/psi4/issues/187#issuecomment-156849608:58,Modifiability,config,configure,58,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608
https://github.com/psi4/psi4/issues/187#issuecomment-156849608:106,Modifiability,config,config,106,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608
https://github.com/psi4/psi4/issues/187#issuecomment-156849608:173,Modifiability,plugin,plugin,173,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608
https://github.com/psi4/psi4/issues/187#issuecomment-156849608:285,Safety,safe,safe,285,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:64,Availability,error,error,64,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:253,Availability,down,downloading,253,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:457,Availability,error,error,457,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:508,Availability,error,error,508,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:728,Availability,Error,Error,728,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:795,Availability,Error,Error,795,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:821,Availability,Error,Error,821,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:1099,Availability,error,error,1099,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156789433:588,Safety,abort,aborted,588,"Your Linux guru is correct, you will need a newer compiler. The error is; because your compiler does not support C++11. Check out:. https://github.com/psi4/psi4public/wiki/9_CXX. for our current C++ compiler requirements. You may want to just consider; downloading the precompiled binaries, see:. https://github.com/psi4/psi4public/wiki/1_Obtaining#condabinary. for more information. Hello. I was trying to build Psi4 onto a cluster and I encountered this; error:. $psisource/src/lib/libmints/oeprop.h(116): error: data member; initializer is not allowed; int max_noon_ = 3;. compilation aborted for; /work/kimt33/sources/psi4/src/lib/libmints/local.cc (code 2); make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 2; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. I was told by my Linux guru to try different compilers and libraries in; case that the code is incompatible with my system. I was building using; Intel compilers 12.1.3, mkl 10.3.9, openmpi 1.6.2, cmake 3.3.2, python; 2.7.8, and boost 1.57.0. I'm not too sure what the error means, but maybe; this is a bug. Let me know if you'd like more information. Thanks,; David. —; Reply to this email directly or view it on GitHub; https://github.com/psi4/psi4public/issues/188.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156789433
https://github.com/psi4/psi4/issues/188#issuecomment-156910025:540,Availability,error,errors,540,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025
https://github.com/psi4/psi4/issues/188#issuecomment-156910025:590,Availability,error,error,590,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025
https://github.com/psi4/psi4/issues/188#issuecomment-156910025:642,Deployability,configurat,configuration,642,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025
https://github.com/psi4/psi4/issues/188#issuecomment-156910025:235,Modifiability,config,configure,235,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025
https://github.com/psi4/psi4/issues/188#issuecomment-156910025:642,Modifiability,config,configuration,642,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025
https://github.com/psi4/psi4/issues/188#issuecomment-156910025:620,Safety,detect,detected,620,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025
https://github.com/psi4/psi4/issues/188#issuecomment-157058625:62,Availability,fault,faulty,62,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625
https://github.com/psi4/psi4/issues/188#issuecomment-157058625:169,Safety,avoid,avoiding,169,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625
https://github.com/psi4/psi4/issues/188#issuecomment-157058625:301,Testability,log,logically,301,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625
https://github.com/psi4/psi4/issues/188#issuecomment-157802143:33,Availability,avail,available,33,"Now that the Linux binary is now available, I'm comfortable having stronger; C++11 requirements. David. On Wed, Nov 18, 2015 at 12:50 PM, Roberto Di Remigio <; notifications@github.com> wrote:. > @jturney https://github.com/jturney could you post a small example of; > using target_compile_features?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/188#issuecomment-157798532.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157802143
https://github.com/psi4/psi4/issues/188#issuecomment-158770738:125,Integrability,depend,dependencies,125,Sorry for taking so long:. ```; # define library; add_library(core STATIC ${CORE_SOURCE_FILES} ${CORE_HEADER_FILES}). # link dependencies; target_link_libraries(; core; ${Boost_LIBRARIES}; ${ICONV_LIBRARIES}; ${CORE_SYSTEM_LIBRARIES}; ). # This has been sufficient to enable C++11 for me. I should probably explicitly list; # the features I require.; target_compile_features(core PUBLIC cxx_constexpr); ```. Since I stated `PUBLIC` on the `target_compile_features` targets that depend on `core` will require that specific C++11 to be enabled.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-158770738
https://github.com/psi4/psi4/issues/188#issuecomment-158770738:478,Integrability,depend,depend,478,Sorry for taking so long:. ```; # define library; add_library(core STATIC ${CORE_SOURCE_FILES} ${CORE_HEADER_FILES}). # link dependencies; target_link_libraries(; core; ${Boost_LIBRARIES}; ${ICONV_LIBRARIES}; ${CORE_SYSTEM_LIBRARIES}; ). # This has been sufficient to enable C++11 for me. I should probably explicitly list; # the features I require.; target_compile_features(core PUBLIC cxx_constexpr); ```. Since I stated `PUBLIC` on the `target_compile_features` targets that depend on `core` will require that specific C++11 to be enabled.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-158770738
https://github.com/psi4/psi4/issues/188#issuecomment-161354287:269,Availability,mainten,maintenance,269,"@jturney It seems that CMake is not aware of any compiler features for the Intel compilers...; How do you handle this? Or you never tried to compile your other projects with Intel?; I found some ""custom"" extensions for the Intel compilers, but that would just move the maintenance work from the current detection system to another...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-161354287
https://github.com/psi4/psi4/issues/188#issuecomment-161354287:303,Safety,detect,detection,303,"@jturney It seems that CMake is not aware of any compiler features for the Intel compilers...; How do you handle this? Or you never tried to compile your other projects with Intel?; I found some ""custom"" extensions for the Intel compilers, but that would just move the maintenance work from the current detection system to another...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-161354287
https://github.com/psi4/psi4/issues/189#issuecomment-157114525:7,Deployability,update,updated,7,I have updated the reference on my branch and will file a pull request (on private) as soon a I manage to build and run some tests. For the moment I have updated the wiki (`git clone` ---> `git clone --recursive`),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157114525
https://github.com/psi4/psi4/issues/189#issuecomment-157114525:154,Deployability,update,updated,154,I have updated the reference on my branch and will file a pull request (on private) as soon a I manage to build and run some tests. For the moment I have updated the wiki (`git clone` ---> `git clone --recursive`),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157114525
https://github.com/psi4/psi4/issues/189#issuecomment-157114525:125,Testability,test,tests,125,I have updated the reference on my branch and will file a pull request (on private) as soon a I manage to build and run some tests. For the moment I have updated the wiki (`git clone` ---> `git clone --recursive`),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157114525
https://github.com/psi4/psi4/issues/189#issuecomment-157126331:20,Testability,test,tested,20,"Great, PR accepted, tested, synched btwn pub/priv, and now the binary builder can get to work. closed by 6c5512288ac3d16f2e3dee817b30cec4b9cbf9a5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157126331
https://github.com/psi4/psi4/issues/190#issuecomment-157368626:20,Testability,test,test,20,"I can confirm these test cases fail on my machine with a psi4public pull from yesterday (OpenSuse 13.2, gcc 4.8.3)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157368626
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:89,Availability,down,download,89,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:227,Availability,error,error,227,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:471,Availability,failure,failure,471,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:407,Deployability,update,update,407,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:10,Testability,test,tests,10,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:418,Testability,test,tests,418,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157470643:486,Testability,test,tests,486,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643
https://github.com/psi4/psi4/issues/190#issuecomment-157786910:129,Availability,error,errors,129,"As of this morning, I show dfomp3-2 and dfomp2p5-2 as fixed and dfomp2p5-grad1 and dfomp3-grad2 as still broken. You can see the errors by clicking on the ""Failed"" link at https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=44226.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157786910
https://github.com/psi4/psi4/issues/190#issuecomment-157786910:180,Testability,test,testboard,180,"As of this morning, I show dfomp3-2 and dfomp2p5-2 as fixed and dfomp2p5-grad1 and dfomp3-grad2 as still broken. You can see the errors by clicking on the ""Failed"" link at https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=44226.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157786910
https://github.com/psi4/psi4/issues/190#issuecomment-157834251:102,Testability,test,tests,102,"Hi Lori,. I can not reproduce failings on my computers. Could you send me output files for the failed tests so that I see what is gong wrong?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157834251
https://github.com/psi4/psi4/issues/190#issuecomment-157838070:212,Testability,test,tests,212,"Sure, here they are. > On Nov 18, 2015, at 2:31 PM, Ugur Bozkaya notifications@github.com wrote:; > ; > Hi Lori,; > ; > I can not reproduce failings on my computers. Could you send me output files for the failed tests so that I see what is gong wrong?; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/190#issuecomment-157834251.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157838070
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:245,Testability,TEST,TEST,245,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:307,Testability,TEST,TEST,307,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:370,Testability,TEST,TEST,370,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:433,Testability,TEST,TEST,433,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:442,Testability,TEST,TEST,442,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:473,Testability,TEST,TEST,473,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
https://github.com/psi4/psi4/issues/190#issuecomment-157840562:754,Testability,TEST,TEST,754,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562
