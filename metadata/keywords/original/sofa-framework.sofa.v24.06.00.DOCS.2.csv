id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt:2092,Testability,test,tests,2092,"ENEUTILITY_SOURCE_DIR ""src/sofa/component/sceneutility""). set(HEADER_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SceneUtility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Setting/CMakeLists.txt:213,Modifiability,config,config,213,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Setting LANGUAGES CXX). set(SOFACOMPONENTUSERSETTING_SOURCE_DIR ""src/sofa/component/setting""). set(HEADER_FILES; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/init.h; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/BackgroundSetting.h; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/MouseButtonSetting.h; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/SofaDefaultPathSetting.h; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/StatsSetting.h; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/ViewerSetting.h; ). set(SOURCE_FILES; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/BackgroundSetting.cpp; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/MouseButtonSetting.cpp; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/SofaDefaultPathSetting.cpp; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/StatsSetting.cpp; ${SOFACOMPONENTUSERSETTING_SOURCE_DIR}/ViewerSetting.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Setting/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Setting/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/CMakeLists.txt:338,Modifiability,config,config,338,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICS_SOURCE_DIR ""src/sofa/component/solidmechanics""). sofa_add_subdirectory_modules(SOFACOMPONENTSOLIDMECHANICS_TARGETS; DIRECTORIES Spring FEM TensorMass; ). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICS_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICS_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTSOLIDMECHANICS_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). if(SOFA_BUILD_TESTS); add_subdirectory(Testing); add_subdirectory(simutests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt:233,Modifiability,config,config,233,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.StateContainer LANGUAGES CXX). set(SOFACOMPONENTSTATECONTAINER_SOURCE_DIR ""src/sofa/component/statecontainer""). set(HEADER_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.inl; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/StateContainer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt:1206,Testability,test,tests,1206,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.StateContainer LANGUAGES CXX). set(SOFACOMPONENTSTATECONTAINER_SOURCE_DIR ""src/sofa/component/statecontainer""). set(HEADER_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.inl; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/StateContainer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt:1323,Testability,test,tests,1323,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.StateContainer LANGUAGES CXX). set(SOFACOMPONENTSTATECONTAINER_SOURCE_DIR ""src/sofa/component/statecontainer""). set(HEADER_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.inl; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/StateContainer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt:1472,Testability,test,tests,1472,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.StateContainer LANGUAGES CXX). set(SOFACOMPONENTSTATECONTAINER_SOURCE_DIR ""src/sofa/component/statecontainer""). set(HEADER_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.inl; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.h; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MappedObject.cpp; ${SOFACOMPONENTSTATECONTAINER_SOURCE_DIR}/MechanicalObject.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_STATECONTAINER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/StateContainer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/StateContainer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/CMakeLists.txt:312,Modifiability,config,config,312,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGY_SOURCE_DIR ""src/sofa/component/topology""). sofa_add_subdirectory_modules(SOFACOMPONENTTOPOLOGY_TARGETS; DIRECTORIES Container Mapping Utility; ). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGY_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGY_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTTOPOLOGY_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). if(SOFA_BUILD_TESTS); add_subdirectory(Testing); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt:201,Modifiability,config,config,201,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Visual LANGUAGES CXX). set(SOFACOMPONENTVISUAL_SOURCE_DIR ""src/sofa/component/visual""). set(HEADER_FILES; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/init.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/BaseCamera.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Camera.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/InteractiveCamera.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/LineAxis.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/RecordedCamera.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.inl; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.h; ). set(SOURCE_FILES; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/BaseCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Camera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/InteractiveCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/LineAxis.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/RecordedCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED) # BaseCamera; sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED) # VisualModelImpl. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2). sofa_create_package_with_ta",MatchSource.DOCS,Sofa/Component/Visual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt:2253,Testability,test,tests,2253,"AL_SOURCE_DIR}/TrailRenderer.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.inl; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.h; ). set(SOURCE_FILES; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/BaseCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Camera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/InteractiveCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/LineAxis.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/RecordedCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED) # BaseCamera; sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED) # VisualModelImpl. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_VISUAL_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_VISUAL_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Visual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt:2362,Testability,test,tests,2362,"AL_SOURCE_DIR}/TrailRenderer.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.inl; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.h; ). set(SOURCE_FILES; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/BaseCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Camera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/InteractiveCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/LineAxis.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/RecordedCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED) # BaseCamera; sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED) # VisualModelImpl. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_VISUAL_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_VISUAL_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Visual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt:2503,Testability,test,tests,2503,"AL_SOURCE_DIR}/TrailRenderer.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.inl; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.h; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.h; ). set(SOURCE_FILES; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/BaseCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Camera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/InteractiveCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/LineAxis.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/RecordedCamera.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/TrailRenderer.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/Visual3DText.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualGrid.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualModelImpl.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualStyle.cpp; ${SOFACOMPONENTVISUAL_SOURCE_DIR}/VisualTransform.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED) # BaseCamera; sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED) # VisualModelImpl. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_VISUAL_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_VISUAL_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Visual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Visual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/CMakeLists.txt:361,Modifiability,config,config,361,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Detection LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR ""src/sofa/component/collision/detection""). sofa_add_subdirectory_modules(SOFACOMPONENTCOLLISIONDETECTION_TARGETS; DIRECTORIES Algorithm Intersection; ). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTCOLLISIONDETECTION_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/CMakeLists.txt:174,Safety,detect,detection,174,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Detection LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR ""src/sofa/component/collision/detection""). sofa_add_subdirectory_modules(SOFACOMPONENTCOLLISIONDETECTION_TARGETS; DIRECTORIES Algorithm Intersection; ). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTION_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTCOLLISIONDETECTION_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt:247,Modifiability,config,config,247,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Geometry LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR ""src/sofa/component/collision/geometry""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/fwd.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CubeModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CylinderModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CylinderModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/LineModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/LineModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/PointModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/PointModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CubeModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CylinderModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/LineModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/PointModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/Triang",MatchSource.DOCS,Sofa/Component/Collision/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt:2506,Testability,test,tests,2506,"ONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CubeModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CylinderModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/LineModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/PointModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_GEOMETRY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt:2627,Testability,test,tests,2627,"ONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CubeModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CylinderModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/LineModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/PointModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_GEOMETRY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt:2780,Testability,test,tests,2780,"ONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.inl; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.h; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CubeModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/CylinderModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/LineModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/PointModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/RayModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/SphereModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TetrahedronModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModel.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleModelInRegularGrid.cpp; ${SOFACOMPONENTCOLLISIONGEOMETRY_SOURCE_DIR}/TriangleOctreeModel.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_GEOMETRY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/CMakeLists.txt:348,Modifiability,config,config,348,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Response LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONRESPONSE_SOURCE_DIR ""src/sofa/component/collision/response""). sofa_add_subdirectory_modules(SOFACOMPONENTCOLLISIONRESPONSE_TARGETS; DIRECTORIES Mapper Contact; ). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONRESPONSE_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONRESPONSE_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONRESPONSE_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTCOLLISIONRESPONSE_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Collision/Response/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Testing/CMakeLists.txt:149,Testability,test,testing,149,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.Collision.Testing). set(SOFACOMPONENTCOLLISIONTESTING_SRC ""src/sofa/component/collision/testing""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONTESTING_SRC}/MeshPrimitiveCreator.h; ${SOFACOMPONENTCOLLISIONTESTING_SRC}/SpherePrimitiveCreator.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONTESTING_SRC}/empty.cpp ; ); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_include_directories(${PROJECT_NAME} PUBLIC src/). target_link_libraries(${PROJECT_NAME} Sofa.Config Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} Sofa.Component.Topology.Container.Constant); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); ",MatchSource.DOCS,Sofa/Component/Collision/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt:289,Modifiability,config,config,289,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Detection.Algorithm LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR ""src/sofa/component/collision/detection/algorithm""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPM.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DefaultPipeline.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPhase.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/EndPoint.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/IncrSAP.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/MirrorIntersector.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPh",MatchSource.DOCS,Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt:193,Safety,detect,detection,193,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Detection.Algorithm LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR ""src/sofa/component/collision/detection/algorithm""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPM.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DefaultPipeline.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPhase.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/EndPoint.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/IncrSAP.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/MirrorIntersector.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPh",MatchSource.DOCS,Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt:2866,Testability,test,tests,2866,"LISIONDETECTIONALGORITHM_SOURCE_DIR}/MirrorIntersector.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/IncrSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt:2998,Testability,test,tests,2998,"LISIONDETECTIONALGORITHM_SOURCE_DIR}/MirrorIntersector.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/IncrSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt:3162,Testability,test,tests,3162,"LISIONDETECTIONALGORITHM_SOURCE_DIR}/MirrorIntersector.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.h; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BVHNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceBroadPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/BruteForceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DSAPBox.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/CollisionPipeline.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/DirectSAPNarrowPhase.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/IncrSAP.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceDetection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONALGORITHM_SOURCE_DIR}/RayTraceNarrowPhase.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_DETECTION_ALGORITHM_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Algorithm/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt:301,Modifiability,config,config,301,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Detection.Intersection LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR ""src/sofa/component/collision/detection/intersection""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/LocalMinDistance.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshMinProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MinProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayNewProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/TetrahedronDiscreteIntersection.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE",MatchSource.DOCS,Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt:199,Safety,detect,detection,199,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Detection.Intersection LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR ""src/sofa/component/collision/detection/intersection""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/LocalMinDistance.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshMinProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MinProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.inl; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayNewProximityIntersection.h; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/TetrahedronDiscreteIntersection.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE",MatchSource.DOCS,Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt:3380,Testability,test,tests,3380,"E_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/LocalMinDistance.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshMinProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MinProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayNewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/TetrahedronDiscreteIntersection.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt:3515,Testability,test,tests,3515,"E_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/LocalMinDistance.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshMinProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MinProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayNewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/TetrahedronDiscreteIntersection.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt:3682,Testability,test,tests,3682,"E_FILES; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/BaseProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/DiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/LocalMinDistance.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshDiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshMinProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MeshNewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/MinProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/NewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayDiscreteIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/RayNewProximityIntersection.cpp; ${SOFACOMPONENTCOLLISIONDETECTIONINTERSECTION_SOURCE_DIR}/TetrahedronDiscreteIntersection.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_DETECTION_INTERSECTION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Detection/Intersection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt:277,Modifiability,config,config,277,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Response.Contact LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR ""src/sofa/component/collision/response/contact""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/BarycentricPenalityContact.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/BarycentricPenalityContact.inl; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/BarycentricStickContact.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/BarycentricStickContact.inl; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/CollisionResponse.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/ContactIdentifier.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/ContactListener.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/DefaultContactManager.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/FrictionContact.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/FrictionContact.inl; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/PenalityContactForceField.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/PenalityContactForceField.inl; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RayContact.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RuleBasedContactManager.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/StickContactConstraint.h; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/StickContactConstraint.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/BarycentricPenalityContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/BarycentricStickContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/CollisionResponse.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/ContactIdentifier.cpp; ${SOFACOMPONENTCOLLISI",MatchSource.DOCS,Sofa/Component/Collision/Response/Contact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt:3848,Testability,test,tests,3848,"SECONTACT_SOURCE_DIR}/PenalityContactForceField.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RayContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RuleBasedContactManager.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/StickContactConstraint.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronBarycentricPenalityContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronFrictionContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronRayContact.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian REQUIRED) # FrictionContact needs UnilateralCC, StickContact BilateralInteractionConstraint; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Mapper); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Response/Contact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt:3977,Testability,test,tests,3977,"SECONTACT_SOURCE_DIR}/PenalityContactForceField.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RayContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RuleBasedContactManager.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/StickContactConstraint.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronBarycentricPenalityContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronFrictionContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronRayContact.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian REQUIRED) # FrictionContact needs UnilateralCC, StickContact BilateralInteractionConstraint; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Mapper); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Response/Contact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt:4138,Testability,test,tests,4138,"SECONTACT_SOURCE_DIR}/PenalityContactForceField.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RayContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/RuleBasedContactManager.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/StickContactConstraint.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronBarycentricPenalityContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronFrictionContact.cpp; ${SOFACOMPONENTCOLLISIONRESPONSECONTACT_SOURCE_DIR}/TetrahedronRayContact.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian REQUIRED) # FrictionContact needs UnilateralCC, StickContact BilateralInteractionConstraint; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Mapper); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_RESPONSE_CONTACT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Response/Contact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Contact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt:273,Modifiability,config,config,273,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision.Response.Mapper LANGUAGES CXX). set(SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR ""src/sofa/component/collision/response/mapper""). set(HEADER_FILES; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/init.h; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BaseContactMapper.h; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BarycentricContactMapper.h; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BarycentricContactMapper.inl; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/IdentityContactMapper.h; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/IdentityContactMapper.inl; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/RigidContactMapper.h; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/RigidContactMapper.inl; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/SubsetContactMapper.h; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/SubsetContactMapper.inl; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BaseContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BarycentricContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/IdentityContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/RigidContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/SubsetContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED) # BarycentricMapper needs Mec",MatchSource.DOCS,Sofa/Component/Collision/Response/Mapper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt:2747,Testability,test,tests,2747,"NRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BaseContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BarycentricContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/IdentityContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/RigidContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/SubsetContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED) # BarycentricMapper needs MechanicalObject. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.NonLinear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.StateContainer). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Response/Mapper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt:2875,Testability,test,tests,2875,"NRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BaseContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BarycentricContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/IdentityContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/RigidContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/SubsetContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED) # BarycentricMapper needs MechanicalObject. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.NonLinear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.StateContainer). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Response/Mapper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt:3035,Testability,test,tests,3035,"NRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BaseContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/BarycentricContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/IdentityContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/RigidContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/SubsetContactMapper.cpp; ${SOFACOMPONENTCOLLISIONRESPONSEMAPPER_SOURCE_DIR}/TetrahedronBarycentricContactMapper.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED) # BarycentricMapper needs MechanicalObject. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.NonLinear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.StateContainer). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_COLLISION_RESPONSE_MAPPER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/Response/Mapper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/Response/Mapper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/CMakeLists.txt:372,Modifiability,config,config,372,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Constraint.Lagrangian LANGUAGES CXX). set(SOFACOMPONENTCONSTRAINTLAGRANGIAN_SOURCE_DIR ""src/sofa/component/constraint/lagrangian""). sofa_add_subdirectory_modules(SOFACOMPONENTCONSTRAINTLAGRANGIAN_TARGETS; DIRECTORIES Model Correction Solver; ). set(HEADER_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIAN_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONSTRAINTLAGRANGIAN_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIAN_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTCONSTRAINTLAGRANGIAN_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Constraint/Lagrangian/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt:259,Modifiability,config,config,259,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Constraint.Projective LANGUAGES CXX). set(SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR ""src/sofa/component/constraint/projective""). set(HEADER_FILES; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/AffineMovementConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/AffineMovementConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/AttachConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/AttachConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedPlaneConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedPlaneConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedRotationConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedRotationConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedTranslationConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/FixedTranslationConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/HermiteSplineConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/HermiteSplineConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearMovementConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearMovementConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearVelocityConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearVelocityConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/OscillatorConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/OscillatorConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/ParabolicConstraint.h; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/ParabolicConstraint.inl; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialFixedConstraint.h; ${SOFACOMPONENTCONSTR",MatchSource.DOCS,Sofa/Component/Constraint/Projective/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt:8968,Testability,test,tests,8968,"tionProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/HermiteSplineProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearVelocityProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/OscillatorProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/ParabolicProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialFixedProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialLinearMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PatchTestMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PositionBasedDynamicsProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/SkeletalMotionProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LineProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PlaneProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PointProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/DirectionProjectiveConstraint.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Constraint/Projective/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt:9092,Testability,test,tests,9092,"tionProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/HermiteSplineProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearVelocityProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/OscillatorProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/ParabolicProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialFixedProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialLinearMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PatchTestMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PositionBasedDynamicsProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/SkeletalMotionProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LineProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PlaneProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PointProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/DirectionProjectiveConstraint.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Constraint/Projective/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt:9248,Testability,test,tests,9248,"tionProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/HermiteSplineProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LinearVelocityProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/OscillatorProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/ParabolicProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialFixedProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PartialLinearMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PatchTestMovementProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PositionBasedDynamicsProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/SkeletalMotionProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/LineProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PlaneProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/PointProjectiveConstraint.cpp; ${SOFACOMPONENTCONSTRAINTPROJECTIVE_SOURCE_DIR}/DirectionProjectiveConstraint.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_CONSTRAINT_PROJECTIVE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Constraint/Projective/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Projective/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/Correction/CMakeLists.txt:301,Modifiability,config,config,301,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Constraint.Lagrangian.Correction LANGUAGES CXX). set(SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR ""src/sofa/component/constraint/lagrangian/correction""). set(HEADER_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/init.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/GenericConstraintCorrection.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/LinearSolverConstraintCorrection.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/LinearSolverConstraintCorrection.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/PrecomputedConstraintCorrection.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/PrecomputedConstraintCorrection.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/UncoupledConstraintCorrection.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/UncoupledConstraintCorrection.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/GenericConstraintCorrection.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/LinearSolverConstraintCorrection.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/PrecomputedConstraintCorrection.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANCORRECTION_SOURCE_DIR}/UncoupledConstraintCorrection.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Mass REQUIRED) # UncoupledCC needs UniformMass; sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED) # PrecomputedCC needs CGLinearSolver; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED) # PrecomputedCC needs EulerSolver. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NA",MatchSource.DOCS,Sofa/Component/Constraint/Lagrangian/Correction/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/Correction/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/Model/CMakeLists.txt:281,Modifiability,config,config,281,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Constraint.Lagrangian.Model LANGUAGES CXX). set(SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR ""src/sofa/component/constraint/lagrangian/model""). set(HEADER_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/init.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/BilateralConstraintResolution.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/BilateralInteractionConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/BilateralInteractionConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/SlidingConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/SlidingConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/StopperConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/StopperConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/UniformConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/UniformConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/UnilateralConstraintResolution.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/UnilateralInteractionConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/UnilateralInteractionConstraint.inl. ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/BilateralLagrangianConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/BilateralLagrangianConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/FixedLagrangianConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/FixedLagrangianConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/SlidingLagrangianConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/SlidingLagrangianConstraint.inl; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/StopperLagrangianConstraint.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANMODEL_SOURCE_DIR}/StopperLagrangianConst",MatchSource.DOCS,Sofa/Component/Constraint/Lagrangian/Model/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/Model/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/Solver/CMakeLists.txt:285,Modifiability,config,config,285,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Constraint.Lagrangian.Solver LANGUAGES CXX). set(SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR ""src/sofa/component/constraint/lagrangian/solver""). set(HEADER_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/init.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/ConstraintSolverImpl.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/ConstraintStoreLambdaVisitor.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/GenericConstraintProblem.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/GenericConstraintSolver.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/LCPConstraintSolver.h. ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/visitors/ConstraintStoreLambdaVisitor.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/visitors/MechanicalGetConstraintViolationVisitor.h; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/visitors/MechanicalGetConstraintResolutionVisitor.h. ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/ConstraintStoreLambdaVisitor.h #For deprecation; ). set(SOURCE_FILES; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/ConstraintSolverImpl.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/GenericConstraintProblem.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/GenericConstraintSolver.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/LCPConstraintSolver.cpp. ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/visitors/ConstraintStoreLambdaVisitor.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/visitors/MechanicalGetConstraintViolationVisitor.cpp; ${SOFACOMPONENTCONSTRAINTLAGRANGIANSOLVER_SOURCE_DIR}/visitors/MechanicalGetConstraintResolutionVisitor.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILE",MatchSource.DOCS,Sofa/Component/Constraint/Lagrangian/Solver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/Lagrangian/Solver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt:231,Modifiability,config,config,231,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Engine.Analyze LANGUAGES CXX). set(SOFACOMPONENTENGINEANALYZE_SOURCE_DIR ""src/sofa/component/engine/analyze""). set(HEADER_FILES; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/init.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/AverageCoord.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/AverageCoord.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/AverageCoord.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.cpp # needs DynamicSparseGeoAlgo; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR",MatchSource.DOCS,Sofa/Component/Engine/Analyze/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt:2085,Testability,test,tests,2085,"INEANALYZE_SOURCE_DIR}/AverageCoord.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/AverageCoord.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.cpp # needs DynamicSparseGeoAlgo; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_ANALYZE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_ANALYZE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Analyze/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt:2202,Testability,test,tests,2202,"INEANALYZE_SOURCE_DIR}/AverageCoord.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/AverageCoord.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.cpp # needs DynamicSparseGeoAlgo; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_ANALYZE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_ANALYZE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Analyze/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt:2351,Testability,test,tests,2351,"INEANALYZE_SOURCE_DIR}/AverageCoord.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.inl; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.h; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/AverageCoord.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ClusteringEngine.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/Distances.cpp # needs DynamicSparseGeoAlgo; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/HausdorffDistance.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/ShapeMatching.cpp; ${SOFACOMPONENTENGINEANALYZE_SOURCE_DIR}/SumEngine.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_ANALYZE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_ANALYZE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Analyze/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Analyze/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt:235,Modifiability,config,config,235,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Engine.Generate LANGUAGES CXX). set(SOFACOMPONENTENGINEGENERATE_SOURCE_DIR ""src/sofa/component/engine/generate""). set(HEADER_FILES; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/init.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeEdgesAndGenerateQuads.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeEdgesAndGenerateQuads.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeQuadsAndGenerateHexas.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeQuadsAndGenerateHexas.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeSurface.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeSurface.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateCylinder.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateCylinder.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateGrid.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateGrid.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateRigidMass.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateRigidMass.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateSphere.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateSphere.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GroupFilterYoungModulus.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GroupFilterYoungModulus.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/JoinPoints.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/JoinPoints.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeMeshes.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeMeshes.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergePoints.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergePoints.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeSets.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeSets.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeVectors.h; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeVectors.inl; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshBarycentricMapperEngine.h",MatchSource.DOCS,Sofa/Component/Engine/Generate/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt:4608,Testability,test,tests,4608,"rudeEdgesAndGenerateQuads.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeQuadsAndGenerateHexas.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeSurface.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateCylinder.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateGrid.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateRigidMass.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateSphere.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GroupFilterYoungModulus.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/JoinPoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeMeshes.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergePoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeSets.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeVectors.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshBarycentricMapperEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshClosingEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshTetraStuffing.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/NormEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/NormalsFromPoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/RandomPointDistributionInSurface.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/Spiral.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_GENERATE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_GENERATE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Generate/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt:4726,Testability,test,tests,4726,"rudeEdgesAndGenerateQuads.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeQuadsAndGenerateHexas.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeSurface.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateCylinder.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateGrid.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateRigidMass.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateSphere.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GroupFilterYoungModulus.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/JoinPoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeMeshes.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergePoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeSets.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeVectors.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshBarycentricMapperEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshClosingEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshTetraStuffing.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/NormEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/NormalsFromPoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/RandomPointDistributionInSurface.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/Spiral.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_GENERATE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_GENERATE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Generate/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt:4876,Testability,test,tests,4876,"rudeEdgesAndGenerateQuads.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeQuadsAndGenerateHexas.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/ExtrudeSurface.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateCylinder.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateGrid.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateRigidMass.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GenerateSphere.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/GroupFilterYoungModulus.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/JoinPoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeMeshes.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergePoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeSets.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MergeVectors.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshBarycentricMapperEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshClosingEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/MeshTetraStuffing.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/NormEngine.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/NormalsFromPoints.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/RandomPointDistributionInSurface.cpp; ${SOFACOMPONENTENGINEGENERATE_SOURCE_DIR}/Spiral.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_GENERATE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_GENERATE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Generate/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Generate/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt:227,Modifiability,config,config,227,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Engine.Select LANGUAGES CXX). set(SOFACOMPONENTENGINESELECT_SOURCE_DIR ""src/sofa/component/engine/select""). set(HEADER_FILES; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/init.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/BoxROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/BoxROI.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ComplementaryROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ComplementaryROI.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/IndicesFromValues.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/IndicesFromValues.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MergeROIs.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshBoundaryROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshROI.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSampler.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSampler.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSplittingEngine.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSplittingEngine.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSubsetEngine.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSubsetEngine.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/NearestPointROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/NearestPointROI.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PairBoxRoi.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PairBoxRoi.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PlaneROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PlaneROI.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PointsFromIndices.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PointsFromIndices.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ProximityROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ProximityROI.inl; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectConnectedLabelsROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectLabelROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SphereROI.h; ${SOFACOMPONENTENGINESELECT_SOURCE",MatchSource.DOCS,Sofa/Component/Engine/Select/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt:4127,Testability,test,tests,4127,"LES; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/BoxROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ComplementaryROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/IndicesFromValues.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MergeROIs.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshBoundaryROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSampler.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSplittingEngine.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSubsetEngine.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/NearestPointROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PairBoxRoi.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PlaneROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PointsFromIndices.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ProximityROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectConnectedLabelsROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectLabelROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SphereROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SubsetTopology.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ValuesFromIndices.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ValuesFromPositions.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_SELECT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_SELECT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Select/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt:4243,Testability,test,tests,4243,"LES; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/BoxROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ComplementaryROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/IndicesFromValues.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MergeROIs.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshBoundaryROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSampler.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSplittingEngine.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSubsetEngine.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/NearestPointROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PairBoxRoi.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PlaneROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PointsFromIndices.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ProximityROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectConnectedLabelsROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectLabelROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SphereROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SubsetTopology.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ValuesFromIndices.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ValuesFromPositions.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_SELECT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_SELECT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Select/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt:4391,Testability,test,tests,4391,"LES; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/BoxROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ComplementaryROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/IndicesFromValues.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MergeROIs.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshBoundaryROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSampler.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSplittingEngine.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/MeshSubsetEngine.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/NearestPointROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PairBoxRoi.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PlaneROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/PointsFromIndices.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ProximityROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectConnectedLabelsROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SelectLabelROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SphereROI.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/SubsetTopology.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ValuesFromIndices.cpp; ${SOFACOMPONENTENGINESELECT_SOURCE_DIR}/ValuesFromPositions.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_SELECT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_SELECT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Select/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Select/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Testing/CMakeLists.txt:140,Testability,test,testing,140,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.Engine.Testing). set(SOFACOMPONENTENGINETESTING_SRC ""src/sofa/component/engine/testing""). set(HEADER_FILES; ${SOFACOMPONENTENGINETESTING_SRC}/DataEngineTestCreation.h; ). set(SOURCE_FILES; ${SOFACOMPONENTENGINETESTING_SRC}/empty.cpp ; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_include_directories(${PROJECT_NAME} PUBLIC src/). target_link_libraries(${PROJECT_NAME} Sofa.Config Sofa.Simulation.Core); ",MatchSource.DOCS,Sofa/Component/Engine/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt:239,Modifiability,config,config,239,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Engine.Transform LANGUAGES CXX). set(SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR ""src/sofa/component/engine/transform""). set(HEADER_FILES; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/init.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DifferenceEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DifferenceEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DilateEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DilateEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DisplacementMatrixEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DisplacementMatrixEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/IndexValueMapper.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/IndexValueMapper.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Indices2ValuesMapper.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Indices2ValuesMapper.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MapIndices.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MapIndices.inl ; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MathOp.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MathOp.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ProjectiveTransformEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ProjectiveTransformEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/QuatToRigidEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/QuatToRigidEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ROIValueMapper.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/RigidToQuatEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/RigidToQuatEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/SmoothMeshEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/SmoothMeshEngine.inl ; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformEngine.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformEngine.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformMatrixEngine.h; ${SOFACOMPONENTENGINETRANSF",MatchSource.DOCS,Sofa/Component/Engine/Transform/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt:3810,Testability,test,tests,3810,"n.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.inl. ). set(SOURCE_FILES; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DifferenceEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DilateEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DisplacementMatrixEngine.cpp ; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/IndexValueMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Indices2ValuesMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MapIndices.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MathOp.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ProjectiveTransformEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/QuatToRigidEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ROIValueMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/RigidToQuatEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/SmoothMeshEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformMatrixEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformPosition.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_TRANSFORM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_TRANSFORM_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Transform/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt:3929,Testability,test,tests,3929,"n.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.inl. ). set(SOURCE_FILES; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DifferenceEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DilateEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DisplacementMatrixEngine.cpp ; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/IndexValueMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Indices2ValuesMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MapIndices.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MathOp.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ProjectiveTransformEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/QuatToRigidEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ROIValueMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/RigidToQuatEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/SmoothMeshEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformMatrixEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformPosition.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_TRANSFORM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_TRANSFORM_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Transform/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt:4080,Testability,test,tests,4080,"n.inl; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.h; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.inl. ). set(SOURCE_FILES; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DifferenceEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DilateEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/DisplacementMatrixEngine.cpp ; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/IndexValueMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Indices2ValuesMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MapIndices.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/MathOp.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ProjectiveTransformEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/QuatToRigidEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/ROIValueMapper.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/RigidToQuatEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/SmoothMeshEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformMatrixEngine.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/TransformPosition.cpp; ${SOFACOMPONENTENGINETRANSFORM_SOURCE_DIR}/Vertex2Frame.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_ENGINE_TRANSFORM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ENGINE_TRANSFORM_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/Transform/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/Transform/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt:203,Modifiability,config,config,203,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.IO.Mesh LANGUAGES CXX). set(SOFACOMPONENTIOMESH_SOURCE_DIR ""src/sofa/component/io/mesh""). set(HEADER_FILES; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/init.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BaseVTKReader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BaseVTKReader.inl; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOBJLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshVTKLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshGmshLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VisualModelOBJExporter.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VTKExporter.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GIDMeshLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GridMeshCreator.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOffLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshSTLLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshTrianLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshXspLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/OffSequenceLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/SphereLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/StringMeshCreator.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VoxelGridLoader.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BlenderExporter.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BlenderExporter.inl; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshExporter.h; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/STLExporter.h; ). set(SOURCE_FILES; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BaseVTKReader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOBJLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshVTKLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshGmshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VisualModelOBJExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VTKExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GIDMeshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GridMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOffLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshSTLLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshTri",MatchSource.DOCS,Sofa/Component/IO/Mesh/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt:3257,Testability,test,tests,3257,"${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshVTKLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshGmshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VisualModelOBJExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VTKExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GIDMeshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GridMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOffLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshSTLLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshTrianLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshXspLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/OffSequenceLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/SphereLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/StringMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VoxelGridLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BlenderExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/STLExporter.cpp; ). sofa_find_package(TinyXML2 REQUIRED) # BaseVTKReader; sofa_find_package(ZLIB REQUIRED) # BlenderExporter; sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_IO_MESH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_IO_MESH_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/IO/Mesh/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt:3367,Testability,test,tests,3367,"${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshVTKLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshGmshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VisualModelOBJExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VTKExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GIDMeshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GridMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOffLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshSTLLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshTrianLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshXspLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/OffSequenceLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/SphereLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/StringMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VoxelGridLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BlenderExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/STLExporter.cpp; ). sofa_find_package(TinyXML2 REQUIRED) # BaseVTKReader; sofa_find_package(ZLIB REQUIRED) # BlenderExporter; sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_IO_MESH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_IO_MESH_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/IO/Mesh/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt:3509,Testability,test,tests,3509,"${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshVTKLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshGmshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VisualModelOBJExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VTKExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GIDMeshLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/GridMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshOffLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshSTLLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshTrianLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshXspLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/OffSequenceLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/SphereLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/StringMeshCreator.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/VoxelGridLoader.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/BlenderExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/MeshExporter.cpp; ${SOFACOMPONENTIOMESH_SOURCE_DIR}/STLExporter.cpp; ). sofa_find_package(TinyXML2 REQUIRED) # BaseVTKReader; sofa_find_package(ZLIB REQUIRED) # BlenderExporter; sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_IO_MESH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_IO_MESH_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/IO/Mesh/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/Mesh/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/CMakeLists.txt:251,Modifiability,config,config,251,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.LinearSolver.Direct LANGUAGES CXX). set(SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR ""src/sofa/component/linearsolver/direct""). set(HEADER_FILES; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/init.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/AsyncSparseLDLSolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/AsyncSparseLDLSolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/BTDLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/BTDLinearSolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/CholeskySolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/CholeskySolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenDirectSparseSolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenDirectSparseSolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSolverFactory.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSimplicialLDLT.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSimplicialLLT.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSparseLU.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSparseQR.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/MatrixLinearSystem[BTDMatrix].h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/PrecomputedLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/PrecomputedLinearSolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SVDLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SVDLinearSolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SimplicialLDLTTraits.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SimplicialLLTTraits.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseCholeskySolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseCholeskySolver.inl; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseCommon.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseLDLSolver.h; ${SOFACOMPONENTLINEARSOLVERDIRECT",MatchSource.DOCS,Sofa/Component/LinearSolver/Direct/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/CMakeLists.txt:4445,Testability,test,tests,4445,"OFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/BTDLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/CholeskySolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSimplicialLDLT.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSimplicialLLT.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSolverFactory.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSparseLU.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSparseQR.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/MatrixLinearSystem[BTDMatrix].cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/PrecomputedLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SVDLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseCommon.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseLDLSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/TypedMatrixLinearSystem[BTDMatrix].cpp; ). # make sure you have threads for AsyncSparseLDLSolver; sofa_find_package(Threads REQUIRED). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED) # Only for MatrixLinearSolver which will move to core; sofa_find_package(Sofa.Component.LinearSolver.Ordering REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.LinearSolver.Iterative Sofa.Component.LinearSolver.Ordering); target_link_libraries(${PROJECT_NAME} PUBLIC Threads::Threads). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_LINEARSOLVER_DIRECT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_LINEARSOLVER_DIRECT_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/LinearSolver/Direct/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/CMakeLists.txt:4581,Testability,test,tests,4581,"OFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/BTDLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/CholeskySolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSimplicialLDLT.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSimplicialLLT.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSolverFactory.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSparseLU.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/EigenSparseQR.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/MatrixLinearSystem[BTDMatrix].cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/PrecomputedLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SVDLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseCommon.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/SparseLDLSolver.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/TypedMatrixLinearSystem[BTDMatrix].cpp; ). # make sure you have threads for AsyncSparseLDLSolver; sofa_find_package(Threads REQUIRED). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED) # Only for MatrixLinearSolver which will move to core; sofa_find_package(Sofa.Component.LinearSolver.Ordering REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.LinearSolver.Iterative Sofa.Component.LinearSolver.Ordering); target_link_libraries(${PROJECT_NAME} PUBLIC Threads::Threads). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_LINEARSOLVER_DIRECT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_LINEARSOLVER_DIRECT_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/LinearSolver/Direct/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Iterative/CMakeLists.txt:263,Modifiability,config,config,263,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.LinearSolver.Iterative LANGUAGES CXX). set(SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR ""src/sofa/component/linearsolver/iterative""). set(HEADER_FILES; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/init.h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/CGLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/CGLinearSolver.inl; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/GraphScatteredTypes.h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/LinearSystemData[GraphScattered].h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixFreeSystem[GraphScattered].h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixLinearSolver.inl; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixLinearSystem[GraphScattered].h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MinResLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MinResLinearSolver.inl; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/ShewchukPCGLinearSolver.h; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/ShewchukPCGLinearSolver.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/CGLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/GraphScatteredTypes.cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/LinearSystemData[GraphScattered].cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixFreeSystem[GraphScattered].cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MatrixLinearSystem[GraphScattered].cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/MinResLinearSolver.cpp; ${SOFACOMPONENTLINEARSOLVERITERATIVE_SOURCE_DIR}/ShewchukPCGLinearSolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED)",MatchSource.DOCS,Sofa/Component/LinearSolver/Iterative/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Iterative/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Ordering/CMakeLists.txt:255,Modifiability,config,config,255,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.LinearSolver.Ordering LANGUAGES CXX). set(SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR ""src/sofa/component/linearsolver/ordering""). set(HEADER_FILES; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/init.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/AMDOrderingMethod.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/BaseEigenOrderingMethod.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/COLAMDOrderingMethod.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/NaturalOrderingMethod.h; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/OrderingMethodAccessor.h; ). set(SOURCE_FILES; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/AMDOrderingMethod.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/COLAMDOrderingMethod.cpp; ${SOFACOMPONENTLINEARSOLVERDIRECT_SOURCE_DIR}/NaturalOrderingMethod.cpp; ). sofa_find_package(Sofa.Core REQUIRED); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/LinearSolver/Ordering/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Ordering/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Preconditioner/CMakeLists.txt:283,Modifiability,config,config,283,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.LinearSolver.Preconditioner LANGUAGES CXX). set(SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR ""src/sofa/component/linearsolver/preconditioner""). set(HEADER_FILES; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/init.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/BlockJacobiPreconditioner.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/BlockJacobiPreconditioner.inl; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/JacobiPreconditioner.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/JacobiPreconditioner.inl; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/PrecomputedWarpPreconditioner.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/PrecomputedWarpPreconditioner.inl; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/SSORPreconditioner.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/SSORPreconditioner.inl; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/WarpPreconditioner.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/WarpPreconditioner.inl; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/RotationMatrixSystem.h; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/PrecomputedMatrixSystem.h; ). set(SOURCE_FILES; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/BlockJacobiPreconditioner.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/JacobiPreconditioner.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/PrecomputedWarpPreconditioner.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/SSORPreconditioner.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/WarpPreconditioner.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/RotationMatrixSystem.cpp; ${SOFACOMPONENTLINEARSOLVERPRECONDITIONER_SOURCE_DIR}/PrecomputedMatrixSystem.cpp; ). sofa_find_pac",MatchSource.DOCS,Sofa/Component/LinearSolver/Preconditioner/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Preconditioner/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/tests/CMakeLists.txt:186,Integrability,depend,dependencies,186,cmake_minimum_required(VERSION 3.22). project(Sofa.Component.LinearSolver.Direct_test). set(SOURCE_FILES; SparseLDLSolver_test.cpp; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); # dependencies are managed directly in the target_link_libraries pass; target_link_libraries(${PROJECT_NAME} Sofa.Testing; Sofa.Component.LinearSolver.Direct; ); ,MatchSource.DOCS,Sofa/Component/LinearSolver/Direct/tests/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/Direct/tests/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/tests/CMakeLists.txt:205,Integrability,depend,dependencies,205,cmake_minimum_required(VERSION 3.22). project(Sofa.Component.LinearSystem_test). set(SOURCE_FILES; MatrixLinearSystem_test.cpp; MappingGraph_test.cpp; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); # dependencies are managed directly in the target_link_libraries pass; target_link_libraries(${PROJECT_NAME} Sofa.Testing; Sofa.Component.LinearSystem; Sofa.Component.StateContainer; Sofa.Component.Mapping.Linear; Sofa.Component.SolidMechanics.Spring; ); ,MatchSource.DOCS,Sofa/Component/LinearSystem/tests/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/tests/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt:231,Modifiability,config,config,231,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mapping.Linear LANGUAGES CXX). set(SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR ""src/sofa/component/mapping/linear""). set(HEADER_FILES; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/init.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapper.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapper.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperEdgeSetTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperEdgeSetTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperHexahedronSetTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperHexahedronSetTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperMeshTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperMeshTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperQuadSetTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperQuadSetTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperRegularGridTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperRegularGridTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperSparseGridTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperSparseGridTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperTetrahedronSetTopology.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperTetrahedronSetTopology.inl; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMappers/BarycentricMapperTopologyContainer.h; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/BarycentricMa",MatchSource.DOCS,Sofa/Component/Mapping/Linear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt:8875,Testability,test,tests,8875,"ACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/LineSetSkinningMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedHexaTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SkinningMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SubsetMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SubsetMultiMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/TubularMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/VoidMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MAPPING_LINEAR_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MAPPING_LINEAR_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/Linear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt:8992,Testability,test,tests,8992,"ACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/LineSetSkinningMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedHexaTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SkinningMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SubsetMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SubsetMultiMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/TubularMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/VoidMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MAPPING_LINEAR_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MAPPING_LINEAR_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/Linear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt:9141,Testability,test,tests,9141,"ACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/LineSetSkinningMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/Mesh2PointTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedHexaTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraMechanicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SimpleTesselatedTetraTopologicalMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SkinningMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SubsetMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/SubsetMultiMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/TubularMapping.cpp; ${SOFACOMPONENTMAPPINGLINEAR_SOURCE_DIR}/VoidMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MAPPING_LINEAR_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MAPPING_LINEAR_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/Linear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Linear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/MappedMatrix/CMakeLists.txt:255,Modifiability,config,config,255,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mapping.MappedMatrix LANGUAGES CXX). set(SOFACOMPONENTMAPPINGMAPPEDMATRIX_SOURCE_DIR ""src/sofa/component/mapping/mappedmatrix""). set(HEADER_FILES; ${SOFACOMPONENTMAPPINGMAPPEDMATRIX_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMAPPINGMAPPEDMATRIX_SOURCE_DIR}/init.h; ${SOFACOMPONENTMAPPINGMAPPEDMATRIX_SOURCE_DIR}/MappingGeometricStiffnessForceField.h; ${SOFACOMPONENTMAPPINGMAPPEDMATRIX_SOURCE_DIR}/MechanicalMatrixMapper.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPINGMAPPEDMATRIX_SOURCE_DIR}/init.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Mapping/MappedMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/MappedMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt:243,Modifiability,config,config,243,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mapping.NonLinear LANGUAGES CXX). set(SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR ""src/sofa/component/mapping/nonlinear""). set(HEADER_FILES; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/init.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceFromTargetMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceFromTargetMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/NonLinearMappingData.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidRigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceFromTargetMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_V",MatchSource.DOCS,Sofa/Component/Mapping/NonLinear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt:2191,Testability,test,tests,2191,"NLINEAR_SOURCE_DIR}/DistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/NonLinearMappingData.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidRigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceFromTargetMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MAPPING_NONLINEAR_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MAPPING_NONLINEAR_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/NonLinear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt:2311,Testability,test,tests,2311,"NLINEAR_SOURCE_DIR}/DistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/NonLinearMappingData.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidRigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceFromTargetMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MAPPING_NONLINEAR_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MAPPING_NONLINEAR_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/NonLinear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt:2463,Testability,test,tests,2463,"NLINEAR_SOURCE_DIR}/DistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/NonLinearMappingData.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidRigidMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.inl; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.h; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceFromTargetMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/DistanceMultiMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/RigidMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareDistanceMapping.cpp; ${SOFACOMPONENTMAPPINGNONLINEAR_SOURCE_DIR}/SquareMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MAPPING_NONLINEAR_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MAPPING_NONLINEAR_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/NonLinear/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/NonLinear/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Testing/CMakeLists.txt:143,Testability,test,testing,143,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.Mapping.Testing). set(SOFACOMPONENTMAPPINGTESTING_SRC ""src/sofa/component/mapping/testing""). set(HEADER_FILES; ${SOFACOMPONENTMAPPINGTESTING_SRC}/MappingTestCreation.h; ${SOFACOMPONENTMAPPINGTESTING_SRC}/Multi2MappingTestCreation.h; ${SOFACOMPONENTMAPPINGTESTING_SRC}/MultiMappingTestCreation.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPINGTESTING_SRC}/empty.cpp ; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_include_directories(${PROJECT_NAME} PUBLIC src/). target_link_libraries(${PROJECT_NAME} Sofa.Config Sofa.Simulation.Core); ",MatchSource.DOCS,Sofa/Component/Mapping/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/CMakeLists.txt:247,Modifiability,config,config,247,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver.Backward LANGUAGES CXX). set(SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR ""src/sofa/component/odesolver/backward""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/init.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/EulerImplicitSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/StaticSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/VariationalSymplecticSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/NewmarkImplicitSolver.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/EulerImplicitSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/StaticSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/VariationalSymplecticSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/NewmarkImplicitSolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_ODESOLVER_BACKWARD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ODESOLVER_BACKWARD_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/Backward/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/CMakeLists.txt:1447,Testability,test,tests,1447,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver.Backward LANGUAGES CXX). set(SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR ""src/sofa/component/odesolver/backward""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/init.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/EulerImplicitSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/StaticSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/VariationalSymplecticSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/NewmarkImplicitSolver.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/EulerImplicitSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/StaticSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/VariationalSymplecticSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/NewmarkImplicitSolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_ODESOLVER_BACKWARD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ODESOLVER_BACKWARD_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/Backward/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/CMakeLists.txt:1582,Testability,test,tests,1582,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver.Backward LANGUAGES CXX). set(SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR ""src/sofa/component/odesolver/backward""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/init.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/EulerImplicitSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/StaticSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/VariationalSymplecticSolver.h; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/NewmarkImplicitSolver.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/EulerImplicitSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/StaticSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/VariationalSymplecticSolver.cpp; ${SOFACOMPONENTODESOLVERBACKWARD_SOURCE_DIR}/NewmarkImplicitSolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_ODESOLVER_BACKWARD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ODESOLVER_BACKWARD_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/Backward/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/CMakeLists.txt:243,Modifiability,config,config,243,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver.Forward LANGUAGES CXX). set(SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR ""src/sofa/component/odesolver/forward""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/init.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/EulerSolver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/CentralDifferenceSolver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta2Solver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta4Solver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/DampVelocitySolver.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/EulerSolver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/CentralDifferenceSolver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta2Solver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta4Solver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/DampVelocitySolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_ODESOLVER_FORWARD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ODESOLVER_FORWARD_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/Forward/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/CMakeLists.txt:1544,Testability,test,tests,1544,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver.Forward LANGUAGES CXX). set(SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR ""src/sofa/component/odesolver/forward""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/init.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/EulerSolver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/CentralDifferenceSolver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta2Solver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta4Solver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/DampVelocitySolver.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/EulerSolver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/CentralDifferenceSolver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta2Solver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta4Solver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/DampVelocitySolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_ODESOLVER_FORWARD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ODESOLVER_FORWARD_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/Forward/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/CMakeLists.txt:1678,Testability,test,tests,1678,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver.Forward LANGUAGES CXX). set(SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR ""src/sofa/component/odesolver/forward""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/init.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/EulerSolver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/CentralDifferenceSolver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta2Solver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta4Solver.h; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/DampVelocitySolver.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/EulerSolver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/CentralDifferenceSolver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta2Solver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/RungeKutta4Solver.cpp; ${SOFACOMPONENTODESOLVERFORWARD_SOURCE_DIR}/DampVelocitySolver.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_ODESOLVER_FORWARD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_ODESOLVER_FORWARD_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/Forward/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Testing/CMakeLists.txt:149,Testability,test,testing,149,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.ODESolver.Testing). set(SOFACOMPONENTODESOLVERTESTING_SRC ""src/sofa/component/odesolver/testing""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERTESTING_SRC}/EigenTestUtilities.h; ${SOFACOMPONENTODESOLVERTESTING_SRC}/MassSpringSystemCreation.h; ${SOFACOMPONENTODESOLVERTESTING_SRC}/ODESolverSpringTest.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERTESTING_SRC}/empty.cpp ; ); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_include_directories(${PROJECT_NAME} PUBLIC src/); target_link_libraries(${PROJECT_NAME} Sofa.Config Sofa.Simulation.Core); ",MatchSource.DOCS,Sofa/Component/ODESolver/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/tests/CMakeLists.txt:538,Integrability,depend,dependencies,538,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.ODESolver.Backward_test). set(SOURCE_FILES; EulerImplicitSolverDynamic_test.cpp; EulerImplicitSolverStatic_test.cpp; NewmarkImplicitSolverDynamic_test.cpp; StaticSolver_test.cpp; SpringSolverDynamic_test.cpp; VariationalSymplecticExplicitSolverDynamic_test.cpp; VariationalSymplecticImplicitSolverDynamic_test.cpp; ). add_definitions(""-DSOFACOMPONENTODESOLVERBACKWARD_TEST_SCENES_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/scenes\""""). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); # dependencies are managed directly in the target_link_libraries pass; target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Component.ODESolver.Testing Sofa.Component.ODESolver.Backward Sofa.Component.StateContainer); ",MatchSource.DOCS,Sofa/Component/ODESolver/Backward/tests/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Backward/tests/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/tests/CMakeLists.txt:330,Integrability,depend,dependencies,330,cmake_minimum_required(VERSION 3.22). project(Sofa.Component.ODESolver.Forward_test). set(SOURCE_FILES; CentralDifferenceExplicitSolverDynamic_test.cpp; EulerExplicitSolverDynamic_test.cpp; RungeKutta2ExplicitSolverDynamic_test.cpp; RungeKutta4ExplicitSolverDynamic_test.cpp; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); # dependencies are managed directly in the target_link_libraries pass; target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Component.ODESolver.Testing Sofa.Component.ODESolver.Forward Sofa.Component.StateContainer); ,MatchSource.DOCS,Sofa/Component/ODESolver/Forward/tests/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/Forward/tests/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/CMakeLists.txt:590,Modifiability,config,config,590,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics.FEM LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICSFEM_SOURCE_DIR ""src/sofa/component/solidmechanics/fem""). set(OFACOMPONENTSOLIDMECHANICSFEM_DIRS Elastic HyperElastic NonUniform); foreach(fem_dir ${OFACOMPONENTSOLIDMECHANICSFEM_DIRS}); sofa_add_subdirectory(module ${fem_dir} ${PROJECT_NAME}.${fem_dir} ON); if(TARGET ${PROJECT_NAME}.${fem_dir}); list(APPEND SOFACOMPONENTSOLIDMECHANICSFEM_TARGETS ${PROJECT_NAME}.${fem_dir}); endif(); endforeach(). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEM_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICSFEM_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEM_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTSOLIDMECHANICSFEM_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt:259,Modifiability,config,config,259,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics.Spring LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR ""src/sofa/component/solidmechanics/spring""). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/init.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/AngularSpringForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/AngularSpringForceField.inl; # ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/BoxStiffSpringForceField.h; # ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/BoxStiffSpringForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/FastTriangularBendingSprings.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/FastTriangularBendingSprings.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/FrameSpringForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/FrameSpringForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/GearSpringForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/GearSpringForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/JointSpring.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/JointSpring.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/JointSpringForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/JointSpringForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/LinearSpring.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/MeshSpringForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/MeshSpringForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialRestShapeSpringsForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialRestShapeSpringsForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialSpringsForceField.h; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialSpringsForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadBendingSprings.h; ${SOFACOMPONE",MatchSource.DOCS,Sofa/Component/SolidMechanics/Spring/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt:6270,Testability,test,tests,6270,"SOURCE_DIR}/PolynomialRestShapeSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadularBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RegularGridSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RepulsiveSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RestShapeSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/SpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/StiffSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangleBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularBiquadraticSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularQuadraticSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/VectorSpringForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_SPRING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_SPRING_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/Spring/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt:6394,Testability,test,tests,6394,"SOURCE_DIR}/PolynomialRestShapeSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadularBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RegularGridSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RepulsiveSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RestShapeSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/SpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/StiffSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangleBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularBiquadraticSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularQuadraticSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/VectorSpringForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_SPRING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_SPRING_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/Spring/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt:6550,Testability,test,tests,6550,"SOURCE_DIR}/PolynomialRestShapeSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/PolynomialSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/QuadularBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RegularGridSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RepulsiveSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/RestShapeSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/SpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/StiffSpringForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangleBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularBendingSprings.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularBiquadraticSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/TriangularQuadraticSpringsForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSSPRING_SOURCE_DIR}/VectorSpringForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_SPRING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_SPRING_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/Spring/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Spring/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/TensorMass/CMakeLists.txt:275,Modifiability,config,config,275,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics.TensorMass LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR ""src/sofa/component/solidmechanics/tensormass""). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/init.h; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/TetrahedralTensorMassForceField.h; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/TetrahedralTensorMassForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/TriangularTensorMassForceField.h; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/TriangularTensorMassForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/TetrahedralTensorMassForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSTENSORMASS_SOURCE_DIR}/TriangularTensorMassForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/TensorMass/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/TensorMass/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Testing/CMakeLists.txt:164,Testability,test,testing,164,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.SolidMechanics.Testing). set(SOFACOMPONENTSOLIDMECHANICSTESTING_SRC ""src/sofa/component/solidmechanics/testing""). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSTESTING_SRC}/ForceFieldTestCreation.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSTESTING_SRC}/empty.cpp ; ); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_include_directories(${PROJECT_NAME} PUBLIC src/). target_link_libraries(${PROJECT_NAME} Sofa.Config Sofa.Simulation.Core SceneCreator); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt:278,Modifiability,config,config,278,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics.FEM.Elastic LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR ""src/sofa/component/solidmechanics/fem/elastic/""). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/init.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/fwd.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/BeamFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/BeamFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/FastTetrahedralCorotationalForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/FastTetrahedralCorotationalForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceFieldAndMass.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceFieldAndMass.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceFieldAndMass.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceFieldAndMass.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/QuadBendingFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/QuadBendingFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedralCorotationalFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedralCorotationalFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedronFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedronFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMForceField.h; ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt:4622,Testability,test,tests,4622,"LASTIC_SOURCE_DIR}/FastTetrahedralCorotationalForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/QuadBendingFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedralCorotationalFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedronFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMUtils.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularAnisotropicFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularFEMForceFieldOptim.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt:4751,Testability,test,tests,4751,"LASTIC_SOURCE_DIR}/FastTetrahedralCorotationalForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/QuadBendingFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedralCorotationalFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedronFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMUtils.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularAnisotropicFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularFEMForceFieldOptim.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt:4912,Testability,test,tests,4912,"LASTIC_SOURCE_DIR}/FastTetrahedralCorotationalForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedralFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/HexahedronFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/QuadBendingFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedralCorotationalFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TetrahedronFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangleFEMUtils.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularAnisotropicFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMELASTIC_SOURCE_DIR}/TriangularFEMForceFieldOptim.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_FEM_ELASTIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/Elastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt:298,Modifiability,config,config,298,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics.FEM.HyperElastic LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR ""src/sofa/component/solidmechanics/fem/hyperelastic/""). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/init.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/StandardTetrahedralFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/StandardTetrahedralFEMForceField.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/TetrahedronHyperelasticityFEMDrawing.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/TetrahedronHyperelasticityFEMForceField.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/TetrahedronHyperelasticityFEMForceField.inl ; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/BaseMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/BoyceAndArruda.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Costa.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/HyperelasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/MooneyRivlin.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/NeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Ogden.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/StableNeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/STVenantKirchhoff.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/VerondaWestman.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/StandardTetrahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt:2615,Testability,test,tests,2615,"seMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/BoyceAndArruda.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Costa.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/HyperelasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/MooneyRivlin.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/NeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Ogden.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/StableNeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/STVenantKirchhoff.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/VerondaWestman.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/StandardTetrahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/TetrahedronHyperelasticityFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt:2749,Testability,test,tests,2749,"seMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/BoyceAndArruda.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Costa.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/HyperelasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/MooneyRivlin.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/NeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Ogden.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/StableNeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/STVenantKirchhoff.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/VerondaWestman.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/StandardTetrahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/TetrahedronHyperelasticityFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt:2915,Testability,test,tests,2915,"seMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/BoyceAndArruda.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Costa.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/HyperelasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/MooneyRivlin.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/NeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/Ogden.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/StableNeoHookean.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/STVenantKirchhoff.h; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/VerondaWestman.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/StandardTetrahedralFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/TetrahedronHyperelasticityFEMForceField.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMHYPERELASTIC_SOURCE_DIR}/material/PlasticMaterial.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SOLIDMECHANICS_FEM_HYPERELASTIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/HyperElastic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/NonUniform/CMakeLists.txt:290,Modifiability,config,config,290,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SolidMechanics.FEM.NonUniform LANGUAGES CXX). set(SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR ""src/sofa/component/solidmechanics/fem/nonuniform/""). set(HEADER_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/init.h; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/HexahedronCompositeFEMForceFieldAndMass.h; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/HexahedronCompositeFEMForceFieldAndMass.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/HexahedronCompositeFEMMapping.h; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/HexahedronCompositeFEMMapping.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/NonUniformHexahedralFEMForceFieldAndMass.h; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/NonUniformHexahedralFEMForceFieldAndMass.inl; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/NonUniformHexahedronFEMForceFieldAndMass.h; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/NonUniformHexahedronFEMForceFieldAndMass.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/HexahedronCompositeFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/HexahedronCompositeFEMMapping.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/NonUniformHexahedralFEMForceFieldAndMass.cpp; ${SOFACOMPONENTSOLIDMECHANICSFEMNONUNIFORM_SOURCE_DIR}/NonUniformHexahedronFEMForceFieldAndMass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Co",MatchSource.DOCS,Sofa/Component/SolidMechanics/FEM/NonUniform/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SolidMechanics/FEM/NonUniform/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/CMakeLists.txt:355,Modifiability,config,config,355,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINER_SOURCE_DIR ""src/sofa/component/topology/container""). sofa_add_subdirectory_modules(SOFACOMPONENTTOPOLOGYCONTAINER_TARGETS; DIRECTORIES Constant Dynamic Grid; ). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINER_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINER_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTTOPOLOGYCONTAINER_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Topology/Container/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Mapping/CMakeLists.txt:239,Modifiability,config,config,239,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Mapping LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR ""src/sofa/component/topology/mapping""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/CenterPointTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Edge2QuadTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Hexa2QuadTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Hexa2TetraTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/IdentityTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Quad2TriangleTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/SubsetTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Tetra2TriangleTopologicalMapping.h; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Triangle2EdgeTopologicalMapping.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/CenterPointTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Edge2QuadTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Hexa2QuadTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Hexa2TetraTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/IdentityTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Quad2TriangleTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/SubsetTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Tetra2TriangleTopologicalMapping.cpp; ${SOFACOMPONENTTOPOLOGYMAPPING_SOURCE_DIR}/Triangle2EdgeTopologicalMapping.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURC",MatchSource.DOCS,Sofa/Component/Topology/Mapping/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Mapping/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Testing/CMakeLists.txt:147,Testability,test,testing,147,"cmake_minimum_required(VERSION 3.22). project(Sofa.Component.Topology.Testing). set(SOFACOMPONENTODESOLVERTESTING_SRC ""src/sofa/component/topology/testing""). set(HEADER_FILES; ${SOFACOMPONENTODESOLVERTESTING_SRC}/RegularGridNodeCreation.h; ${SOFACOMPONENTODESOLVERTESTING_SRC}/fake_TopologyScene.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVERTESTING_SRC}/empty.cpp ; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_compile_definitions(${PROJECT_NAME} PUBLIC ""-DSOFA_COMPONENT_TOPOLOGY_TESTING_RESOURCES_DIR=\""${CMAKE_SOURCE_DIR}/share\""""). target_include_directories(${PROJECT_NAME} PUBLIC src/); target_link_libraries(${PROJECT_NAME} Sofa.Config Sofa.Simulation.Graph); ",MatchSource.DOCS,Sofa/Component/Topology/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt:239,Modifiability,config,config,239,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Utility LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR ""src/sofa/component/topology/utility""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.inl; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(ZLIB BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Dynamic); if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Utility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt:1660,Testability,test,tests,1660,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Utility LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR ""src/sofa/component/topology/utility""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.inl; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(ZLIB BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Dynamic); if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Utility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt:1779,Testability,test,tests,1779,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Utility LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR ""src/sofa/component/topology/utility""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.inl; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(ZLIB BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Dynamic); if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Utility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt:1930,Testability,test,tests,1930,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Utility LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR ""src/sofa/component/topology/utility""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.inl; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.h; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologicalChangeProcessor.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyBoundingTrasher.cpp; ${SOFACOMPONENTTOPOLOGYUTILITY_SOURCE_DIR}/TopologyChecker.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(ZLIB BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Dynamic); if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_UTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Utility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Utility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt:281,Modifiability,config,config,281,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container.Constant LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR ""src/sofa/component/topology/container/constant""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Constant/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt:1340,Testability,test,tests,1340,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container.Constant LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR ""src/sofa/component/topology/container/constant""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Constant/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt:1470,Testability,test,tests,1470,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container.Constant LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR ""src/sofa/component/topology/container/constant""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Constant/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt:1632,Testability,test,tests,1632,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container.Constant LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR ""src/sofa/component/topology/container/constant""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/MeshTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/CubeTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERCONSTANT_SOURCE_DIR}/SphereQuadTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_CONSTANT_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Constant/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Constant/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt:277,Modifiability,config,config,277,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container.Dynamic LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR ""src/sofa/component/topology/container/dynamic""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/fwd.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/CommonAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridGeometryAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridGeometryAlgorithms.inl; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyContainer.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyModifier.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/EdgeSetGeometryAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/EdgeSetGeometryAlgorithms.inl; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/EdgeSetTopologyAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/EdgeSetTopologyContainer.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/EdgeSetTopologyModifier.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/HexahedronSetGeometryAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/HexahedronSetGeometryAlgorithms.inl; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/HexahedronSetTopologyAlgorithms.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/HexahedronSetTopologyContainer.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/HexahedronSetTopologyModifier.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/MultilevelHexahedronSetTopologyContainer.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/NumericalIntegrationDescriptor.h; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE",MatchSource.DOCS,Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt:6263,Testability,test,tests,6263,"rithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/PointSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/PointSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyModifier.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt:6392,Testability,test,tests,6392,"rithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/PointSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/PointSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyModifier.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt:6553,Testability,test,tests,6553,"rithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/PointSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/PointSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/QuadSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TetrahedronSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/TriangleSetTopologyModifier.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridGeometryAlgorithms.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyContainer.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERDYNAMIC_SOURCE_DIR}/DynamicSparseGridTopologyModifier.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_DYNAMIC_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Dynamic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt:265,Modifiability,config,config,265,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Topology.Container.Grid LANGUAGES CXX). set(SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR ""src/sofa/component/topology/container/grid""). set(HEADER_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/init.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/polygon_cube_intersection.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/vec.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/GridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/RegularGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/fast_polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/GridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/RegularGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED). add_library(${PR",MatchSource.DOCS,Sofa/Component/Topology/Container/Grid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt:2444,Testability,test,tests,2444,"OPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/fast_polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/GridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/RegularGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Constant). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_GRID_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_GRID_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Grid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt:2570,Testability,test,tests,2570,"OPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/fast_polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/GridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/RegularGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Constant). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_GRID_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_GRID_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Grid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt:2728,Testability,test,tests,2728,"OPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.h; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.h; ). set(SOURCE_FILES; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/fast_polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/polygon_cube_intersection/polygon_cube_intersection.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/GridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/RegularGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/CylinderGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SphereGridTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridMultipleTopology.cpp; ${SOFACOMPONENTTOPOLOGYCONTAINERGRID_SOURCE_DIR}/SparseGridRamificationTopology.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.Topology.Container.Constant). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_TOPOLOGY_CONTAINER_GRID_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_TOPOLOGY_CONTAINER_GRID_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Topology/Container/Grid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Topology/Container/Grid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:2496,Availability,avail,available,2496,"FLOAT 0); elseif(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_DOUBLE 0); set(SOFA_FLOAT 1); endif(). # If you really don't understand the negated logics of SOFA_DOUBLE and; # SOFA_FLOAT please consider using SOFA_WITH_FLOAT and SOFA_WITH_DOUBLE.; # Eg: SOFA_WITH_FLOAT indicate that you need to generate the; # float code and SOFA_WITH_DOUBLE indicates that you; # need to generate the double related code.; if(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_WITH_FLOAT 1); set(SOFA_WITH_DOUBLE 0); endif(); if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_WITH_DOUBLE 1); set(SOFA_WITH_FLOAT 0); endif(). # Options; option(SOFA_DETECTIONOUTPUT_FREEMOTION ""Compile Sofa with the DETECTIONOUTPUT_FREEMOTION macro defined."" OFF); option(SOFA_NO_UPDATE_BBOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINA",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:12382,Availability,avail,availability,12382,"dashboard servers); # that is using, by default at that time, a libstdc++ that did not fully implement c++11; if(APPLE AND ${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND CMAKE_SYSTEM_VERSION VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(). # Use Release flags for MinSizeRel and RelWithDebInfo build types:; set_target_properties(${PROJECT_NAME} PROPERTIES; MAP_IMPORTED_CONFIG_MINSIZEREL Release; MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release; ); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_COMPILE_OPTIONS_RELEASE}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_COMPILE_OPTIONS_DEBUG}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""${SOF",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:13411,Availability,avail,available,13411,"ise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(). # Use Release flags for MinSizeRel and RelWithDebInfo build types:; set_target_properties(${PROJECT_NAME} PROPERTIES; MAP_IMPORTED_CONFIG_MINSIZEREL Release; MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release; ); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_COMPILE_OPTIONS_RELEASE}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_COMPILE_OPTIONS_DEBUG}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""${SOFACONFIG_COMPILE_OPTIONS}""). # target_link_option only available with cmake >= 3.13; if(${CMAKE_VERSION} VERSION_LESS ""3.13.0""); if(NOT SOFACONFIG_LINK_OPTIONS_RELEASE STREQUAL """"); string(REPLACE "";"" "" "" SOFACONFIG_LINK_OPTIONS_RELEASE ""${SOFACONFIG_LINK_OPTIONS_RELEASE}""); set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS_RELEASE ""${SOFACONFIG_LINK_OPTIONS_RELEASE}""); endif(); if(NOT SOFACONFIG_LINK_OPTIONS_DEBUG STREQUAL """"); string(REPLACE "";"" "" "" SOFACONFIG_LINK_OPTIONS_DEBUG ""${SOFACONFIG_LINK_OPTIONS_DEBUG}""); set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS_DEBUG ""${SOFACONFIG_LINK_OPTIONS_DEBUG}""); endif(); if(NOT SOFACONFIG_LINK_OPTIONS STREQUAL """"); string(REPLACE "";"" "" "" SOFACONFIG_LINK_OPTIONS ""${SOFACONFIG_LINK_OPTIONS}""); set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS ""${SOFACONFIG_LINK_OPTIONS}""); endif(); else(); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_LINK_OPTIONS_RELEASE}>""); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_L",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3045,Deployability,install,install,3045,"t(SOFA_WITH_FLOAT 0); endif(). # Options; option(SOFA_DETECTIONOUTPUT_FREEMOTION ""Compile Sofa with the DETECTIONOUTPUT_FREEMOTION macro defined."" OFF); option(SOFA_NO_UPDATE_BBOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_RO",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3188,Deployability,install,install,3188,"ETECTIONOUTPUT_FREEMOTION macro defined."" OFF); option(SOFA_NO_UPDATE_BBOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOF",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3231,Deployability,install,installedSofa,3231,"BOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only librar",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3608,Deployability,install,installedSofa,3608," (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<B",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3629,Deployability,install,install,3629,"FF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3668,Deployability,install,installedSofa,3668,"FF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:11925,Deployability,configurat,configurations,11925,"(SOFA_ENABLE_BUILTIN_TIMER ""Enable the builtin timers"" ON); if(SOFA_ENABLE_BUILTIN_TIMER); set(SOFA_ENABLE_SCOPED_ADVANCED_TIMER 1); endif(). # An important C++11 feature may be not enabled due to; # the compiler being built without the --enable-libstdcxx-time option.; if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_GLIBCXX_USE_NANOSLEEP -D_GLIBCXX_USE_SCHED_YIELD""); endif(); endif(). # hack for clang on old macosx (version < 10.9, such as the dashboard servers); # that is using, by default at that time, a libstdc++ that did not fully implement c++11; if(APPLE AND ${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND CMAKE_SYSTEM_VERSION VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONF",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:15119,Deployability,install,install,15119,"get_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS ""${SOFACONFIG_LINK_OPTIONS}""); endif(); else(); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_LINK_OPTIONS_RELEASE}>""); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_LINK_OPTIONS_DEBUG}>""); target_link_options(${PROJECT_NAME} PUBLIC ""${SOFACONFIG_LINK_OPTIONS}""); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. # Attach Sofa Version into properties; set_target_properties(${PROJECT_NAME} PROPERTIES Sofa_VERSION ""${Sofa_VERSION}""); set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_VERSION_STR ""${SOFA_VERSION_STR}""); set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_VERSION ""${SOFA_VERSION}""). set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_URL ""${SOFA_URL}""). # CMakeParseLibraryList.cmake; configure_file(cmake/CMakeParseLibraryList.cmake ${CMAKE_BINARY_DIR}/lib/cmake/CMakeParseLibraryList.cmake COPYONLY); install(FILES cmake/CMakeParseLibraryList.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). # SofaMacros*.cmake; set(macro_files SofaMacros.cmake SofaMacrosConfigure.cmake SofaMacrosInstall.cmake SofaMacrosPython.cmake SofaMacrosUtils.cmake); foreach(macro_file ${macro_files}); configure_file(cmake/${macro_file} ${CMAKE_BINARY_DIR}/lib/cmake/${macro_file} COPYONLY); install(FILES cmake/${macro_file} DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers); endforeach(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Propagate variables (which were in Sofa's global cmakelist); # TODO: Put instead into a target_property ?; set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH}"" PARENT_SCOPE); set(CMAKE_PREFIX_PATH ""${CMAKE_PREFIX_PATH}"" PARENT_SCOPE); set(SOFA_WITH_FLOAT ""${SOFA_WITH_FLOAT}"" PARENT_SCOPE); set(SOFA_WITH_DOUBLE ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:15502,Deployability,install,install,15502,"IES LINK_FLAGS ""${SOFACONFIG_LINK_OPTIONS}""); endif(); else(); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_LINK_OPTIONS_RELEASE}>""); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_LINK_OPTIONS_DEBUG}>""); target_link_options(${PROJECT_NAME} PUBLIC ""${SOFACONFIG_LINK_OPTIONS}""); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. # Attach Sofa Version into properties; set_target_properties(${PROJECT_NAME} PROPERTIES Sofa_VERSION ""${Sofa_VERSION}""); set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_VERSION_STR ""${SOFA_VERSION_STR}""); set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_VERSION ""${SOFA_VERSION}""). set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_URL ""${SOFA_URL}""). # CMakeParseLibraryList.cmake; configure_file(cmake/CMakeParseLibraryList.cmake ${CMAKE_BINARY_DIR}/lib/cmake/CMakeParseLibraryList.cmake COPYONLY); install(FILES cmake/CMakeParseLibraryList.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). # SofaMacros*.cmake; set(macro_files SofaMacros.cmake SofaMacrosConfigure.cmake SofaMacrosInstall.cmake SofaMacrosPython.cmake SofaMacrosUtils.cmake); foreach(macro_file ${macro_files}); configure_file(cmake/${macro_file} ${CMAKE_BINARY_DIR}/lib/cmake/${macro_file} COPYONLY); install(FILES cmake/${macro_file} DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers); endforeach(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Propagate variables (which were in Sofa's global cmakelist); # TODO: Put instead into a target_property ?; set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH}"" PARENT_SCOPE); set(CMAKE_PREFIX_PATH ""${CMAKE_PREFIX_PATH}"" PARENT_SCOPE); set(SOFA_WITH_FLOAT ""${SOFA_WITH_FLOAT}"" PARENT_SCOPE); set(SOFA_WITH_DOUBLE ""${SOFA_WITH_DOUBLE}"" PARENT_SCOPE); ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:530,Integrability,depend,dependencies,530,"cmake_minimum_required(VERSION 3.22); project(Sofa.Config LANGUAGES CXX). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_PREFIX_PATH ""${CMAKE_BINARY_DIR}/lib/cmake""). include(SofaMacros). # Clear internal target list (set by the macro sofa_add_generic() ); set_property(GLOBAL PROPERTY __GlobalTargetList__ """"); set_property(GLOBAL PROPERTY __GlobalTargetNameList__ """"). # Help RELOCATABLE plugins to resolve their dependencies.; # See SofaMacrosInstall.cmake for usage of this property.; define_property(TARGET; PROPERTY ""RELOCATABLE_INSTALL_DIR""; BRIEF_DOCS ""Install directory of RELOCATABLE target""; FULL_DOCS ""Install directory of RELOCATABLE target""; ). # Enable the organisation in folders for generators that support; # it. (E.g. some versions of Visual Studio have 'solution folders'); set_property(GLOBAL PROPERTY USE_FOLDERS ON). ### Sofa using type double or float; set(SOFA_FLOATING_POINT_TYPE double CACHE STRING; ""Type used for floating point values in SOFA. It actually determines:; - what template instanciations will be compiled (via the definition of the; SOFA_FLOAT and SOFA_DOUBLE macros); - what is the type behind the 'SReal' typedef used throughout SOFA.""); set_property(CACHE SOFA_FLOATING_POINT_TYPE PROPERTY STRINGS float double). if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_DOUBLE 1); set(SOFA_FLOAT 0); elseif(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_DOUBLE 0); set(SOFA_FLOAT 1); endif(). # If you really don't understand the negated logics of SOFA_DOUBLE and; # SOFA_FLOAT please consider using SOFA_WITH_FLOAT and SOFA_WITH_DOUBLE.; # Eg: SOFA_WITH_FLOAT indicate that you need to generate the; # float code and SOFA_WITH_DOUBLE indicates that you; # need to generate the double related code.; if(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_WITH_FLOAT 1); set(SOFA_WITH_DOUBLE 0); endif(); if(${SOFA_FLOATING_POINT_TYP",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:5448,Integrability,message,message,5448,"sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK_OPTIONS_RELEASE """"). ## Link-time optimization; if(NOT IPO_CHECK_DONE); include(CheckIPOSupported); check_ipo_supported(RESULT IS_IPO_SUPPORTED OUTPUT IPO_ERROR); set(IPO_CHECK_DONE ON CACHE INTERNAL ""IPO check has been done"" FORCE); if (IS_IPO_SUPPORTED); set(IPO_SUPPORTED ON CACHE INTERNAL ""IPO can be activated"" FORCE); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(); endif(). if (IPO_SUPPORTED); # Focus on max speed with link-time optimization; option(SOFA_ENABLE_LINK_TIME_OPTIMIZATION ""Enable interprocedural optimization"" OFF); if (SOFA_ENABLE_LINK_TIME_OPTIMIZATION); set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE PARENT_SCOPE); endif(); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(). ## GCC-specific; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""GNU""); ## Find out the version of g++ (and save it in GCXX_VERSION); if(CMAKE_CXX_COMPILER_ARG1) # CXX=""ccache g++""; string(STRIP ${CMAKE_CXX_COMPILER_ARG1} CMAKE_CXX_COMPILER_ARG1_stripped); execute_process(COMMAND ${CMAKE_CXX_COMPILER_ARG1_stripped} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); else(); execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); endif().",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:5806,Integrability,message,message,5806,"_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK_OPTIONS_RELEASE """"). ## Link-time optimization; if(NOT IPO_CHECK_DONE); include(CheckIPOSupported); check_ipo_supported(RESULT IS_IPO_SUPPORTED OUTPUT IPO_ERROR); set(IPO_CHECK_DONE ON CACHE INTERNAL ""IPO check has been done"" FORCE); if (IS_IPO_SUPPORTED); set(IPO_SUPPORTED ON CACHE INTERNAL ""IPO can be activated"" FORCE); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(); endif(). if (IPO_SUPPORTED); # Focus on max speed with link-time optimization; option(SOFA_ENABLE_LINK_TIME_OPTIMIZATION ""Enable interprocedural optimization"" OFF); if (SOFA_ENABLE_LINK_TIME_OPTIMIZATION); set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE PARENT_SCOPE); endif(); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(). ## GCC-specific; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""GNU""); ## Find out the version of g++ (and save it in GCXX_VERSION); if(CMAKE_CXX_COMPILER_ARG1) # CXX=""ccache g++""; string(STRIP ${CMAKE_CXX_COMPILER_ARG1} CMAKE_CXX_COMPILER_ARG1_stripped); execute_process(COMMAND ${CMAKE_CXX_COMPILER_ARG1_stripped} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); else(); execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); endif(). ## Disable partial inlining under gcc 4.6 (Why? -> the memory was exploding); if(""${GCXX_VERSION}"" VERSION_EQUAL 4.6); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fno-partial-inlining""); endif(). # stack-protector; list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fstack-protector;--param=ssp-buffer-size=4""); # _FORTIFY_SOURCE; list(APPEND SOFACONFIG_COMPILE_OPT",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:8222,Integrability,message,message,8222,"efined external template); target_compile_options(${PROJECT_NAME} PUBLIC -Wno-attributes). if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-ffast-math""); endif(). option(SOFA_ENABLE_THREAD_SANITIZER ""Enable thread sanitizer (only gcc or clang)"" OFF); if(SOFA_ENABLE_THREAD_SANITIZER); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-fsanitize=thread""); list(APPEND SOFACONFIG_LINK_OPTIONS ""-fsanitize=thread""); endif(); endif(). ## Windows-specific; if(WIN32); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_USE_MATH_DEFINES""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_CRT_SECURE_NO_WARNINGS""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_CRT_NONSTDC_NO_DEPRECATE""). set(SOFA_MSVC_NB_COMPILER_PROCESSES ""0"" CACHE STRING ""The maximum number of processes that the compiler can create. 0 (default) for the number of effective processors on the computer""); if (SOFA_MSVC_NB_COMPILER_PROCESSES EQUAL ""0""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP""); else(); if (SOFA_MSVC_NB_COMPILER_PROCESSES MATCHES ""^[0-9]+$""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP${SOFA_MSVC_NB_COMPILER_PROCESSES}""); else(); message(FATAL_ERROR ""A number is expected for SOFA_MSVC_NB_COMPILER_PROCESSES""); endif(); endif(). list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/wd4250;/wd4251;/wd4275;/wd4675;/wd4661""); # 4661: no suitable definition provided for explicit template instantiation request; # it happens because we put explicit instantiation in a separate translation unit; # it is by design, so this warning is irrelevant in our project. if(MSVC_TOOLSET_VERSION GREATER 140) # > VS 2015; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/Zc:__cplusplus""); endif(). # Experimental: compilation with MSVC/Clang-cl; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang""); if( ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT} STREQUAL MSVC) # something weird happens if we put the two test in one if ??; message(WARNING ""Experimental: you are trying to compile with MSVC and the clang-cl toolchain; this is not officially supported.""); # remove ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:8970,Integrability,message,message,8970,"ber of effective processors on the computer""); if (SOFA_MSVC_NB_COMPILER_PROCESSES EQUAL ""0""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP""); else(); if (SOFA_MSVC_NB_COMPILER_PROCESSES MATCHES ""^[0-9]+$""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP${SOFA_MSVC_NB_COMPILER_PROCESSES}""); else(); message(FATAL_ERROR ""A number is expected for SOFA_MSVC_NB_COMPILER_PROCESSES""); endif(); endif(). list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/wd4250;/wd4251;/wd4275;/wd4675;/wd4661""); # 4661: no suitable definition provided for explicit template instantiation request; # it happens because we put explicit instantiation in a separate translation unit; # it is by design, so this warning is irrelevant in our project. if(MSVC_TOOLSET_VERSION GREATER 140) # > VS 2015; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/Zc:__cplusplus""); endif(). # Experimental: compilation with MSVC/Clang-cl; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang""); if( ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT} STREQUAL MSVC) # something weird happens if we put the two test in one if ??; message(WARNING ""Experimental: you are trying to compile with MSVC and the clang-cl toolchain; this is not officially supported.""); # remove lots of warnings (the Wall of ""normal"" clang seems different of Wall of clang-cl); list(APPEND SOFACONFIG_COMPILE_OPTIONS -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-double-promotion -Wno-old-style-cast -Wno-reserved-id-macro -Wno-language-extension-token -Wno-dllexport-explicit-instantiation-decl -Wno-nonportable-system-include-path -Wno-zero-as-null-pointer-constant -Wno-documentation); # optimization flags (not sure if necessary..); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE -march=native); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(); endif(); endif(). # Mac specific; if(APPLE); #remove OpenGL deprecation message; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-DGL_SILENCE_DEPRECATION""); endif(). ## OpenMP; option(SOFA_OPENMP ""Compile Sofa with Op",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:9789,Integrability,message,message,9789,"f(${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang""); if( ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT} STREQUAL MSVC) # something weird happens if we put the two test in one if ??; message(WARNING ""Experimental: you are trying to compile with MSVC and the clang-cl toolchain; this is not officially supported.""); # remove lots of warnings (the Wall of ""normal"" clang seems different of Wall of clang-cl); list(APPEND SOFACONFIG_COMPILE_OPTIONS -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-double-promotion -Wno-old-style-cast -Wno-reserved-id-macro -Wno-language-extension-token -Wno-dllexport-explicit-instantiation-decl -Wno-nonportable-system-include-path -Wno-zero-as-null-pointer-constant -Wno-documentation); # optimization flags (not sure if necessary..); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE -march=native); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(); endif(); endif(). # Mac specific; if(APPLE); #remove OpenGL deprecation message; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-DGL_SILENCE_DEPRECATION""); endif(). ## OpenMP; option(SOFA_OPENMP ""Compile Sofa with OpenMP multithreading."" OFF); if(SOFA_OPENMP); sofa_find_package(OpenMP QUIET); if (OPENMP_FOUND); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${OpenMP_CXX_FLAGS}""); list(APPEND SOFACONFIG_LINK_OPTIONS ""${OpenMP_CXX_FLAGS}""); else(); message(""WARNING: Your compiler does not implement OpenMP.""); endif(); endif(). ## Tracy; option(SOFA_TRACY ""Compile SOFA with the Tracy profiler client"" OFF); if (SOFA_TRACY); set(SOFA_TRACY_VERSION v0.9.1); include(FetchContent); option(TRACY_STATIC ""Whether to build Tracy as a static library"" OFF); FetchContent_Declare (; tracy; GIT_REPOSITORY https://github.com/wolfpld/tracy.git; GIT_TAG ${SOFA_TRACY_VERSION}; GIT_SHALLOW TRUE; GIT_PROGRESS TRUE; ); FetchContent_MakeAvailable (tracy); target_link_libraries(${PROJECT_NAME} PUBLIC TracyClient ); message(STATUS ""SOFA is compiled with the Tracy profiler client. Use the Tracy server ${SOFA_TRA",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:10154,Integrability,message,message,10154,"ficially supported.""); # remove lots of warnings (the Wall of ""normal"" clang seems different of Wall of clang-cl); list(APPEND SOFACONFIG_COMPILE_OPTIONS -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-double-promotion -Wno-old-style-cast -Wno-reserved-id-macro -Wno-language-extension-token -Wno-dllexport-explicit-instantiation-decl -Wno-nonportable-system-include-path -Wno-zero-as-null-pointer-constant -Wno-documentation); # optimization flags (not sure if necessary..); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE -march=native); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(); endif(); endif(). # Mac specific; if(APPLE); #remove OpenGL deprecation message; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-DGL_SILENCE_DEPRECATION""); endif(). ## OpenMP; option(SOFA_OPENMP ""Compile Sofa with OpenMP multithreading."" OFF); if(SOFA_OPENMP); sofa_find_package(OpenMP QUIET); if (OPENMP_FOUND); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${OpenMP_CXX_FLAGS}""); list(APPEND SOFACONFIG_LINK_OPTIONS ""${OpenMP_CXX_FLAGS}""); else(); message(""WARNING: Your compiler does not implement OpenMP.""); endif(); endif(). ## Tracy; option(SOFA_TRACY ""Compile SOFA with the Tracy profiler client"" OFF); if (SOFA_TRACY); set(SOFA_TRACY_VERSION v0.9.1); include(FetchContent); option(TRACY_STATIC ""Whether to build Tracy as a static library"" OFF); FetchContent_Declare (; tracy; GIT_REPOSITORY https://github.com/wolfpld/tracy.git; GIT_TAG ${SOFA_TRACY_VERSION}; GIT_SHALLOW TRUE; GIT_PROGRESS TRUE; ); FetchContent_MakeAvailable (tracy); target_link_libraries(${PROJECT_NAME} PUBLIC TracyClient ); message(STATUS ""SOFA is compiled with the Tracy profiler client. Use the Tracy server ${SOFA_TRACY_VERSION}.""); endif(). option(SOFA_ENABLE_BUILTIN_TIMER ""Enable the builtin timers"" ON); if(SOFA_ENABLE_BUILTIN_TIMER); set(SOFA_ENABLE_SCOPED_ADVANCED_TIMER 1); endif(). # An important C++11 feature may be not enabled due to; # the compiler being built without the --enabl",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:10708,Integrability,message,message,10708,"PEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(); endif(); endif(). # Mac specific; if(APPLE); #remove OpenGL deprecation message; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-DGL_SILENCE_DEPRECATION""); endif(). ## OpenMP; option(SOFA_OPENMP ""Compile Sofa with OpenMP multithreading."" OFF); if(SOFA_OPENMP); sofa_find_package(OpenMP QUIET); if (OPENMP_FOUND); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${OpenMP_CXX_FLAGS}""); list(APPEND SOFACONFIG_LINK_OPTIONS ""${OpenMP_CXX_FLAGS}""); else(); message(""WARNING: Your compiler does not implement OpenMP.""); endif(); endif(). ## Tracy; option(SOFA_TRACY ""Compile SOFA with the Tracy profiler client"" OFF); if (SOFA_TRACY); set(SOFA_TRACY_VERSION v0.9.1); include(FetchContent); option(TRACY_STATIC ""Whether to build Tracy as a static library"" OFF); FetchContent_Declare (; tracy; GIT_REPOSITORY https://github.com/wolfpld/tracy.git; GIT_TAG ${SOFA_TRACY_VERSION}; GIT_SHALLOW TRUE; GIT_PROGRESS TRUE; ); FetchContent_MakeAvailable (tracy); target_link_libraries(${PROJECT_NAME} PUBLIC TracyClient ); message(STATUS ""SOFA is compiled with the Tracy profiler client. Use the Tracy server ${SOFA_TRACY_VERSION}.""); endif(). option(SOFA_ENABLE_BUILTIN_TIMER ""Enable the builtin timers"" ON); if(SOFA_ENABLE_BUILTIN_TIMER); set(SOFA_ENABLE_SCOPED_ADVANCED_TIMER 1); endif(). # An important C++11 feature may be not enabled due to; # the compiler being built without the --enable-libstdcxx-time option.; if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_GLIBCXX_USE_NANOSLEEP -D_GLIBCXX_USE_SCHED_YIELD""); endif(); endif(). # hack for clang on old macosx (version < 10.9, such as the dashboard servers); # that is using, by default at that time, a libstdc++ that did not fully implement c++11; if(APPLE AND ${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND CMAKE_SYSTEM_VERSION VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-st",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:12075,Integrability,message,message,12075,"ime option.; if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_GLIBCXX_USE_NANOSLEEP -D_GLIBCXX_USE_SCHED_YIELD""); endif(); endif(). # hack for clang on old macosx (version < 10.9, such as the dashboard servers); # that is using, by default at that time, a libstdc++ that did not fully implement c++11; if(APPLE AND ${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND CMAKE_SYSTEM_VERSION VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(). # Use Release flags for MinSizeRel and RelWithDebInfo build types:; set_target_properties(${PROJECT_NAME} PROPERTIES; MAP_IMPORTED_CONFIG_MINSIZEREL Release; MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release; ); t",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:12454,Integrability,message,message,12454,"dashboard servers); # that is using, by default at that time, a libstdc++ that did not fully implement c++11; if(APPLE AND ${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND CMAKE_SYSTEM_VERSION VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(). # Use Release flags for MinSizeRel and RelWithDebInfo build types:; set_target_properties(${PROJECT_NAME} PROPERTIES; MAP_IMPORTED_CONFIG_MINSIZEREL Release; MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release; ); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_COMPILE_OPTIONS_RELEASE}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_COMPILE_OPTIONS_DEBUG}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""${SOF",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:12550,Integrability,message,message,12550,"N VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(). # Use Release flags for MinSizeRel and RelWithDebInfo build types:; set_target_properties(${PROJECT_NAME} PROPERTIES; MAP_IMPORTED_CONFIG_MINSIZEREL Release; MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release; ); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_COMPILE_OPTIONS_RELEASE}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_COMPILE_OPTIONS_DEBUG}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""${SOFACONFIG_COMPILE_OPTIONS}""). # target_link_option only available with cmake >= 3.13; if(${CMAKE_VERSION} VERSION_LESS ""3.13.0""); if(NOT SOFACONFIG_LINK_OPTIONS_RELEASE STREQUAL """"); str",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:12629,Integrability,message,message,12629,"G_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(). # Use Release flags for MinSizeRel and RelWithDebInfo build types:; set_target_properties(${PROJECT_NAME} PROPERTIES; MAP_IMPORTED_CONFIG_MINSIZEREL Release; MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release; ); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_COMPILE_OPTIONS_RELEASE}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_COMPILE_OPTIONS_DEBUG}>""); target_compile_options(${PROJECT_NAME} PUBLIC ""${SOFACONFIG_COMPILE_OPTIONS}""). # target_link_option only available with cmake >= 3.13; if(${CMAKE_VERSION} VERSION_LESS ""3.13.0""); if(NOT SOFACONFIG_LINK_OPTIONS_RELEASE STREQUAL """"); string(REPLACE "";"" "" "" SOFACONFIG_LINK_OPTIONS_RELEASE ""${SOFACONFIG_LINK_OPTIONS_RELEASE}""); ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:505,Modifiability,plugin,plugins,505,"cmake_minimum_required(VERSION 3.22); project(Sofa.Config LANGUAGES CXX). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_PREFIX_PATH ""${CMAKE_BINARY_DIR}/lib/cmake""). include(SofaMacros). # Clear internal target list (set by the macro sofa_add_generic() ); set_property(GLOBAL PROPERTY __GlobalTargetList__ """"); set_property(GLOBAL PROPERTY __GlobalTargetNameList__ """"). # Help RELOCATABLE plugins to resolve their dependencies.; # See SofaMacrosInstall.cmake for usage of this property.; define_property(TARGET; PROPERTY ""RELOCATABLE_INSTALL_DIR""; BRIEF_DOCS ""Install directory of RELOCATABLE target""; FULL_DOCS ""Install directory of RELOCATABLE target""; ). # Enable the organisation in folders for generators that support; # it. (E.g. some versions of Visual Studio have 'solution folders'); set_property(GLOBAL PROPERTY USE_FOLDERS ON). ### Sofa using type double or float; set(SOFA_FLOATING_POINT_TYPE double CACHE STRING; ""Type used for floating point values in SOFA. It actually determines:; - what template instanciations will be compiled (via the definition of the; SOFA_FLOAT and SOFA_DOUBLE macros); - what is the type behind the 'SReal' typedef used throughout SOFA.""); set_property(CACHE SOFA_FLOATING_POINT_TYPE PROPERTY STRINGS float double). if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_DOUBLE 1); set(SOFA_FLOAT 0); elseif(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_DOUBLE 0); set(SOFA_FLOAT 1); endif(). # If you really don't understand the negated logics of SOFA_DOUBLE and; # SOFA_FLOAT please consider using SOFA_WITH_FLOAT and SOFA_WITH_DOUBLE.; # Eg: SOFA_WITH_FLOAT indicate that you need to generate the; # float code and SOFA_WITH_DOUBLE indicates that you; # need to generate the double related code.; if(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_WITH_FLOAT 1); set(SOFA_WITH_DOUBLE 0); endif(); if(${SOFA_FLOATING_POINT_TYP",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:2919,Modifiability,config,configured,2919,"BLE 0); endif(); if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_WITH_DOUBLE 1); set(SOFA_WITH_FLOAT 0); endif(). # Options; option(SOFA_DETECTIONOUTPUT_FREEMOTION ""Compile Sofa with the DETECTIONOUTPUT_FREEMOTION macro defined."" OFF); option(SOFA_NO_UPDATE_BBOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfi",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:3820,Modifiability,config,config,3820,"s/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:4054,Modifiability,config,config,4054,".in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:4111,Modifiability,config,config,4111,"s absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:4172,Modifiability,config,config,4172,"es/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfig.cpp # necessary to build a library; ); set(SOFACONFIG_BUILD_OPTIONS_SRC; ${SOFACONFIGSRC_ROOT}/config/sharedlibrary_defines.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_dump_visitor.h.in; ${SOFACONFIGSRC_ROOT}/config/build_option_bbox.h.in; ). # Header-only library (not handled well by macros & stuff so commented); # add_library(${PROJECT_NAME} INTERFACE); # target_sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK_OPTIONS_RELEASE """"). ## Link-time optimization; if(NOT I",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:11925,Modifiability,config,configurations,11925,"(SOFA_ENABLE_BUILTIN_TIMER ""Enable the builtin timers"" ON); if(SOFA_ENABLE_BUILTIN_TIMER); set(SOFA_ENABLE_SCOPED_ADVANCED_TIMER 1); endif(). # An important C++11 feature may be not enabled due to; # the compiler being built without the --enable-libstdcxx-time option.; if(CMAKE_COMPILER_IS_GNUCXX); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_GLIBCXX_USE_NANOSLEEP -D_GLIBCXX_USE_SCHED_YIELD""); endif(); endif(). # hack for clang on old macosx (version < 10.9, such as the dashboard servers); # that is using, by default at that time, a libstdc++ that did not fully implement c++11; if(APPLE AND ${CMAKE_SYSTEM_NAME} MATCHES ""Darwin"" AND CMAKE_SYSTEM_VERSION VERSION_LESS ""10.9"" AND ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang"" ); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-stdlib=libc++""); endif(). if(CMAKE_SYSTEM_NAME STREQUAL Linux AND NOT CMAKE_BUILD_TYPE MATCHES ""Debug""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""NDEBUG""); # On Windows and MacOS, NDEBUG and _DEBUG are automatically; # set in the default c/cxx flags of the right configurations; endif(); if(MSVC); # Increase Number of Sections in .Obj file; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/bigobj""); if(SOFA_VECTORIZE); message(""SOFA_VECTORIZE option is deprecated and has been split between SOFA_ENABLE_SIMD and SOFA_ENABLE_FAST_MATH. These 2 options will be enabled.""); set(SOFA_ENABLE_SIMD ON); set(SOFA_ENABLE_FAST_MATH ON); endif(); # SIMD flags; if(SOFA_ENABLE_SIMD); include(find_avx); MSVC_CHECK_FOR_AVX() # search for availability of AVX2 (otherwise set to AVX); if (HAVE_AVX2_EXTENSIONS); message(""Your CPU supports AVX2 SIMD. Using flags: ${AVX_FLAGS}""); elseif(HAVE_AVX_EXTENSIONS); message(""Your CPU supports only AVX SIMD. Using flags: ${AVX_FLAGS}""); else(); message(""Your CPU does not support AVX SIMD."") # SSE2 is the default when x64 is set; endif(); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${AVX_FLAGS}""); endif(); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONF",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:15838,Modifiability,variab,variables,15838,"IES LINK_FLAGS ""${SOFACONFIG_LINK_OPTIONS}""); endif(); else(); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:RELEASE>:${SOFACONFIG_LINK_OPTIONS_RELEASE}>""); target_link_options(${PROJECT_NAME} PUBLIC ""$<$<CONFIG:DEBUG>:${SOFACONFIG_LINK_OPTIONS_DEBUG}>""); target_link_options(${PROJECT_NAME} PUBLIC ""${SOFACONFIG_LINK_OPTIONS}""); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. # Attach Sofa Version into properties; set_target_properties(${PROJECT_NAME} PROPERTIES Sofa_VERSION ""${Sofa_VERSION}""); set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_VERSION_STR ""${SOFA_VERSION_STR}""); set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_VERSION ""${SOFA_VERSION}""). set_target_properties(${PROJECT_NAME} PROPERTIES SOFA_URL ""${SOFA_URL}""). # CMakeParseLibraryList.cmake; configure_file(cmake/CMakeParseLibraryList.cmake ${CMAKE_BINARY_DIR}/lib/cmake/CMakeParseLibraryList.cmake COPYONLY); install(FILES cmake/CMakeParseLibraryList.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). # SofaMacros*.cmake; set(macro_files SofaMacros.cmake SofaMacrosConfigure.cmake SofaMacrosInstall.cmake SofaMacrosPython.cmake SofaMacrosUtils.cmake); foreach(macro_file ${macro_files}); configure_file(cmake/${macro_file} ${CMAKE_BINARY_DIR}/lib/cmake/${macro_file} COPYONLY); install(FILES cmake/${macro_file} DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers); endforeach(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Propagate variables (which were in Sofa's global cmakelist); # TODO: Put instead into a target_property ?; set(CMAKE_MODULE_PATH ""${CMAKE_MODULE_PATH}"" PARENT_SCOPE); set(CMAKE_PREFIX_PATH ""${CMAKE_PREFIX_PATH}"" PARENT_SCOPE); set(SOFA_WITH_FLOAT ""${SOFA_WITH_FLOAT}"" PARENT_SCOPE); set(SOFA_WITH_DOUBLE ""${SOFA_WITH_DOUBLE}"" PARENT_SCOPE); ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:5150,Performance,optimiz,optimization,5150,"sources(${PROJECT_NAME} INTERFACE ""$<BUILD_INTERFACE:${HEADER_FILES};${SOFACONFIG_BUILD_OPTIONS_SRC}>""). # Library; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOFACONFIG_BUILD_OPTIONS_SRC} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>""). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK_OPTIONS_RELEASE """"). ## Link-time optimization; if(NOT IPO_CHECK_DONE); include(CheckIPOSupported); check_ipo_supported(RESULT IS_IPO_SUPPORTED OUTPUT IPO_ERROR); set(IPO_CHECK_DONE ON CACHE INTERNAL ""IPO check has been done"" FORCE); if (IS_IPO_SUPPORTED); set(IPO_SUPPORTED ON CACHE INTERNAL ""IPO can be activated"" FORCE); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(); endif(). if (IPO_SUPPORTED); # Focus on max speed with link-time optimization; option(SOFA_ENABLE_LINK_TIME_OPTIMIZATION ""Enable interprocedural optimization"" OFF); if (SOFA_ENABLE_LINK_TIME_OPTIMIZATION); set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE PARENT_SCOPE); endif(); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(). ## GCC-specific; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""GNU""); ## Find out the version of g++ (and save it in GCXX_VERSION); if(CMAKE_CXX_COMPILER_ARG1) # CXX=""ccache g++""; string(STRIP ${CMAKE_CXX_COMPILER_ARG1} CMAKE_CXX_COMPILER_ARG1_stripped); execute_process(COMMAND ${CMAKE_CXX_COMPILER_ARG1_stripped} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); else(); execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); endif().",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:5581,Performance,optimiz,optimization,5581,"_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK_OPTIONS_RELEASE """"). ## Link-time optimization; if(NOT IPO_CHECK_DONE); include(CheckIPOSupported); check_ipo_supported(RESULT IS_IPO_SUPPORTED OUTPUT IPO_ERROR); set(IPO_CHECK_DONE ON CACHE INTERNAL ""IPO check has been done"" FORCE); if (IS_IPO_SUPPORTED); set(IPO_SUPPORTED ON CACHE INTERNAL ""IPO can be activated"" FORCE); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(); endif(). if (IPO_SUPPORTED); # Focus on max speed with link-time optimization; option(SOFA_ENABLE_LINK_TIME_OPTIMIZATION ""Enable interprocedural optimization"" OFF); if (SOFA_ENABLE_LINK_TIME_OPTIMIZATION); set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE PARENT_SCOPE); endif(); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(). ## GCC-specific; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""GNU""); ## Find out the version of g++ (and save it in GCXX_VERSION); if(CMAKE_CXX_COMPILER_ARG1) # CXX=""ccache g++""; string(STRIP ${CMAKE_CXX_COMPILER_ARG1} CMAKE_CXX_COMPILER_ARG1_stripped); execute_process(COMMAND ${CMAKE_CXX_COMPILER_ARG1_stripped} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); else(); execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); endif(). ## Disable partial inlining under gcc 4.6 (Why? -> the memory was exploding); if(""${GCXX_VERSION}"" VERSION_EQUAL 4.6); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fno-partial-inlining""); endif(). # stack-protector; list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fstack-protector;--param=ssp-buffer-size=4""); # _FORTIFY_SOURCE; list(APPEND SOFACONFIG_COMPILE_OPT",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:5661,Performance,optimiz,optimization,5661,"_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(). # Compile options; # Set C++17; target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_17). set(SOFACONFIG_COMPILE_OPTIONS_DEBUG """"); set(SOFACONFIG_COMPILE_OPTIONS_RELEASE """"); set(SOFACONFIG_COMPILE_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS """"); set(SOFACONFIG_LINK_OPTIONS_DEBUG """"); set(SOFACONFIG_LINK_OPTIONS_RELEASE """"). ## Link-time optimization; if(NOT IPO_CHECK_DONE); include(CheckIPOSupported); check_ipo_supported(RESULT IS_IPO_SUPPORTED OUTPUT IPO_ERROR); set(IPO_CHECK_DONE ON CACHE INTERNAL ""IPO check has been done"" FORCE); if (IS_IPO_SUPPORTED); set(IPO_SUPPORTED ON CACHE INTERNAL ""IPO can be activated"" FORCE); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(); endif(). if (IPO_SUPPORTED); # Focus on max speed with link-time optimization; option(SOFA_ENABLE_LINK_TIME_OPTIMIZATION ""Enable interprocedural optimization"" OFF); if (SOFA_ENABLE_LINK_TIME_OPTIMIZATION); set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE PARENT_SCOPE); endif(); else(); message(STATUS ""IPO / LTO not supported: <${IPO_ERROR}>""); endif(). ## GCC-specific; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""GNU""); ## Find out the version of g++ (and save it in GCXX_VERSION); if(CMAKE_CXX_COMPILER_ARG1) # CXX=""ccache g++""; string(STRIP ${CMAKE_CXX_COMPILER_ARG1} CMAKE_CXX_COMPILER_ARG1_stripped); execute_process(COMMAND ${CMAKE_CXX_COMPILER_ARG1_stripped} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); else(); execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCXX_VERSION); endif(). ## Disable partial inlining under gcc 4.6 (Why? -> the memory was exploding); if(""${GCXX_VERSION}"" VERSION_EQUAL 4.6); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fno-partial-inlining""); endif(). # stack-protector; list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fstack-protector;--param=ssp-buffer-size=4""); # _FORTIFY_SOURCE; list(APPEND SOFACONFIG_COMPILE_OPT",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:9511,Performance,optimiz,optimization,9511,"(APPEND SOFACONFIG_COMPILE_OPTIONS ""/wd4250;/wd4251;/wd4275;/wd4675;/wd4661""); # 4661: no suitable definition provided for explicit template instantiation request; # it happens because we put explicit instantiation in a separate translation unit; # it is by design, so this warning is irrelevant in our project. if(MSVC_TOOLSET_VERSION GREATER 140) # > VS 2015; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/Zc:__cplusplus""); endif(). # Experimental: compilation with MSVC/Clang-cl; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang""); if( ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT} STREQUAL MSVC) # something weird happens if we put the two test in one if ??; message(WARNING ""Experimental: you are trying to compile with MSVC and the clang-cl toolchain; this is not officially supported.""); # remove lots of warnings (the Wall of ""normal"" clang seems different of Wall of clang-cl); list(APPEND SOFACONFIG_COMPILE_OPTIONS -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-double-promotion -Wno-old-style-cast -Wno-reserved-id-macro -Wno-language-extension-token -Wno-dllexport-explicit-instantiation-decl -Wno-nonportable-system-include-path -Wno-zero-as-null-pointer-constant -Wno-documentation); # optimization flags (not sure if necessary..); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE -march=native); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(); endif(); endif(). # Mac specific; if(APPLE); #remove OpenGL deprecation message; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-DGL_SILENCE_DEPRECATION""); endif(). ## OpenMP; option(SOFA_OPENMP ""Compile Sofa with OpenMP multithreading."" OFF); if(SOFA_OPENMP); sofa_find_package(OpenMP QUIET); if (OPENMP_FOUND); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""${OpenMP_CXX_FLAGS}""); list(APPEND SOFACONFIG_LINK_OPTIONS ""${OpenMP_CXX_FLAGS}""); else(); message(""WARNING: Your compiler does not implement OpenMP.""); endif(); endif(). ## Tracy; option(SOFA_TRACY ""Compile SOFA with the Tracy profiler client"" OFF); if (SOFA_TRA",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:2909,Security,expose,expose,2909,"BLE 0); endif(); if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_WITH_DOUBLE 1); set(SOFA_WITH_FLOAT 0); endif(). # Options; option(SOFA_DETECTIONOUTPUT_FREEMOTION ""Compile Sofa with the DETECTIONOUTPUT_FREEMOTION macro defined."" OFF); option(SOFA_NO_UPDATE_BBOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=native for gcc/clang)."" OFF); endif(); option(SOFA_ENABLE_FAST_MATH ""Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)."" OFF). ### SOFA_DEV_TOOL; option(SOFA_WITH_DEVTOOLS ""Compile with development extra features."" ON). # Variables to expose in configured files; sofa_set_01(SOFA_NO_UPDATE_BBOX_ VALUE ${SOFA_NO_UPDATE_BBOX}) # build_option_bbox.h.in. # Create build and install versions of etc/sofa.ini:; # - In build dir, sofa.ini contains absolute paths to distant (in source) share/ and examples/ dirs; # - In install dir, sofa.ini (generated later via installedSofa.ini) contains relative paths to local share/ and examples/ dirs; set(SHARE_DIR ""${CMAKE_SOURCE_DIR}/share""); set(EXAMPLES_DIR ""${CMAKE_SOURCE_DIR}/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/sofa.ini""); set(SHARE_DIR ""../share/sofa""); set(EXAMPLES_DIR ""../share/sofa/examples""); configure_file(""etc/sofa.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installedSofa.ini"" DESTINATION etc RENAME sofa.ini COMPONENT applications). set(SOFACONFIGSRC_ROOT ""src/sofa""); set(HEADER_FILES; ${SOFACONFIGSRC_ROOT}/config.h.in; ${SOFACONFIGSRC_ROOT}/version.h.in; ${SOFACONFIGSRC_ROOT}/url.h.in; ); set(SOURCE_FILES; ${SOFACONFIGSRC_ROOT}/initSofaConfi",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:7344,Security,sanitiz,sanitizer,7344,"ERSION}"" VERSION_EQUAL 4.6); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fno-partial-inlining""); endif(). # stack-protector; list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-fstack-protector;--param=ssp-buffer-size=4""); # _FORTIFY_SOURCE; list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE ""-D_FORTIFY_SOURCE=2""). if(CMAKE_BUILD_TYPE MATCHES ""Release""); # ???; list(APPEND SOFACONFIG_LINK_OPTIONS ""-Wl,--no-undefined;-lc""); endif(). endif(). ## GCC/Clang-specific; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""GNU"" OR ${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang""); # Warnings; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-Wall;-W;-Wno-padded""). # Silence attribute warnings (for example, ignored already defined external template); target_compile_options(${PROJECT_NAME} PUBLIC -Wno-attributes). if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-ffast-math""); endif(). option(SOFA_ENABLE_THREAD_SANITIZER ""Enable thread sanitizer (only gcc or clang)"" OFF); if(SOFA_ENABLE_THREAD_SANITIZER); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-fsanitize=thread""); list(APPEND SOFACONFIG_LINK_OPTIONS ""-fsanitize=thread""); endif(); endif(). ## Windows-specific; if(WIN32); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_USE_MATH_DEFINES""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_CRT_SECURE_NO_WARNINGS""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-D_CRT_NONSTDC_NO_DEPRECATE""). set(SOFA_MSVC_NB_COMPILER_PROCESSES ""0"" CACHE STRING ""The maximum number of processes that the compiler can create. 0 (default) for the number of effective processors on the computer""); if (SOFA_MSVC_NB_COMPILER_PROCESSES EQUAL ""0""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP""); else(); if (SOFA_MSVC_NB_COMPILER_PROCESSES MATCHES ""^[0-9]+$""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP${SOFA_MSVC_NB_COMPILER_PROCESSES}""); else(); message(FATAL_ERROR ""A number is expected for SOFA_MSVC_NB_COMPILER_PROCESSES""); endif(); endif(). list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/wd4250;/wd4251;/wd4275;/wd4675;/wd4661""); # 4661: no suitabl",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:1605,Testability,log,logics,1605,"PERTY ""RELOCATABLE_INSTALL_DIR""; BRIEF_DOCS ""Install directory of RELOCATABLE target""; FULL_DOCS ""Install directory of RELOCATABLE target""; ). # Enable the organisation in folders for generators that support; # it. (E.g. some versions of Visual Studio have 'solution folders'); set_property(GLOBAL PROPERTY USE_FOLDERS ON). ### Sofa using type double or float; set(SOFA_FLOATING_POINT_TYPE double CACHE STRING; ""Type used for floating point values in SOFA. It actually determines:; - what template instanciations will be compiled (via the definition of the; SOFA_FLOAT and SOFA_DOUBLE macros); - what is the type behind the 'SReal' typedef used throughout SOFA.""); set_property(CACHE SOFA_FLOATING_POINT_TYPE PROPERTY STRINGS float double). if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_DOUBLE 1); set(SOFA_FLOAT 0); elseif(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_DOUBLE 0); set(SOFA_FLOAT 1); endif(). # If you really don't understand the negated logics of SOFA_DOUBLE and; # SOFA_FLOAT please consider using SOFA_WITH_FLOAT and SOFA_WITH_DOUBLE.; # Eg: SOFA_WITH_FLOAT indicate that you need to generate the; # float code and SOFA_WITH_DOUBLE indicates that you; # need to generate the double related code.; if(${SOFA_FLOATING_POINT_TYPE} STREQUAL float); set(SOFA_WITH_FLOAT 1); set(SOFA_WITH_DOUBLE 0); endif(); if(${SOFA_FLOATING_POINT_TYPE} STREQUAL double); set(SOFA_WITH_DOUBLE 1); set(SOFA_WITH_FLOAT 0); endif(). # Options; option(SOFA_DETECTIONOUTPUT_FREEMOTION ""Compile Sofa with the DETECTIONOUTPUT_FREEMOTION macro defined."" OFF); option(SOFA_NO_UPDATE_BBOX ""Compile Sofa with the SOFA_NO_UPDATE_BBOX macro defined."" OFF); option(SOFA_DUMP_VISITOR_INFO ""Compile Sofa with the SOFA_DUMP_VISITOR_INFO macro defined."" OFF); if(MSVC); option(SOFA_VECTORIZE ""(deprecated) Enable the use of SSE2 instructions by the compiler (Only available for MSVC)."" OFF); option(SOFA_ENABLE_SIMD ""Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc, march=nativ",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt:8951,Testability,test,test,8951,"ber of effective processors on the computer""); if (SOFA_MSVC_NB_COMPILER_PROCESSES EQUAL ""0""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP""); else(); if (SOFA_MSVC_NB_COMPILER_PROCESSES MATCHES ""^[0-9]+$""); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/MP${SOFA_MSVC_NB_COMPILER_PROCESSES}""); else(); message(FATAL_ERROR ""A number is expected for SOFA_MSVC_NB_COMPILER_PROCESSES""); endif(); endif(). list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/wd4250;/wd4251;/wd4275;/wd4675;/wd4661""); # 4661: no suitable definition provided for explicit template instantiation request; # it happens because we put explicit instantiation in a separate translation unit; # it is by design, so this warning is irrelevant in our project. if(MSVC_TOOLSET_VERSION GREATER 140) # > VS 2015; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/Zc:__cplusplus""); endif(). # Experimental: compilation with MSVC/Clang-cl; if(${CMAKE_CXX_COMPILER_ID} MATCHES ""Clang""); if( ${CMAKE_CXX_COMPILER_FRONTEND_VARIANT} STREQUAL MSVC) # something weird happens if we put the two test in one if ??; message(WARNING ""Experimental: you are trying to compile with MSVC and the clang-cl toolchain; this is not officially supported.""); # remove lots of warnings (the Wall of ""normal"" clang seems different of Wall of clang-cl); list(APPEND SOFACONFIG_COMPILE_OPTIONS -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-double-promotion -Wno-old-style-cast -Wno-reserved-id-macro -Wno-language-extension-token -Wno-dllexport-explicit-instantiation-decl -Wno-nonportable-system-include-path -Wno-zero-as-null-pointer-constant -Wno-documentation); # optimization flags (not sure if necessary..); list(APPEND SOFACONFIG_COMPILE_OPTIONS_RELEASE -march=native); if(SOFA_ENABLE_FAST_MATH); list(APPEND SOFACONFIG_COMPILE_OPTIONS ""/fp:fast""); endif(); endif(); endif(); endif(). # Mac specific; if(APPLE); #remove OpenGL deprecation message; list(APPEND SOFACONFIG_COMPILE_OPTIONS ""-DGL_SILENCE_DEPRECATION""); endif(). ## OpenMP; option(SOFA_OPENMP ""Compile Sofa with Op",MatchSource.DOCS,Sofa/framework/Config/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Config/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:13217,Integrability,message,message,13217,"T}/visual/VisualLoop.cpp; ${SRC_ROOT}/visual/VisualManager.cpp; ${SRC_ROOT}/visual/VisualModel.cpp; ${SRC_ROOT}/visual/VisualParams.cpp; ${SRC_ROOT}/visual/VisualState.cpp; ). sofa_find_package(Sofa.Topology REQUIRED); sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # to move to core ?; option(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR ""Use CompressedRowSparseMatrix to store global matrix (caution: it will lead to compile CRSMultiMatrixAcessor, which takes a considerable time to compile)"" OFF); mark_as_advanced(FORCE SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); if(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); list(APPEND HEADER_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.cpp); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Topology Sofa.DefaultType). if(SOFA_BUILD_WITH_PCH_ENABLED); message(""Adding precompiled header for Sofa.Core""); target_precompile_headers(${PROJECT_NAME} PUBLIC ${SRC_ROOT}/objectmodel/BaseObject.h ${SRC_ROOT}/objectmodel/Data.h); endif(). if (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC""); # Silence attribute warnings (for example, ignored already defined external template); target_compile_options(${PROJECT_NAME} PRIVATE -Wno-attributes); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); end",MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:133,Modifiability,config,config,133,"cmake_minimum_required(VERSION 3.22); project(Sofa.Core LANGUAGES CXX). set(SRC_ROOT ""src/sofa/core""). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/AccumulationVecId.h; ${SRC_ROOT}/AccumulationVecId.inl; ${SRC_ROOT}/BaseMatrixAccumulatorComponent.h; ${SRC_ROOT}/BaseLocalMappingMatrix.h; ${SRC_ROOT}/BaseMapping.h; ${SRC_ROOT}/BaseState.h; ${SRC_ROOT}/BehaviorModel.h; ${SRC_ROOT}/CategoryLibrary.h; ${SRC_ROOT}/CollisionElement.h; ${SRC_ROOT}/CollisionModel.h; ${SRC_ROOT}/ComponentLibrary.h; ${SRC_ROOT}/ComponentNameHelper.h; ${SRC_ROOT}/ConstraintOrder.h; ${SRC_ROOT}/ConstraintParams.h; ${SRC_ROOT}/DataEngine.h; ${SRC_ROOT}/DataTracker.h; ${SRC_ROOT}/DataTrackerCallback.h; ${SRC_ROOT}/DataTrackerFunctor.h; ${SRC_ROOT}/DerivativeMatrix.h; ${SRC_ROOT}/DevBaseMonitor.h; ${SRC_ROOT}/ExecParams.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/Mapping.h; ${SRC_ROOT}/Mapping.inl; ${SRC_ROOT}/MappingHelper.h; ${SRC_ROOT}/MatrixAccumulator.h; ${SRC_ROOT}/MechanicalParams.h; ${SRC_ROOT}/MechanicalStatesMatrixAccumulators.h; ${SRC_ROOT}/Multi2Mapping.h; ${SRC_ROOT}/Multi2Mapping.inl; ${SRC_ROOT}/MultiMapping.h; ${SRC_ROOT}/MultiMapping.inl; ${SRC_ROOT}/MultiVecId.h; ${SRC_ROOT}/ObjectFactory.h; ${SRC_ROOT}/PathResolver.h; ${SRC_ROOT}/SofaLibrary.h; ${SRC_ROOT}/sptr.h; ${SRC_ROOT}/State.h; ${SRC_ROOT}/State.inl; ${SRC_ROOT}/VecId.h; ${SRC_ROOT}/behavior/BaseAnimationLoop.h; ${SRC_ROOT}/behavior/BaseConstraint.h; ${SRC_ROOT}/behavior/BaseConstraintCorrection.h; ${SRC_ROOT}/behavior/BaseConstraintSet.h; ${SRC_ROOT}/behavior/BaseController.h; ${SRC_ROOT}/behavior/BaseForceField.h; ${SRC_ROOT}/behavior/BaseInteractionConstraint.h; ${SRC_ROOT}/behavior/BaseInteractionForceField.h; ${SRC_ROOT}/behavior/BaseInteractionProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/BaseLinearSolver.h; ${SRC_ROOT}/behavior/BaseLocalForceFieldMatrix.h; ${SRC_ROOT}/behavior/BaseLocalMassMatrix.h; ${SRC_ROOT}/behavior/BaseMass.h; ${SRC_ROOT}/behavior/BaseMatrixLinearSystem.h; ${SRC_ROOT}/behav",MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4491,Performance,load,loader,4491,havior/PairInteractionForceField.inl; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/PairStateAccessor.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCal,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4524,Performance,load,loader,4524,nl; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/PairStateAccessor.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCallback.h; ${SRC_ROOT}/objectmodel/,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4558,Performance,load,loader,4558,ractionProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/PairStateAccessor.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCallback.h; ${SRC_ROOT}/objectmodel/DataContentValue.h; ${SRC_ROOT}/ob,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4591,Performance,load,loader,4591,${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/PairStateAccessor.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCallback.h; ${SRC_ROOT}/objectmodel/DataContentValue.h; ${SRC_ROOT}/objectmodel/DataFileName.h; ${SRC_R,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4625,Performance,load,loader,4625,onProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/PairStateAccessor.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCallback.h; ${SRC_ROOT}/objectmodel/DataContentValue.h; ${SRC_ROOT}/objectmodel/DataFileName.h; ${SRC_ROOT}/objectmodel/DataFileNameVecto,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:10004,Performance,load,loader,10004,.cpp; ${SRC_ROOT}/behavior/DefaultMultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/ForceField.cpp; ${SRC_ROOT}/behavior/LinearSolver.cpp; ${SRC_ROOT}/behavior/LinearSolverAccessor.cpp; ${SRC_ROOT}/behavior/Mass.cpp; ${SRC_ROOT}/behavior/MechanicalMatrix.cpp; ${SRC_ROOT}/behavior/MechanicalState.cpp; ${SRC_ROOT}/behavior/MixedInteractionConstraint.cpp; ${SRC_ROOT}/behavior/MixedInteractionForceField.cpp; ${SRC_ROOT}/behavior/MultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/OdeSolver.cpp; ${SRC_ROOT}/behavior/PairInteractionConstraint.cpp; ${SRC_ROOT}/behavior/PairInteractionForceField.cpp; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/SingleMatrixAccessor.cpp; ${SRC_ROOT}/behavior/fwd.cpp; ${SRC_ROOT}/collision/BroadPhaseDetection.cpp; ${SRC_ROOT}/collision/Contact.cpp; ${SRC_ROOT}/collision/Intersection.cpp; ${SRC_ROOT}/collision/NarrowPhaseDetection.cpp; ${SRC_ROOT}/collision/Pipeline.cpp; ${SRC_ROOT}/loader/BaseLoader.cpp; ${SRC_ROOT}/loader/MeshLoader.cpp; ${SRC_ROOT}/loader/SceneLoader.cpp; ${SRC_ROOT}/loader/VoxelLoader.cpp; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.cpp; ${SRC_ROOT}/objectmodel/AbstractDataLink.cpp; ${SRC_ROOT}/objectmodel/AspectPool.cpp; ${SRC_ROOT}/objectmodel/Base.cpp; ${SRC_ROOT}/objectmodel/BaseClass.cpp; ${SRC_ROOT}/objectmodel/BaseContext.cpp; ${SRC_ROOT}/objectmodel/BaseData.cpp; ${SRC_ROOT}/objectmodel/BaseLink.cpp; ${SRC_ROOT}/objectmodel/BaseNode.cpp; ${SRC_ROOT}/objectmodel/BaseObject.cpp; ${SRC_ROOT}/objectmodel/BaseObjectDescription.cpp; ${SRC_ROOT}/objectmodel/ClassInfo.cpp; ${SRC_ROOT}/objectmodel/ComponentState.cpp; ${SRC_ROOT}/objectmodel/ConfigurationSetting.cpp; ${SRC_ROOT}/objectmodel/Context.cpp; ${SRC_ROOT}/objectmodel/ContextObject.cpp; ${SRC_ROOT}/objectmodel/DDGNode.cpp; ${SRC_ROOT}/objectmodel/Data.cpp; ${SRC_ROOT}/objectmodel/DataCallback.cpp; ${SRC_ROOT}/objectmodel,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:10039,Performance,load,loader,10039,ultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/ForceField.cpp; ${SRC_ROOT}/behavior/LinearSolver.cpp; ${SRC_ROOT}/behavior/LinearSolverAccessor.cpp; ${SRC_ROOT}/behavior/Mass.cpp; ${SRC_ROOT}/behavior/MechanicalMatrix.cpp; ${SRC_ROOT}/behavior/MechanicalState.cpp; ${SRC_ROOT}/behavior/MixedInteractionConstraint.cpp; ${SRC_ROOT}/behavior/MixedInteractionForceField.cpp; ${SRC_ROOT}/behavior/MultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/OdeSolver.cpp; ${SRC_ROOT}/behavior/PairInteractionConstraint.cpp; ${SRC_ROOT}/behavior/PairInteractionForceField.cpp; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/SingleMatrixAccessor.cpp; ${SRC_ROOT}/behavior/fwd.cpp; ${SRC_ROOT}/collision/BroadPhaseDetection.cpp; ${SRC_ROOT}/collision/Contact.cpp; ${SRC_ROOT}/collision/Intersection.cpp; ${SRC_ROOT}/collision/NarrowPhaseDetection.cpp; ${SRC_ROOT}/collision/Pipeline.cpp; ${SRC_ROOT}/loader/BaseLoader.cpp; ${SRC_ROOT}/loader/MeshLoader.cpp; ${SRC_ROOT}/loader/SceneLoader.cpp; ${SRC_ROOT}/loader/VoxelLoader.cpp; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.cpp; ${SRC_ROOT}/objectmodel/AbstractDataLink.cpp; ${SRC_ROOT}/objectmodel/AspectPool.cpp; ${SRC_ROOT}/objectmodel/Base.cpp; ${SRC_ROOT}/objectmodel/BaseClass.cpp; ${SRC_ROOT}/objectmodel/BaseContext.cpp; ${SRC_ROOT}/objectmodel/BaseData.cpp; ${SRC_ROOT}/objectmodel/BaseLink.cpp; ${SRC_ROOT}/objectmodel/BaseNode.cpp; ${SRC_ROOT}/objectmodel/BaseObject.cpp; ${SRC_ROOT}/objectmodel/BaseObjectDescription.cpp; ${SRC_ROOT}/objectmodel/ClassInfo.cpp; ${SRC_ROOT}/objectmodel/ComponentState.cpp; ${SRC_ROOT}/objectmodel/ConfigurationSetting.cpp; ${SRC_ROOT}/objectmodel/Context.cpp; ${SRC_ROOT}/objectmodel/ContextObject.cpp; ${SRC_ROOT}/objectmodel/DDGNode.cpp; ${SRC_ROOT}/objectmodel/Data.cpp; ${SRC_ROOT}/objectmodel/DataCallback.cpp; ${SRC_ROOT}/objectmodel/DataContentValue.cpp; ${SRC_ROOT}/,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:10074,Performance,load,loader,10074,behavior/ForceField.cpp; ${SRC_ROOT}/behavior/LinearSolver.cpp; ${SRC_ROOT}/behavior/LinearSolverAccessor.cpp; ${SRC_ROOT}/behavior/Mass.cpp; ${SRC_ROOT}/behavior/MechanicalMatrix.cpp; ${SRC_ROOT}/behavior/MechanicalState.cpp; ${SRC_ROOT}/behavior/MixedInteractionConstraint.cpp; ${SRC_ROOT}/behavior/MixedInteractionForceField.cpp; ${SRC_ROOT}/behavior/MultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/OdeSolver.cpp; ${SRC_ROOT}/behavior/PairInteractionConstraint.cpp; ${SRC_ROOT}/behavior/PairInteractionForceField.cpp; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/SingleMatrixAccessor.cpp; ${SRC_ROOT}/behavior/fwd.cpp; ${SRC_ROOT}/collision/BroadPhaseDetection.cpp; ${SRC_ROOT}/collision/Contact.cpp; ${SRC_ROOT}/collision/Intersection.cpp; ${SRC_ROOT}/collision/NarrowPhaseDetection.cpp; ${SRC_ROOT}/collision/Pipeline.cpp; ${SRC_ROOT}/loader/BaseLoader.cpp; ${SRC_ROOT}/loader/MeshLoader.cpp; ${SRC_ROOT}/loader/SceneLoader.cpp; ${SRC_ROOT}/loader/VoxelLoader.cpp; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.cpp; ${SRC_ROOT}/objectmodel/AbstractDataLink.cpp; ${SRC_ROOT}/objectmodel/AspectPool.cpp; ${SRC_ROOT}/objectmodel/Base.cpp; ${SRC_ROOT}/objectmodel/BaseClass.cpp; ${SRC_ROOT}/objectmodel/BaseContext.cpp; ${SRC_ROOT}/objectmodel/BaseData.cpp; ${SRC_ROOT}/objectmodel/BaseLink.cpp; ${SRC_ROOT}/objectmodel/BaseNode.cpp; ${SRC_ROOT}/objectmodel/BaseObject.cpp; ${SRC_ROOT}/objectmodel/BaseObjectDescription.cpp; ${SRC_ROOT}/objectmodel/ClassInfo.cpp; ${SRC_ROOT}/objectmodel/ComponentState.cpp; ${SRC_ROOT}/objectmodel/ConfigurationSetting.cpp; ${SRC_ROOT}/objectmodel/Context.cpp; ${SRC_ROOT}/objectmodel/ContextObject.cpp; ${SRC_ROOT}/objectmodel/DDGNode.cpp; ${SRC_ROOT}/objectmodel/Data.cpp; ${SRC_ROOT}/objectmodel/DataCallback.cpp; ${SRC_ROOT}/objectmodel/DataContentValue.cpp; ${SRC_ROOT}/objectmodel/DataFileName.cpp; ${SRC,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:10110,Performance,load,loader,10110,/behavior/LinearSolver.cpp; ${SRC_ROOT}/behavior/LinearSolverAccessor.cpp; ${SRC_ROOT}/behavior/Mass.cpp; ${SRC_ROOT}/behavior/MechanicalMatrix.cpp; ${SRC_ROOT}/behavior/MechanicalState.cpp; ${SRC_ROOT}/behavior/MixedInteractionConstraint.cpp; ${SRC_ROOT}/behavior/MixedInteractionForceField.cpp; ${SRC_ROOT}/behavior/MultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/OdeSolver.cpp; ${SRC_ROOT}/behavior/PairInteractionConstraint.cpp; ${SRC_ROOT}/behavior/PairInteractionForceField.cpp; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/SingleMatrixAccessor.cpp; ${SRC_ROOT}/behavior/fwd.cpp; ${SRC_ROOT}/collision/BroadPhaseDetection.cpp; ${SRC_ROOT}/collision/Contact.cpp; ${SRC_ROOT}/collision/Intersection.cpp; ${SRC_ROOT}/collision/NarrowPhaseDetection.cpp; ${SRC_ROOT}/collision/Pipeline.cpp; ${SRC_ROOT}/loader/BaseLoader.cpp; ${SRC_ROOT}/loader/MeshLoader.cpp; ${SRC_ROOT}/loader/SceneLoader.cpp; ${SRC_ROOT}/loader/VoxelLoader.cpp; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.cpp; ${SRC_ROOT}/objectmodel/AbstractDataLink.cpp; ${SRC_ROOT}/objectmodel/AspectPool.cpp; ${SRC_ROOT}/objectmodel/Base.cpp; ${SRC_ROOT}/objectmodel/BaseClass.cpp; ${SRC_ROOT}/objectmodel/BaseContext.cpp; ${SRC_ROOT}/objectmodel/BaseData.cpp; ${SRC_ROOT}/objectmodel/BaseLink.cpp; ${SRC_ROOT}/objectmodel/BaseNode.cpp; ${SRC_ROOT}/objectmodel/BaseObject.cpp; ${SRC_ROOT}/objectmodel/BaseObjectDescription.cpp; ${SRC_ROOT}/objectmodel/ClassInfo.cpp; ${SRC_ROOT}/objectmodel/ComponentState.cpp; ${SRC_ROOT}/objectmodel/ConfigurationSetting.cpp; ${SRC_ROOT}/objectmodel/Context.cpp; ${SRC_ROOT}/objectmodel/ContextObject.cpp; ${SRC_ROOT}/objectmodel/DDGNode.cpp; ${SRC_ROOT}/objectmodel/Data.cpp; ${SRC_ROOT}/objectmodel/DataCallback.cpp; ${SRC_ROOT}/objectmodel/DataContentValue.cpp; ${SRC_ROOT}/objectmodel/DataFileName.cpp; ${SRC_ROOT}/objectmodel/DataFileNameVecto,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4659,Testability,log,logging,4659,havior/PairStateAccessor.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCallback.h; ${SRC_ROOT}/objectmodel/DataContentValue.h; ${SRC_ROOT}/objectmodel/DataFileName.h; ${SRC_ROOT}/objectmodel/DataFileNameVector.h; ${SRC_ROOT}/objectmodel/DataLink.h; ${SRC,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:4716,Testability,log,logging,4716,veConstraintSet.h; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.inl; ${SRC_ROOT}/behavior/RotationFinder.h; ${SRC_ROOT}/behavior/StateAccessor.h; ${SRC_ROOT}/behavior/SingleMatrixAccessor.h; ${SRC_ROOT}/behavior/SingleStateAccessor.h; ${SRC_ROOT}/behavior/fwd.h; ${SRC_ROOT}/collision/BroadPhaseDetection.h; ${SRC_ROOT}/collision/CollisionAlgorithm.h; ${SRC_ROOT}/collision/CollisionGroupManager.h; ${SRC_ROOT}/collision/Contact.h; ${SRC_ROOT}/collision/ContactManager.h; ${SRC_ROOT}/collision/Detection.h; ${SRC_ROOT}/collision/DetectionOutput.h; ${SRC_ROOT}/collision/Intersection.h; ${SRC_ROOT}/collision/Intersection.inl; ${SRC_ROOT}/collision/IntersectorFactory.h; ${SRC_ROOT}/collision/NarrowPhaseDetection.h; ${SRC_ROOT}/collision/Pipeline.h; ${SRC_ROOT}/loader/BaseLoader.h; ${SRC_ROOT}/loader/ImageLoader.h; ${SRC_ROOT}/loader/MeshLoader.h; ${SRC_ROOT}/loader/SceneLoader.h; ${SRC_ROOT}/loader/VoxelLoader.h; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.h; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.h; ${SRC_ROOT}/objectmodel/AbstractDataLink.h; ${SRC_ROOT}/objectmodel/AspectPool.h; ${SRC_ROOT}/objectmodel/Base.h; ${SRC_ROOT}/objectmodel/BaseClass.h; ${SRC_ROOT}/objectmodel/BaseClassNameHelper.h; ${SRC_ROOT}/objectmodel/BaseContext.h; ${SRC_ROOT}/objectmodel/BaseData.h; ${SRC_ROOT}/objectmodel/BaseLink.h; ${SRC_ROOT}/objectmodel/BaseNode.h; ${SRC_ROOT}/objectmodel/BaseObject.h; ${SRC_ROOT}/objectmodel/BaseObjectDescription.h; ${SRC_ROOT}/objectmodel/ClassInfo.h; ${SRC_ROOT}/objectmodel/ComponentState.h; ${SRC_ROOT}/objectmodel/ConfigurationSetting.h; ${SRC_ROOT}/objectmodel/Context.h; ${SRC_ROOT}/objectmodel/ContextObject.h; ${SRC_ROOT}/objectmodel/DDGNode.h; ${SRC_ROOT}/objectmodel/Data.h; ${SRC_ROOT}/objectmodel/DataCallback.h; ${SRC_ROOT}/objectmodel/DataContentValue.h; ${SRC_ROOT}/objectmodel/DataFileName.h; ${SRC_ROOT}/objectmodel/DataFileNameVector.h; ${SRC_ROOT}/objectmodel/DataLink.h; ${SRC_ROOT}/objectmodel/DeprecatedData.h; ${SRC_ROOT}/objectm,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:10146,Testability,log,logging,10146,r/LinearSolverAccessor.cpp; ${SRC_ROOT}/behavior/Mass.cpp; ${SRC_ROOT}/behavior/MechanicalMatrix.cpp; ${SRC_ROOT}/behavior/MechanicalState.cpp; ${SRC_ROOT}/behavior/MixedInteractionConstraint.cpp; ${SRC_ROOT}/behavior/MixedInteractionForceField.cpp; ${SRC_ROOT}/behavior/MultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/OdeSolver.cpp; ${SRC_ROOT}/behavior/PairInteractionConstraint.cpp; ${SRC_ROOT}/behavior/PairInteractionForceField.cpp; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/SingleMatrixAccessor.cpp; ${SRC_ROOT}/behavior/fwd.cpp; ${SRC_ROOT}/collision/BroadPhaseDetection.cpp; ${SRC_ROOT}/collision/Contact.cpp; ${SRC_ROOT}/collision/Intersection.cpp; ${SRC_ROOT}/collision/NarrowPhaseDetection.cpp; ${SRC_ROOT}/collision/Pipeline.cpp; ${SRC_ROOT}/loader/BaseLoader.cpp; ${SRC_ROOT}/loader/MeshLoader.cpp; ${SRC_ROOT}/loader/SceneLoader.cpp; ${SRC_ROOT}/loader/VoxelLoader.cpp; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.cpp; ${SRC_ROOT}/objectmodel/AbstractDataLink.cpp; ${SRC_ROOT}/objectmodel/AspectPool.cpp; ${SRC_ROOT}/objectmodel/Base.cpp; ${SRC_ROOT}/objectmodel/BaseClass.cpp; ${SRC_ROOT}/objectmodel/BaseContext.cpp; ${SRC_ROOT}/objectmodel/BaseData.cpp; ${SRC_ROOT}/objectmodel/BaseLink.cpp; ${SRC_ROOT}/objectmodel/BaseNode.cpp; ${SRC_ROOT}/objectmodel/BaseObject.cpp; ${SRC_ROOT}/objectmodel/BaseObjectDescription.cpp; ${SRC_ROOT}/objectmodel/ClassInfo.cpp; ${SRC_ROOT}/objectmodel/ComponentState.cpp; ${SRC_ROOT}/objectmodel/ConfigurationSetting.cpp; ${SRC_ROOT}/objectmodel/Context.cpp; ${SRC_ROOT}/objectmodel/ContextObject.cpp; ${SRC_ROOT}/objectmodel/DDGNode.cpp; ${SRC_ROOT}/objectmodel/Data.cpp; ${SRC_ROOT}/objectmodel/DataCallback.cpp; ${SRC_ROOT}/objectmodel/DataContentValue.cpp; ${SRC_ROOT}/objectmodel/DataFileName.cpp; ${SRC_ROOT}/objectmodel/DataFileNameVector.cpp; ${SRC_ROOT}/objectmodel/DataLink.cpp; ${S,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:10205,Testability,log,logging,10205,${SRC_ROOT}/behavior/MechanicalMatrix.cpp; ${SRC_ROOT}/behavior/MechanicalState.cpp; ${SRC_ROOT}/behavior/MixedInteractionConstraint.cpp; ${SRC_ROOT}/behavior/MixedInteractionForceField.cpp; ${SRC_ROOT}/behavior/MultiMatrixAccessor.cpp; ${SRC_ROOT}/behavior/OdeSolver.cpp; ${SRC_ROOT}/behavior/PairInteractionConstraint.cpp; ${SRC_ROOT}/behavior/PairInteractionForceField.cpp; ${SRC_ROOT}/behavior/PairInteractionProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/ProjectiveConstraintSet.cpp; ${SRC_ROOT}/behavior/SingleMatrixAccessor.cpp; ${SRC_ROOT}/behavior/fwd.cpp; ${SRC_ROOT}/collision/BroadPhaseDetection.cpp; ${SRC_ROOT}/collision/Contact.cpp; ${SRC_ROOT}/collision/Intersection.cpp; ${SRC_ROOT}/collision/NarrowPhaseDetection.cpp; ${SRC_ROOT}/collision/Pipeline.cpp; ${SRC_ROOT}/loader/BaseLoader.cpp; ${SRC_ROOT}/loader/MeshLoader.cpp; ${SRC_ROOT}/loader/SceneLoader.cpp; ${SRC_ROOT}/loader/VoxelLoader.cpp; ${SRC_ROOT}/logging/PerComponentLoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RichConsoleStyleMessageFormatter.cpp; ${SRC_ROOT}/objectmodel/AbstractDataLink.cpp; ${SRC_ROOT}/objectmodel/AspectPool.cpp; ${SRC_ROOT}/objectmodel/Base.cpp; ${SRC_ROOT}/objectmodel/BaseClass.cpp; ${SRC_ROOT}/objectmodel/BaseContext.cpp; ${SRC_ROOT}/objectmodel/BaseData.cpp; ${SRC_ROOT}/objectmodel/BaseLink.cpp; ${SRC_ROOT}/objectmodel/BaseNode.cpp; ${SRC_ROOT}/objectmodel/BaseObject.cpp; ${SRC_ROOT}/objectmodel/BaseObjectDescription.cpp; ${SRC_ROOT}/objectmodel/ClassInfo.cpp; ${SRC_ROOT}/objectmodel/ComponentState.cpp; ${SRC_ROOT}/objectmodel/ConfigurationSetting.cpp; ${SRC_ROOT}/objectmodel/Context.cpp; ${SRC_ROOT}/objectmodel/ContextObject.cpp; ${SRC_ROOT}/objectmodel/DDGNode.cpp; ${SRC_ROOT}/objectmodel/Data.cpp; ${SRC_ROOT}/objectmodel/DataCallback.cpp; ${SRC_ROOT}/objectmodel/DataContentValue.cpp; ${SRC_ROOT}/objectmodel/DataFileName.cpp; ${SRC_ROOT}/objectmodel/DataFileNameVector.cpp; ${SRC_ROOT}/objectmodel/DataLink.cpp; ${SRC_ROOT}/objectmodel/DetachNodeEvent.cpp; ${SRC_ROOT}/obje,MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:13976,Testability,test,tests,13976,"ual/VisualLoop.cpp; ${SRC_ROOT}/visual/VisualManager.cpp; ${SRC_ROOT}/visual/VisualModel.cpp; ${SRC_ROOT}/visual/VisualParams.cpp; ${SRC_ROOT}/visual/VisualState.cpp; ). sofa_find_package(Sofa.Topology REQUIRED); sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # to move to core ?; option(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR ""Use CompressedRowSparseMatrix to store global matrix (caution: it will lead to compile CRSMultiMatrixAcessor, which takes a considerable time to compile)"" OFF); mark_as_advanced(FORCE SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); if(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); list(APPEND HEADER_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.cpp); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Topology Sofa.DefaultType). if(SOFA_BUILD_WITH_PCH_ENABLED); message(""Adding precompiled header for Sofa.Core""); target_precompile_headers(${PROJECT_NAME} PUBLIC ${SRC_ROOT}/objectmodel/BaseObject.h ${SRC_ROOT}/objectmodel/Data.h); endif(). if (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC""); # Silence attribute warnings (for example, ignored already defined external template); target_compile_options(${PROJECT_NAME} PRIVATE -Wno-attributes); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:14073,Testability,test,tests,14073,"ual/VisualLoop.cpp; ${SRC_ROOT}/visual/VisualManager.cpp; ${SRC_ROOT}/visual/VisualModel.cpp; ${SRC_ROOT}/visual/VisualParams.cpp; ${SRC_ROOT}/visual/VisualState.cpp; ). sofa_find_package(Sofa.Topology REQUIRED); sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # to move to core ?; option(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR ""Use CompressedRowSparseMatrix to store global matrix (caution: it will lead to compile CRSMultiMatrixAcessor, which takes a considerable time to compile)"" OFF); mark_as_advanced(FORCE SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); if(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); list(APPEND HEADER_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.cpp); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Topology Sofa.DefaultType). if(SOFA_BUILD_WITH_PCH_ENABLED); message(""Adding precompiled header for Sofa.Core""); target_precompile_headers(${PROJECT_NAME} PUBLIC ${SRC_ROOT}/objectmodel/BaseObject.h ${SRC_ROOT}/objectmodel/Data.h); endif(). if (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC""); # Silence attribute warnings (for example, ignored already defined external template); target_compile_options(${PROJECT_NAME} PRIVATE -Wno-attributes); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt:14184,Testability,test,test,14184,"ual/VisualLoop.cpp; ${SRC_ROOT}/visual/VisualManager.cpp; ${SRC_ROOT}/visual/VisualModel.cpp; ${SRC_ROOT}/visual/VisualParams.cpp; ${SRC_ROOT}/visual/VisualState.cpp; ). sofa_find_package(Sofa.Topology REQUIRED); sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # to move to core ?; option(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR ""Use CompressedRowSparseMatrix to store global matrix (caution: it will lead to compile CRSMultiMatrixAcessor, which takes a considerable time to compile)"" OFF); mark_as_advanced(FORCE SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); if(SOFA_CORE_ENABLE_CRSMULTIMATRIXACCESSOR); list(APPEND HEADER_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/behavior/CRSMultiMatrixAccessor.cpp); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Topology Sofa.DefaultType). if(SOFA_BUILD_WITH_PCH_ENABLED); message(""Adding precompiled header for Sofa.Core""); target_precompile_headers(${PROJECT_NAME} PUBLIC ${SRC_ROOT}/objectmodel/BaseObject.h ${SRC_ROOT}/objectmodel/Data.h); endif(). if (NOT ""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC""); # Silence attribute warnings (for example, ignored already defined external template); target_compile_options(${PROJECT_NAME} PRIVATE -Wno-attributes); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt:687,Modifiability,config,config,687,"cmake_minimum_required(VERSION 3.22); project(Sofa.DefaultType LANGUAGES CXX). set(SRC_ROOT ""src/sofa/defaulttype""). set(HEADER_FILES; ${SRC_ROOT}/AbstractTypeInfo.h; ${SRC_ROOT}/DataTypeInfo.h; ${SRC_ROOT}/DataTypeOperations.h; ${SRC_ROOT}/MapMapSparseMatrix.h; ${SRC_ROOT}/MapMapSparseMatrixEigenUtils.h; ${SRC_ROOT}/MatrixExporter.h; ${SRC_ROOT}/RigidCoord.h; ${SRC_ROOT}/RigidDeriv.h; ${SRC_ROOT}/RigidMass.h; ${SRC_ROOT}/RigidTypes.h; ${SRC_ROOT}/RigidVec6Types.h; ${SRC_ROOT}/SolidTypes.h; ${SRC_ROOT}/SolidTypes.inl; ${SRC_ROOT}/TemplatesAliases.h; ${SRC_ROOT}/TypeInfoID.h; ${SRC_ROOT}/TypeInfoRegistry.h; ${SRC_ROOT}/TypeInfoRegistryTools.h; ${SRC_ROOT}/VecTypes.h; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/typeinfo/DataTypeInfoDynamicWrapper.h; ${SRC_ROOT}/typeinfo/DataTypeInfo.h; ${SRC_ROOT}/typeinfo/NoTypeInfo.h; ${SRC_ROOT}/typeinfo/NameOnlyTypeInfo.h; ${SRC_ROOT}/typeinfo/TypeInfo_Bool.h; ${SRC_ROOT}/typeinfo/TypeInfo_BoundingBox.h; ${SRC_ROOT}/typeinfo/TypeInfo_FixedArray.h; ${SRC_ROOT}/typeinfo/TypeInfo_Integer.h; ${SRC_ROOT}/typeinfo/TypeInfo_Mat.h; ${SRC_ROOT}/typeinfo/TypeInfo_Quat.h; ${SRC_ROOT}/typeinfo/TypeInfo_RigidTypes.h; ${SRC_ROOT}/typeinfo/TypeInfo_RGBAColor.h; ${SRC_ROOT}/typeinfo/TypeInfo_Set.h; ${SRC_ROOT}/typeinfo/TypeInfo_Scalar.h; ${SRC_ROOT}/typeinfo/TypeInfo_Text.h; ${SRC_ROOT}/typeinfo/TypeInfo_Vector.h; ${SRC_ROOT}/typeinfo/TypeInfo_Vec.h; ${SRC_ROOT}/typeinfo/TypeInfo_VecTypes.h; ${SRC_ROOT}/typeinfo/TypeInfo_Topology.h. ${SRC_ROOT}/typeinfo/models/IncompleteTypeInfo.h; ${SRC_ROOT}/typeinfo/models/BoolTypeInfo.h; ${SRC_ROOT}/typeinfo/models/IntegerTypeInfo.h; ${SRC_ROOT}/typeinfo/models/FixedArrayTypeInfo.h; ${SRC_ROOT}/typeinfo/models/SetTypeInfo.h; ${SRC_ROOT}/typeinfo/models/ScalarTypeInfo.h; ${SRC_ROOT}/typeinfo/models/TextTypeInfo.h; ${SRC_ROOT}/typeinfo/models/VectorTypeInfo.h; ). set(SOURCE_FILES; ${SRC_ROOT}/AbstractTypeInfo.cpp; ${SRC_ROOT}/MatrixExporter.cpp; ${SRC_ROOT}/SolidTypes.cpp; ${SRC_R",MatchSource.DOCS,Sofa/framework/DefaultType/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt:3498,Testability,test,tests,3498,"models/ScalarTypeInfo.h; ${SRC_ROOT}/typeinfo/models/TextTypeInfo.h; ${SRC_ROOT}/typeinfo/models/VectorTypeInfo.h; ). set(SOURCE_FILES; ${SRC_ROOT}/AbstractTypeInfo.cpp; ${SRC_ROOT}/MatrixExporter.cpp; ${SRC_ROOT}/SolidTypes.cpp; ${SRC_ROOT}/TemplatesAliases.cpp; ${SRC_ROOT}/TypeInfoID.cpp; ${SRC_ROOT}/TypeInfoRegistry.cpp; ${SRC_ROOT}/TypeInfoRegistryTools.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Bool.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_BoundingBox.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_FixedArray.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Integer.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Mat.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Quat.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_RGBAColor.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_RigidTypes.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Set.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Scalar.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Text.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Vector.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Vec.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_VecTypes.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Topology.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.LinearAlgebra REQUIRED); sofa_find_package(Eigen3 REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Type Sofa.LinearAlgebra); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_DEFAULTTYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_DEFAULTTYPE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/DefaultType/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt:3602,Testability,test,tests,3602,"models/ScalarTypeInfo.h; ${SRC_ROOT}/typeinfo/models/TextTypeInfo.h; ${SRC_ROOT}/typeinfo/models/VectorTypeInfo.h; ). set(SOURCE_FILES; ${SRC_ROOT}/AbstractTypeInfo.cpp; ${SRC_ROOT}/MatrixExporter.cpp; ${SRC_ROOT}/SolidTypes.cpp; ${SRC_ROOT}/TemplatesAliases.cpp; ${SRC_ROOT}/TypeInfoID.cpp; ${SRC_ROOT}/TypeInfoRegistry.cpp; ${SRC_ROOT}/TypeInfoRegistryTools.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Bool.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_BoundingBox.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_FixedArray.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Integer.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Mat.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Quat.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_RGBAColor.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_RigidTypes.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Set.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Scalar.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Text.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Vector.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Vec.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_VecTypes.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Topology.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.LinearAlgebra REQUIRED); sofa_find_package(Eigen3 REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Type Sofa.LinearAlgebra); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_DEFAULTTYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_DEFAULTTYPE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/DefaultType/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt:3720,Testability,test,test,3720,"models/ScalarTypeInfo.h; ${SRC_ROOT}/typeinfo/models/TextTypeInfo.h; ${SRC_ROOT}/typeinfo/models/VectorTypeInfo.h; ). set(SOURCE_FILES; ${SRC_ROOT}/AbstractTypeInfo.cpp; ${SRC_ROOT}/MatrixExporter.cpp; ${SRC_ROOT}/SolidTypes.cpp; ${SRC_ROOT}/TemplatesAliases.cpp; ${SRC_ROOT}/TypeInfoID.cpp; ${SRC_ROOT}/TypeInfoRegistry.cpp; ${SRC_ROOT}/TypeInfoRegistryTools.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Bool.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_BoundingBox.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_FixedArray.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Integer.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Mat.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Quat.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_RGBAColor.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_RigidTypes.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Set.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Scalar.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Text.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Vector.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Vec.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_VecTypes.cpp; ${SRC_ROOT}/typeinfo/TypeInfo_Topology.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.LinearAlgebra REQUIRED); sofa_find_package(Eigen3 REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Type Sofa.LinearAlgebra); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_DEFAULTTYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_DEFAULTTYPE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/DefaultType/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/DefaultType/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Framework/CMakeLists.txt:505,Modifiability,config,config,505,"cmake_minimum_required(VERSION 3.22); project(Sofa.Framework LANGUAGES CXX). set(SOFAFRAMEWORK_SOURCE_DIR ""src/sofa/framework""). set(SOFAFRAMEWORK_MODULES Sofa.Config Sofa.Type Sofa.Geometry Sofa.Topology Sofa.Helper Sofa.LinearAlgebra Sofa.DefaultType Sofa.Core Sofa.Simulation.Core Sofa.Simulation.Common Sofa.Simulation.Graph Sofa.Testing); foreach(framework_module ${SOFAFRAMEWORK_MODULES}); sofa_find_package(${framework_module} REQUIRED); endforeach(). set(HEADER_FILES; ${SOFAFRAMEWORK_SOURCE_DIR}/config.h.in; ${SOFAFRAMEWORK_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFAFRAMEWORK_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAFRAMEWORK_MODULES}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/framework/Framework/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Framework/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt:165,Modifiability,config,config,165,"cmake_minimum_required(VERSION 3.22); project(Sofa.Geometry LANGUAGES CXX). set(SOFAGEOMETRYSRC_ROOT ""src/sofa/geometry""). set(HEADER_FILES; ${SOFAGEOMETRYSRC_ROOT}/config.h.in; ${SOFAGEOMETRYSRC_ROOT}/init.h; ${SOFAGEOMETRYSRC_ROOT}/Edge.h; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.h; ${SOFAGEOMETRYSRC_ROOT}/ElementType.h; ${SOFAGEOMETRYSRC_ROOT}/Hexahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Pentahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Point.h; ${SOFAGEOMETRYSRC_ROOT}/Pyramid.h; ${SOFAGEOMETRYSRC_ROOT}/Quad.h; ${SOFAGEOMETRYSRC_ROOT}/Tetrahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Triangle.h. ${SOFAGEOMETRYSRC_ROOT}/proximity/PointTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/SegmentTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/TriangleTriangle.h; ). set(SOURCE_FILES; ${SOFAGEOMETRYSRC_ROOT}/init.cpp; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GEOMETRY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt:1407,Testability,test,tests,1407,"cmake_minimum_required(VERSION 3.22); project(Sofa.Geometry LANGUAGES CXX). set(SOFAGEOMETRYSRC_ROOT ""src/sofa/geometry""). set(HEADER_FILES; ${SOFAGEOMETRYSRC_ROOT}/config.h.in; ${SOFAGEOMETRYSRC_ROOT}/init.h; ${SOFAGEOMETRYSRC_ROOT}/Edge.h; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.h; ${SOFAGEOMETRYSRC_ROOT}/ElementType.h; ${SOFAGEOMETRYSRC_ROOT}/Hexahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Pentahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Point.h; ${SOFAGEOMETRYSRC_ROOT}/Pyramid.h; ${SOFAGEOMETRYSRC_ROOT}/Quad.h; ${SOFAGEOMETRYSRC_ROOT}/Tetrahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Triangle.h. ${SOFAGEOMETRYSRC_ROOT}/proximity/PointTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/SegmentTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/TriangleTriangle.h; ). set(SOURCE_FILES; ${SOFAGEOMETRYSRC_ROOT}/init.cpp; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GEOMETRY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt:1508,Testability,test,tests,1508,"cmake_minimum_required(VERSION 3.22); project(Sofa.Geometry LANGUAGES CXX). set(SOFAGEOMETRYSRC_ROOT ""src/sofa/geometry""). set(HEADER_FILES; ${SOFAGEOMETRYSRC_ROOT}/config.h.in; ${SOFAGEOMETRYSRC_ROOT}/init.h; ${SOFAGEOMETRYSRC_ROOT}/Edge.h; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.h; ${SOFAGEOMETRYSRC_ROOT}/ElementType.h; ${SOFAGEOMETRYSRC_ROOT}/Hexahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Pentahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Point.h; ${SOFAGEOMETRYSRC_ROOT}/Pyramid.h; ${SOFAGEOMETRYSRC_ROOT}/Quad.h; ${SOFAGEOMETRYSRC_ROOT}/Tetrahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Triangle.h. ${SOFAGEOMETRYSRC_ROOT}/proximity/PointTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/SegmentTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/TriangleTriangle.h; ). set(SOURCE_FILES; ${SOFAGEOMETRYSRC_ROOT}/init.cpp; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GEOMETRY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt:1623,Testability,test,test,1623,"cmake_minimum_required(VERSION 3.22); project(Sofa.Geometry LANGUAGES CXX). set(SOFAGEOMETRYSRC_ROOT ""src/sofa/geometry""). set(HEADER_FILES; ${SOFAGEOMETRYSRC_ROOT}/config.h.in; ${SOFAGEOMETRYSRC_ROOT}/init.h; ${SOFAGEOMETRYSRC_ROOT}/Edge.h; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.h; ${SOFAGEOMETRYSRC_ROOT}/ElementType.h; ${SOFAGEOMETRYSRC_ROOT}/Hexahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Pentahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Point.h; ${SOFAGEOMETRYSRC_ROOT}/Pyramid.h; ${SOFAGEOMETRYSRC_ROOT}/Quad.h; ${SOFAGEOMETRYSRC_ROOT}/Tetrahedron.h; ${SOFAGEOMETRYSRC_ROOT}/Triangle.h. ${SOFAGEOMETRYSRC_ROOT}/proximity/PointTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/SegmentTriangle.h; ${SOFAGEOMETRYSRC_ROOT}/proximity/TriangleTriangle.h; ). set(SOURCE_FILES; ${SOFAGEOMETRYSRC_ROOT}/init.cpp; ${SOFAGEOMETRYSRC_ROOT}/ElementInfo.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GEOMETRY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GEOMETRY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Geometry/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Geometry/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:6980,Deployability,configurat,configuration,6980,"NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(); # The default binary suffix for libraries/plugins is ""_d"" when using a debug build.; # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; set_property(SOURCE ${SRC_ROOT}/system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ). # DEPENDENCY LINKS AND INCLUDE DIRS; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config ); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Topology). # System libs; if(CMAKE_SYSTEM_NAME STREQUAL Linux); target_link_libraries(${PROJECT_NAME} PRIVATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; target_link_libraries(${PROJECT_NAME} PRIVATE ""-framework CoreServices""); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); # Windows library, used in system::FileSystem; target_link_libraries($",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:419,Modifiability,config,config,419,"cmake_minimum_required(VERSION 3.22); project(Sofa.Helper LANGUAGES CXX). # Eigen (header only); sofa_find_package(Eigen3 REQUIRED); # Json (header only) needed by AdvancedTimer; sofa_find_package(Json 3.1.2 REQUIRED); # STB (header only); sofa_find_package(STB REQUIRED); # DiffLib (header only); sofa_find_package(DiffLib REQUIRED). set(SRC_ROOT ""src/sofa/helper""). # HEADERS + SOURCES; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/AdvancedTimer.h; ${SRC_ROOT}/BackTrace.h; ${SRC_ROOT}/cast.h; ${SRC_ROOT}/ColorMap.h; ${SRC_ROOT}/ComponentChange.h; ${SRC_ROOT}/DiffLib.h; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/ST",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:6921,Modifiability,plugin,plugins,6921,"onMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(); # The default binary suffix for libraries/plugins is ""_d"" when using a debug build.; # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; set_property(SOURCE ${SRC_ROOT}/system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ). # DEPENDENCY LINKS AND INCLUDE DIRS; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config ); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Topology). # System libs; if(CMAKE_SYSTEM_NAME STREQUAL Linux); target_link_libraries(${PROJECT_NAME} PRIVATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; ta",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:6980,Modifiability,config,configuration,6980,"NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(); # The default binary suffix for libraries/plugins is ""_d"" when using a debug build.; # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; set_property(SOURCE ${SRC_ROOT}/system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ). # DEPENDENCY LINKS AND INCLUDE DIRS; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config ); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Topology). # System libs; if(CMAKE_SYSTEM_NAME STREQUAL Linux); target_link_libraries(${PROJECT_NAME} PRIVATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; target_link_libraries(${PROJECT_NAME} PRIVATE ""-framework CoreServices""); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); # Windows library, used in system::FileSystem; target_link_libraries($",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:7194,Modifiability,config,config,7194,"QUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(); # The default binary suffix for libraries/plugins is ""_d"" when using a debug build.; # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; set_property(SOURCE ${SRC_ROOT}/system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ). # DEPENDENCY LINKS AND INCLUDE DIRS; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config ); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Topology). # System libs; if(CMAKE_SYSTEM_NAME STREQUAL Linux); target_link_libraries(${PROJECT_NAME} PRIVATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; target_link_libraries(${PROJECT_NAME} PRIVATE ""-framework CoreServices""); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); # Windows library, used in system::FileSystem; target_link_libraries(${PROJECT_NAME} PRIVATE Shlwapi); endif(). # Eigen (header only); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Ei",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1294,Security,access,accessor,1294,"only); sofa_find_package(DiffLib REQUIRED). set(SRC_ROOT ""src/sofa/helper""). # HEADERS + SOURCES; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/AdvancedTimer.h; ${SRC_ROOT}/BackTrace.h; ${SRC_ROOT}/cast.h; ${SRC_ROOT}/ColorMap.h; ${SRC_ROOT}/ComponentChange.h; ${SRC_ROOT}/DiffLib.h; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1391,Security,hash,hash,1391,S; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/AdvancedTimer.h; ${SRC_ROOT}/BackTrace.h; ${SRC_ROOT}/cast.h; ${SRC_ROOT}/ColorMap.h; ${SRC_ROOT}/ComponentChange.h; ${SRC_ROOT}/DiffLib.h; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Loca,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1457,Security,access,accessor,1457, ${SRC_ROOT}/BackTrace.h; ${SRC_ROOT}/cast.h; ${SRC_ROOT}/ColorMap.h; ${SRC_ROOT}/ComponentChange.h; ${SRC_ROOT}/DiffLib.h; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h;,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1494,Security,access,accessor,1494,st.h; ${SRC_ROOT}/ColorMap.h; ${SRC_ROOT}/ComponentChange.h; ${SRC_ROOT}/DiffLib.h; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SR,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1537,Security,access,accessor,1537,/ComponentChange.h; ${SRC_ROOT}/DiffLib.h; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/sy,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1575,Security,access,accessor,1575,; ${SRC_ROOT}/Factory.h; ${SRC_ROOT}/Factory.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/syst,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:1619,Security,access,accessor,1619,y.inl; ${SRC_ROOT}/TypeInfo.h; ${SRC_ROOT}/FnDispatcher.h; ${SRC_ROOT}/FnDispatcher.inl; ${SRC_ROOT}/GenerateRigid.h; ${SRC_ROOT}/IndexOpenMP.h; ${SRC_ROOT}/LCPcalc.h; ${SRC_ROOT}/MarchingCubeUtility.h; ${SRC_ROOT}/MatEigen.h; ${SRC_ROOT}/MemoryManager.h; ${SRC_ROOT}/NameDecoder.h; ${SRC_ROOT}/narrow_cast.h; ${SRC_ROOT}/OptionsGroup.h; ${SRC_ROOT}/OwnershipSPtr.h; ${SRC_ROOT}/Polynomial_LD.h; ${SRC_ROOT}/Polynomial_LD.inl; ${SRC_ROOT}/RandomGenerator.h; ${SRC_ROOT}/SimpleTimer.h; ${SRC_ROOT}/ScopedAdvancedTimer.h; ${SRC_ROOT}/SortedPermutation.h; ${SRC_ROOT}/StringUtils.h; ${SRC_ROOT}/TagFactory.h; ${SRC_ROOT}/TriangleOctree.h; ${SRC_ROOT}/Utils.h; ${SRC_ROOT}/accessor.h; ${SRC_ROOT}/decompose.h; ${SRC_ROOT}/decompose.inl; ${SRC_ROOT}/deque.h; ${SRC_ROOT}/hash.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/integer_id.h; ${SRC_ROOT}/accessor/ReadAccessor.h; ${SRC_ROOT}/accessor/ReadAccessorVector.h; ${SRC_ROOT}/accessor/WriteAccessor.h; ${SRC_ROOT}/accessor/WriteAccessorVector.h; ${SRC_ROOT}/accessor/WriteOnlyAccessor.h; ${SRC_ROOT}/io/BaseFileAccess.h; ${SRC_ROOT}/io/FileAccess.h; ${SRC_ROOT}/io/File.h; ${SRC_ROOT}/io/Image.h; ${SRC_ROOT}/io/ImageDDS.h; ${SRC_ROOT}/io/ImageRAW.h; ${SRC_ROOT}/io/XspLoader.h; ${SRC_ROOT}/io/Mesh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/threa,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:2856,Testability,log,logging,2856,sh.h; ${SRC_ROOT}/io/MeshOBJ.h; ${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentCh,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:2889,Testability,log,logging,2889,${SRC_ROOT}/io/MeshGmsh.h; ${SRC_ROOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cp,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:2920,Testability,log,logging,2920,OOT}/io/MeshTopologyLoader.h; ${SRC_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:2957,Testability,log,logging,2957,_ROOT}/io/SphereLoader.h; ${SRC_ROOT}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROO,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:2989,Testability,log,logging,2989,}/io/STBImage.h; ${SRC_ROOT}/io/TriangleLoader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingC,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3030,Testability,log,logging,3030,Loader.h; ${SRC_ROOT}/kdTree.h; ${SRC_ROOT}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3068,Testability,log,logging,3068,T}/kdTree.inl; ${SRC_ROOT}/list.h; ${SRC_ROOT}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3113,Testability,log,logging,3113,}/map.h; ${SRC_ROOT}/map_ptr_stable_compare.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/P,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3157,Testability,log,logging,3157,.h; ${SRC_ROOT}/pair.h; ${SRC_ROOT}/proximity.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerat,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3199,Testability,log,logging,3199,y.h; ${SRC_ROOT}/random.h; ${SRC_ROOT}/rmath.h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_R,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3245,Testability,log,logging,3245,h; ${SRC_ROOT}/set.h; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctre,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3290,Testability,log,logging,3290,C_ROOT}/system/DynamicLibrary.h; ${SRC_ROOT}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/dec,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3335,Testability,log,logging,3335,T}/system/FileSystem.h; ${SRC_ROOT}/system/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_R,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3373,Testability,log,logging,3373,tem/Locale.h; ${SRC_ROOT}/system/PipeProcess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAc,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3413,Testability,log,logging,3413,ess.h; ${SRC_ROOT}/system/PluginManager.h; ${SRC_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; $,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3456,Testability,log,logging,3456,C_ROOT}/system/SetDirectory.h; ${SRC_ROOT}/system/console.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.c,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3506,Testability,log,logging,3506,onsole.h; ${SRC_ROOT}/system/console_internal.h; ${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/Ima,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:3558,Testability,log,logging,3558,${SRC_ROOT}/system/thread/CTime.h; ${SRC_ROOT}/system/thread/CircularQueue.h; ${SRC_ROOT}/system/thread/CircularQueue.inl; ${SRC_ROOT}/system/thread/debug.h; ${SRC_ROOT}/system/thread/thread_specific_ptr.h; ${SRC_ROOT}/system/FileMonitor.h; ${SRC_ROOT}/system/FileRepository.h; ${SRC_ROOT}/logging/Messaging.h; ${SRC_ROOT}/logging/Message.h; ${SRC_ROOT}/logging/ComponentInfo.h; ${SRC_ROOT}/logging/FileInfo.h; ${SRC_ROOT}/logging/MessageDispatcher.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/ConsoleMessageHandler.h; ${SRC_ROOT}/logging/SilentMessageHandler.h; ${SRC_ROOT}/logging/FileMessageHandler.h; ${SRC_ROOT}/logging/CountingMessageHandler.h; ${SRC_ROOT}/logging/LoggingMessageHandler.h; ${SRC_ROOT}/logging/RoutingMessageHandler.h; ${SRC_ROOT}/logging/MessageHandler.h; ${SRC_ROOT}/logging/MessageFormatter.h; ${SRC_ROOT}/logging/ClangMessageHandler.h; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.h; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.h; ${SRC_ROOT}/logging/ExceptionMessageHandler.h; ${SRC_ROOT}/messaging/FileMessage.h; ${SRC_ROOT}/visual/Transformation.h; ${SRC_ROOT}/visual/DrawTool.h; ${SRC_ROOT}/visual/Trackball.h; ); set(SOURCE_FILES; ${SRC_ROOT}/AdvancedTimer.cpp; ${SRC_ROOT}/BackTrace.cpp; ${SRC_ROOT}/ColorMap.cpp; ${SRC_ROOT}/ComponentChange.cpp; ${SRC_ROOT}/DiffLib.cpp; ${SRC_ROOT}/Factory.cpp; ${SRC_ROOT}/GenerateRigid.cpp; ${SRC_ROOT}/LCPcalc.cpp; ${SRC_ROOT}/MarchingCubeUtility.cpp; ${SRC_ROOT}/NameDecoder.cpp; ${SRC_ROOT}/OptionsGroup.cpp; ${SRC_ROOT}/ScopedAdvancedTimer.cpp; ${SRC_ROOT}/Polynomial_LD.cpp; ${SRC_ROOT}/RandomGenerator.cpp; ${SRC_ROOT}/StringUtils.cpp; ${SRC_ROOT}/TagFactory.cpp; ${SRC_ROOT}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5239,Testability,log,logging,5239,}/TriangleOctree.cpp; ${SRC_ROOT}/Utils.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMA,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5272,Testability,log,logging,5272,s.cpp; ${SRC_ROOT}/decompose.cpp; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5315,Testability,log,logging,5315,T}/init.cpp; ${SRC_ROOT}/fwd.cpp; ${SRC_ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/Fi,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5357,Testability,log,logging,5357,ROOT}/io/BaseFileAccess.cpp; ${SRC_ROOT}/io/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5396,Testability,log,logging,5396,o/FileAccess.cpp; ${SRC_ROOT}/io/File.cpp; ${SRC_ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_RO,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5441,Testability,log,logging,5441,ROOT}/io/Image.cpp; ${SRC_ROOT}/io/ImageDDS.cpp; ${SRC_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND ,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5493,Testability,log,logging,5493,C_ROOT}/io/ImageRAW.cpp; ${SRC_ROOT}/io/Mesh.cpp; ${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5547,Testability,log,logging,5547,${SRC_ROOT}/io/MeshOBJ.cpp; ${SRC_ROOT}/io/MeshGmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIR,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5594,Testability,log,logging,5594,Gmsh.cpp; ${SRC_ROOT}/io/MeshTopologyLoader.cpp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); so,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5640,Testability,log,logging,5640,pp; ${SRC_ROOT}/io/SphereLoader.cpp; ${SRC_ROOT}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LI,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5684,Testability,log,logging,5684,T}/io/STBImage.cpp; ${SRC_ROOT}/io/TriangleLoader.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HE,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5732,Testability,log,logging,5732,er.cpp; ${SRC_ROOT}/io/XspLoader.cpp; ${SRC_ROOT}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NA,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5779,Testability,log,logging,5779,T}/kdTree.cpp; ${SRC_ROOT}/system/DynamicLibrary.cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directorie,MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:5826,Testability,log,logging,5826,".cpp; ${SRC_ROOT}/system/FileSystem.cpp; ${SRC_ROOT}/system/Locale.cpp; ${SRC_ROOT}/system/PipeProcess.cpp; ${SRC_ROOT}/system/PluginManager.cpp; ${SRC_ROOT}/system/SetDirectory.cpp; ${SRC_ROOT}/system/console.cpp; ${SRC_ROOT}/system/thread/CTime.cpp; ${SRC_ROOT}/system/thread/CircularQueue.cpp; ${SRC_ROOT}/system/thread/debug.cpp; ${SRC_ROOT}/system/FileRepository.cpp; ${SRC_ROOT}/set.cpp; ${SRC_ROOT}/logging/Message.cpp; ${SRC_ROOT}/logging/MessageDispatcher.cpp; ${SRC_ROOT}/logging/MessageFormatter.cpp; ${SRC_ROOT}/logging/ComponentInfo.cpp; ${SRC_ROOT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTER",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:6406,Testability,log,logging,6406,"OT}/logging/ClangMessageHandler.cpp; ${SRC_ROOT}/logging/ClangStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(); # The default binary suffix for libraries/plugins is ""_d"" when using a debug build.; # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; set_property(SOURCE ${SRC_ROOT}/system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ). # DEPENDENCY LINKS AND INCLUDE DIRS; target_link_libraries(${PROJEC",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:6475,Testability,log,logging,6475,"rmatter.cpp; ${SRC_ROOT}/logging/DefaultStyleMessageFormatter.cpp; ${SRC_ROOT}/logging/ConsoleMessageHandler.cpp; ${SRC_ROOT}/logging/SilentMessageHandler.cpp; ${SRC_ROOT}/logging/FileMessageHandler.cpp; ${SRC_ROOT}/logging/CountingMessageHandler.cpp; ${SRC_ROOT}/logging/LoggingMessageHandler.cpp; ${SRC_ROOT}/logging/RoutingMessageHandler.cpp; ${SRC_ROOT}/logging/ExceptionMessageHandler.cpp; ${SRC_ROOT}/messaging/FileMessage.cpp; ${SRC_ROOT}/visual/DrawTool.cpp; ${SRC_ROOT}/visual/Transformation.cpp; ${SRC_ROOT}/visual/Trackball.cpp; ); if(CMAKE_SYSTEM_NAME STREQUAL Linux); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_linux.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_macosx.cpp); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); list(APPEND SOURCE_FILES ${SRC_ROOT}/system/FileMonitor_windows.cpp); endif(). if (SOFA_TRACY); list(APPEND HEADER_FILES ${SRC_ROOT}/logging/TracyMessageHandler.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/logging/TracyMessageHandler.cpp); endif(). sofa_find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Topology REQUIRED). # LIBRARY; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(CMAKE_SYSTEM_NAME STREQUAL Windows); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/WinDepPack>""); endif(); # The default binary suffix for libraries/plugins is ""_d"" when using a debug build.; # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; set_property(SOURCE ${SRC_ROOT}/system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ). # DEPENDENCY LINKS AND INCLUDE DIRS; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config ); target_link_libraries(${PROJECT_NAME} PUBLIC S",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:9333,Testability,test,tests,9333,"ATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; target_link_libraries(${PROJECT_NAME} PRIVATE ""-framework CoreServices""); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); # Windows library, used in system::FileSystem; target_link_libraries(${PROJECT_NAME} PRIVATE Shlwapi); endif(). # Eigen (header only); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). # Link the experimental library if the compiler version is less than gcc-9 or clang-9; if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.1); target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs); endif(); elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang""); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0); target_link_libraries(${PROJECT_NAME} PUBLIC c++fs); endif(); endif(). # Json (header only) needed by AdvancedTimer; target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${JSON_INCLUDE_DIR}>""). # STB (header only) for Image; target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${STB_INCLUDE_DIR}>""). # DiffLib (header only); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${difflib_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_HELPER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_HELPER_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:9432,Testability,test,tests,9432,"ATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; target_link_libraries(${PROJECT_NAME} PRIVATE ""-framework CoreServices""); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); # Windows library, used in system::FileSystem; target_link_libraries(${PROJECT_NAME} PRIVATE Shlwapi); endif(). # Eigen (header only); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). # Link the experimental library if the compiler version is less than gcc-9 or clang-9; if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.1); target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs); endif(); elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang""); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0); target_link_libraries(${PROJECT_NAME} PUBLIC c++fs); endif(); endif(). # Json (header only) needed by AdvancedTimer; target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${JSON_INCLUDE_DIR}>""). # STB (header only) for Image; target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${STB_INCLUDE_DIR}>""). # DiffLib (header only); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${difflib_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_HELPER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_HELPER_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt:9545,Testability,test,test,9545,"ATE dl); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); target_link_libraries(${PROJECT_NAME} PRIVATE dl); find_library(ICONV iconv); target_link_libraries(${PROJECT_NAME} PRIVATE ${ICONV}); # on macOS, -framework CoreServices is needed for FileMonitor; target_link_libraries(${PROJECT_NAME} PRIVATE ""-framework CoreServices""); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); # Windows library, used in system::FileSystem; target_link_libraries(${PROJECT_NAME} PRIVATE Shlwapi); endif(). # Eigen (header only); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). # Link the experimental library if the compiler version is less than gcc-9 or clang-9; if(CMAKE_CXX_COMPILER_ID STREQUAL ""GNU""); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.1); target_link_libraries(${PROJECT_NAME} PUBLIC stdc++fs); endif(); elseif(CMAKE_CXX_COMPILER_ID STREQUAL ""Clang""); if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0); target_link_libraries(${PROJECT_NAME} PUBLIC c++fs); endif(); endif(). # Json (header only) needed by AdvancedTimer; target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${JSON_INCLUDE_DIR}>""). # STB (header only) for Image; target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${STB_INCLUDE_DIR}>""). # DiffLib (header only); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${difflib_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_HELPER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_HELPER_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Helper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt:2948,Deployability,update,update,2948,"RASRC_ROOT}/matrix_bloc_traits.h; ). set(SOURCE_FILES; ${SOFALINEARALGEBRASRC_ROOT}/BaseMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BaseVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockDiagonalMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockFullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BTDMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixConstraint.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixGeneric.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixMechanical.cpp; ${SOFALINEARALGEBRASRC_ROOT}/EigenVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/RotationMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixStorageOrder[EigenSparseMatrix].cpp; ${SOFALINEARALGEBRASRC_ROOT}/init.cpp; ). sofa_find_package(Eigen3 3.3.5 REQUIRED). if (SOFA_OPENMP AND ""${EIGEN3_VERSION}"" VERSION_LESS 3.2.10); sofa_find_package(OpenMP BOTH_SCOPES) # will set/update SOFA_LINEARALGEBRA_HAVE_OPENMP; endif(). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); list(APPEND HEADER_FILES ${SOFALINEARALGEBRASRC_ROOT}/EigenBaseSparseMatrix_MT.h); endif(). sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Helper REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Helper Eigen3::Eigen). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_CXX); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_LINEARALGEBRA_BUILD_TESTS ""Compile the automatic tests",MatchSource.DOCS,Sofa/framework/LinearAlgebra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt:185,Modifiability,config,config,185,"cmake_minimum_required(VERSION 3.22); project(Sofa.LinearAlgebra LANGUAGES CXX). set(SOFALINEARALGEBRASRC_ROOT ""src/sofa/linearalgebra""). set(HEADER_FILES; ${SOFALINEARALGEBRASRC_ROOT}/config.h.in; ${SOFALINEARALGEBRASRC_ROOT}/fwd.h; ${SOFALINEARALGEBRASRC_ROOT}/init.h; ${SOFALINEARALGEBRASRC_ROOT}/BTDMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/BTDMatrix.inl; ${SOFALINEARALGEBRASRC_ROOT}/BaseMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/BaseVector.h; ${SOFALINEARALGEBRASRC_ROOT}/BlockFullMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/BlockFullMatrix.inl; ${SOFALINEARALGEBRASRC_ROOT}/BlockDiagonalMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/BlockDiagonalMatrix.inl; ${SOFALINEARALGEBRASRC_ROOT}/BlockVector.h; ${SOFALINEARALGEBRASRC_ROOT}/BlockVector.inl; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixConstraint.h; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixConstraintEigenUtils.h; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixGeneric.h; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixMechanical.h; ${SOFALINEARALGEBRASRC_ROOT}/DiagonalMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/DiagonalSystemSolver.h; ${SOFALINEARALGEBRASRC_ROOT}/EigenBaseSparseMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/EigenSparseMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/EigenVector.h; ${SOFALINEARALGEBRASRC_ROOT}/FullMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/FullMatrix.inl; ${SOFALINEARALGEBRASRC_ROOT}/FullVector.h; ${SOFALINEARALGEBRASRC_ROOT}/FullVector.inl; ${SOFALINEARALGEBRASRC_ROOT}/MatrixExpr.h; ${SOFALINEARALGEBRASRC_ROOT}/RotationMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrix.h; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixProduct.h; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixProduct.inl; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixStorageOrder.h; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixStorageOrder[EigenSparseMatrix].h; ${SOFALINEARALGEBRASRC_ROOT}/TriangularSystemSolver.h; ${SOFALINEARALGEBRASRC_ROOT}/matrix_bloc_traits.h; ). set(SOURCE_FILES; ${",MatchSource.DOCS,Sofa/framework/LinearAlgebra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt:3834,Testability,test,tests,3834,"GEBRASRC_ROOT}/BlockDiagonalMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockFullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BTDMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixConstraint.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixGeneric.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixMechanical.cpp; ${SOFALINEARALGEBRASRC_ROOT}/EigenVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/RotationMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixStorageOrder[EigenSparseMatrix].cpp; ${SOFALINEARALGEBRASRC_ROOT}/init.cpp; ). sofa_find_package(Eigen3 3.3.5 REQUIRED). if (SOFA_OPENMP AND ""${EIGEN3_VERSION}"" VERSION_LESS 3.2.10); sofa_find_package(OpenMP BOTH_SCOPES) # will set/update SOFA_LINEARALGEBRA_HAVE_OPENMP; endif(). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); list(APPEND HEADER_FILES ${SOFALINEARALGEBRASRC_ROOT}/EigenBaseSparseMatrix_MT.h); endif(). sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Helper REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Helper Eigen3::Eigen). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_CXX); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_LINEARALGEBRA_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_LINEARALGEBRA_BUILD_TESTS); add_subdirectory(Testing); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/LinearAlgebra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt:3940,Testability,test,tests,3940,"GEBRASRC_ROOT}/BlockDiagonalMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockFullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BTDMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixConstraint.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixGeneric.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixMechanical.cpp; ${SOFALINEARALGEBRASRC_ROOT}/EigenVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/RotationMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixStorageOrder[EigenSparseMatrix].cpp; ${SOFALINEARALGEBRASRC_ROOT}/init.cpp; ). sofa_find_package(Eigen3 3.3.5 REQUIRED). if (SOFA_OPENMP AND ""${EIGEN3_VERSION}"" VERSION_LESS 3.2.10); sofa_find_package(OpenMP BOTH_SCOPES) # will set/update SOFA_LINEARALGEBRA_HAVE_OPENMP; endif(). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); list(APPEND HEADER_FILES ${SOFALINEARALGEBRASRC_ROOT}/EigenBaseSparseMatrix_MT.h); endif(). sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Helper REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Helper Eigen3::Eigen). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_CXX); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_LINEARALGEBRA_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_LINEARALGEBRA_BUILD_TESTS); add_subdirectory(Testing); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/LinearAlgebra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt:4087,Testability,test,test,4087,"GEBRASRC_ROOT}/BlockDiagonalMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockFullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BlockVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/BTDMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixConstraint.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixGeneric.cpp; ${SOFALINEARALGEBRASRC_ROOT}/CompressedRowSparseMatrixMechanical.cpp; ${SOFALINEARALGEBRASRC_ROOT}/EigenVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/FullVector.cpp; ${SOFALINEARALGEBRASRC_ROOT}/RotationMatrix.cpp; ${SOFALINEARALGEBRASRC_ROOT}/SparseMatrixStorageOrder[EigenSparseMatrix].cpp; ${SOFALINEARALGEBRASRC_ROOT}/init.cpp; ). sofa_find_package(Eigen3 3.3.5 REQUIRED). if (SOFA_OPENMP AND ""${EIGEN3_VERSION}"" VERSION_LESS 3.2.10); sofa_find_package(OpenMP BOTH_SCOPES) # will set/update SOFA_LINEARALGEBRA_HAVE_OPENMP; endif(). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); list(APPEND HEADER_FILES ${SOFALINEARALGEBRASRC_ROOT}/EigenBaseSparseMatrix_MT.h); endif(). sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Helper REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Type Sofa.Helper Eigen3::Eigen). if (SOFA_LINEARALGEBRA_HAVE_OPENMP); target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_CXX); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_LINEARALGEBRA_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_LINEARALGEBRA_BUILD_TESTS); add_subdirectory(Testing); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/LinearAlgebra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/LinearAlgebra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt:161,Modifiability,config,config,161,"cmake_minimum_required(VERSION 3.22); project(Sofa.SimpleApi LANGUAGES CXX). set(SOFASIMPLEAPI_SRC ""src/sofa/simpleapi""). set(HEADER_FILES; ${SOFASIMPLEAPI_SRC}/config.h.in; ${SOFASIMPLEAPI_SRC}/init.h; ${SOFASIMPLEAPI_SRC}/SimpleApi.h; ). set(SOURCE_FILES; ${SOFASIMPLEAPI_SRC}/init.cpp; ${SOFASIMPLEAPI_SRC}/SimpleApi.cpp; ). sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMPLEAPI_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMPLEAPI_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/SimpleApi/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt:882,Testability,test,tests,882,"cmake_minimum_required(VERSION 3.22); project(Sofa.SimpleApi LANGUAGES CXX). set(SOFASIMPLEAPI_SRC ""src/sofa/simpleapi""). set(HEADER_FILES; ${SOFASIMPLEAPI_SRC}/config.h.in; ${SOFASIMPLEAPI_SRC}/init.h; ${SOFASIMPLEAPI_SRC}/SimpleApi.h; ). set(SOURCE_FILES; ${SOFASIMPLEAPI_SRC}/init.cpp; ${SOFASIMPLEAPI_SRC}/SimpleApi.cpp; ). sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMPLEAPI_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMPLEAPI_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/SimpleApi/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt:984,Testability,test,tests,984,"cmake_minimum_required(VERSION 3.22); project(Sofa.SimpleApi LANGUAGES CXX). set(SOFASIMPLEAPI_SRC ""src/sofa/simpleapi""). set(HEADER_FILES; ${SOFASIMPLEAPI_SRC}/config.h.in; ${SOFASIMPLEAPI_SRC}/init.h; ${SOFASIMPLEAPI_SRC}/SimpleApi.h; ). set(SOURCE_FILES; ${SOFASIMPLEAPI_SRC}/init.cpp; ${SOFASIMPLEAPI_SRC}/SimpleApi.cpp; ). sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMPLEAPI_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMPLEAPI_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/SimpleApi/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt:1100,Testability,test,test,1100,"cmake_minimum_required(VERSION 3.22); project(Sofa.SimpleApi LANGUAGES CXX). set(SOFASIMPLEAPI_SRC ""src/sofa/simpleapi""). set(HEADER_FILES; ${SOFASIMPLEAPI_SRC}/config.h.in; ${SOFASIMPLEAPI_SRC}/init.h; ${SOFASIMPLEAPI_SRC}/SimpleApi.h; ). set(SOURCE_FILES; ${SOFASIMPLEAPI_SRC}/init.cpp; ${SOFASIMPLEAPI_SRC}/SimpleApi.cpp; ). sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMPLEAPI_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMPLEAPI_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/SimpleApi/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt:109,Usability,simpl,simpleapi,109,"cmake_minimum_required(VERSION 3.22); project(Sofa.SimpleApi LANGUAGES CXX). set(SOFASIMPLEAPI_SRC ""src/sofa/simpleapi""). set(HEADER_FILES; ${SOFASIMPLEAPI_SRC}/config.h.in; ${SOFASIMPLEAPI_SRC}/init.h; ${SOFASIMPLEAPI_SRC}/SimpleApi.h; ). set(SOURCE_FILES; ${SOFASIMPLEAPI_SRC}/init.cpp; ${SOFASIMPLEAPI_SRC}/SimpleApi.cpp; ). sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMPLEAPI_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMPLEAPI_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/SimpleApi/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/SimpleApi/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/CMakeLists.txt:527,Modifiability,config,config,527,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation LANGUAGES CXX). set(SOFASIMULATION_SOURCE_DIR ""src/sofa/simulation""). set(SOFASIMULATION_DIRS Core Common Graph); set(SOFASIMULATION_TARGETS); foreach(simulation_dir ${SOFASIMULATION_DIRS}); sofa_add_subdirectory(library ${simulation_dir} ${PROJECT_NAME}.${simulation_dir} ON); if(TARGET ${PROJECT_NAME}.${simulation_dir}); list(APPEND SOFASIMULATION_TARGETS ${PROJECT_NAME}.${simulation_dir}); endif(); endforeach(). set(HEADER_FILES; ${SOFASIMULATION_SOURCE_DIR}/config.h.in; ${SOFASIMULATION_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFASIMULATION_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFASIMULATION_TARGETS}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_BUILD_TESTS); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/CMakeLists.txt:1147,Testability,test,tests,1147,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation LANGUAGES CXX). set(SOFASIMULATION_SOURCE_DIR ""src/sofa/simulation""). set(SOFASIMULATION_DIRS Core Common Graph); set(SOFASIMULATION_TARGETS); foreach(simulation_dir ${SOFASIMULATION_DIRS}); sofa_add_subdirectory(library ${simulation_dir} ${PROJECT_NAME}.${simulation_dir} ON); if(TARGET ${PROJECT_NAME}.${simulation_dir}); list(APPEND SOFASIMULATION_TARGETS ${PROJECT_NAME}.${simulation_dir}); endif(); endforeach(). set(HEADER_FILES; ${SOFASIMULATION_SOURCE_DIR}/config.h.in; ${SOFASIMULATION_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFASIMULATION_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFASIMULATION_TARGETS}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_BUILD_TESTS); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/CMakeLists.txt:1250,Testability,test,tests,1250,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation LANGUAGES CXX). set(SOFASIMULATION_SOURCE_DIR ""src/sofa/simulation""). set(SOFASIMULATION_DIRS Core Common Graph); set(SOFASIMULATION_TARGETS); foreach(simulation_dir ${SOFASIMULATION_DIRS}); sofa_add_subdirectory(library ${simulation_dir} ${PROJECT_NAME}.${simulation_dir} ON); if(TARGET ${PROJECT_NAME}.${simulation_dir}); list(APPEND SOFASIMULATION_TARGETS ${PROJECT_NAME}.${simulation_dir}); endif(); endforeach(). set(HEADER_FILES; ${SOFASIMULATION_SOURCE_DIR}/config.h.in; ${SOFASIMULATION_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFASIMULATION_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFASIMULATION_TARGETS}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_BUILD_TESTS); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:1235,Deployability,install,install,1235,"ALLOW_FETCH_DEPENDENCIES is ON, fetching googletest...""). include(FetchContent); FetchContent_Declare(googletest; GIT_REPOSITORY https://github.com/google/googletest; GIT_TAG v1.14.0; ). FetchContent_GetProperties(googletest); if(NOT googletest_POPULATED); FetchContent_Populate(googletest). set(BUILD_GMOCK OFF CACHE INTERNAL """"); set(BUILD_SHARED_LIBS ON CACHE BOOL """" FORCE); set(INSTALL_GTEST OFF CACHE BOOL """" FORCE) # rely on SOFA macros; set(gtest_force_shared_crt ON CACHE BOOL """" FORCE); set(gtest_disable_pthreads OFF CACHE BOOL """" FORCE). message(""${PROJECT_NAME}: adding subdirectory ${googletest_SOURCE_DIR}""). add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR}). target_compile_options(gtest_main PRIVATE ""-DGTEST_LINKED_AS_SHARED_LIBRARY=0""); target_compile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTI",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:324,Integrability,message,message,324,"cmake_minimum_required(VERSION 3.22); project(Sofa.Testing LANGUAGES CXX). # Enable testing features of cmake, like the add_test() command.; enable_testing(). # add googletest library; # set(googletest_disable_pthreads ON CACHE INTERNAL """"); find_package(GTest QUIET); if(NOT GTest_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching googletest...""). include(FetchContent); FetchContent_Declare(googletest; GIT_REPOSITORY https://github.com/google/googletest; GIT_TAG v1.14.0; ). FetchContent_GetProperties(googletest); if(NOT googletest_POPULATED); FetchContent_Populate(googletest). set(BUILD_GMOCK OFF CACHE INTERNAL """"); set(BUILD_SHARED_LIBS ON CACHE BOOL """" FORCE); set(INSTALL_GTEST OFF CACHE BOOL """" FORCE) # rely on SOFA macros; set(gtest_force_shared_crt ON CACHE BOOL """" FORCE); set(gtest_disable_pthreads OFF CACHE BOOL """" FORCE). message(""${PROJECT_NAME}: adding subdirectory ${googletest_SOURCE_DIR}""). add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR}). target_compile_options(gtest_main PRIVATE ""-DGTEST_LINKED_AS_SHARED_LIBRARY=0""); target_compile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPEND",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:938,Integrability,message,message,938,"cmake_minimum_required(VERSION 3.22); project(Sofa.Testing LANGUAGES CXX). # Enable testing features of cmake, like the add_test() command.; enable_testing(). # add googletest library; # set(googletest_disable_pthreads ON CACHE INTERNAL """"); find_package(GTest QUIET); if(NOT GTest_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching googletest...""). include(FetchContent); FetchContent_Declare(googletest; GIT_REPOSITORY https://github.com/google/googletest; GIT_TAG v1.14.0; ). FetchContent_GetProperties(googletest); if(NOT googletest_POPULATED); FetchContent_Populate(googletest). set(BUILD_GMOCK OFF CACHE INTERNAL """"); set(BUILD_SHARED_LIBS ON CACHE BOOL """" FORCE); set(INSTALL_GTEST OFF CACHE BOOL """" FORCE) # rely on SOFA macros; set(gtest_force_shared_crt ON CACHE BOOL """" FORCE); set(gtest_disable_pthreads OFF CACHE BOOL """" FORCE). message(""${PROJECT_NAME}: adding subdirectory ${googletest_SOURCE_DIR}""). add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR}). target_compile_options(gtest_main PRIVATE ""-DGTEST_LINKED_AS_SHARED_LIBRARY=0""); target_compile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPEND",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:1812,Integrability,message,message,1812,"(INSTALL_GTEST OFF CACHE BOOL """" FORCE) # rely on SOFA macros; set(gtest_force_shared_crt ON CACHE BOOL """" FORCE); set(gtest_disable_pthreads OFF CACHE BOOL """" FORCE). message(""${PROJECT_NAME}: adding subdirectory ${googletest_SOURCE_DIR}""). add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR}). target_compile_options(gtest_main PRIVATE ""-DGTEST_LINKED_AS_SHARED_LIBRARY=0""); target_compile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.h; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.h; ). set(SOURCE_FILES; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.cpp; ${SOFATESTINGSRC_ROOT}/BaseTest.cpp; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.cpp; ${SOFATESTINGSRC_ROOT}/NumericTest.cpp; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.cpp; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.cpp; ). so",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:2188,Modifiability,config,config,2188,"ompile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.h; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.h; ). set(SOURCE_FILES; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.cpp; ${SOFATESTINGSRC_ROOT}/BaseTest.cpp; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.cpp; ${SOFATESTINGSRC_ROOT}/NumericTest.cpp; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.cpp; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType Sofa.Core Sofa.Simulation.Graph Sofa.S",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:84,Testability,test,testing,84,"cmake_minimum_required(VERSION 3.22); project(Sofa.Testing LANGUAGES CXX). # Enable testing features of cmake, like the add_test() command.; enable_testing(). # add googletest library; # set(googletest_disable_pthreads ON CACHE INTERNAL """"); find_package(GTest QUIET); if(NOT GTest_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching googletest...""). include(FetchContent); FetchContent_Declare(googletest; GIT_REPOSITORY https://github.com/google/googletest; GIT_TAG v1.14.0; ). FetchContent_GetProperties(googletest); if(NOT googletest_POPULATED); FetchContent_Populate(googletest). set(BUILD_GMOCK OFF CACHE INTERNAL """"); set(BUILD_SHARED_LIBS ON CACHE BOOL """" FORCE); set(INSTALL_GTEST OFF CACHE BOOL """" FORCE) # rely on SOFA macros; set(gtest_force_shared_crt ON CACHE BOOL """" FORCE); set(gtest_disable_pthreads OFF CACHE BOOL """" FORCE). message(""${PROJECT_NAME}: adding subdirectory ${googletest_SOURCE_DIR}""). add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR}). target_compile_options(gtest_main PRIVATE ""-DGTEST_LINKED_AS_SHARED_LIBRARY=0""); target_compile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPEND",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:2136,Testability,test,testing,2136,"""-DGTEST_LINKED_AS_SHARED_LIBRARY=0""); target_compile_options(gtest PRIVATE ""-DGTEST_CREATE_SHARED_LIBRARY=1""). install(DIRECTORY ${googletest_SOURCE_DIR}/googletest/include/gtest DESTINATION include/extlibs/GTest/ COMPONENT headers); target_include_directories(gtest PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/GTest/>""); ; include(SofaMacros); sofa_create_package_with_targets(; PACKAGE_NAME GTest; PACKAGE_VERSION 1.14.0; TARGETS gtest AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""include""; INCLUDE_INSTALL_DIR ""extlibs/GTest""; ). set_target_properties(gtest PROPERTIES FOLDER Testing); set_target_properties(gtest_main PROPERTIES FOLDER Testing); endif(); elseif (NOT GTest_FOUND); message(FATAL_ERROR ""${PROJECT_NAME}: DEPENDENCY googletest NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install googletest, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.h; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.h; ). set(SOURCE_FILES; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.cpp; ${SOFATESTINGSRC_ROOT}/BaseTest.cpp; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.cpp; ${SOFATESTINGSRC_ROOT}/NumericTest.cpp; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.cpp; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Def",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:3733,Testability,test,tests,3733,"est, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.h; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.h; ). set(SOURCE_FILES; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.cpp; ${SOFATESTINGSRC_ROOT}/BaseTest.cpp; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.cpp; ${SOFATESTINGSRC_ROOT}/NumericTest.cpp; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.cpp; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType Sofa.Core Sofa.Simulation.Graph Sofa.SimpleApi GTest::gtest SofaGTestMain ); target_compile_options(${PROJECT_NAME} PUBLIC ""-DGTEST_LINKED_AS_SHARED_LIBRARY=1""). set(SOFA_TESTING_RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TESTING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TESTING_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:3833,Testability,test,tests,3833,"est, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.h; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.h; ). set(SOURCE_FILES; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.cpp; ${SOFATESTINGSRC_ROOT}/BaseTest.cpp; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.cpp; ${SOFATESTINGSRC_ROOT}/NumericTest.cpp; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.cpp; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType Sofa.Core Sofa.Simulation.Graph Sofa.SimpleApi GTest::gtest SofaGTestMain ); target_compile_options(${PROJECT_NAME} PUBLIC ""-DGTEST_LINKED_AS_SHARED_LIBRARY=1""). set(SOFA_TESTING_RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TESTING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TESTING_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt:3947,Testability,test,test,3947,"est, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # add custom googletest main; add_subdirectory(SofaGTestMain). set(SOFATESTINGSRC_ROOT ""src/sofa/testing""). set(HEADER_FILES; ${SOFATESTINGSRC_ROOT}/config.h.in; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.h; ${SOFATESTINGSRC_ROOT}/BaseTest.h; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.h; ${SOFATESTINGSRC_ROOT}/NumericTest.h; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.h; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.h; ). set(SOURCE_FILES; ${SOFATESTINGSRC_ROOT}/initSofa.Testing.cpp; ${SOFATESTINGSRC_ROOT}/BaseTest.cpp; ${SOFATESTINGSRC_ROOT}/LinearCongruentialRandomGenerator.cpp; ${SOFATESTINGSRC_ROOT}/NumericTest.cpp; ${SOFATESTINGSRC_ROOT}/TestMessageHandler.cpp; ${SOFATESTINGSRC_ROOT}/BaseSimulationTest.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType Sofa.Core Sofa.Simulation.Graph Sofa.SimpleApi GTest::gtest SofaGTestMain ); target_compile_options(${PROJECT_NAME} PUBLIC ""-DGTEST_LINKED_AS_SHARED_LIBRARY=1""). set(SOFA_TESTING_RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TESTING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TESTING_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Testing/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt:165,Modifiability,config,config,165,"cmake_minimum_required(VERSION 3.22); project(Sofa.Topology LANGUAGES CXX). set(SOFATOPOLOGYSRC_ROOT ""src/sofa/topology""). set(HEADER_FILES; ${SOFATOPOLOGYSRC_ROOT}/config.h.in; ${SOFATOPOLOGYSRC_ROOT}/init.h; ${SOFATOPOLOGYSRC_ROOT}/Element.h; ${SOFATOPOLOGYSRC_ROOT}/Topology.h; ${SOFATOPOLOGYSRC_ROOT}/Point.h; ${SOFATOPOLOGYSRC_ROOT}/Edge.h; ${SOFATOPOLOGYSRC_ROOT}/Triangle.h; ${SOFATOPOLOGYSRC_ROOT}/Quad.h; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.h; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.h; ). set(SOURCE_FILES; ${SOFATOPOLOGYSRC_ROOT}/init.cpp; ${SOFATOPOLOGYSRC_ROOT}/Topology.cpp; ${SOFATOPOLOGYSRC_ROOT}/Element.cpp; ${SOFATOPOLOGYSRC_ROOT}/Point.cpp; ${SOFATOPOLOGYSRC_ROOT}/Edge.cpp; ${SOFATOPOLOGYSRC_ROOT}/Triangle.cpp; ${SOFATOPOLOGYSRC_ROOT}/Quad.cpp; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.cpp; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type Sofa.Geometry). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TOPOLOGY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TOPOLOGY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Topology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt:1633,Testability,test,tests,1633,"cmake_minimum_required(VERSION 3.22); project(Sofa.Topology LANGUAGES CXX). set(SOFATOPOLOGYSRC_ROOT ""src/sofa/topology""). set(HEADER_FILES; ${SOFATOPOLOGYSRC_ROOT}/config.h.in; ${SOFATOPOLOGYSRC_ROOT}/init.h; ${SOFATOPOLOGYSRC_ROOT}/Element.h; ${SOFATOPOLOGYSRC_ROOT}/Topology.h; ${SOFATOPOLOGYSRC_ROOT}/Point.h; ${SOFATOPOLOGYSRC_ROOT}/Edge.h; ${SOFATOPOLOGYSRC_ROOT}/Triangle.h; ${SOFATOPOLOGYSRC_ROOT}/Quad.h; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.h; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.h; ). set(SOURCE_FILES; ${SOFATOPOLOGYSRC_ROOT}/init.cpp; ${SOFATOPOLOGYSRC_ROOT}/Topology.cpp; ${SOFATOPOLOGYSRC_ROOT}/Element.cpp; ${SOFATOPOLOGYSRC_ROOT}/Point.cpp; ${SOFATOPOLOGYSRC_ROOT}/Edge.cpp; ${SOFATOPOLOGYSRC_ROOT}/Triangle.cpp; ${SOFATOPOLOGYSRC_ROOT}/Quad.cpp; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.cpp; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type Sofa.Geometry). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TOPOLOGY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TOPOLOGY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Topology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt:1734,Testability,test,tests,1734,"cmake_minimum_required(VERSION 3.22); project(Sofa.Topology LANGUAGES CXX). set(SOFATOPOLOGYSRC_ROOT ""src/sofa/topology""). set(HEADER_FILES; ${SOFATOPOLOGYSRC_ROOT}/config.h.in; ${SOFATOPOLOGYSRC_ROOT}/init.h; ${SOFATOPOLOGYSRC_ROOT}/Element.h; ${SOFATOPOLOGYSRC_ROOT}/Topology.h; ${SOFATOPOLOGYSRC_ROOT}/Point.h; ${SOFATOPOLOGYSRC_ROOT}/Edge.h; ${SOFATOPOLOGYSRC_ROOT}/Triangle.h; ${SOFATOPOLOGYSRC_ROOT}/Quad.h; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.h; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.h; ). set(SOURCE_FILES; ${SOFATOPOLOGYSRC_ROOT}/init.cpp; ${SOFATOPOLOGYSRC_ROOT}/Topology.cpp; ${SOFATOPOLOGYSRC_ROOT}/Element.cpp; ${SOFATOPOLOGYSRC_ROOT}/Point.cpp; ${SOFATOPOLOGYSRC_ROOT}/Edge.cpp; ${SOFATOPOLOGYSRC_ROOT}/Triangle.cpp; ${SOFATOPOLOGYSRC_ROOT}/Quad.cpp; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.cpp; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type Sofa.Geometry). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TOPOLOGY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TOPOLOGY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Topology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt:1849,Testability,test,test,1849,"cmake_minimum_required(VERSION 3.22); project(Sofa.Topology LANGUAGES CXX). set(SOFATOPOLOGYSRC_ROOT ""src/sofa/topology""). set(HEADER_FILES; ${SOFATOPOLOGYSRC_ROOT}/config.h.in; ${SOFATOPOLOGYSRC_ROOT}/init.h; ${SOFATOPOLOGYSRC_ROOT}/Element.h; ${SOFATOPOLOGYSRC_ROOT}/Topology.h; ${SOFATOPOLOGYSRC_ROOT}/Point.h; ${SOFATOPOLOGYSRC_ROOT}/Edge.h; ${SOFATOPOLOGYSRC_ROOT}/Triangle.h; ${SOFATOPOLOGYSRC_ROOT}/Quad.h; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.h; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.h; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.h; ). set(SOURCE_FILES; ${SOFATOPOLOGYSRC_ROOT}/init.cpp; ${SOFATOPOLOGYSRC_ROOT}/Topology.cpp; ${SOFATOPOLOGYSRC_ROOT}/Element.cpp; ${SOFATOPOLOGYSRC_ROOT}/Point.cpp; ${SOFATOPOLOGYSRC_ROOT}/Edge.cpp; ${SOFATOPOLOGYSRC_ROOT}/Triangle.cpp; ${SOFATOPOLOGYSRC_ROOT}/Quad.cpp; ${SOFATOPOLOGYSRC_ROOT}/Tetrahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pentahedron.cpp; ${SOFATOPOLOGYSRC_ROOT}/Pyramid.cpp; ${SOFATOPOLOGYSRC_ROOT}/Hexahedron.cpp; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Type REQUIRED); sofa_find_package(Sofa.Geometry REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config Sofa.Type Sofa.Geometry). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TOPOLOGY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TOPOLOGY_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Topology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Topology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt:2430,Integrability,message,message,2430,"RC_ROOT}/vector_T.h; ${SOFATYPESRC_ROOT}/vector_T.inl; ${SOFATYPESRC_ROOT}/vector_algebra.h; ${SOFATYPESRC_ROOT}/vector_algorithm.h; ${SOFATYPESRC_ROOT}/vector_device.h; ). set(SOURCE_FILES; ${SOFATYPESRC_ROOT}/init.cpp; ${SOFATYPESRC_ROOT}/BoundingBox.cpp; ${SOFATYPESRC_ROOT}/DualQuat.cpp; ${SOFATYPESRC_ROOT}/Frame.cpp; ${SOFATYPESRC_ROOT}/Material.cpp; ${SOFATYPESRC_ROOT}/PrimitiveGroup.cpp; ${SOFATYPESRC_ROOT}/Quat.cpp; ${SOFATYPESRC_ROOT}/RGBAColor.cpp; ${SOFATYPESRC_ROOT}/SVector.cpp; ${SOFATYPESRC_ROOT}/SpatialVector.cpp; ${SOFATYPESRC_ROOT}/Transform.cpp; ${SOFATYPESRC_ROOT}/Vec.cpp; ${SOFATYPESRC_ROOT}/fixed_array.cpp; ${SOFATYPESRC_ROOT}/vector.cpp; ${SOFATYPESRC_ROOT}/vector_Integral.cpp; ${SOFATYPESRC_ROOT}/vector_Real.cpp; ${SOFATYPESRC_ROOT}/vector_String.cpp; ). sofa_find_package(Sofa.Config REQUIRED). ## Boost (1.54.0 or higher) is now mandatory.; set(BOOST_MIN_VERSION ""1.54.0""); set(Boost_NO_BOOST_CMAKE TRUE); sofa_find_package(Boost ${BOOST_MIN_VERSION} QUIET); if(NOT Boost_FOUND); if(WIN32); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.\n""; ""Note that Boost autodetection on Windows was removed.\n""; ""Please follow CMake documentation to find Boost on your system.\n""; ""Hint: set BOOST_ROOT to your Boost location.""; ); else(); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.""); endif(); endif(); sofa_find_package(Boost QUIET REQUIRED); sofa_find_package(Sofa.Compat QUIET BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config); target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost); if(Sofa.Compat_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Compat); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SO",MatchSource.DOCS,Sofa/framework/Type/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt:2695,Integrability,message,message,2695,"pp; ${SOFATYPESRC_ROOT}/Material.cpp; ${SOFATYPESRC_ROOT}/PrimitiveGroup.cpp; ${SOFATYPESRC_ROOT}/Quat.cpp; ${SOFATYPESRC_ROOT}/RGBAColor.cpp; ${SOFATYPESRC_ROOT}/SVector.cpp; ${SOFATYPESRC_ROOT}/SpatialVector.cpp; ${SOFATYPESRC_ROOT}/Transform.cpp; ${SOFATYPESRC_ROOT}/Vec.cpp; ${SOFATYPESRC_ROOT}/fixed_array.cpp; ${SOFATYPESRC_ROOT}/vector.cpp; ${SOFATYPESRC_ROOT}/vector_Integral.cpp; ${SOFATYPESRC_ROOT}/vector_Real.cpp; ${SOFATYPESRC_ROOT}/vector_String.cpp; ). sofa_find_package(Sofa.Config REQUIRED). ## Boost (1.54.0 or higher) is now mandatory.; set(BOOST_MIN_VERSION ""1.54.0""); set(Boost_NO_BOOST_CMAKE TRUE); sofa_find_package(Boost ${BOOST_MIN_VERSION} QUIET); if(NOT Boost_FOUND); if(WIN32); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.\n""; ""Note that Boost autodetection on Windows was removed.\n""; ""Please follow CMake documentation to find Boost on your system.\n""; ""Hint: set BOOST_ROOT to your Boost location.""; ); else(); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.""); endif(); endif(); sofa_find_package(Boost QUIET REQUIRED); sofa_find_package(Sofa.Compat QUIET BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config); target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost); if(Sofa.Compat_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Compat); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TYPE_BUILD_TESTS); add_subdi",MatchSource.DOCS,Sofa/framework/Type/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt:149,Modifiability,config,config,149,"cmake_minimum_required(VERSION 3.22); project(Sofa.Type LANGUAGES CXX). set(SOFATYPESRC_ROOT ""src/sofa/type""). set(HEADER_FILES; ${SOFATYPESRC_ROOT}/config.h.in; ${SOFATYPESRC_ROOT}/init.h; ${SOFATYPESRC_ROOT}/BoundingBox.h; ${SOFATYPESRC_ROOT}/DualQuat.h; ${SOFATYPESRC_ROOT}/DualQuat.inl; ${SOFATYPESRC_ROOT}/Frame.h; ${SOFATYPESRC_ROOT}/Mat.h; ${SOFATYPESRC_ROOT}/MatSym.h; ${SOFATYPESRC_ROOT}/Mat_solve_Cholesky.h; ${SOFATYPESRC_ROOT}/Mat_solve_LCP.h; ${SOFATYPESRC_ROOT}/Mat_solve_LU.h; ${SOFATYPESRC_ROOT}/Mat_solve_SVD.h; ${SOFATYPESRC_ROOT}/Material.h; ${SOFATYPESRC_ROOT}/PrimitiveGroup.h; ${SOFATYPESRC_ROOT}/Quat.h; ${SOFATYPESRC_ROOT}/Quat.inl; ${SOFATYPESRC_ROOT}/RGBAColor.h; ${SOFATYPESRC_ROOT}/RGBAColor_fwd.h; ${SOFATYPESRC_ROOT}/Ray.h; ${SOFATYPESRC_ROOT}/SVector.h; ${SOFATYPESRC_ROOT}/SpatialVector.h; ${SOFATYPESRC_ROOT}/SpatialVector.inl; ${SOFATYPESRC_ROOT}/Transform.h; ${SOFATYPESRC_ROOT}/Transform.inl; ${SOFATYPESRC_ROOT}/Vec.h; ${SOFATYPESRC_ROOT}/fixed_array.h; ${SOFATYPESRC_ROOT}/fixed_array_algorithms.h; ${SOFATYPESRC_ROOT}/fwd.h; ${SOFATYPESRC_ROOT}/isRigidType.h; ${SOFATYPESRC_ROOT}/stable_vector.h; ${SOFATYPESRC_ROOT}/trait/Rebind.h; ${SOFATYPESRC_ROOT}/trait/is_container.h; ${SOFATYPESRC_ROOT}/trait/is_vector.h; ${SOFATYPESRC_ROOT}/vector.h; ${SOFATYPESRC_ROOT}/vector_Integral.h; ${SOFATYPESRC_ROOT}/vector_Real.h; ${SOFATYPESRC_ROOT}/vector_String.h; ${SOFATYPESRC_ROOT}/vector_T.h; ${SOFATYPESRC_ROOT}/vector_T.inl; ${SOFATYPESRC_ROOT}/vector_algebra.h; ${SOFATYPESRC_ROOT}/vector_algorithm.h; ${SOFATYPESRC_ROOT}/vector_device.h; ). set(SOURCE_FILES; ${SOFATYPESRC_ROOT}/init.cpp; ${SOFATYPESRC_ROOT}/BoundingBox.cpp; ${SOFATYPESRC_ROOT}/DualQuat.cpp; ${SOFATYPESRC_ROOT}/Frame.cpp; ${SOFATYPESRC_ROOT}/Material.cpp; ${SOFATYPESRC_ROOT}/PrimitiveGroup.cpp; ${SOFATYPESRC_ROOT}/Quat.cpp; ${SOFATYPESRC_ROOT}/RGBAColor.cpp; ${SOFATYPESRC_ROOT}/SVector.cpp; ${SOFATYPESRC_ROOT}/SpatialVector.cpp; ${SOFATYPESRC_ROOT}/Transform.cpp; ${SOFATYPESRC_ROOT}/Vec.cpp",MatchSource.DOCS,Sofa/framework/Type/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt:3525,Testability,test,tests,3525,"aterial.cpp; ${SOFATYPESRC_ROOT}/PrimitiveGroup.cpp; ${SOFATYPESRC_ROOT}/Quat.cpp; ${SOFATYPESRC_ROOT}/RGBAColor.cpp; ${SOFATYPESRC_ROOT}/SVector.cpp; ${SOFATYPESRC_ROOT}/SpatialVector.cpp; ${SOFATYPESRC_ROOT}/Transform.cpp; ${SOFATYPESRC_ROOT}/Vec.cpp; ${SOFATYPESRC_ROOT}/fixed_array.cpp; ${SOFATYPESRC_ROOT}/vector.cpp; ${SOFATYPESRC_ROOT}/vector_Integral.cpp; ${SOFATYPESRC_ROOT}/vector_Real.cpp; ${SOFATYPESRC_ROOT}/vector_String.cpp; ). sofa_find_package(Sofa.Config REQUIRED). ## Boost (1.54.0 or higher) is now mandatory.; set(BOOST_MIN_VERSION ""1.54.0""); set(Boost_NO_BOOST_CMAKE TRUE); sofa_find_package(Boost ${BOOST_MIN_VERSION} QUIET); if(NOT Boost_FOUND); if(WIN32); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.\n""; ""Note that Boost autodetection on Windows was removed.\n""; ""Please follow CMake documentation to find Boost on your system.\n""; ""Hint: set BOOST_ROOT to your Boost location.""; ); else(); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.""); endif(); endif(); sofa_find_package(Boost QUIET REQUIRED); sofa_find_package(Sofa.Compat QUIET BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config); target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost); if(Sofa.Compat_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Compat); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TYPE_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Type/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt:3622,Testability,test,tests,3622,"aterial.cpp; ${SOFATYPESRC_ROOT}/PrimitiveGroup.cpp; ${SOFATYPESRC_ROOT}/Quat.cpp; ${SOFATYPESRC_ROOT}/RGBAColor.cpp; ${SOFATYPESRC_ROOT}/SVector.cpp; ${SOFATYPESRC_ROOT}/SpatialVector.cpp; ${SOFATYPESRC_ROOT}/Transform.cpp; ${SOFATYPESRC_ROOT}/Vec.cpp; ${SOFATYPESRC_ROOT}/fixed_array.cpp; ${SOFATYPESRC_ROOT}/vector.cpp; ${SOFATYPESRC_ROOT}/vector_Integral.cpp; ${SOFATYPESRC_ROOT}/vector_Real.cpp; ${SOFATYPESRC_ROOT}/vector_String.cpp; ). sofa_find_package(Sofa.Config REQUIRED). ## Boost (1.54.0 or higher) is now mandatory.; set(BOOST_MIN_VERSION ""1.54.0""); set(Boost_NO_BOOST_CMAKE TRUE); sofa_find_package(Boost ${BOOST_MIN_VERSION} QUIET); if(NOT Boost_FOUND); if(WIN32); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.\n""; ""Note that Boost autodetection on Windows was removed.\n""; ""Please follow CMake documentation to find Boost on your system.\n""; ""Hint: set BOOST_ROOT to your Boost location.""; ); else(); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.""); endif(); endif(); sofa_find_package(Boost QUIET REQUIRED); sofa_find_package(Sofa.Compat QUIET BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config); target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost); if(Sofa.Compat_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Compat); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TYPE_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Type/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt:3733,Testability,test,test,3733,"aterial.cpp; ${SOFATYPESRC_ROOT}/PrimitiveGroup.cpp; ${SOFATYPESRC_ROOT}/Quat.cpp; ${SOFATYPESRC_ROOT}/RGBAColor.cpp; ${SOFATYPESRC_ROOT}/SVector.cpp; ${SOFATYPESRC_ROOT}/SpatialVector.cpp; ${SOFATYPESRC_ROOT}/Transform.cpp; ${SOFATYPESRC_ROOT}/Vec.cpp; ${SOFATYPESRC_ROOT}/fixed_array.cpp; ${SOFATYPESRC_ROOT}/vector.cpp; ${SOFATYPESRC_ROOT}/vector_Integral.cpp; ${SOFATYPESRC_ROOT}/vector_Real.cpp; ${SOFATYPESRC_ROOT}/vector_String.cpp; ). sofa_find_package(Sofa.Config REQUIRED). ## Boost (1.54.0 or higher) is now mandatory.; set(BOOST_MIN_VERSION ""1.54.0""); set(Boost_NO_BOOST_CMAKE TRUE); sofa_find_package(Boost ${BOOST_MIN_VERSION} QUIET); if(NOT Boost_FOUND); if(WIN32); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.\n""; ""Note that Boost autodetection on Windows was removed.\n""; ""Please follow CMake documentation to find Boost on your system.\n""; ""Hint: set BOOST_ROOT to your Boost location.""; ); else(); message(FATAL_ERROR ""Boost (${BOOST_MIN_VERSION} or higher) is mandatory.""); endif(); endif(); sofa_find_package(Boost QUIET REQUIRED); sofa_find_package(Sofa.Compat QUIET BOTH_SCOPES). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Config); target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost); if(Sofa.Compat_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Compat); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_TYPE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_TYPE_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Type/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Type/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/simutest/CMakeLists.txt:81,Integrability,depend,dependencies,81,"cmake_minimum_required(VERSION 3.22). project(Sofa.Core_simutest). # Do not find dependencies explicitely, let CMake decide the appropriate time to do it; #sofa_find_package(SofaBase REQUIRED). set(SOURCE_FILES; objectmodel/Base_test.cpp; objectmodel/BaseContext_test.cpp; objectmodel/BaseLink_simutest.cpp; objectmodel/PathResolver_simutest.cpp; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Component.SceneUtility). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ",MatchSource.DOCS,Sofa/framework/Core/simutest/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/simutest/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/test/CMakeLists.txt:177,Performance,load,loader,177,cmake_minimum_required(VERSION 3.22). project(Sofa.Core_test). set(SOURCE_FILES; accessor/ReadAccessor.cpp; accessor/WriteAccessor.cpp; collision/NarrowPhaseDetection_test.cpp; loader/MeshLoader_test.cpp; objectmodel/AspectPool_test.cpp; objectmodel/BaseClass_test.cpp; objectmodel/BaseData_test.cpp; objectmodel/BaseLink_test.cpp; objectmodel/BaseObjectDescription_test.cpp; objectmodel/Data_test.cpp; objectmodel/DataLink_test.cpp; objectmodel/DataFileName_test.cpp; objectmodel/DataFileNameVector_test.cpp; objectmodel/DataCallback_test.cpp; objectmodel/DDGNode_test.cpp; objectmodel/MultiLink_test.cpp; objectmodel/RemovedData_test.cpp; objectmodel/SingleLink_test.cpp; objectmodel/VectorData_test.cpp; topology/BaseMeshTopology_test.cpp; DataEngine_test.cpp; Engine_test.cpp; MatrixAccumulator_test.cpp; ObjectFactory_test.cpp; PathResolver_test.cpp; TestEngine.cpp; TrackedData_test.cpp; VecId_test.cpp; visual/DisplayFlags_test.cpp; ). set(HEADER_FILES; objectmodel/BaseLink_test.h; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Core). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ,MatchSource.DOCS,Sofa/framework/Core/test/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/test/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/test/CMakeLists.txt:81,Security,access,accessor,81,cmake_minimum_required(VERSION 3.22). project(Sofa.Core_test). set(SOURCE_FILES; accessor/ReadAccessor.cpp; accessor/WriteAccessor.cpp; collision/NarrowPhaseDetection_test.cpp; loader/MeshLoader_test.cpp; objectmodel/AspectPool_test.cpp; objectmodel/BaseClass_test.cpp; objectmodel/BaseData_test.cpp; objectmodel/BaseLink_test.cpp; objectmodel/BaseObjectDescription_test.cpp; objectmodel/Data_test.cpp; objectmodel/DataLink_test.cpp; objectmodel/DataFileName_test.cpp; objectmodel/DataFileNameVector_test.cpp; objectmodel/DataCallback_test.cpp; objectmodel/DDGNode_test.cpp; objectmodel/MultiLink_test.cpp; objectmodel/RemovedData_test.cpp; objectmodel/SingleLink_test.cpp; objectmodel/VectorData_test.cpp; topology/BaseMeshTopology_test.cpp; DataEngine_test.cpp; Engine_test.cpp; MatrixAccumulator_test.cpp; ObjectFactory_test.cpp; PathResolver_test.cpp; TestEngine.cpp; TrackedData_test.cpp; VecId_test.cpp; visual/DisplayFlags_test.cpp; ). set(HEADER_FILES; objectmodel/BaseLink_test.h; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Core). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ,MatchSource.DOCS,Sofa/framework/Core/test/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/test/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/test/CMakeLists.txt:108,Security,access,accessor,108,cmake_minimum_required(VERSION 3.22). project(Sofa.Core_test). set(SOURCE_FILES; accessor/ReadAccessor.cpp; accessor/WriteAccessor.cpp; collision/NarrowPhaseDetection_test.cpp; loader/MeshLoader_test.cpp; objectmodel/AspectPool_test.cpp; objectmodel/BaseClass_test.cpp; objectmodel/BaseData_test.cpp; objectmodel/BaseLink_test.cpp; objectmodel/BaseObjectDescription_test.cpp; objectmodel/Data_test.cpp; objectmodel/DataLink_test.cpp; objectmodel/DataFileName_test.cpp; objectmodel/DataFileNameVector_test.cpp; objectmodel/DataCallback_test.cpp; objectmodel/DDGNode_test.cpp; objectmodel/MultiLink_test.cpp; objectmodel/RemovedData_test.cpp; objectmodel/SingleLink_test.cpp; objectmodel/VectorData_test.cpp; topology/BaseMeshTopology_test.cpp; DataEngine_test.cpp; Engine_test.cpp; MatrixAccumulator_test.cpp; ObjectFactory_test.cpp; PathResolver_test.cpp; TestEngine.cpp; TrackedData_test.cpp; VecId_test.cpp; visual/DisplayFlags_test.cpp; ). set(HEADER_FILES; objectmodel/BaseLink_test.h; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Core). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ,MatchSource.DOCS,Sofa/framework/Core/test/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Core/test/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/simutest/CMakeLists.txt:83,Integrability,depend,dependencies,83,"cmake_minimum_required(VERSION 3.22). project(Sofa.Helper_simutest). # Do not find dependencies explicitely, let CMake decide the appropriate time to do it; #sofa_find_package(SofaBase REQUIRED). set(SOURCE_FILES; AdvancedTimer_test.cpp; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Helper). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ",MatchSource.DOCS,Sofa/framework/Helper/simutest/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/simutest/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/test/CMakeLists.txt:240,Security,access,accessor,240,"cmake_minimum_required(VERSION 3.22). project(Sofa.Helper_test). set(SOURCE_FILES; DiffLib_test.cpp; Factory_test.cpp; KdTree_test.cpp; NameDecoder_test.cpp; OptionsGroup_test.cpp; StringUtils_test.cpp; TagFactory_test.cpp; Utils_test.cpp; accessor/ReadAccessor.cpp; accessor/WriteAccessor.cpp; io/MeshOBJ_test.cpp; io/STBImage_test.cpp; io/XspLoader_test.cpp; logging/logging_test.cpp; narrow_cast_test.cpp; system/FileMonitor_test.cpp; system/FileRepository_test.cpp; system/FileSystem_test.cpp; system/PluginManager_test.cpp; system/thread/CircularQueue_test.cpp; ). add_subdirectory(system/TestPluginA); add_subdirectory(system/TestPluginB). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Helper). add_definitions(""-DSTBIMAGETEST_RESOURCES_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/io/images\""""). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ",MatchSource.DOCS,Sofa/framework/Helper/test/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/test/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/test/CMakeLists.txt:267,Security,access,accessor,267,"cmake_minimum_required(VERSION 3.22). project(Sofa.Helper_test). set(SOURCE_FILES; DiffLib_test.cpp; Factory_test.cpp; KdTree_test.cpp; NameDecoder_test.cpp; OptionsGroup_test.cpp; StringUtils_test.cpp; TagFactory_test.cpp; Utils_test.cpp; accessor/ReadAccessor.cpp; accessor/WriteAccessor.cpp; io/MeshOBJ_test.cpp; io/STBImage_test.cpp; io/XspLoader_test.cpp; logging/logging_test.cpp; narrow_cast_test.cpp; system/FileMonitor_test.cpp; system/FileRepository_test.cpp; system/FileSystem_test.cpp; system/PluginManager_test.cpp; system/thread/CircularQueue_test.cpp; ). add_subdirectory(system/TestPluginA); add_subdirectory(system/TestPluginB). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Helper). add_definitions(""-DSTBIMAGETEST_RESOURCES_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/io/images\""""). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ",MatchSource.DOCS,Sofa/framework/Helper/test/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/test/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/test/CMakeLists.txt:361,Testability,log,logging,361,"cmake_minimum_required(VERSION 3.22). project(Sofa.Helper_test). set(SOURCE_FILES; DiffLib_test.cpp; Factory_test.cpp; KdTree_test.cpp; NameDecoder_test.cpp; OptionsGroup_test.cpp; StringUtils_test.cpp; TagFactory_test.cpp; Utils_test.cpp; accessor/ReadAccessor.cpp; accessor/WriteAccessor.cpp; io/MeshOBJ_test.cpp; io/STBImage_test.cpp; io/XspLoader_test.cpp; logging/logging_test.cpp; narrow_cast_test.cpp; system/FileMonitor_test.cpp; system/FileRepository_test.cpp; system/FileSystem_test.cpp; system/PluginManager_test.cpp; system/thread/CircularQueue_test.cpp; ). add_subdirectory(system/TestPluginA); add_subdirectory(system/TestPluginB). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Helper). add_definitions(""-DSTBIMAGETEST_RESOURCES_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/io/images\""""). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); ",MatchSource.DOCS,Sofa/framework/Helper/test/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Helper/test/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt:195,Modifiability,config,config,195,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation.Common LANGUAGES CXX). set(SOFA_SIMULATION_COMMON_SRC ""src/sofa/simulation/common""). set(HEADER_FILES; ${SOFA_SIMULATION_COMMON_SRC}/config.h.in; ${SOFA_SIMULATION_COMMON_SRC}/init.h; ${SOFA_SIMULATION_COMMON_SRC}/initSofaSimulationCommon.h; ${SOFA_SIMULATION_COMMON_SRC}/FindByTypeVisitor.h; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderPHP.h; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderXML.h; ${SOFA_SIMULATION_COMMON_SRC}/TransformationVisitor.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/AttributeElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseMultiMappingElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/DataElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/Element.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/Element.inl; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.h; ). set(SOURCE_FILES; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderPHP.cpp; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderXML.cpp; ${SOFA_SIMULATION_COMMON_SRC}/TransformationVisitor.cpp; ${SOFA_SIMULATION_COMMON_SRC}/init.cpp; ${SOFA_SIMULATION_COMMON_SRC}/initSofaSimulationCommon.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/AttributeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseMultiMappingElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/DataElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.cpp; ). sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED). if(UNIX AND NOT APPLE); sofa_install_libraries(PATHS ${TinyXML2_LIBRARY}); else(); sofa_install_libraries(TARGETS tinyxml2::tinyxml2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.",MatchSource.DOCS,Sofa/framework/Simulation/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt:2489,Testability,test,tests,2489,"MMON_SRC}/xml/Element.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/Element.inl; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.h; ). set(SOURCE_FILES; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderPHP.cpp; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderXML.cpp; ${SOFA_SIMULATION_COMMON_SRC}/TransformationVisitor.cpp; ${SOFA_SIMULATION_COMMON_SRC}/init.cpp; ${SOFA_SIMULATION_COMMON_SRC}/initSofaSimulationCommon.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/AttributeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseMultiMappingElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/DataElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.cpp; ). sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED). if(UNIX AND NOT APPLE); sofa_install_libraries(PATHS ${TinyXML2_LIBRARY}); else(); sofa_install_libraries(TARGETS tinyxml2::tinyxml2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2) # Private because not exported in API. set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_COMMON_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_COMMON_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt:2599,Testability,test,tests,2599,"MMON_SRC}/xml/Element.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/Element.inl; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.h; ). set(SOURCE_FILES; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderPHP.cpp; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderXML.cpp; ${SOFA_SIMULATION_COMMON_SRC}/TransformationVisitor.cpp; ${SOFA_SIMULATION_COMMON_SRC}/init.cpp; ${SOFA_SIMULATION_COMMON_SRC}/initSofaSimulationCommon.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/AttributeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseMultiMappingElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/DataElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.cpp; ). sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED). if(UNIX AND NOT APPLE); sofa_install_libraries(PATHS ${TinyXML2_LIBRARY}); else(); sofa_install_libraries(TARGETS tinyxml2::tinyxml2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2) # Private because not exported in API. set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_COMMON_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_COMMON_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt:2723,Testability,test,test,2723,"MMON_SRC}/xml/Element.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/Element.inl; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.h; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.h; ). set(SOURCE_FILES; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderPHP.cpp; ${SOFA_SIMULATION_COMMON_SRC}/SceneLoaderXML.cpp; ${SOFA_SIMULATION_COMMON_SRC}/TransformationVisitor.cpp; ${SOFA_SIMULATION_COMMON_SRC}/init.cpp; ${SOFA_SIMULATION_COMMON_SRC}/initSofaSimulationCommon.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/AttributeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/BaseMultiMappingElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/DataElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/NodeElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/ObjectElement.cpp; ${SOFA_SIMULATION_COMMON_SRC}/xml/XML.cpp; ). sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(TinyXML2 REQUIRED). if(UNIX AND NOT APPLE); sofa_install_libraries(PATHS ${TinyXML2_LIBRARY}); else(); sofa_install_libraries(TARGETS tinyxml2::tinyxml2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2) # Private because not exported in API. set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_COMMON_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_COMMON_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt:13185,Availability,avail,available,13185,"/mechanicalvisitor/MechanicalPropagateOnlyPositionVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalPropagateOnlyVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetConstraintVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetForceVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalSetPositionAndVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAllocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAvailVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVDotVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVFreeVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVInitVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVMultiOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVNormVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVReallocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVSizeVisitor.cpp; ). sofa_find_package(Sofa.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core). # is this a compiler/linker version specific problem?; if(CMAKE_SYSTEM_NAME STREQUAL Linux); # target_link_options is available from CMake 3.13; # target_link_options(${PROJECT_NAME} PUBLIC ""-pthread""); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread"" ); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt:136,Modifiability,config,config,136,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation.Core). set(SRC_ROOT ""src/sofa/simulation""). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/AnimateBeginEvent.h; ${SRC_ROOT}/AnimateEndEvent.h; ${SRC_ROOT}/AnimateVisitor.h; ${SRC_ROOT}/BaseMechanicalVisitor.h; ${SRC_ROOT}/BehaviorUpdatePositionVisitor.h; ${SRC_ROOT}/CactusStackStorage.h; ${SRC_ROOT}/CleanupVisitor.h; ${SRC_ROOT}/CollisionAnimationLoop.h; ${SRC_ROOT}/CollisionBeginEvent.h; ${SRC_ROOT}/CollisionEndEvent.h; ${SRC_ROOT}/CollisionVisitor.h; ${SRC_ROOT}/Colors.h; ${SRC_ROOT}/CpuTask.h; ${SRC_ROOT}/CpuTaskStatus.h; ${SRC_ROOT}/DeactivatedNodeVisitor.h; ${SRC_ROOT}/DefaultAnimationLoop.h; ${SRC_ROOT}/DefaultVisualManagerLoop.h; ${SRC_ROOT}/DeleteVisitor.h; ${SRC_ROOT}/ExportDotVisitor.h; ${SRC_ROOT}/ExportGnuplotVisitor.h; ${SRC_ROOT}/ExportVisualModelOBJVisitor.h; ${SRC_ROOT}/InitVisitor.h; ${SRC_ROOT}/IntegrateBeginEvent.h; ${SRC_ROOT}/IntegrateEndEvent.h; ${SRC_ROOT}/LocalStorage.h; ${SRC_ROOT}/MechanicalOperations.h; ${SRC_ROOT}/MechanicalVPrintVisitor.h; ${SRC_ROOT}/MechanicalVisitor.h; ${SRC_ROOT}/MutationListener.h; ${SRC_ROOT}/Node.h; ${SRC_ROOT}/Node.inl; ${SRC_ROOT}/ParallelForEach.h; ${SRC_ROOT}/ParallelSparseMatrixProduct.h; ${SRC_ROOT}/ParallelVisitorScheduler.h; ${SRC_ROOT}/PauseEvent.h; ${SRC_ROOT}/PipelineImpl.h; ${SRC_ROOT}/PositionEvent.h; ${SRC_ROOT}/PrintVisitor.h; ${SRC_ROOT}/PropagateEventVisitor.h; ${SRC_ROOT}/RequiredPlugin.h; ${SRC_ROOT}/ResetVisitor.h; ${SRC_ROOT}/SceneLoaderFactory.h; ${SRC_ROOT}/Simulation.h; ${SRC_ROOT}/SimulationLoop.h; ${SRC_ROOT}/SolveVisitor.h; ${SRC_ROOT}/StateChangeVisitor.h; ${SRC_ROOT}/TopologyChangeVisitor.h; ${SRC_ROOT}/UpdateBoundingBoxVisitor.h; ${SRC_ROOT}/UpdateContextVisitor.h; ${SRC_ROOT}/UpdateInternalDataVisitor.h; ${SRC_ROOT}/UpdateLinksVisitor.h; ${SRC_ROOT}/UpdateMappingEndEvent.h; ${SRC_ROOT}/UpdateMappingVisitor.h; ${SRC_ROOT}/VectorOperations.h; ${SRC_ROOT}/VelocityThresholdVisitor.h; ${SRC_ROOT}/Visit",MatchSource.DOCS,Sofa/framework/Simulation/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt:13697,Testability,test,tests,13697,"/mechanicalvisitor/MechanicalPropagateOnlyPositionVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalPropagateOnlyVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetConstraintVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetForceVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalSetPositionAndVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAllocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAvailVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVDotVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVFreeVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVInitVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVMultiOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVNormVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVReallocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVSizeVisitor.cpp; ). sofa_find_package(Sofa.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core). # is this a compiler/linker version specific problem?; if(CMAKE_SYSTEM_NAME STREQUAL Linux); # target_link_options is available from CMake 3.13; # target_link_options(${PROJECT_NAME} PUBLIC ""-pthread""); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread"" ); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt:13805,Testability,test,tests,13805,"/mechanicalvisitor/MechanicalPropagateOnlyPositionVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalPropagateOnlyVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetConstraintVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetForceVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalSetPositionAndVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAllocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAvailVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVDotVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVFreeVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVInitVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVMultiOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVNormVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVReallocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVSizeVisitor.cpp; ). sofa_find_package(Sofa.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core). # is this a compiler/linker version specific problem?; if(CMAKE_SYSTEM_NAME STREQUAL Linux); # target_link_options is available from CMake 3.13; # target_link_options(${PROJECT_NAME} PUBLIC ""-pthread""); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread"" ); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt:13927,Testability,test,test,13927,"/mechanicalvisitor/MechanicalPropagateOnlyPositionVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalPropagateOnlyVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetConstraintVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalResetForceVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalSetPositionAndVelocityVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAllocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVAvailVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVDotVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVFreeVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVInitVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVMultiOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVNormVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVOpVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVReallocVisitor.cpp; ${SRC_ROOT}/mechanicalvisitor/MechanicalVSizeVisitor.cpp; ). sofa_find_package(Sofa.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core). # is this a compiler/linker version specific problem?; if(CMAKE_SYSTEM_NAME STREQUAL Linux); # target_link_options is available from CMake 3.13; # target_link_options(${PROJECT_NAME} PUBLIC ""-pthread""); SET(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -pthread"" ); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_CORE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_CORE_BUILD_TESTS); add_subdirectory(test); add_subdirectory(simutest); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Core/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Core/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt:187,Modifiability,config,config,187,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation.Graph LANGUAGES CXX). set(SOFASIMULATIONGRAPH_SRC ""src/sofa/simulation/graph""). set(HEADER_FILES; ${SOFASIMULATIONGRAPH_SRC}/config.h.in; ${SOFASIMULATIONGRAPH_SRC}/init.h; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.h; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.h; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.h; ). set(SOURCE_FILES; ${SOFASIMULATIONGRAPH_SRC}/init.cpp; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_GRAPH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_GRAPH_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Graph/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt:1130,Testability,test,tests,1130,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation.Graph LANGUAGES CXX). set(SOFASIMULATIONGRAPH_SRC ""src/sofa/simulation/graph""). set(HEADER_FILES; ${SOFASIMULATIONGRAPH_SRC}/config.h.in; ${SOFASIMULATIONGRAPH_SRC}/init.h; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.h; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.h; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.h; ). set(SOURCE_FILES; ${SOFASIMULATIONGRAPH_SRC}/init.cpp; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_GRAPH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_GRAPH_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Graph/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt:1239,Testability,test,tests,1239,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation.Graph LANGUAGES CXX). set(SOFASIMULATIONGRAPH_SRC ""src/sofa/simulation/graph""). set(HEADER_FILES; ${SOFASIMULATIONGRAPH_SRC}/config.h.in; ${SOFASIMULATIONGRAPH_SRC}/init.h; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.h; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.h; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.h; ). set(SOURCE_FILES; ${SOFASIMULATIONGRAPH_SRC}/init.cpp; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_GRAPH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_GRAPH_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Graph/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt:1362,Testability,test,test,1362,"cmake_minimum_required(VERSION 3.22); project(Sofa.Simulation.Graph LANGUAGES CXX). set(SOFASIMULATIONGRAPH_SRC ""src/sofa/simulation/graph""). set(HEADER_FILES; ${SOFASIMULATIONGRAPH_SRC}/config.h.in; ${SOFASIMULATIONGRAPH_SRC}/init.h; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.h; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.h; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.h; ). set(SOURCE_FILES; ${SOFASIMULATIONGRAPH_SRC}/init.cpp; ${SOFASIMULATIONGRAPH_SRC}/initSofaSimulationGraph.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGNode.cpp; ${SOFASIMULATIONGRAPH_SRC}/DAGSimulation.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Sofa.Framework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_SIMULATION_GRAPH_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_SIMULATION_GRAPH_BUILD_TESTS); add_subdirectory(test); endif(); ",MatchSource.DOCS,Sofa/framework/Simulation/Graph/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Simulation/Graph/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/CMakeLists.txt:402,Deployability,configurat,configurations,402,cmake_minimum_required(VERSION 3.22); project(SofaGTestMain). ## Dependencies; sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(GTest REQUIRED). add_library(${PROJECT_NAME} SofaGTestMain.cpp); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} PUBLIC GTest::gtest). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; ). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Testing); ,MatchSource.DOCS,Sofa/framework/Testing/SofaGTestMain/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/CMakeLists.txt:402,Modifiability,config,configurations,402,cmake_minimum_required(VERSION 3.22); project(SofaGTestMain). ## Dependencies; sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(GTest REQUIRED). add_library(${PROJECT_NAME} SofaGTestMain.cpp); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} PUBLIC GTest::gtest). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; ). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Testing); ,MatchSource.DOCS,Sofa/framework/Testing/SofaGTestMain/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/readme.txt:132,Testability,test,test,132,"SofaGTestMain; *************. The SofaGTestMain library contains only a main function that initializes Sofa; and runs a Google Test test suite. (It replaces the gtest_main library provided; with Google Test, that provides a that contains a minimal main() function.); Each test executable is simply linked against it, unless it also needs to run; its own main() function.; ",MatchSource.DOCS,Sofa/framework/Testing/SofaGTestMain/readme.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/readme.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/readme.txt:272,Testability,test,test,272,"SofaGTestMain; *************. The SofaGTestMain library contains only a main function that initializes Sofa; and runs a Google Test test suite. (It replaces the gtest_main library provided; with Google Test, that provides a that contains a minimal main() function.); Each test executable is simply linked against it, unless it also needs to run; its own main() function.; ",MatchSource.DOCS,Sofa/framework/Testing/SofaGTestMain/readme.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/readme.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/readme.txt:291,Usability,simpl,simply,291,"SofaGTestMain; *************. The SofaGTestMain library contains only a main function that initializes Sofa; and runs a Google Test test suite. (It replaces the gtest_main library provided; with Google Test, that provides a that contains a minimal main() function.); Each test executable is simply linked against it, unless it also needs to run; its own main() function.; ",MatchSource.DOCS,Sofa/framework/Testing/SofaGTestMain/readme.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/Testing/SofaGTestMain/readme.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/CMakeLists.txt:516,Modifiability,config,config,516,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component LANGUAGES CXX). set(SOFAGLCOMPONENT_SOURCE_DIR ""src/sofa/gl/component""). set(SOFAGLCOMPONENT_DIRS Rendering2D Rendering3D Engine Shader); set(SOFAGLCOMPONENT_TARGETS); foreach(gl_dir ${SOFAGLCOMPONENT_DIRS}); sofa_add_subdirectory(module ${gl_dir} ${PROJECT_NAME}.${gl_dir} ON); if(TARGET ${PROJECT_NAME}.${gl_dir}); list(APPEND SOFAGLCOMPONENT_TARGETS ${PROJECT_NAME}.${gl_dir}); endif(); endforeach(). set(HEADER_FILES; ${SOFAGLCOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENT_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENT_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGLCOMPONENT_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/GL/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt:211,Modifiability,config,config,211,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Engine LANGUAGES CXX). set(SOFAGLCOMPONENTENGINE_SOURCE_DIR ""src/sofa/gl/component/engine""). set(HEADER_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.inl; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Engine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt:1033,Testability,test,tests,1033,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Engine LANGUAGES CXX). set(SOFAGLCOMPONENTENGINE_SOURCE_DIR ""src/sofa/gl/component/engine""). set(HEADER_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.inl; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Engine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt:1145,Testability,test,tests,1145,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Engine LANGUAGES CXX). set(SOFAGLCOMPONENTENGINE_SOURCE_DIR ""src/sofa/gl/component/engine""). set(HEADER_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.inl; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Engine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt:1289,Testability,test,tests,1289,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Engine LANGUAGES CXX). set(SOFAGLCOMPONENTENGINE_SOURCE_DIR ""src/sofa/gl/component/engine""). set(HEADER_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.h; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.inl; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTENGINE_SOURCE_DIR}/TextureInterpolation.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_ENGINE_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Engine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Engine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt:229,Modifiability,config,config,229,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Rendering2D LANGUAGES CXX). set(SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR ""src/sofa/gl/component/rendering2d""). set(HEADER_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.Component.Visual Sofa.Component.Setting). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering2D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt:1353,Testability,test,tests,1353,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Rendering2D LANGUAGES CXX). set(SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR ""src/sofa/gl/component/rendering2d""). set(HEADER_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.Component.Visual Sofa.Component.Setting). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering2D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt:1470,Testability,test,tests,1470,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Rendering2D LANGUAGES CXX). set(SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR ""src/sofa/gl/component/rendering2d""). set(HEADER_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.Component.Visual Sofa.Component.Setting). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering2D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt:1619,Testability,test,tests,1619,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Rendering2D LANGUAGES CXX). set(SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR ""src/sofa/gl/component/rendering2d""). set(HEADER_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.h; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglColorMap.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglLabel.cpp; ${SOFAGLCOMPONENTRENDRING2D_SOURCE_DIR}/OglViewport.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.Component.Visual Sofa.Component.Setting). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING2D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering2D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering2D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt:231,Modifiability,config,config,231,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Rendering3D LANGUAGES CXX). set(SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR ""src/sofa/gl/component/rendering3d""). set(HEADER_FILES; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.h; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.cpp; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED) # for VisualModelImpl; sofa_find_package(Sofa.GL.Component.Rendering2D REQUIRED) # for OglColoMap in DataDisplay. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual Sofa.GL.Component.Rendering2D Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-",MatchSource.DOCS,Sofa/GL/Component/Rendering3D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt:1982,Testability,test,tests,1982,"ERING3D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.h; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.cpp; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED) # for VisualModelImpl; sofa_find_package(Sofa.GL.Component.Rendering2D REQUIRED) # for OglColoMap in DataDisplay. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual Sofa.GL.Component.Rendering2D Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING3D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING3D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering3D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt:2099,Testability,test,tests,2099,"ERING3D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.h; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.cpp; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED) # for VisualModelImpl; sofa_find_package(Sofa.GL.Component.Rendering2D REQUIRED) # for OglColoMap in DataDisplay. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual Sofa.GL.Component.Rendering2D Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING3D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING3D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering3D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt:2248,Testability,test,tests,2248,"ERING3D_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.h; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.h; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/ClipPlane.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/DataDisplay.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/MergeVisualModels.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglCylinderModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/OglSceneFrame.cpp; 	${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/PointSplatModel.cpp; ${SOFAGLCOMPONENTRENDERING3D_SOURCE_DIR}/SlicedVolumetricModel.cpp; ). sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED) # for VisualModelImpl; sofa_find_package(Sofa.GL.Component.Rendering2D REQUIRED) # for OglColoMap in DataDisplay. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual Sofa.GL.Component.Rendering2D Sofa.GL). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_RENDERING3D_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_RENDERING3D_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Rendering3D/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt:215,Modifiability,config,config,215,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL.Component.Shader LANGUAGES CXX). set(SOFAGLCOMPONENTONSHADER_SOURCE_DIR ""src/sofa/gl/component/shader""). set(HEADER_FILES; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/config.h.in; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/init.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/CompositingVisualLoop.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/LightManager.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/Light.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OrderIndependentTransparencyManager.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglOITShader.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglAttribute.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglAttribute.inl; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShader.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderMacro.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderVisualModel.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShadowShader.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexture.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexturePointer.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglVariable.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglVariable.inl; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglRenderingSRGB.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/PostProcessManager.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerPass.h; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerSecondaryPass.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/CompositingVisualLoop.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/Light.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/LightManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OrderIndependentTransparencyManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglOITShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglAttribute.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderMacro.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderVisualModel.cpp; ${SOFAGLCOMPONENTONSHADER_S",MatchSource.DOCS,Sofa/GL/Component/Shader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt:3074,Testability,test,tests,3074,"nagerSecondaryPass.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/CompositingVisualLoop.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/Light.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/LightManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OrderIndependentTransparencyManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglOITShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglAttribute.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderMacro.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderVisualModel.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShadowShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexture.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexturePointer.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglVariable.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglRenderingSRGB.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/PostProcessManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerPass.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerSecondaryPass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED) # for OglModel. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.GL.Component.Rendering3D). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_SHADER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_SHADER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Shader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt:3186,Testability,test,tests,3186,"nagerSecondaryPass.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/CompositingVisualLoop.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/Light.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/LightManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OrderIndependentTransparencyManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglOITShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglAttribute.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderMacro.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderVisualModel.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShadowShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexture.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexturePointer.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglVariable.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglRenderingSRGB.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/PostProcessManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerPass.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerSecondaryPass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED) # for OglModel. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.GL.Component.Rendering3D). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_SHADER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_SHADER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Shader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt:3330,Testability,test,tests,3330,"nagerSecondaryPass.h; ). set(SOURCE_FILES; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/init.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/CompositingVisualLoop.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/Light.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/LightManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OrderIndependentTransparencyManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglOITShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglAttribute.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderMacro.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShaderVisualModel.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglShadowShader.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexture.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglTexturePointer.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglVariable.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/OglRenderingSRGB.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/PostProcessManager.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerPass.cpp; ${SOFAGLCOMPONENTONSHADER_SOURCE_DIR}/VisualManagerSecondaryPass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED) # for OglModel. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.GL Sofa.GL.Component.Rendering3D). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_GL_COMPONENT_SHADER_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_GL_COMPONENT_SHADER_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/GL/Component/Shader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/tests/CMakeLists.txt:111,Testability,test,testing,111,cmake_minimum_required(VERSION 3.22). project(Sofa.GL.Component.Rendering3D_test). ## MAC-OS crash when we are testing opengl feature.; if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin); set(SOURCE_FILES; ClipPlane_test.cpp; OglModel_test.cpp; ). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Component.Engine.Testing); target_link_libraries(${PROJECT_NAME} Sofa.GL.Component). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}). endif(); ,MatchSource.DOCS,Sofa/GL/Component/Rendering3D/tests/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Rendering3D/tests/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/tests/CMakeLists.txt:106,Testability,test,testing,106,cmake_minimum_required(VERSION 3.22). project(Sofa.GL.Component.Shader_test). ## MAC-OS crash when we are testing opengl feature.; if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin); set(SOURCE_FILES; Light_test.cpp; LightManager_test.cpp). add_executable(${PROJECT_NAME} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Testing Sofa.Component.Engine.Testing); target_link_libraries(${PROJECT_NAME} Sofa.GL.Component). add_test(NAME ${PROJECT_NAME} COMMAND ${PROJECT_NAME}); endif(); ,MatchSource.DOCS,Sofa/GL/Component/Shader/tests/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/Component/Shader/tests/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Batch/CMakeLists.txt:159,Modifiability,config,config,159,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Batch LANGUAGES CXX). set(SOFAGUIBATCH_ROOT src/sofa/gui/batch). set(HEADER_FILES; ${SOFAGUIBATCH_ROOT}/config.h.in; ${SOFAGUIBATCH_ROOT}/init.h; ${SOFAGUIBATCH_ROOT}/BatchGUI.h; ${SOFAGUIBATCH_ROOT}/ProgressBar.h; ${SOFAGUIBATCH_ROOT}/indicators/indicators.hpp; ). set(SOURCE_FILES; ${SOFAGUIBATCH_ROOT}/init.cpp; ${SOFAGUIBATCH_ROOT}/BatchGUI.cpp; ${SOFAGUIBATCH_ROOT}/ProgressBar.cpp; ). sofa_find_package(Sofa.GUI.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,Sofa/GUI/Batch/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Batch/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:168,Integrability,message,message,168,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Common LANGUAGES CXX). find_package(cxxopts 3.1 QUIET); if(NOT cxxopts_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching cxxopts...""). include(FetchContent); FetchContent_Declare(cxxopts; GIT_REPOSITORY https://github.com/jarro2783/cxxopts; GIT_TAG v3.1.1; ). FetchContent_GetProperties(cxxopts); if(NOT cxxopts_POPULATED); FetchContent_Populate(cxxopts). set(CXXOPTS_BUILD_EXAMPLES OFF CACHE INTERNAL """"); set(CXXOPTS_BUILD_TESTS OFF CACHE INTERNAL """"); set(CXXOPTS_ENABLE_INSTALL ON CACHE INTERNAL """"); message(""Sofa.GUI.Common: adding subdirectory ${cxxopts_SOURCE_DIR}""). add_subdirectory(${cxxopts_SOURCE_DIR} ${cxxopts_BINARY_DIR}); endif(); elseif (NOT cxxopts_FOUND); message(FATAL_ERROR ""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install libcxxopts-dev (version>=3.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFAGUICOMMON_ROOT src/sofa/gui/common). set(HEADER_FILES; ${SOFAGUICOMMON_ROOT}/config.h.in; ${SOFAGUICOMMON_ROOT}/init.h; ${SOFAGUICOMMON_ROOT}/BaseGUI.h; ${SOFAGUICOMMON_ROOT}/BaseViewer.h; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.h; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SO",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:654,Integrability,message,message,654,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Common LANGUAGES CXX). find_package(cxxopts 3.1 QUIET); if(NOT cxxopts_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching cxxopts...""). include(FetchContent); FetchContent_Declare(cxxopts; GIT_REPOSITORY https://github.com/jarro2783/cxxopts; GIT_TAG v3.1.1; ). FetchContent_GetProperties(cxxopts); if(NOT cxxopts_POPULATED); FetchContent_Populate(cxxopts). set(CXXOPTS_BUILD_EXAMPLES OFF CACHE INTERNAL """"); set(CXXOPTS_BUILD_TESTS OFF CACHE INTERNAL """"); set(CXXOPTS_ENABLE_INSTALL ON CACHE INTERNAL """"); message(""Sofa.GUI.Common: adding subdirectory ${cxxopts_SOURCE_DIR}""). add_subdirectory(${cxxopts_SOURCE_DIR} ${cxxopts_BINARY_DIR}); endif(); elseif (NOT cxxopts_FOUND); message(FATAL_ERROR ""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install libcxxopts-dev (version>=3.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFAGUICOMMON_ROOT src/sofa/gui/common). set(HEADER_FILES; ${SOFAGUICOMMON_ROOT}/config.h.in; ${SOFAGUICOMMON_ROOT}/init.h; ${SOFAGUICOMMON_ROOT}/BaseGUI.h; ${SOFAGUICOMMON_ROOT}/BaseViewer.h; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.h; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SO",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:825,Integrability,message,message,825,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Common LANGUAGES CXX). find_package(cxxopts 3.1 QUIET); if(NOT cxxopts_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching cxxopts...""). include(FetchContent); FetchContent_Declare(cxxopts; GIT_REPOSITORY https://github.com/jarro2783/cxxopts; GIT_TAG v3.1.1; ). FetchContent_GetProperties(cxxopts); if(NOT cxxopts_POPULATED); FetchContent_Populate(cxxopts). set(CXXOPTS_BUILD_EXAMPLES OFF CACHE INTERNAL """"); set(CXXOPTS_BUILD_TESTS OFF CACHE INTERNAL """"); set(CXXOPTS_ENABLE_INSTALL ON CACHE INTERNAL """"); message(""Sofa.GUI.Common: adding subdirectory ${cxxopts_SOURCE_DIR}""). add_subdirectory(${cxxopts_SOURCE_DIR} ${cxxopts_BINARY_DIR}); endif(); elseif (NOT cxxopts_FOUND); message(FATAL_ERROR ""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install libcxxopts-dev (version>=3.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFAGUICOMMON_ROOT src/sofa/gui/common). set(HEADER_FILES; ${SOFAGUICOMMON_ROOT}/config.h.in; ${SOFAGUICOMMON_ROOT}/init.h; ${SOFAGUICOMMON_ROOT}/BaseGUI.h; ${SOFAGUICOMMON_ROOT}/BaseViewer.h; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.h; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SO",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:2421,Integrability,message,message,2421,"FAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SOFAGUICOMMON_ROOT}/PickHandler.cpp; ${SOFAGUICOMMON_ROOT}/ViewerFactory.cpp; ${SOFAGUICOMMON_ROOT}/ArgumentParser.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); sofa_find_package(Sofa.GL QUIET) # ColourPickingVisitor. if(Sofa.GL_FOUND); message(STATUS ""-- ${PROJECT_NAME}: Sofa.GL dependent features enabled.""); else(); message(WARNING ""-- ${PROJECT_NAME}: Sofa.GL dependent features disabled.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component); target_link_libraries(${PROJECT_NAME} PUBLIC cxxopts::cxxopts). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:2465,Integrability,depend,dependent,2465,"FAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SOFAGUICOMMON_ROOT}/PickHandler.cpp; ${SOFAGUICOMMON_ROOT}/ViewerFactory.cpp; ${SOFAGUICOMMON_ROOT}/ArgumentParser.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); sofa_find_package(Sofa.GL QUIET) # ColourPickingVisitor. if(Sofa.GL_FOUND); message(STATUS ""-- ${PROJECT_NAME}: Sofa.GL dependent features enabled.""); else(); message(WARNING ""-- ${PROJECT_NAME}: Sofa.GL dependent features disabled.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component); target_link_libraries(${PROJECT_NAME} PUBLIC cxxopts::cxxopts). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:2504,Integrability,message,message,2504,"FAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SOFAGUICOMMON_ROOT}/PickHandler.cpp; ${SOFAGUICOMMON_ROOT}/ViewerFactory.cpp; ${SOFAGUICOMMON_ROOT}/ArgumentParser.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); sofa_find_package(Sofa.GL QUIET) # ColourPickingVisitor. if(Sofa.GL_FOUND); message(STATUS ""-- ${PROJECT_NAME}: Sofa.GL dependent features enabled.""); else(); message(WARNING ""-- ${PROJECT_NAME}: Sofa.GL dependent features disabled.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component); target_link_libraries(${PROJECT_NAME} PUBLIC cxxopts::cxxopts). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:2549,Integrability,depend,dependent,2549,"FAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SOFAGUICOMMON_ROOT}/PickHandler.cpp; ${SOFAGUICOMMON_ROOT}/ViewerFactory.cpp; ${SOFAGUICOMMON_ROOT}/ArgumentParser.cpp; ). sofa_find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); sofa_find_package(Sofa.GL QUIET) # ColourPickingVisitor. if(Sofa.GL_FOUND); message(STATUS ""-- ${PROJECT_NAME}: Sofa.GL dependent features enabled.""); else(); message(WARNING ""-- ${PROJECT_NAME}: Sofa.GL dependent features disabled.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component); target_link_libraries(${PROJECT_NAME} PUBLIC cxxopts::cxxopts). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt:1155,Modifiability,config,config,1155,"FA_ALLOW_FETCH_DEPENDENCIES); message(""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching cxxopts...""). include(FetchContent); FetchContent_Declare(cxxopts; GIT_REPOSITORY https://github.com/jarro2783/cxxopts; GIT_TAG v3.1.1; ). FetchContent_GetProperties(cxxopts); if(NOT cxxopts_POPULATED); FetchContent_Populate(cxxopts). set(CXXOPTS_BUILD_EXAMPLES OFF CACHE INTERNAL """"); set(CXXOPTS_BUILD_TESTS OFF CACHE INTERNAL """"); set(CXXOPTS_ENABLE_INSTALL ON CACHE INTERNAL """"); message(""Sofa.GUI.Common: adding subdirectory ${cxxopts_SOURCE_DIR}""). add_subdirectory(${cxxopts_SOURCE_DIR} ${cxxopts_BINARY_DIR}); endif(); elseif (NOT cxxopts_FOUND); message(FATAL_ERROR ""Sofa.GUI.Common: DEPENDENCY cxxopts NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install libcxxopts-dev (version>=3.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFAGUICOMMON_ROOT src/sofa/gui/common). set(HEADER_FILES; ${SOFAGUICOMMON_ROOT}/config.h.in; ${SOFAGUICOMMON_ROOT}/init.h; ${SOFAGUICOMMON_ROOT}/BaseGUI.h; ${SOFAGUICOMMON_ROOT}/BaseViewer.h; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.h; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.h; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.h; ${SOFAGUICOMMON_ROOT}/GUIManager.h; ${SOFAGUICOMMON_ROOT}/MouseOperations.h; ${SOFAGUICOMMON_ROOT}/OperationFactory.h; ${SOFAGUICOMMON_ROOT}/PickHandler.h; ${SOFAGUICOMMON_ROOT}/ViewerFactory.h; ${SOFAGUICOMMON_ROOT}/ArgumentParser.h; ). set(SOURCE_FILES; ${SOFAGUICOMMON_ROOT}/init.cpp; ${SOFAGUICOMMON_ROOT}/BaseGUI.cpp; ${SOFAGUICOMMON_ROOT}/BaseViewer.cpp; ${SOFAGUICOMMON_ROOT}/ColourPickingVisitor.cpp; ${SOFAGUICOMMON_ROOT}/FilesRecentlyOpenedManager.cpp; ${SOFAGUICOMMON_ROOT}/GuiDataRepository.cpp; ${SOFAGUICOMMON_ROOT}/GUIManager.cpp; ${SOFAGUICOMMON_ROOT}/MouseOperations.cpp; ${SOFAGUICOMMON_ROOT}/PickHandler.cpp; ${SOFAGUICOMMON_ROOT}/ViewerFactory.cpp; ${SOFAGUICOMMON_ROOT}/ArgumentParser.cpp; ). sofa_find_packag",MatchSource.DOCS,Sofa/GUI/Common/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:8279,Deployability,install,installation,8279,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:1080,Energy Efficiency,charge,charge,1080," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:4383,Energy Efficiency,charge,charge,4383,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:5086,Energy Efficiency,charge,charge,5086,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:7411,Energy Efficiency,charge,charge,7411,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:3911,Integrability,depend,depends,3911,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:8201,Integrability,interface,interface,8201,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:12233,Integrability,interface,interfaces,12233,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:6315,Modifiability,extend,extend,6315,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:7456,Performance,perform,performing,7456,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:2490,Safety,avoid,avoid,2490,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:15379,Safety,safe,safest,15379,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. {description}; Copyright (C) {year} {fullname}. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this; when it st",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:2435,Security,threat,threatened,2435," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:8699,Security,access,access,8699," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:8765,Security,access,access,8765," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:11573,Security,integrity,integrity,11573,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:2664,Usability,clear,clear,2664,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:12039,Usability,clear,clear,12039,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt:13626,Usability,guid,guided,13626,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,Sofa/GUI/Common/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Common/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:187,Modifiability,config,config,187,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:578,Performance,perform,performer,578,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:649,Performance,perform,performer,649,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:713,Performance,perform,performer,713,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:779,Performance,perform,performer,779,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:847,Performance,perform,performer,847,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:917,Performance,perform,performer,917,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:987,Performance,perform,performer,987,cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Component LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SO,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1059,Performance,perform,performer,1059,ent LANGUAGES CXX). set(SOFAGUICOMPONENT_SOURCE_DIR src/sofa/gui/component). set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOUR,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1133,Performance,perform,performer,1133,. set(HEADER_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/config.h.in; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecord,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1209,Performance,perform,performer,1209,GUICOMPONENT_SOURCE_DIR}/init.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyBut,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1274,Performance,perform,performer,1274,dFrameButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleBu,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1341,Performance,perform,performer,1341,eraButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButt,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1410,Performance,perform,performer,1410,etting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedC,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1475,Performance,perform,performer,1475,nSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/A,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1535,Performance,perform,performer,1535,uttonSetting.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/perfo,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1597,Performance,perform,performer,1597,dedCameraPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR},MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1666,Performance,perform,performer,1666,odyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURC,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1737,Performance,perform,performer,1737,former.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_D,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1806,Performance,perform,performer,1806,erformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/BaseAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURC,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1871,Performance,perform,performer,1871,dyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOU,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:1938,Performance,perform,performer,1938,ouseInteraction.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DI,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2387,Performance,perform,performer,2387,ICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMech,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2460,Performance,perform,performer,2460,ONENT_SOURCE_DIR}/performer/MouseInteractor.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.P,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2526,Performance,perform,performer,2526,RCE_DIR}/performer/MouseInteractor.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagr,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2598,Performance,perform,performer,2598,former/RemovePrimitivePerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometr,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2674,Performance,perform,performer,2674,rmer/RemovePrimitivePerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper ,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2741,Performance,perform,performer,2741,former/StartNavigationPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED);,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2812,Performance,perform,performer,2812,former/SuturePointPerformer.h; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2879,Performance,perform,performer,2879,former/SuturePointPerformer.inl; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED). ,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:2941,Performance,perform,performer,2941,rformer/TopologicalChangeManager.h; ). set(SOURCE_FILES; ${SOFAGUICOMPONENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}),MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:3012,Performance,perform,performer,3012,NENT_SOURCE_DIR}/init.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddFrameButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); t,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:3083,Performance,perform,performer,3083,tonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AddRecordedCameraButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); ,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt:3150,Performance,perform,performer,3150,nSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/AttachBodyButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/FixPickedParticleButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/ConstraintAttachButtonSetting.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AddRecordedCameraPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/AttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ComponentMouseInteraction.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/ConstraintAttachBodyPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/FixParticlePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InciseAlongPathPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/InteractionPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/MouseInteractor.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/RemovePrimitivePerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/StartNavigationPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/SuturePointPerformer.cpp; ${SOFAGUICOMPONENT_SOURCE_DIR}/performer/TopologicalChangeManager.cpp. ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual); ,MatchSource.DOCS,Sofa/GUI/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:962,Deployability,install,install,962,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:1376,Deployability,install,install,1376,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:1499,Deployability,install,installed,1499,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:1531,Deployability,install,install,1531,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:1570,Deployability,install,installed,1570,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:240,Integrability,message,message,240,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:321,Integrability,message,message,321,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:454,Modifiability,config,config,454,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt:1894,Modifiability,plugin,plugins,1894,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.HeadlessRecorder). find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED). # FFMPEG; find_package(FFMPEG_exec). # X11; sofa_find_package(X11 QUIET); if(X11_FOUND); message(""Found X11 libraries""); include_directories(${X11_INCLUDE_DIR}); else(); message(SEND_ERROR ""Can't find X11 libraries.""); endif(). set(SRC_ROOT src/sofa/gui/headlessrecorder). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/init.h; ${SRC_ROOT}/HeadlessRecorder.h; ). set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/HeadlessRecorder.cpp; ). if(SOFA_BUILD_TESTS); configure_file(${SRC_ROOT}/headlessRecorder_test.sh ${CMAKE_BINARY_DIR}/bin/headlessRecorder_test COPYONLY); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common Sofa.GL); target_link_libraries(${PROJECT_NAME} PUBLIC ${X11_LIBRARIES}). # Create build and install versions of .ini file for resources finding; set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # FFMPEG_EXEC_FILE is set by FindFFMEG_exec.cmake; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:8279,Deployability,install,installation,8279,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:1080,Energy Efficiency,charge,charge,1080," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:4383,Energy Efficiency,charge,charge,4383,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:5086,Energy Efficiency,charge,charge,5086,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:7411,Energy Efficiency,charge,charge,7411,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:3911,Integrability,depend,depends,3911,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:8201,Integrability,interface,interface,8201,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:12233,Integrability,interface,interfaces,12233,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:6315,Modifiability,extend,extend,6315,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:7456,Performance,perform,performing,7456,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:2490,Safety,avoid,avoid,2490,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:15379,Safety,safe,safest,15379,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. {description}; Copyright (C) {year} {fullname}. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this; when it st",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:2435,Security,threat,threatened,2435," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:8699,Security,access,access,8699," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:8765,Security,access,access,8765," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:11573,Security,integrity,integrity,11573,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:2664,Usability,clear,clear,2664,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:12039,Usability,clear,clear,12039,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt:13626,Usability,guid,guided,13626,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:10813,Deployability,install,install,10813,"{MOC_FILES} ${FORM_FILES} ${SOURCE_FILES} ${QRC_FILES}). # For files generated by the moc; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>""). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_c",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:10921,Deployability,install,install,10921," the moc; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>""). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:11445,Deployability,install,install,11445,"NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:11568,Deployability,install,installed,11568,"NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:11600,Deployability,install,install,11600,"NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:11639,Deployability,install,installed,11639,"NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:11737,Deployability,install,install,11737,"NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:12055,Deployability,deploy,deployment,12055,"NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_GUI_QT_TARGETS}). if(SOFA_DUMP_VISITOR_INFO); target_link_libraries(${PROJECT_NAME} PRIVATE tinyxml2::tinyxml2); endif(). if(Sofa.GL_FOUND); if(SOFA_GUI_QT_ENABLE_QGLVIEWER); target_link_libraries(${PROJECT_NAME} PUBLIC QGLViewer); endif(); endif(). if(SOFA_GUI_QT_ENABLE_NODEGRAPH); target_link_libraries(${PROJECT_NAME} PUBLIC NodeEditor::nodes); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS NodeEditor::nodes); endif(); endif(). # FFMPEG; if(FFMPEG_EXEC_FOUND); install(PROGRAMS ""${FFMPEG_EXEC_FILE}"" DESTINATION bin COMPONENT applications); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/${SRC_ROOT}/resources""); set(FFMPEG_EXEC_PATH ""${FFMPEG_EXEC_FILE}"") # absolute path for build dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/qt""); get_filename_component(FFMPEG_EXEC_FILENAME ""${FFMPEG_EXEC_FILE}"" NAME); set(FFMPEG_EXEC_PATH ""../bin/${FFMPEG_EXEC_FILENAME}"") # relative path for install dir, see .ini file; configure_file(${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""${SRC_ROOT}/resources/"" DESTINATION ""share/sofa/gui/qt"" COMPONENT resources). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:79,Integrability,depend,dependencies,79,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Qt LANGUAGES CXX). # Qt dependencies; set(SOFA_GUI_QT_TARGETS """"); set(QT_USE_IMPORTED_TARGETS 1); set(QT5_NO_LINK_QTMAIN 1). # Will only use Qt5 if Qt5 is found and Qt6 is not found; # if Qt5 and Qt6 are both found, Qt6 will take priority; find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt6Core_FOUND); message(""${PROJECT_NAME}: will use Qt6""); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets REQUIRED); set(SOFA_GUI_QT_TARETS ${SOFA_GUI_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets ); elseif (Qt5Core_FOUND); message(""${PROJECT_NAME}: will use Qt5 (deprecated)""); sofa_find_package(Qt5 COMPONENTS Core Gui OpenGL REQUIRED); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Core Qt5::Gui Qt5::OpenGL); else(); message(SEND_ERROR ""${PROJECT_NAME}: Could not find either Qt5 or Qt6.""); endif(). if (Qt5Core_FOUND); # Profiling; sofa_find_package(Qt5 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt5Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt5Charts not found. No chart nor Profile will be compiled""); endif(). # QDocBrowser; find_package(Qt5 COMPONENTS WebEngine QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QD",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:441,Integrability,message,message,441,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Qt LANGUAGES CXX). # Qt dependencies; set(SOFA_GUI_QT_TARGETS """"); set(QT_USE_IMPORTED_TARGETS 1); set(QT5_NO_LINK_QTMAIN 1). # Will only use Qt5 if Qt5 is found and Qt6 is not found; # if Qt5 and Qt6 are both found, Qt6 will take priority; find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt6Core_FOUND); message(""${PROJECT_NAME}: will use Qt6""); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets REQUIRED); set(SOFA_GUI_QT_TARETS ${SOFA_GUI_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets ); elseif (Qt5Core_FOUND); message(""${PROJECT_NAME}: will use Qt5 (deprecated)""); sofa_find_package(Qt5 COMPONENTS Core Gui OpenGL REQUIRED); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Core Qt5::Gui Qt5::OpenGL); else(); message(SEND_ERROR ""${PROJECT_NAME}: Could not find either Qt5 or Qt6.""); endif(). if (Qt5Core_FOUND); # Profiling; sofa_find_package(Qt5 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt5Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt5Charts not found. No chart nor Profile will be compiled""); endif(). # QDocBrowser; find_package(Qt5 COMPONENTS WebEngine QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QD",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:695,Integrability,message,message,695,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Qt LANGUAGES CXX). # Qt dependencies; set(SOFA_GUI_QT_TARGETS """"); set(QT_USE_IMPORTED_TARGETS 1); set(QT5_NO_LINK_QTMAIN 1). # Will only use Qt5 if Qt5 is found and Qt6 is not found; # if Qt5 and Qt6 are both found, Qt6 will take priority; find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt6Core_FOUND); message(""${PROJECT_NAME}: will use Qt6""); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets REQUIRED); set(SOFA_GUI_QT_TARETS ${SOFA_GUI_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets ); elseif (Qt5Core_FOUND); message(""${PROJECT_NAME}: will use Qt5 (deprecated)""); sofa_find_package(Qt5 COMPONENTS Core Gui OpenGL REQUIRED); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Core Qt5::Gui Qt5::OpenGL); else(); message(SEND_ERROR ""${PROJECT_NAME}: Could not find either Qt5 or Qt6.""); endif(). if (Qt5Core_FOUND); # Profiling; sofa_find_package(Qt5 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt5Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt5Charts not found. No chart nor Profile will be compiled""); endif(). # QDocBrowser; find_package(Qt5 COMPONENTS WebEngine QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QD",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:898,Integrability,message,message,898,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI.Qt LANGUAGES CXX). # Qt dependencies; set(SOFA_GUI_QT_TARGETS """"); set(QT_USE_IMPORTED_TARGETS 1); set(QT5_NO_LINK_QTMAIN 1). # Will only use Qt5 if Qt5 is found and Qt6 is not found; # if Qt5 and Qt6 are both found, Qt6 will take priority; find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt6Core_FOUND); message(""${PROJECT_NAME}: will use Qt6""); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets REQUIRED); set(SOFA_GUI_QT_TARETS ${SOFA_GUI_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets ); elseif (Qt5Core_FOUND); message(""${PROJECT_NAME}: will use Qt5 (deprecated)""); sofa_find_package(Qt5 COMPONENTS Core Gui OpenGL REQUIRED); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Core Qt5::Gui Qt5::OpenGL); else(); message(SEND_ERROR ""${PROJECT_NAME}: Could not find either Qt5 or Qt6.""); endif(). if (Qt5Core_FOUND); # Profiling; sofa_find_package(Qt5 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt5Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt5Charts not found. No chart nor Profile will be compiled""); endif(). # QDocBrowser; find_package(Qt5 COMPONENTS WebEngine QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QD",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:1164,Integrability,message,message,1164,"OFA_GUI_QT_TARGETS """"); set(QT_USE_IMPORTED_TARGETS 1); set(QT5_NO_LINK_QTMAIN 1). # Will only use Qt5 if Qt5 is found and Qt6 is not found; # if Qt5 and Qt6 are both found, Qt6 will take priority; find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt6Core_FOUND); message(""${PROJECT_NAME}: will use Qt6""); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets REQUIRED); set(SOFA_GUI_QT_TARETS ${SOFA_GUI_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets ); elseif (Qt5Core_FOUND); message(""${PROJECT_NAME}: will use Qt5 (deprecated)""); sofa_find_package(Qt5 COMPONENTS Core Gui OpenGL REQUIRED); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Core Qt5::Gui Qt5::OpenGL); else(); message(SEND_ERROR ""${PROJECT_NAME}: Could not find either Qt5 or Qt6.""); endif(). if (Qt5Core_FOUND); # Profiling; sofa_find_package(Qt5 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt5Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt5Charts not found. No chart nor Profile will be compiled""); endif(). # QDocBrowser; find_package(Qt5 COMPONENTS WebEngine QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QDocBrowser; find_package(Qt6 COMPONENTS WebEngineCore QUIET) # if found, then QDocBrowser will be O",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:1890,Integrability,message,message,1890,"{SOFA_GUI_QT_TARGETS} Qt5::Core Qt5::Gui Qt5::OpenGL); else(); message(SEND_ERROR ""${PROJECT_NAME}: Could not find either Qt5 or Qt6.""); endif(). if (Qt5Core_FOUND); # Profiling; sofa_find_package(Qt5 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt5Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt5Charts not found. No chart nor Profile will be compiled""); endif(). # QDocBrowser; find_package(Qt5 COMPONENTS WebEngine QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QDocBrowser; find_package(Qt6 COMPONENTS WebEngineCore QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt6WebEngineCore_FOUND}); if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); # WebEngineCore needs Positioning WebChannel at cmake configure step (?); sofa_find_package(Qt6 COMPONENTS Positioning WebChannel WebEngineCore WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::WebEngineCore Qt::WebEngineWidgets); endif(); endif(). find_package(Sofa.GL QUIET). # QtViewer and QGLViewer; if(Sofa.GL_FOUND); # QtViewer; option(SOFA_GUI_QT_ENABLE_QTVIEWER ""Compile the QtViewer for the Qt GUI"" ON). # QGLViewer; option(SOFA_GUI_QT_ENABLE_QGLVIEWER ""Compile the QGLViewer for the Qt GUI"" ON). if(SOFA_GUI_QT_ENABLE_QGLV",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:2962,Integrability,message,message,2962,"e(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QDocBrowser; find_package(Qt6 COMPONENTS WebEngineCore QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt6WebEngineCore_FOUND}); if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); # WebEngineCore needs Positioning WebChannel at cmake configure step (?); sofa_find_package(Qt6 COMPONENTS Positioning WebChannel WebEngineCore WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::WebEngineCore Qt::WebEngineWidgets); endif(); endif(). find_package(Sofa.GL QUIET). # QtViewer and QGLViewer; if(Sofa.GL_FOUND); # QtViewer; option(SOFA_GUI_QT_ENABLE_QTVIEWER ""Compile the QtViewer for the Qt GUI"" ON). # QGLViewer; option(SOFA_GUI_QT_ENABLE_QGLVIEWER ""Compile the QGLViewer for the Qt GUI"" ON). if(SOFA_GUI_QT_ENABLE_QGLVIEWER); find_package(QGLViewer); if(NOT QGLViewer_FOUND); add_subdirectory(libQGLViewer/QGLViewer); endif(); endif(); else(); message(STATUS ""Sofa.GUI.Qt: Sofa.GL has not been activated, QtViewer/QGLViewer will be disabled.""); set(SOFA_GUI_QT_ENABLE_QTVIEWER OFF); set(SOFA_GUI_QT_ENABLE_QGLVIEWER OFF); endif(). # VSync; option(SOFA_GUI_QT_ENABLE_VSYNC ""Enable vertical refresh sync"" OFF). # Qt native menu; set(DEFAULT_SOFA_GUI_QT_ENABLE_NATIVE_MENU ON); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); set(DEFAULT_SOFA_GUI_QT_ENABLE_NATIVE_MENU OFF); endif(); option(SOFA_GUI_QT_ENABLE_NATIVE_MENU ""Enable Qt to use the operating system's native menu for the Qt GUI"" ${DEFAULT_SOFA_GUI_QT_ENABLE_NATIVE_MENU}). # NodeEditor; option(SOFA_GUI_QT_ENABLE_NODEGRAPH ""Build the Node graph representation. NodeEditor library is needed."" OFF); if(SOFA_GUI_QT_ENABLE_NODEGRAPH); sofa_find_package(NodeEditor REQUIRED BOTH_SCOPES); endif(). # FFMPEG_exec; sofa_find_package(FFMPEG_exec BOTH_SCOPES). # TinyXML; if(SOFA_DUMP_VISITOR_INFO); sofa_find_package(TinyXML2 REQUIR",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:8688,Integrability,message,message,8688,"OT}/viewer/GLBackend.cpp; ${SRC_ROOT}/viewer/OglModelPolicy.cpp; ). # QtViewer; if(SOFA_GUI_QT_ENABLE_QTVIEWER); list(APPEND MOC_HEADER_FILES ${SRC_ROOT}/viewer/qt/QtViewer.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/viewer/qt/QtViewer.cpp); endif(). # QGLViewer; if(SOFA_GUI_QT_ENABLE_QGLVIEWER); list(APPEND MOC_HEADER_FILES ${SRC_ROOT}/viewer/qgl/QtGLViewer.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/viewer/qgl/QtGLViewer.cpp); endif(); endif(). # QtCharts; if(Qt5Charts_FOUND OR Qt6Charts_FOUND); list(APPEND MOC_HEADER_FILES ; ${SRC_ROOT}/SofaWindowProfiler.h; ${SRC_ROOT}/QGraphStatWidget.h; ${SRC_ROOT}/QEnergyStatWidget.h; ${SRC_ROOT}/QMomentumStatWidget.h; ${SRC_ROOT}/GraphDataWidget.h; ); list(APPEND SOURCE_FILES ; ${SRC_ROOT}/SofaWindowProfiler.cpp; ${SRC_ROOT}/QGraphStatWidget.cpp; ${SRC_ROOT}/QEnergyStatWidget.cpp; ${SRC_ROOT}/QMomentumStatWidget.cpp; ${SRC_ROOT}/GraphDataWidget.cpp; ); list(APPEND UI_FILES ${SRC_ROOT}/WindowProfiler.ui); else(); message(STATUS ""${PROJECT_NAME}: QtCharts not found, SofaWindowProfiler will not be built.""); endif(). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); list(APPEND MOC_HEADER_FILES ${SRC_ROOT}/panels/QDocBrowser.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/panels/QDocBrowser.cpp); else(); message(STATUS ""${PROJECT_NAME}: QtWebEngine not found, QDocBrowser will not be built.""); endif(). #NodeEditor; if (SOFA_GUI_QT_ENABLE_NODEGRAPH); list(APPEND MOC_HEADER_FILES ; ${SRC_ROOT}/SofaWindowDataGraph.h; ${SRC_ROOT}/dataGraph/SofaComponentNodeModel.h; ). list(APPEND SOURCE_FILES ; ${SRC_ROOT}/SofaWindowDataGraph.cpp; ${SRC_ROOT}/dataGraph/SofaComponentNodeModel.cpp; ); endif(). if (Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt5_wrap_ui(FORM_FILES ${UI_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt6_wrap_ui(FORM_FILES ${UI_FILES}); endif(); set(MOC_FILES_GROUP ""Generated""); set(FORM_FILES_GROUP ""Generated""). sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SceneU",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:8961,Integrability,message,message,8961,"I_QT_ENABLE_QGLVIEWER); list(APPEND MOC_HEADER_FILES ${SRC_ROOT}/viewer/qgl/QtGLViewer.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/viewer/qgl/QtGLViewer.cpp); endif(); endif(). # QtCharts; if(Qt5Charts_FOUND OR Qt6Charts_FOUND); list(APPEND MOC_HEADER_FILES ; ${SRC_ROOT}/SofaWindowProfiler.h; ${SRC_ROOT}/QGraphStatWidget.h; ${SRC_ROOT}/QEnergyStatWidget.h; ${SRC_ROOT}/QMomentumStatWidget.h; ${SRC_ROOT}/GraphDataWidget.h; ); list(APPEND SOURCE_FILES ; ${SRC_ROOT}/SofaWindowProfiler.cpp; ${SRC_ROOT}/QGraphStatWidget.cpp; ${SRC_ROOT}/QEnergyStatWidget.cpp; ${SRC_ROOT}/QMomentumStatWidget.cpp; ${SRC_ROOT}/GraphDataWidget.cpp; ); list(APPEND UI_FILES ${SRC_ROOT}/WindowProfiler.ui); else(); message(STATUS ""${PROJECT_NAME}: QtCharts not found, SofaWindowProfiler will not be built.""); endif(). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); list(APPEND MOC_HEADER_FILES ${SRC_ROOT}/panels/QDocBrowser.h); list(APPEND SOURCE_FILES ${SRC_ROOT}/panels/QDocBrowser.cpp); else(); message(STATUS ""${PROJECT_NAME}: QtWebEngine not found, QDocBrowser will not be built.""); endif(). #NodeEditor; if (SOFA_GUI_QT_ENABLE_NODEGRAPH); list(APPEND MOC_HEADER_FILES ; ${SRC_ROOT}/SofaWindowDataGraph.h; ${SRC_ROOT}/dataGraph/SofaComponentNodeModel.h; ). list(APPEND SOURCE_FILES ; ${SRC_ROOT}/SofaWindowDataGraph.cpp; ${SRC_ROOT}/dataGraph/SofaComponentNodeModel.cpp; ); endif(). if (Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt5_wrap_ui(FORM_FILES ${UI_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt6_wrap_ui(FORM_FILES ${UI_FILES}); endif(); set(MOC_FILES_GROUP ""Generated""); set(FORM_FILES_GROUP ""Generated""). sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.SceneUtility REQUIRED). set(CMAKE_AUTORCC ON); add_library(${PROJECT_NAME} SHARED ${MOC_HEADER_FILES} ${HEADER_FILES} ${MOC_FILES} ${FORM_FILES} ${SOURCE_FILES} ${QRC_FILES}). # For files generated by the moc; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFA",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:2317,Modifiability,config,configure,2317,"ault; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt5WebEngine_FOUND}). if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); sofa_find_package(Qt5 COMPONENTS WebEngine WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt5::WebEngine Qt5::WebEngineWidgets); endif(); elseif (Qt6Core_FOUND). # Profiling; sofa_find_package(Qt6 COMPONENTS Charts QUIET BOTH_SCOPES); if(Qt6Charts_FOUND); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::Charts); else(); message(STATUS ""${PROJECT_NAME}: Qt6 Charts not found. No chart nor Profile will be compiled""); endif(). # # QDocBrowser; find_package(Qt6 COMPONENTS WebEngineCore QUIET) # if found, then QDocBrowser will be ON by default; option(SOFA_GUI_QT_ENABLE_QDOCBROWSER ""Build the QDocBrowser. QtWebEngine is needed."" ${Qt6WebEngineCore_FOUND}); if(SOFA_GUI_QT_ENABLE_QDOCBROWSER); # WebEngineCore needs Positioning WebChannel at cmake configure step (?); sofa_find_package(Qt6 COMPONENTS Positioning WebChannel WebEngineCore WebEngineWidgets REQUIRED BOTH_SCOPES); set(SOFA_GUI_QT_TARGETS ${SOFA_GUI_QT_TARGETS} Qt::WebEngineCore Qt::WebEngineWidgets); endif(); endif(). find_package(Sofa.GL QUIET). # QtViewer and QGLViewer; if(Sofa.GL_FOUND); # QtViewer; option(SOFA_GUI_QT_ENABLE_QTVIEWER ""Compile the QtViewer for the Qt GUI"" ON). # QGLViewer; option(SOFA_GUI_QT_ENABLE_QGLVIEWER ""Compile the QGLViewer for the Qt GUI"" ON). if(SOFA_GUI_QT_ENABLE_QGLVIEWER); find_package(QGLViewer); if(NOT QGLViewer_FOUND); add_subdirectory(libQGLViewer/QGLViewer); endif(); endif(); else(); message(STATUS ""Sofa.GUI.Qt: Sofa.GL has not been activated, QtViewer/QGLViewer will be disabled.""); set(SOFA_GUI_QT_ENABLE_QTVIEWER OFF); set(SOFA_GUI_QT_ENABLE_QGLVIEWER OFF); endif(). # VSync; option(SOFA_GUI_QT_ENABLE_VSYNC ""Enable vertical refresh sync"" OFF). # Qt native menu; set(DEFAULT_SOFA_GUI_QT_ENABLE_NATIVE_MENU ON); if(${CMAKE_SYSTEM_NAME} MATCHES ""Darwin""); set(DEFAULT_SOFA_GUI_QT_ENABLE_NATIVE_M",MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt:4978,Modifiability,config,config,4978,ADER_FILES; ${SRC_ROOT}/AboutSOFADialog.h; ${SRC_ROOT}/DataFilenameWidget.h; ${SRC_ROOT}/DataWidget.h; ${SRC_ROOT}/DisplayFlagsDataWidget.h; ${SRC_ROOT}/GenGraphForm.h; ${SRC_ROOT}/LinkWidget.h; ${SRC_ROOT}/MaterialDataWidget.h; ${SRC_ROOT}/RGBAColorDataWidget.h; ${SRC_ROOT}/ModifyObject.h; ${SRC_ROOT}/QDataDescriptionWidget.h; ${SRC_ROOT}/QDisplayDataWidget.h; ${SRC_ROOT}/QDisplayLinkWidget.h; ${SRC_ROOT}/QDisplayPropertyWidget.h; ${SRC_ROOT}/QRGBAColorPicker.h; ${SRC_ROOT}/QModelViewTableUpdater.h; ${SRC_ROOT}/QMouseOperations.h; ${SRC_ROOT}/QMouseWheelAdjustementGuard.h; ${SRC_ROOT}/QSofaListView.h; ${SRC_ROOT}/QSofaStatWidget.h; ${SRC_ROOT}/QTabulationModifyObject.h; ${SRC_ROOT}/QtMessageRedirection.h; ${SRC_ROOT}/QTransformationWidget.h; ${SRC_ROOT}/RealGUI.h; ${SRC_ROOT}/SimpleDataWidget.h; ${SRC_ROOT}/SofaMouseManager.h ; ${SRC_ROOT}/SofaVideoRecorderManager.h; ${SRC_ROOT}/SofaPluginManager.h; ${SRC_ROOT}/SofaSceneGraphWidget.h; ${SRC_ROOT}/WDoubleLineEdit.h ; ); set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/fwd.h; ${SRC_ROOT}/init.h; ${SRC_ROOT}/qt.conf.h; ${SRC_ROOT}/FileManagement.h; ${SRC_ROOT}/GraphListenerQListView.h; ${SRC_ROOT}/PickHandlerCallBacks.h; ${SRC_ROOT}/QMenuFilesRecentlyOpened.h; ${SRC_ROOT}/QModelViewTableDataContainer.h; ${SRC_ROOT}/StructDataWidget.h; ${SRC_ROOT}/TableDataWidget.h; ${SRC_ROOT}/viewer/SofaViewer.h; ${SRC_ROOT}/viewer/EngineBackend.h; ${SRC_ROOT}/viewer/VisualModelPolicy.h; ${SRC_ROOT}/GenericWidget.h; ); set(SOURCE_FILES; ${SRC_ROOT}/init.cpp; ${SRC_ROOT}/AboutSOFADialog.cpp; ${SRC_ROOT}/DataFilenameWidget.cpp; ${SRC_ROOT}/DataWidget.cpp; ${SRC_ROOT}/DisplayFlagsDataWidget.cpp; ${SRC_ROOT}/FileManagement.cpp; ${SRC_ROOT}/GenGraphForm.cpp; ${SRC_ROOT}/GraphListenerQListView.cpp; ${SRC_ROOT}/LinkWidget.cpp; ${SRC_ROOT}/MaterialDataWidget.cpp; ${SRC_ROOT}/RGBAColorDataWidget.cpp; ${SRC_ROOT}/ModifyObject.cpp; ${SRC_ROOT}/PickHandlerCallBacks.cpp; ${SRC_ROOT}/QDataDescriptionWidget.cpp; ${SRC_ROOT}/QDisplayDataWidget,MatchSource.DOCS,Sofa/GUI/Qt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:8279,Deployability,install,installation,8279,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:1080,Energy Efficiency,charge,charge,1080," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:4383,Energy Efficiency,charge,charge,4383,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:5086,Energy Efficiency,charge,charge,5086,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:7411,Energy Efficiency,charge,charge,7411,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:3911,Integrability,depend,depends,3911,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:8201,Integrability,interface,interface,8201,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:12233,Integrability,interface,interfaces,12233,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:6315,Modifiability,extend,extend,6315,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:7456,Performance,perform,performing,7456,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:2490,Safety,avoid,avoid,2490,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:15379,Safety,safe,safest,15379,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. {description}; Copyright (C) {year} {fullname}. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this; when it st",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:2435,Security,threat,threatened,2435," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:8699,Security,access,access,8699," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:8765,Security,access,access,8765," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:11573,Security,integrity,integrity,11573,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:2664,Usability,clear,clear,2664,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:12039,Usability,clear,clear,12039,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt:13626,Usability,guid,guided,13626,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,Sofa/GUI/Qt/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Batch/src/sofa/gui/batch/indicators/LICENSE.txt:78,Energy Efficiency,charge,charge,78,"MIT License. Copyright (c) 2019 Pranav. Permission is hereby granted, free of charge, to any person obtaining a copy; of this software and associated documentation files (the ""Software""), to deal; in the Software without restriction, including without limitation the rights; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell; copies of the Software, and to permit persons to whom the Software is; furnished to do so, subject to the following conditions:. The above copyright notice and this permission notice shall be included in all; copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE; SOFTWARE.; ",MatchSource.DOCS,Sofa/GUI/Batch/src/sofa/gui/batch/indicators/LICENSE.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Batch/src/sofa/gui/batch/indicators/LICENSE.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt:91,Availability,avail,available,91,"This is libQGLViewer version 2.8.0. Packaged on March 13, 2022. The complete change log is available in doc/changeLog.html. The latest releases and changeLog are available at:; http://www.libqglviewer.com/changeLog.html; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/changeLog.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt:162,Availability,avail,available,162,"This is libQGLViewer version 2.8.0. Packaged on March 13, 2022. The complete change log is available in doc/changeLog.html. The latest releases and changeLog are available at:; http://www.libqglviewer.com/changeLog.html; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/changeLog.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt:135,Deployability,release,releases,135,"This is libQGLViewer version 2.8.0. Packaged on March 13, 2022. The complete change log is available in doc/changeLog.html. The latest releases and changeLog are available at:; http://www.libqglviewer.com/changeLog.html; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/changeLog.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt:84,Testability,log,log,84,"This is libQGLViewer version 2.8.0. Packaged on March 13, 2022. The complete change log is available in doc/changeLog.html. The latest releases and changeLog are available at:; http://www.libqglviewer.com/changeLog.html; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/changeLog.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/changeLog.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt:1981,Availability,avail,available,1981,"ink software (hereafter referred to as ""Your Software""); against the Licensed Software and/or distribute binaries of Your Software; linked against the Licensed Software, provided that:. A) Your Software is licensed under one of the following licenses:. License name Version(s)/Copyright Date; Academic Free License 2.0, 2.1, 3.0; Apache Software License 1.0 or 1.1; Apache License 2.0; Apple Public Source License 2.0; BSD license ""July 22 1999""; Common Development and Distribution; License (CDDL) 1.0; Common Public License 1.0; Eclipse Public License 1.0; GNU Library or ""Lesser""; General Public License (LGPL) 2.0, 2.1, 3.0; Jabber Open Source License 1.0; Mozilla Public License (MPL) 1.0 or 1.1; Open Software License 2.0, 3.0; PHP License 3.0; Python Software Foundation License 2.1.1; Q Public License 1.0; Sleepycat License ""1999""; W3C License ""2001""; X11 License X11R6.6; Zope Public License 2.0, 2.1. and. B) You must, on request, make a complete package including the complete ; source code of Your Software (as defined in the GNU General Public ; License version 2, section 3, but excluding anything excluded by the; special exception in the same section) available to Gilles Debunne; under the same license as that granted to other recipients of the ; source code of Your Software. and. C) Your or any other contributor's rights to:. i) distribute the source code of Your Software to anyone for; any purpose;. and. ii) publicly discuss the development project for Your; Software and its goals in any form and in any forum. are not prohibited by any legal instrument, including but not limited to; contracts, non-disclosure agreements, and employee contracts. 2) The right to link non-Open Source applications with versions of the ; Licensed Software: You may link applications with versions of the Licensed ; Software, provided that such applications have been developed and are deployed; in accordance with the terms and conditions of the libQGLViewer Commercial ; License Agreement.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt:2705,Deployability,deploy,deployed,2705,"ink software (hereafter referred to as ""Your Software""); against the Licensed Software and/or distribute binaries of Your Software; linked against the Licensed Software, provided that:. A) Your Software is licensed under one of the following licenses:. License name Version(s)/Copyright Date; Academic Free License 2.0, 2.1, 3.0; Apache Software License 1.0 or 1.1; Apache License 2.0; Apple Public Source License 2.0; BSD license ""July 22 1999""; Common Development and Distribution; License (CDDL) 1.0; Common Public License 1.0; Eclipse Public License 1.0; GNU Library or ""Lesser""; General Public License (LGPL) 2.0, 2.1, 3.0; Jabber Open Source License 1.0; Mozilla Public License (MPL) 1.0 or 1.1; Open Software License 2.0, 3.0; PHP License 3.0; Python Software Foundation License 2.1.1; Q Public License 1.0; Sleepycat License ""1999""; W3C License ""2001""; X11 License X11R6.6; Zope Public License 2.0, 2.1. and. B) You must, on request, make a complete package including the complete ; source code of Your Software (as defined in the GNU General Public ; License version 2, section 3, but excluding anything excluded by the; special exception in the same section) available to Gilles Debunne; under the same license as that granted to other recipients of the ; source code of Your Software. and. C) Your or any other contributor's rights to:. i) distribute the source code of Your Software to anyone for; any purpose;. and. ii) publicly discuss the development project for Your; Software and its goals in any form and in any forum. are not prohibited by any legal instrument, including but not limited to; contracts, non-disclosure agreements, and employee contracts. 2) The right to link non-Open Source applications with versions of the ; Licensed Software: You may link applications with versions of the Licensed ; Software, provided that such applications have been developed and are deployed; in accordance with the terms and conditions of the libQGLViewer Commercial ; License Agreement.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt:2423,Integrability,contract,contracts,2423,"ink software (hereafter referred to as ""Your Software""); against the Licensed Software and/or distribute binaries of Your Software; linked against the Licensed Software, provided that:. A) Your Software is licensed under one of the following licenses:. License name Version(s)/Copyright Date; Academic Free License 2.0, 2.1, 3.0; Apache Software License 1.0 or 1.1; Apache License 2.0; Apple Public Source License 2.0; BSD license ""July 22 1999""; Common Development and Distribution; License (CDDL) 1.0; Common Public License 1.0; Eclipse Public License 1.0; GNU Library or ""Lesser""; General Public License (LGPL) 2.0, 2.1, 3.0; Jabber Open Source License 1.0; Mozilla Public License (MPL) 1.0 or 1.1; Open Software License 2.0, 3.0; PHP License 3.0; Python Software Foundation License 2.1.1; Q Public License 1.0; Sleepycat License ""1999""; W3C License ""2001""; X11 License X11R6.6; Zope Public License 2.0, 2.1. and. B) You must, on request, make a complete package including the complete ; source code of Your Software (as defined in the GNU General Public ; License version 2, section 3, but excluding anything excluded by the; special exception in the same section) available to Gilles Debunne; under the same license as that granted to other recipients of the ; source code of Your Software. and. C) Your or any other contributor's rights to:. i) distribute the source code of Your Software to anyone for; any purpose;. and. ii) publicly discuss the development project for Your; Software and its goals in any form and in any forum. are not prohibited by any legal instrument, including but not limited to; contracts, non-disclosure agreements, and employee contracts. 2) The right to link non-Open Source applications with versions of the ; Licensed Software: You may link applications with versions of the Licensed ; Software, provided that such applications have been developed and are deployed; in accordance with the terms and conditions of the libQGLViewer Commercial ; License Agreement.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt:2474,Integrability,contract,contracts,2474,"ink software (hereafter referred to as ""Your Software""); against the Licensed Software and/or distribute binaries of Your Software; linked against the Licensed Software, provided that:. A) Your Software is licensed under one of the following licenses:. License name Version(s)/Copyright Date; Academic Free License 2.0, 2.1, 3.0; Apache Software License 1.0 or 1.1; Apache License 2.0; Apple Public Source License 2.0; BSD license ""July 22 1999""; Common Development and Distribution; License (CDDL) 1.0; Common Public License 1.0; Eclipse Public License 1.0; GNU Library or ""Lesser""; General Public License (LGPL) 2.0, 2.1, 3.0; Jabber Open Source License 1.0; Mozilla Public License (MPL) 1.0 or 1.1; Open Software License 2.0, 3.0; PHP License 3.0; Python Software Foundation License 2.1.1; Q Public License 1.0; Sleepycat License ""1999""; W3C License ""2001""; X11 License X11R6.6; Zope Public License 2.0, 2.1. and. B) You must, on request, make a complete package including the complete ; source code of Your Software (as defined in the GNU General Public ; License version 2, section 3, but excluding anything excluded by the; special exception in the same section) available to Gilles Debunne; under the same license as that granted to other recipients of the ; source code of Your Software. and. C) Your or any other contributor's rights to:. i) distribute the source code of Your Software to anyone for; any purpose;. and. ii) publicly discuss the development project for Your; Software and its goals in any form and in any forum. are not prohibited by any legal instrument, including but not limited to; contracts, non-disclosure agreements, and employee contracts. 2) The right to link non-Open Source applications with versions of the ; Licensed Software: You may link applications with versions of the Licensed ; Software, provided that such applications have been developed and are deployed; in accordance with the terms and conditions of the libQGLViewer Commercial ; License Agreement.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/GPL_exception.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt:89,Availability,avail,available,89,"; l i b Q G L V i e w e r I n s t a l l a t i o n. libQGLViewer requires the Qt library, available from Digia. In order to compile the library from its sources:. - On UNIX platforms, simply type (see doc/installUnix.html for details):. > qmake; > make; > make install [optional]. - For Windows installation, see doc/installWindows.html. See doc/compilation.html for details on compiling programs that use libQGLViewer.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/install.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt:204,Deployability,install,installUnix,204,"; l i b Q G L V i e w e r I n s t a l l a t i o n. libQGLViewer requires the Qt library, available from Digia. In order to compile the library from its sources:. - On UNIX platforms, simply type (see doc/installUnix.html for details):. > qmake; > make; > make install [optional]. - For Windows installation, see doc/installWindows.html. See doc/compilation.html for details on compiling programs that use libQGLViewer.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/install.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt:260,Deployability,install,install,260,"; l i b Q G L V i e w e r I n s t a l l a t i o n. libQGLViewer requires the Qt library, available from Digia. In order to compile the library from its sources:. - On UNIX platforms, simply type (see doc/installUnix.html for details):. > qmake; > make; > make install [optional]. - For Windows installation, see doc/installWindows.html. See doc/compilation.html for details on compiling programs that use libQGLViewer.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/install.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt:294,Deployability,install,installation,294,"; l i b Q G L V i e w e r I n s t a l l a t i o n. libQGLViewer requires the Qt library, available from Digia. In order to compile the library from its sources:. - On UNIX platforms, simply type (see doc/installUnix.html for details):. > qmake; > make; > make install [optional]. - For Windows installation, see doc/installWindows.html. See doc/compilation.html for details on compiling programs that use libQGLViewer.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/install.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt:316,Deployability,install,installWindows,316,"; l i b Q G L V i e w e r I n s t a l l a t i o n. libQGLViewer requires the Qt library, available from Digia. In order to compile the library from its sources:. - On UNIX platforms, simply type (see doc/installUnix.html for details):. > qmake; > make; > make install [optional]. - For Windows installation, see doc/installWindows.html. See doc/compilation.html for details on compiling programs that use libQGLViewer.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/install.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt:183,Usability,simpl,simply,183,"; l i b Q G L V i e w e r I n s t a l l a t i o n. libQGLViewer requires the Qt library, available from Digia. In order to compile the library from its sources:. - On UNIX platforms, simply type (see doc/installUnix.html for details):. > qmake; > make; > make install [optional]. - For Windows installation, see doc/installWindows.html. See doc/compilation.html for details on compiling programs that use libQGLViewer.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/install.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/install.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:22663,Availability,mask,masks,22663,"o; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a w",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:23526,Availability,avail,available,23526,"ion 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a work means any kind of propagation that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and prominently visible; feature that (1) displays an appropriate copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Sta",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:25142,Availability,avail,available,25142,"te copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Standard Interface"" means an interface that either is an official; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work, including scripts to; control those activities. However, it does not include the work's; System Libraries, or general-purpose tools or generally available free; programs which are used unmodified in performing those activities but; which are not part of the work. For example, Corresponding Source; includes interface definition files ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:25794,Availability,avail,available,25794," of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work, including scripts to; control those activities. However, it does not include the work's; System Libraries, or general-purpose tools or generally available free; programs which are used unmodified in performing those activities but; which are not part of the work. For example, Corresponding Source; includes interface definition files associated with source files for; the work, and the source code for shared libraries and dynamically; linked subprograms that the work is specifically designed to require,; such as by intimate data communication or control flow between those; subprograms and other parts of the work. The Corresponding Source need not include anything that users; can regenerate automatically from other parts of the Corresponding; Source. The Corresponding Source for a work in source code form is that; same work. 2. Basic Permissions. All rights granted under this License are granted for the term of; copyright on the Program, and are irrevocable provided the stated; conditions are met. This License explicitly affirms your unlimited; permission to run the unmodified Program. The output from running a; covered work is covered by t",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:33217,Availability,avail,available,33217,"rk server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Source as a System Library, need not be; included in conveying the object code work. A ""User Product"" is either (1) a ""consumer product"", which means any; tangible personal property which is normally used for personal, family,; or household purposes, or (2) anything designed or sold for incorporation; into a dwelling. In determining whether a product is a consumer product,; doubtful cases shall be resolved in favor of coverage. For a particular; product received by a particular user, ""normally used"" refers to a; typical or common use of that class of product, regardless of the status; of t",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:36286,Availability,avail,available,36286,"xed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If additional permissions; apply only to part of the Program, that part may be used separately; under those permissions, but the entire Program remains governed by; this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option; remove any additional permissions from that copy, or from any part of; it. (Additional permissions may be written to require their own; removal in certain cases when you modify the work.) You may place; additional p",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44494,Availability,avail,available,44494,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44597,Availability,avail,available,44597,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44724,Availability,avail,available,44724,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44946,Availability,down,downstream,44946,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:46805,Availability,avail,available,46805,"s not include within; the scope of its coverage, prohibits the exercise of, or is; conditioned on the non-exercise of one or more of the rights that are; specifically granted under this License. You may not convey a covered; work if you are a party to an arrangement with a third party that is; in the business of distributing software, under which you make payment; to the third party based on the extent of your activity of conveying; the work, and under which the third party grants, to any of the; parties who would receive the covered work from you, a discriminatory; patent license (a) in connection with copies of the covered work; conveyed by you (or copies made from those copies), or (b) primarily; for and in connection with specific products or compilations that; contain the covered work, unless you entered into that arrangement,; or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting; any implied license or other defenses to infringement that may; otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot convey a; covered work so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you may; not convey it at all. For example, if you agree to terms that obligate you; to collect a royalty for further conveying from those to whom you convey; the Program, the only way you could satisfy both those terms and this; License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have; permission to link or combine any covered work with a work licensed; under version 3 of the GNU Aff",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:190,Deployability,release,release,190," libQGLViewer is licensed under two licenses: the GNU General Public License (GPL) ; and a commercial license. If you, your company or your organization use this library and do not wish to; release your complete source code, you are required to purchase a commercial license. Alternatively, if you are willing to follow the terms of the GPL (General Public License),; this Open source version of libQGLViewer allows you to develop, modify and distribute ; your software freely. You must contribute all your source code to the open source; community, according to the terms of the applicable open source license. You may use, distribute and copy the QGLViewer library under the terms of; GNU General Public License version 2 or version 3, which are displayed below. In addition, as a special exception, Gilles Debunne gives you certain ; additional rights, described in the file GPL_EXCEPTION in this package. -------------------------------------------------------------------------. 		 GNU GENERAL PUBLIC LICENSE; 		 Version 2, June 1991. Copyright (C) 1989, 1991 Free Software Foundation, Inc.; 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. 			 Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Library General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the f",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:9253,Deployability,install,installation,9253,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:19700,Deployability,release,released,19700," more useful to permit linking proprietary applications with the; library. If this is what you want to do, use the GNU Library General; Public License instead of this License. -------------------------------------------------------------------------. GNU GENERAL PUBLIC LICENSE; Version 3, 29 June 2007. Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The GNU General Public License is a free, copyleft license for; software and other kinds of works. The licenses for most software and other practical works are designed; to take away your freedom to share and change the works. By contrast,; the GNU General Public License is intended to guarantee your freedom to; share and change all versions of a program--to make sure it remains free; software for all its users. We, the Free Software Foundation, use the; GNU General Public License for most of our software; it applies also to; any other work released this way by its authors. You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; them if you wish), that you receive source code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:21325,Deployability,install,install,21325,"f you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:25566,Deployability,install,install,25566,"icial; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work, including scripts to; control those activities. However, it does not include the work's; System Libraries, or general-purpose tools or generally available free; programs which are used unmodified in performing those activities but; which are not part of the work. For example, Corresponding Source; includes interface definition files associated with source files for; the work, and the source code for shared libraries and dynamically; linked subprograms that the work is specifically designed to require,; such as by intimate data communication or control flow between those; subprograms and other parts of the work. The Corresponding Source need not include anything that users; can regenerate automatically from other parts of the Corresponding; Source. The Corresponding Source for a work in source code form is that; same work. 2. Basic Permissions. All rights granted under this License are granted for the term of; copyri",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:29651,Deployability,release,released,29651," may convey verbatim copies of the Program's source code as you; receive it, in any medium, provided that you conspicuously and; appropriately publish on each copy an appropriate copyright notice;; keep intact all notices stating that this License and any; non-permissive terms added in accord with section 7 apply to the code;; keep intact all notices of the absence of any warranty; and give all; recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey,; and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to; produce it from the Program, in the form of source code under the; terms of section 4, provided that you also meet all of these conditions:. a) The work must carry prominent notices stating that you modified; it, and giving a relevant date. b) The work must carry prominent notices stating that it is; released under this License and any conditions added under section; 7. This requirement modifies the requirement in section 4 to; ""keep intact all notices"". c) You must license the entire work, as a whole, under this; License to anyone who comes into possession of a copy. This; License will therefore apply, along with any applicable section 7; additional terms, to the whole of the work, and all its parts,; regardless of how they are packaged. This License gives no; permission to license the work in any other way, but it does not; invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display; Appropriate Legal Notices; however, if the Program has interactive; interfaces that do not display Appropriate Legal Notices, your; work need not make them do so. A compilation of a covered work with other separate and independent; works, which are not by their nature extensions of the covered work,; and which are not combined with it s",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:34659,Deployability,install,install,34659,"eying the object code work. A ""User Product"" is either (1) a ""consumer product"", which means any; tangible personal property which is normally used for personal, family,; or household purposes, or (2) anything designed or sold for incorporation; into a dwelling. In determining whether a product is a consumer product,; doubtful cases shall be resolved in favor of coverage. For a particular; product received by a particular user, ""normally used"" refers to a; typical or common use of that class of product, regardless of the status; of the particular user or of the way in which the particular user; actually uses, or expects or is expected to use, the product. A product; is a consumer product regardless of whether the product has substantial; commercial, industrial or non-consumer uses, unless such uses represent; the only significant mode of use of the product. ""Installation Information"" for a User Product means any methods,; procedures, authorization keys, or other information required to install; and execute modified versions of a covered work in that User Product from; a modified version of its Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Inst",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:35526,Deployability,install,install,35526,"""Installation Information"" for a User Product means any methods,; procedures, authorization keys, or other information required to install; and execute modified versions of a covered work in that User Product from; a modified version of its Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making excepti",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:35609,Deployability,install,installed,35609,"""Installation Information"" for a User Product means any methods,; procedures, authorization keys, or other information required to install; and execute modified versions of a covered work in that User Product from; a modified version of its Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making excepti",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:35765,Deployability,update,updates,35765,"s Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If addition",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:35811,Deployability,install,installed,35811,"s Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If addition",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:35897,Deployability,install,installed,35897,"s Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If addition",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:2051,Energy Efficiency,charge,charge,2051,"51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. 			 Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Library General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:5357,Energy Efficiency,charge,charge,5357,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:6060,Energy Efficiency,charge,charge,6060,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:8385,Energy Efficiency,charge,charge,8385,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:19972,Energy Efficiency,charge,charge,19972,"f.org/>; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The GNU General Public License is a free, copyleft license for; software and other kinds of works. The licenses for most software and other practical works are designed; to take away your freedom to share and change the works. By contrast,; the GNU General Public License is intended to guarantee your freedom to; share and change all versions of a program--to make sure it remains free; software for all its users. We, the Free Software Foundation, use the; GNU General Public License for most of our software; it applies also to; any other work released this way by its authors. You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; them if you wish), that you receive source code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GP",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:22892,Energy Efficiency,adapt,adapt,22892,"protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a work means any kind of propagation that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and promi",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:28225,Energy Efficiency,power,power,28225,"ou do; not control copyright. Those thus making or running the covered works; for you must do so exclusively on your behalf, under your direction; and control, on terms that prohibit them from making any copies of; your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under; the conditions stated below. Sublicensing is not allowed; section 10; makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological; measure under any applicable law fulfilling obligations under article; 11 of the WIPO copyright treaty adopted on 20 December 1996, or; similar laws prohibiting or restricting circumvention of such; measures. When you convey a covered work, you waive any legal power to forbid; circumvention of technological measures to the extent such circumvention; is effected by exercising rights under this License with respect to; the covered work, and you disclaim any intention to limit operation or; modification of the work as a means of enforcing, against the work's; users, your or third parties' legal rights to forbid circumvention of; technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you; receive it, in any medium, provided that you conspicuously and; appropriately publish on each copy an appropriate copyright notice;; keep intact all notices stating that this License and any; non-permissive terms added in accord with section 7 apply to the code;; keep intact all notices of the absence of any warranty; and give all; recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey,; and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to; produce it from the Program, in the form of sour",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:29120,Energy Efficiency,charge,charge,29120,"en you convey a covered work, you waive any legal power to forbid; circumvention of technological measures to the extent such circumvention; is effected by exercising rights under this License with respect to; the covered work, and you disclaim any intention to limit operation or; modification of the work as a means of enforcing, against the work's; users, your or third parties' legal rights to forbid circumvention of; technological measures. 4. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you; receive it, in any medium, provided that you conspicuously and; appropriately publish on each copy an appropriate copyright notice;; keep intact all notices stating that this License and any; non-permissive terms added in accord with section 7 apply to the code;; keep intact all notices of the absence of any warranty; and give all; recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey,; and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to; produce it from the Program, in the form of source code under the; terms of section 4, provided that you also meet all of these conditions:. a) The work must carry prominent notices stating that you modified; it, and giving a relevant date. b) The work must carry prominent notices stating that it is; released under this License and any conditions added under section; 7. This requirement modifies the requirement in section 4 to; ""keep intact all notices"". c) You must license the entire work, as a whole, under this; License to anyone who comes into possession of a copy. This; License will therefore apply, along with any applicable section 7; additional terms, to the whole of the work, and all its parts,; regardless of how they are packaged. This License gives no; permission to license the work in any other way, but it",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32212,Energy Efficiency,charge,charge,32212,"mpilation's users; beyond what the individual works permit. Inclusion of a covered work; in an aggregate does not cause this License to apply to the other; parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms; of sections 4 and 5, provided that you also convey the; machine-readable Corresponding Source under the terms of this License,; in one of these ways:. a) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by the; Corresponding Source fixed on a durable physical medium; customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corres",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32586,Energy Efficiency,charge,charge,32586,"luding a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Sourc",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32706,Energy Efficiency,charge,charge,32706,"luding a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Sourc",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:33479,Energy Efficiency,charge,charge,33479,"commercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Source as a System Library, need not be; included in conveying the object code work. A ""User Product"" is either (1) a ""consumer product"", which means any; tangible personal property which is normally used for personal, family,; or household purposes, or (2) anything designed or sold for incorporation; into a dwelling. In determining whether a product is a consumer product,; doubtful cases shall be resolved in favor of coverage. For a particular; product received by a particular user, ""normally used"" refers to a; typical or common use of that class of product, regardless of the status; of the particular user or of the way in which the particular user; actually uses, or expects or is expected to use, the product. A product; is a consumer product regardless of whether the product has ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:42670,Energy Efficiency,charge,charge,42670,"is License. You are not responsible; for enforcing compliance by third parties with this License. An ""entity transaction"" is a transaction transferring control of an; organization, or substantially all assets of one, or subdividing an; organization, or merging organizations. If propagation of a covered; work results from an entity transaction, each party to that; transaction who receives a copy of the work also receives whatever; licenses to the work the party's predecessor in interest had or could; give under the previous paragraph, plus a right to possession of the; Corresponding Source of the work from the predecessor in interest, if; the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the; rights granted or affirmed under this License. For example, you may; not impose a license fee, royalty, or other charge for exercise of; rights granted under this License, and you may not initiate litigation; (including a cross-claim or counterclaim in a lawsuit) alleging that; any patent claim is infringed by making, using, selling, offering for; sale, or importing the Program or any portion of it. 11. Patents. A ""contributor"" is a copyright holder who authorizes use under this; License of the Program or a work on which the Program is based. The; work thus licensed is called the contributor's ""contributor version"". A contributor's ""essential patent claims"" are all patent claims; owned or controlled by the contributor, whether already acquired or; hereafter acquired, that would be infringed by some manner, permitted; by this License, of making, using, or selling its contributor version,; but do not include claims that would be infringed only as a; consequence of further modification of the contributor version. For; purposes of this definition, ""control"" includes the right to grant; patent sublicenses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44533,Energy Efficiency,charge,charge,44533,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:4885,Integrability,depend,depends,4885,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:9175,Integrability,interface,interface,9175,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:13207,Integrability,interface,interfaces,13207,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:23828,Integrability,interface,interface,23828,"e resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a work means any kind of propagation that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and prominently visible; feature that (1) displays an appropriate copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Standard Interface"" means an interface that either is an official; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serve",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:24225,Integrability,interface,interface,24225,", would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a work means any kind of propagation that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and prominently visible; feature that (1) displays an appropriate copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Standard Interface"" means an interface that either is an official; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window syste",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:24547,Integrability,interface,interface,24547,"n that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and prominently visible; feature that (1) displays an appropriate copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Standard Interface"" means an interface that either is an official; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work,",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:24654,Integrability,interface,interfaces,24654,"n that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and prominently visible; feature that (1) displays an appropriate copyright notice, and (2); tells the user that there is no warranty for the work (except to the; extent that warranties are provided), that licensees may convey the; work under this License, and how to view a copy of this License. If; the interface presents a list of user commands or options, such as a; menu, a prominent item in the list meets this criterion. 1. Source Code. The ""source code"" for a work means the preferred form of the work; for making modifications to it. ""Object code"" means any non-source; form of a work. A ""Standard Interface"" means an interface that either is an official; standard defined by a recognized standards body, or, in the case of; interfaces specified for a particular programming language, one that; is widely used among developers working in that language. The ""System Libraries"" of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work,",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:25957,Integrability,interface,interface,25957,"a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work, including scripts to; control those activities. However, it does not include the work's; System Libraries, or general-purpose tools or generally available free; programs which are used unmodified in performing those activities but; which are not part of the work. For example, Corresponding Source; includes interface definition files associated with source files for; the work, and the source code for shared libraries and dynamically; linked subprograms that the work is specifically designed to require,; such as by intimate data communication or control flow between those; subprograms and other parts of the work. The Corresponding Source need not include anything that users; can regenerate automatically from other parts of the Corresponding; Source. The Corresponding Source for a work in source code form is that; same work. 2. Basic Permissions. All rights granted under this License are granted for the term of; copyright on the Program, and are irrevocable provided the stated; conditions are met. This License explicitly affirms your unlimited; permission to run the unmodified Program. The output from running a; covered work is covered by this License only if the output, given its; content, constitutes a covered work. This License acknowledges your; rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not; convey, without conditions so long as you",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:30286,Integrability,interface,interfaces,30286," the Program, in the form of source code under the; terms of section 4, provided that you also meet all of these conditions:. a) The work must carry prominent notices stating that you modified; it, and giving a relevant date. b) The work must carry prominent notices stating that it is; released under this License and any conditions added under section; 7. This requirement modifies the requirement in section 4 to; ""keep intact all notices"". c) You must license the entire work, as a whole, under this; License to anyone who comes into possession of a copy. This; License will therefore apply, along with any applicable section 7; additional terms, to the whole of the work, and all its parts,; regardless of how they are packaged. This License gives no; permission to license the work in any other way, but it does not; invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display; Appropriate Legal Notices; however, if the Program has interactive; interfaces that do not display Appropriate Legal Notices, your; work need not make them do so. A compilation of a covered work with other separate and independent; works, which are not by their nature extensions of the covered work,; and which are not combined with it such as to form a larger program,; in or on a volume of a storage or distribution medium, is called an; ""aggregate"" if the compilation and its resulting copyright are not; used to limit the access or legal rights of the compilation's users; beyond what the individual works permit. Inclusion of a covered work; in an aggregate does not cause this License to apply to the other; parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms; of sections 4 and 5, provided that you also convey the; machine-readable Corresponding Source under the terms of this License,; in one of these ways:. a) Convey the object code in, or embodied in, a physical pr",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:30385,Integrability,interface,interfaces,30385," the Program, in the form of source code under the; terms of section 4, provided that you also meet all of these conditions:. a) The work must carry prominent notices stating that you modified; it, and giving a relevant date. b) The work must carry prominent notices stating that it is; released under this License and any conditions added under section; 7. This requirement modifies the requirement in section 4 to; ""keep intact all notices"". c) You must license the entire work, as a whole, under this; License to anyone who comes into possession of a copy. This; License will therefore apply, along with any applicable section 7; additional terms, to the whole of the work, and all its parts,; regardless of how they are packaged. This License gives no; permission to license the work in any other way, but it does not; invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display; Appropriate Legal Notices; however, if the Program has interactive; interfaces that do not display Appropriate Legal Notices, your; work need not make them do so. A compilation of a covered work with other separate and independent; works, which are not by their nature extensions of the covered work,; and which are not combined with it such as to form a larger program,; in or on a volume of a storage or distribution medium, is called an; ""aggregate"" if the compilation and its resulting copyright are not; used to limit the access or legal rights of the compilation's users; beyond what the individual works permit. Inclusion of a covered work; in an aggregate does not cause this License to apply to the other; parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms; of sections 4 and 5, provided that you also convey the; machine-readable Corresponding Source under the terms of this License,; in one of these ways:. a) Convey the object code in, or embodied in, a physical pr",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:36062,Integrability,protocol,protocols,36062,"ork under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If additional permissions; apply only to part of the Program, that part may be used separately; under those permissions, but the entire Program remains governed by; this License without regard to the additional permissions. When you convey a copy of a ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:38437,Integrability,contract,contractual,38437,"rial you; add to a covered work, you may (if authorized by the copyright holders of; that material) supplement the terms of this License with terms:. a) Disclaiming warranty or limiting liability differently from the; terms of sections 15 and 16 of this License; or. b) Requiring preservation of specified reasonable legal notices or; author attributions in that material or in the Appropriate Legal; Notices displayed by works containing it; or. c) Prohibiting misrepresentation of the origin of that material, or; requiring that modified versions of such material be marked in; reasonable ways as different from the original version; or. d) Limiting the use for publicity purposes of names of licensors or; authors of the material; or. e) Declining to grant rights under trademark law for use of some; trade names, trademarks, or service marks; or. f) Requiring indemnification of licensors and authors of that; material by anyone who conveys the material (or modified versions of; it) with contractual assumptions of liability to the recipient, for; any liability that these contractual assumptions directly impose on; those licensors and authors. All other non-permissive additional terms are considered ""further; restrictions"" within the meaning of section 10. If the Program as you; received it, or any part of it, contains a notice stating that it is; governed by this License along with a term that is a further; restriction, you may remove that term. If a license document contains; a further restriction but permits relicensing or conveying under this; License, you may add to a covered work material governed by the terms; of that license document, provided that the further restriction does; not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you; must place, in the relevant source files, a statement of the; additional terms that apply to those files, or a notice indicating; where to find the applicable terms. Additional terms, ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:38522,Integrability,contract,contractual,38522,"rial you; add to a covered work, you may (if authorized by the copyright holders of; that material) supplement the terms of this License with terms:. a) Disclaiming warranty or limiting liability differently from the; terms of sections 15 and 16 of this License; or. b) Requiring preservation of specified reasonable legal notices or; author attributions in that material or in the Appropriate Legal; Notices displayed by works containing it; or. c) Prohibiting misrepresentation of the origin of that material, or; requiring that modified versions of such material be marked in; reasonable ways as different from the original version; or. d) Limiting the use for publicity purposes of names of licensors or; authors of the material; or. e) Declining to grant rights under trademark law for use of some; trade names, trademarks, or service marks; or. f) Requiring indemnification of licensors and authors of that; material by anyone who conveys the material (or modified versions of; it) with contractual assumptions of liability to the recipient, for; any liability that these contractual assumptions directly impose on; those licensors and authors. All other non-permissive additional terms are considered ""further; restrictions"" within the meaning of section 10. If the Program as you; received it, or any part of it, contains a notice stating that it is; governed by this License along with a term that is a further; restriction, you may remove that term. If a license document contains; a further restriction but permits relicensing or conveying under this; License, you may add to a covered work material governed by the terms; of that license document, provided that the further restriction does; not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you; must place, in the relevant source files, a statement of the; additional terms that apply to those files, or a notice indicating; where to find the applicable terms. Additional terms, ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:52918,Integrability,interface,interface,52918,"erms of the GNU General Public License as published by; the Free Software Foundation, either version 3 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short; notice like this when it starts in an interactive mode:. <program> Copyright (C) <year> <name of author>; This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.; This is free software, and you are welcome to redistribute it; under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate; parts of the General Public License. Of course, your program's commands; might be different; for a GUI interface, you would use an ""about box"". You should also get your employer (if you work as a programmer) or school,; if any, to sign a ""copyright disclaimer"" for the program, if necessary.; For more information on this, and how to apply and follow the GNU GPL, see; <http://www.gnu.org/licenses/>. The GNU General Public License does not permit incorporating your program; into proprietary programs. If your program is a subroutine library, you; may consider it more useful to permit linking proprietary applications with; the library. If this is what you want to do, use the GNU Lesser General; Public License instead of this License. But first, please read; <http://www.gnu.org/philosophy/why-not-lgpl.html>. -------------------------------------------------------------------------. The QGLViewer library is Copyright (C) 2002-2014 Gilles Debunne.; ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:7289,Modifiability,extend,extend,7289,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:21845,Modifiability,extend,extend,21845," and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:22892,Modifiability,adapt,adapt,22892,"protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either the unmodified Program or a work based; on the Program. To ""propagate"" a work means to do anything with it that, without; permission, would make you directly or secondarily liable for; infringement under applicable copyright law, except executing it on a; computer or modifying a private copy. Propagation includes copying,; distribution (with or without modification), making available to the; public, and in some countries other activities as well. To ""convey"" a work means any kind of propagation that enables other; parties to make or receive copies. Mere interaction with a user through; a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays ""Appropriate Legal Notices""; to the extent that it includes a convenient and promi",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44916,Modifiability,extend,extend,44916,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:45637,Modifiability,extend,extended,45637,"s not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the covered; work and works based on it. A patent license is ""discriminatory"" if it does not include within; the scope of its coverage, prohibits the exercise of, or is; conditioned on the non-exercise of one or more of the rights that are; specifically granted under this License. You may not convey a covered; work if you are a party to an arrangement with a third party that is; in the business of distributing software, under which you make payment; to the third party based on the extent of your activity of conveying; the work, and under which the third party grants, to any of the; parties who would receive the covered work from you, a discriminatory; patent license (a) in connection with copies of the covered work; conveyed by you (or copies made from those copies), or (b) primarily; for and in connection wit",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:8430,Performance,perform,performing,8430,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:25848,Performance,perform,performing,25848," of an executable work include anything, other; than the work as a whole, that (a) is included in the normal form of; packaging a Major Component, but which is not part of that Major; Component, and (b) serves only to enable use of the work with that; Major Component, or to implement a Standard Interface for which an; implementation is available to the public in source code form. A; ""Major Component"", in this context, means a major essential component; (kernel, window system, and so on) of the specific operating system; (if any) on which the executable work runs, or a compiler used to; produce the work, or an object code interpreter used to run it. The ""Corresponding Source"" for a work in object code form means all; the source code needed to generate, install, and (for an executable; work) run the object code and to modify the work, including scripts to; control those activities. However, it does not include the work's; System Libraries, or general-purpose tools or generally available free; programs which are used unmodified in performing those activities but; which are not part of the work. For example, Corresponding Source; includes interface definition files associated with source files for; the work, and the source code for shared libraries and dynamically; linked subprograms that the work is specifically designed to require,; such as by intimate data communication or control flow between those; subprograms and other parts of the work. The Corresponding Source need not include anything that users; can regenerate automatically from other parts of the Corresponding; Source. The Corresponding Source for a work in source code form is that; same work. 2. Basic Permissions. All rights granted under this License are granted for the term of; copyright on the Program, and are irrevocable provided the stated; conditions are met. This License explicitly affirms your unlimited; permission to run the unmodified Program. The output from running a; covered work is covered by t",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32098,Performance,perform,performing,32098,"mpilation's users; beyond what the individual works permit. Inclusion of a covered work; in an aggregate does not cause this License to apply to the other; parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms; of sections 4 and 5, provided that you also convey the; machine-readable Corresponding Source under the terms of this License,; in one of these ways:. a) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by the; Corresponding Source fixed on a durable physical medium; customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corres",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:3461,Safety,avoid,avoid,3461,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. 		 GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"".",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:16362,Safety,safe,safest,16362,"OPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. 		 END OF TERMS AND CONDITIONS. 	 How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program; if not, write to the Free Software; Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is inte",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:22170,Safety,avoid,avoid,22170," versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of an; exact copy. The resulting work is called a ""modified version"" of the; earlier work or a work ""based on"" the earlier work. A ""covered work"" means either t",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:51358,Safety,safe,safest,51358," WITH ANY OTHER PROGRAMS),; EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF; SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided; above cannot be given local legal effect according to their terms,; reviewing courts shall apply local law that most closely approximates; an absolute waiver of all civil liability in connection with the; Program, unless a warranty or assumption of liability accompanies a; copy of the Program in return for a fee. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; state the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This program is free software: you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation, either version 3 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short; notice like this when ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:3406,Security,threat,threatened,3406," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. 		 GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafte",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:9673,Security,access,access,9673," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:9739,Security,access,access,9739," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:12547,Security,integrity,integrity,12547,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:21315,Security,access,access,21315,"f you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:21985,Security,threat,threatened,21985,"rs' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents.; States should not allow patents to restrict development and use of; software on general-purpose computers, but in those that do, we wish to; avoid the special danger that patents applied to a free program could; make it effectively proprietary. To prevent this, the GPL assures that; patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and; modification follow. TERMS AND CONDITIONS. 0. Definitions. ""This License"" refers to version 3 of the GNU General Public License. ""Copyright"" also means copyright-like laws that apply to other kinds of; works, such as semiconductor masks. ""The Program"" refers to any copyrightable work licensed under this; License. Each licensee is addressed as ""you"". ""Licensees"" and; ""recipients"" may be individuals or organizations. To ""modify"" a work means to copy from or adapt all or part of the work; in a fashion requiring copyright permission, other than the making of ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:30844,Security,access,access,30844,"er section; 7. This requirement modifies the requirement in section 4 to; ""keep intact all notices"". c) You must license the entire work, as a whole, under this; License to anyone who comes into possession of a copy. This; License will therefore apply, along with any applicable section 7; additional terms, to the whole of the work, and all its parts,; regardless of how they are packaged. This License gives no; permission to license the work in any other way, but it does not; invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display; Appropriate Legal Notices; however, if the Program has interactive; interfaces that do not display Appropriate Legal Notices, your; work need not make them do so. A compilation of a covered work with other separate and independent; works, which are not by their nature extensions of the covered work,; and which are not combined with it such as to form a larger program,; in or on a volume of a storage or distribution medium, is called an; ""aggregate"" if the compilation and its resulting copyright are not; used to limit the access or legal rights of the compilation's users; beyond what the individual works permit. Inclusion of a covered work; in an aggregate does not cause this License to apply to the other; parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms; of sections 4 and 5, provided that you also convey the; machine-readable Corresponding Source under the terms of this License,; in one of these ways:. a) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by the; Corresponding Source fixed on a durable physical medium; customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by a; written offer, valid for at least three year",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32143,Security,access,access,32143,"mpilation's users; beyond what the individual works permit. Inclusion of a covered work; in an aggregate does not cause this License to apply to the other; parts of the aggregate. 6. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms; of sections 4 and 5, provided that you also convey the; machine-readable Corresponding Source under the terms of this License,; in one of these ways:. a) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by the; Corresponding Source fixed on a durable physical medium; customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product; (including a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corres",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32537,Security,access,access,32537,"luding a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Sourc",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:32616,Security,access,access,32616,"luding a physical distribution medium), accompanied by a; written offer, valid for at least three years and valid for as; long as you offer spare parts or customer support for that product; model, to give anyone who possesses the object code either (1) a; copy of the Corresponding Source for all the software in the; product that is covered by this License, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Sourc",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:34606,Security,authoriz,authorization,34606,"eying the object code work. A ""User Product"" is either (1) a ""consumer product"", which means any; tangible personal property which is normally used for personal, family,; or household purposes, or (2) anything designed or sold for incorporation; into a dwelling. In determining whether a product is a consumer product,; doubtful cases shall be resolved in favor of coverage. For a particular; product received by a particular user, ""normally used"" refers to a; typical or common use of that class of product, regardless of the status; of the particular user or of the way in which the particular user; actually uses, or expects or is expected to use, the product. A product; is a consumer product regardless of whether the product has substantial; commercial, industrial or non-consumer uses, unless such uses represent; the only significant mode of use of the product. ""Installation Information"" for a User Product means any methods,; procedures, authorization keys, or other information required to install; and execute modified versions of a covered work in that User Product from; a modified version of its Corresponding Source. The information must; suffice to ensure that the continued functioning of the modified object; code is in no case prevented or interfered with solely because; modification has been made. If you convey an object code work under this section in, or with, or; specifically for use in, a User Product, and the conveying occurs as; part of a transaction in which the right of possession and use of the; User Product is transferred to the recipient in perpetuity or for a; fixed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Inst",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:36361,Security,password,password,36361,"xed term (regardless of how the transaction is characterized), the; Corresponding Source conveyed under this section must be accompanied; by the Installation Information. But this requirement does not apply; if neither you nor any third party retains the ability to install; modified object code on the User Product (for example, the work has; been installed in ROM). The requirement to provide Installation Information does not include a; requirement to continue to provide support service, warranty, or updates; for a work that has been modified or installed by the recipient, or for; the User Product in which it has been modified or installed. Access to a; network may be denied when the modification itself materially and; adversely affects the operation of the network or violates the rules and; protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided,; in accord with this section must be in a format that is publicly; documented (and with an implementation available to the public in; source code form), and must require no special password or key for; unpacking, reading or copying. 7. Additional Terms. ""Additional permissions"" are terms that supplement the terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If additional permissions; apply only to part of the Program, that part may be used separately; under those permissions, but the entire Program remains governed by; this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option; remove any additional permissions from that copy, or from any part of; it. (Additional permissions may be written to require their own; removal in certain cases when you modify the work.) You may place; additional p",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:37489,Security,authoriz,authorized,37489,"e terms of this; License by making exceptions from one or more of its conditions.; Additional permissions that are applicable to the entire Program shall; be treated as though they were included in this License, to the extent; that they are valid under applicable law. If additional permissions; apply only to part of the Program, that part may be used separately; under those permissions, but the entire Program remains governed by; this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option; remove any additional permissions from that copy, or from any part of; it. (Additional permissions may be written to require their own; removal in certain cases when you modify the work.) You may place; additional permissions on material, added by you to a covered work,; for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you; add to a covered work, you may (if authorized by the copyright holders of; that material) supplement the terms of this License with terms:. a) Disclaiming warranty or limiting liability differently from the; terms of sections 15 and 16 of this License; or. b) Requiring preservation of specified reasonable legal notices or; author attributions in that material or in the Appropriate Legal; Notices displayed by works containing it; or. c) Prohibiting misrepresentation of the origin of that material, or; requiring that modified versions of such material be marked in; reasonable ways as different from the original version; or. d) Limiting the use for publicity purposes of names of licensors or; authors of the material; or. e) Declining to grant rights under trademark law for use of some; trade names, trademarks, or service marks; or. f) Requiring indemnification of licensors and authors of that; material by anyone who conveys the material (or modified versions of; it) with contractual assumptions of liability to the recipie",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:43015,Security,authoriz,authorizes,43015,"ing organizations. If propagation of a covered; work results from an entity transaction, each party to that; transaction who receives a copy of the work also receives whatever; licenses to the work the party's predecessor in interest had or could; give under the previous paragraph, plus a right to possession of the; Corresponding Source of the work from the predecessor in interest, if; the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the; rights granted or affirmed under this License. For example, you may; not impose a license fee, royalty, or other charge for exercise of; rights granted under this License, and you may not initiate litigation; (including a cross-claim or counterclaim in a lawsuit) alleging that; any patent claim is infringed by making, using, selling, offering for; sale, or importing the Program or any portion of it. 11. Patents. A ""contributor"" is a copyright holder who authorizes use under this; License of the Program or a work on which the Program is based. The; work thus licensed is called the contributor's ""contributor version"". A contributor's ""essential patent claims"" are all patent claims; owned or controlled by the contributor, whether already acquired or; hereafter acquired, that would be infringed by some manner, permitted; by this License, of making, using, or selling its contributor version,; but do not include claims that would be infringed only as a; consequence of further modification of the contributor version. For; purposes of this definition, ""control"" includes the right to grant; patent sublicenses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""pat",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:44639,Security,access,accessible,44639,"ses in a manner consistent with the requirements of; this License. Each contributor grants you a non-exclusive, worldwide, royalty-free; patent license under the contributor's essential patent claims, to; make, use, sell, offer for sale, import and otherwise run, modify and; propagate the contents of its contributor version. In the following three paragraphs, a ""patent license"" is any express; agreement or commitment, however denominated, not to enforce a patent; (such as an express permission to practice a patent or covenant not to; sue for patent infringement). To ""grant"" such a patent license to a; party means to make such an agreement or commitment not to enforce a; patent against the party. If you convey a covered work, knowingly relying on a patent license,; and the Corresponding Source of the work is not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the c",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:45494,Security,authoriz,authorizing,45494,"s not available for anyone; to copy, free of charge and under the terms of this License, through a; publicly available network server or other readily accessible means,; then you must either (1) cause the Corresponding Source to be so; available, or (2) arrange to deprive yourself of the benefit of the; patent license for this particular work, or (3) arrange, in a manner; consistent with the requirements of this License, to extend the patent; license to downstream recipients. ""Knowingly relying"" means you have; actual knowledge that, but for the patent license, your conveying the; covered work in a country, or your recipient's use of the covered work; in a country, would infringe one or more identifiable patents in that; country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or; arrangement, you convey, or propagate by procuring conveyance of, a; covered work, and grant a patent license to some of the parties; receiving the covered work authorizing them to use, propagate, modify; or convey a specific copy of the covered work, then the patent license; you grant is automatically extended to all recipients of the covered; work and works based on it. A patent license is ""discriminatory"" if it does not include within; the scope of its coverage, prohibits the exercise of, or is; conditioned on the non-exercise of one or more of the rights that are; specifically granted under this License. You may not convey a covered; work if you are a party to an arrangement with a third party that is; in the business of distributing software, under which you make payment; to the third party based on the extent of your activity of conveying; the work, and under which the third party grants, to any of the; parties who would receive the covered work from you, a discriminatory; patent license (a) in connection with copies of the covered work; conveyed by you (or copies made from those copies), or (b) primarily; for and in connection wit",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:49089,Security,authoriz,authorizes,49089,"ncerning interaction through a network will apply to the; combination as such. 14. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of; the GNU General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the; Program specifies that a certain numbered version of the GNU General; Public License ""or any later version"" applies to it, you have the; option of following the terms and conditions either of that numbered; version or of any later version published by the Free Software; Foundation. If the Program does not specify a version number of the; GNU General Public License, you may choose any version ever published; by the Free Software Foundation. If the Program specifies that a proxy can decide which future; versions of the GNU General Public License can be used, that proxy's; public statement of acceptance of a version permanently authorizes you; to choose that version for the Program. Later license versions may give you additional or different; permissions. However, no additional obligations are imposed on any; author or copyright holder as a result of your choosing to follow a; later version. 15. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY; APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT; HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY; OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,; THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM; IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF; ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREE",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:20831,Testability,assert,assert,20831," Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; them if you wish), that you receive source code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this pro",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:3635,Usability,clear,clear,3635,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. 		 GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; r",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:13013,Usability,clear,clear,13013,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:14600,Usability,guid,guided,14600,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. 			 NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:21016,Usability,clear,clearly,21016,"urce code or can get it if you; want it, that you can change the software or use pieces of it in new; free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you; these rights or asking you to surrender the rights. Therefore, you have; certain responsibilities if you distribute copies of the software, or if; you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must pass on to the recipients the same; freedoms that you received. You must make sure that they, too, receive; or can get the source code. And you must show them these terms so they; know their rights. Developers that use the GNU GPL protect your rights with two steps:; (1) assert copyright on the software, and (2) offer you this License; giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains; that there is no warranty for this free software. For both users' and; authors' sake, the GPL requires that modified versions be marked as; changed, so that their problems will not be attributed erroneously to; authors of previous versions. Some devices are designed to deny users access to install or run; modified versions of the software inside them, although the manufacturer; can do so. This is fundamentally incompatible with the aim of; protecting users' freedom to change the software. The systematic; pattern of such abuse occurs in the area of products for individuals to; use, which is precisely where it is most unacceptable. Therefore, we; have designed this version of the GPL to prohibit the practice for those; products. If such problems arise substantially in other domains, we; stand ready to extend this provision to those domains in future versions; of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software pate",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt:33026,Usability,clear,clear,33026,"se, on a durable physical; medium customarily used for software interchange, for a price no; more than your reasonable cost of physically performing this; conveying of source, or (2) access to copy the; Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the; written offer to provide the Corresponding Source. This; alternative is allowed only occasionally and noncommercially, and; only if you received the object code with such an offer, in accord; with subsection 6b. d) Convey the object code by offering access from a designated; place (gratis or for a charge), and offer equivalent access to the; Corresponding Source in the same way through the same place at no; further charge. You need not require recipients to copy the; Corresponding Source along with the object code. If the place to; copy the object code is a network server, the Corresponding Source; may be on a different server (operated by you or a third party); that supports equivalent copying facilities, provided you maintain; clear directions next to the object code saying where to find the; Corresponding Source. Regardless of what server hosts the; Corresponding Source, you remain obligated to ensure that it is; available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided; you inform other peers where the object code and Corresponding; Source of the work are being offered to the general public at no; charge under subsection 6d. A separable portion of the object code, whose source code is excluded; from the Corresponding Source as a System Library, need not be; included in conveying the object code work. A ""User Product"" is either (1) a ""consumer product"", which means any; tangible personal property which is normally used for personal, family,; or household purposes, or (2) anything designed or sold for incorporation; into a dwelling. In determining whether a product is a co",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/licence.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/licence.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt:1035,Availability,avail,available,1035,"; l i b Q G L V i e w e r. 	 	 Version 2.8.0. Packaged on March 13, 2022. Copyright (C) 2002-2014 Gilles Debunne. All rights reserved.; http://www.libqglviewer.com; Send e-mail to contact@libqglviewer.com. libQGLViewer is a C++ library based on Qt that eases the creation of OpenGL 3D viewers. It provides some of the typical 3D viewer functionalities, such as the possibility to; move the camera using the mouse, which lacks in most of the other APIs. Other features; include mouse manipulated frames, interpolated keyFrames, object selection, stereo ; display, screenshot saving and much more. It can be used by OpenGL beginners as well as; to create complex applications, being fully customizable and easy to extend. Based on the Qt toolkit, it compiles on any architecture (Unix-Linux, Mac, Windows). ; Full reference documentation and many examples are provided. libQGLViewer does not ; display 3D scenes in various formats, but it can be the base for the coding of such a ; viewer. libQGLViewer uses dual licensing: it is freely available under the terms of the GNU-GPL; license for open source software development, while commercial applications can apply; for a commercial license. The library's main functionalities are:. - A camera trackball to intuitively move the camera in the scene.; - Screenshot saving in different file formats (JPG, PNG, EPS...).; - Easy scene object selection and manipulation using the mouse.; - Definition and replay of keyFrame paths.; - Stereo display (provided that your hardware supports it).; - Clean, well-designed and easily extendable API.; - Many examples and a complete reference documentation. . See the doc/index.html page for details. ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/readMe.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt:712,Modifiability,extend,extend,712,"; l i b Q G L V i e w e r. 	 	 Version 2.8.0. Packaged on March 13, 2022. Copyright (C) 2002-2014 Gilles Debunne. All rights reserved.; http://www.libqglviewer.com; Send e-mail to contact@libqglviewer.com. libQGLViewer is a C++ library based on Qt that eases the creation of OpenGL 3D viewers. It provides some of the typical 3D viewer functionalities, such as the possibility to; move the camera using the mouse, which lacks in most of the other APIs. Other features; include mouse manipulated frames, interpolated keyFrames, object selection, stereo ; display, screenshot saving and much more. It can be used by OpenGL beginners as well as; to create complex applications, being fully customizable and easy to extend. Based on the Qt toolkit, it compiles on any architecture (Unix-Linux, Mac, Windows). ; Full reference documentation and many examples are provided. libQGLViewer does not ; display 3D scenes in various formats, but it can be the base for the coding of such a ; viewer. libQGLViewer uses dual licensing: it is freely available under the terms of the GNU-GPL; license for open source software development, while commercial applications can apply; for a commercial license. The library's main functionalities are:. - A camera trackball to intuitively move the camera in the scene.; - Screenshot saving in different file formats (JPG, PNG, EPS...).; - Easy scene object selection and manipulation using the mouse.; - Definition and replay of keyFrame paths.; - Stereo display (provided that your hardware supports it).; - Clean, well-designed and easily extendable API.; - Many examples and a complete reference documentation. . See the doc/index.html page for details. ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/readMe.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt:1569,Modifiability,extend,extendable,1569,"; l i b Q G L V i e w e r. 	 	 Version 2.8.0. Packaged on March 13, 2022. Copyright (C) 2002-2014 Gilles Debunne. All rights reserved.; http://www.libqglviewer.com; Send e-mail to contact@libqglviewer.com. libQGLViewer is a C++ library based on Qt that eases the creation of OpenGL 3D viewers. It provides some of the typical 3D viewer functionalities, such as the possibility to; move the camera using the mouse, which lacks in most of the other APIs. Other features; include mouse manipulated frames, interpolated keyFrames, object selection, stereo ; display, screenshot saving and much more. It can be used by OpenGL beginners as well as; to create complex applications, being fully customizable and easy to extend. Based on the Qt toolkit, it compiles on any architecture (Unix-Linux, Mac, Windows). ; Full reference documentation and many examples are provided. libQGLViewer does not ; display 3D scenes in various formats, but it can be the base for the coding of such a ; viewer. libQGLViewer uses dual licensing: it is freely available under the terms of the GNU-GPL; license for open source software development, while commercial applications can apply; for a commercial license. The library's main functionalities are:. - A camera trackball to intuitively move the camera in the scene.; - Screenshot saving in different file formats (JPG, PNG, EPS...).; - Easy scene object selection and manipulation using the mouse.; - Definition and replay of keyFrame paths.; - Stereo display (provided that your hardware supports it).; - Clean, well-designed and easily extendable API.; - Many examples and a complete reference documentation. . See the doc/index.html page for details. ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/readMe.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt:1255,Usability,intuit,intuitively,1255,"; l i b Q G L V i e w e r. 	 	 Version 2.8.0. Packaged on March 13, 2022. Copyright (C) 2002-2014 Gilles Debunne. All rights reserved.; http://www.libqglviewer.com; Send e-mail to contact@libqglviewer.com. libQGLViewer is a C++ library based on Qt that eases the creation of OpenGL 3D viewers. It provides some of the typical 3D viewer functionalities, such as the possibility to; move the camera using the mouse, which lacks in most of the other APIs. Other features; include mouse manipulated frames, interpolated keyFrames, object selection, stereo ; display, screenshot saving and much more. It can be used by OpenGL beginners as well as; to create complex applications, being fully customizable and easy to extend. Based on the Qt toolkit, it compiles on any architecture (Unix-Linux, Mac, Windows). ; Full reference documentation and many examples are provided. libQGLViewer does not ; display 3D scenes in various formats, but it can be the base for the coding of such a ; viewer. libQGLViewer uses dual licensing: it is freely available under the terms of the GNU-GPL; license for open source software development, while commercial applications can apply; for a commercial license. The library's main functionalities are:. - A camera trackball to intuitively move the camera in the scene.; - Screenshot saving in different file formats (JPG, PNG, EPS...).; - Easy scene object selection and manipulation using the mouse.; - Definition and replay of keyFrame paths.; - Stereo display (provided that your hardware supports it).; - Clean, well-designed and easily extendable API.; - Many examples and a complete reference documentation. . See the doc/index.html page for details. ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/readMe.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/readMe.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt:148,Availability,error,error,148,"cmake_minimum_required(VERSION 3.22); project(QGLViewer VERSION 2.8.0). # Same checks as Sofa.GUI.Qt; # i.e find Qt6, then if not, Qt5, then if not error; find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt5Core_FOUND); sofa_find_package(Qt5 COMPONENTS Core Gui Xml OpenGL Widgets REQUIRED); set(QGLViewer_QT_TARGETS Qt5::Core Qt5::Gui Qt5::Xml Qt5::OpenGL Qt5::Widgets); elseif (Qt6Core_FOUND); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets Xml REQUIRED); set(QGLViewer_QT_TARGETS ${QGLViewer_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets Qt::Xml); endif(). set(MOC_HEADER_FILES; camera.h; frame.h; keyFrameInterpolator.h; manipulatedCameraFrame.h; manipulatedFrame.h; qglviewer.h; ); # These header files don't need to be processed by the moc.; set(HEADER_FILES; VRender/AxisAlignedBox.h; VRender/Exporter.h; VRender/NVector3.h; VRender/Optimizer.h; VRender/ParserGL.h; VRender/Primitive.h; VRender/PrimitivePositioning.h; VRender/SortMethod.h; VRender/Types.h; VRender/VRender.h; VRender/Vector2.h; VRender/Vector3.h; VRender/gpc.h; config.h; constraint.h; domUtils.h; mouseGrabber.h; quaternion.h; vec.h; camera.h; frame.h; keyFrameInterpolator.h; manipulatedCameraFrame.h; manipulatedFrame.h; qglviewer.h; ); set(SOURCE_FILES; VRender/BSPSortMethod.cpp; VRender/BackFaceCullingOptimizer.cpp; VRender/EPSExporter.cpp; VRender/Exporter.cpp; VRender/FIGExporter.cpp; VRender/NVector3.cpp; VRender/ParserGL.cpp; VRender/Primitive.cpp; VRender/PrimitivePositioning.cpp; VRender/TopologicalSortMethod.cpp; VRender/VRender.cpp; VRender/Vector2.cpp; VRender/Vector3.cpp; VRender/VisibilityOptimizer.cpp; VRender/gpc.cpp; camera.cpp; constraint.cpp; frame.cpp; keyFrameInterpolator.cpp; manipulatedCameraFrame.cpp; manipulatedFrame.cpp; mouseGrabber.cpp; qglviewer.cpp; quaternion.cpp; saveSnapshot.cpp; vec.cpp; ); set(UI_FILES; ImageInterface.ui; VRenderInterface.ui; ). if (",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt:3517,Deployability,deploy,deployment,3517,"der/Vector2.cpp; VRender/Vector3.cpp; VRender/VisibilityOptimizer.cpp; VRender/gpc.cpp; camera.cpp; constraint.cpp; frame.cpp; keyFrameInterpolator.cpp; manipulatedCameraFrame.cpp; manipulatedFrame.cpp; mouseGrabber.cpp; qglviewer.cpp; quaternion.cpp; saveSnapshot.cpp; vec.cpp; ); set(UI_FILES; ImageInterface.ui; VRenderInterface.ui; ). if (Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt5_wrap_ui(FORM_FILES ${UI_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt6_wrap_ui(FORM_FILES ${UI_FILES}); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${MOC_FILES} ${FORM_FILES} ${SOURCE_FILES}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER ""SofaExtlibs""); target_link_libraries(${PROJECT_NAME} PUBLIC ${QGLViewer_QT_TARGETS}); if(TARGET OpenGL::GL AND TARGET OpenGL::GLU) # Imported targets defined since CMake 3.8; target_link_libraries(${PROJECT_NAME} PUBLIC OpenGL::GL OpenGL::GLU); else(); target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENGL_LIBRARIES}); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${OPENGL_INCLUDE_DIR}); endif(). target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>""); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<INSTALL_INTERFACE:include/extlibs/${PROJECT_NAME}>""). if(WIN32); target_compile_options(${PROJECT_NAME} PRIVATE ""-DCREATE_QGLVIEWER_DLL""); target_compile_options(${PROJECT_NAME} PRIVATE ""/wd4996"") # remove warnings about deprecation (CRT,etc); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ""_d""). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME}; INCLUDE_INSTALL_DIR ""extlibs""; ). # Qt deployment; if(CMAKE_SYSTEM_NAME STREQUAL Windows); include(windeployqt); windeployqt(${PROJECT_NAME} ${CMAKE_BINARY_DIR}/bin bin); endif(); ",MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt:1164,Modifiability,config,config,1164,e(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(). if (Qt5Core_FOUND); sofa_find_package(Qt5 COMPONENTS Core Gui Xml OpenGL Widgets REQUIRED); set(QGLViewer_QT_TARGETS Qt5::Core Qt5::Gui Qt5::Xml Qt5::OpenGL Qt5::Widgets); elseif (Qt6Core_FOUND); sofa_find_package(Qt6 COMPONENTS Gui GuiTools Widgets WidgetsTools OpenGLWidgets Xml REQUIRED); set(QGLViewer_QT_TARGETS ${QGLViewer_QT_TARGETS} Qt::Core Qt::Gui Qt::Widgets Qt::OpenGLWidgets Qt::Xml); endif(). set(MOC_HEADER_FILES; camera.h; frame.h; keyFrameInterpolator.h; manipulatedCameraFrame.h; manipulatedFrame.h; qglviewer.h; ); # These header files don't need to be processed by the moc.; set(HEADER_FILES; VRender/AxisAlignedBox.h; VRender/Exporter.h; VRender/NVector3.h; VRender/Optimizer.h; VRender/ParserGL.h; VRender/Primitive.h; VRender/PrimitivePositioning.h; VRender/SortMethod.h; VRender/Types.h; VRender/VRender.h; VRender/Vector2.h; VRender/Vector3.h; VRender/gpc.h; config.h; constraint.h; domUtils.h; mouseGrabber.h; quaternion.h; vec.h; camera.h; frame.h; keyFrameInterpolator.h; manipulatedCameraFrame.h; manipulatedFrame.h; qglviewer.h; ); set(SOURCE_FILES; VRender/BSPSortMethod.cpp; VRender/BackFaceCullingOptimizer.cpp; VRender/EPSExporter.cpp; VRender/Exporter.cpp; VRender/FIGExporter.cpp; VRender/NVector3.cpp; VRender/ParserGL.cpp; VRender/Primitive.cpp; VRender/PrimitivePositioning.cpp; VRender/TopologicalSortMethod.cpp; VRender/VRender.cpp; VRender/Vector2.cpp; VRender/Vector3.cpp; VRender/VisibilityOptimizer.cpp; VRender/gpc.cpp; camera.cpp; constraint.cpp; frame.cpp; keyFrameInterpolator.cpp; manipulatedCameraFrame.cpp; manipulatedFrame.cpp; mouseGrabber.cpp; qglviewer.cpp; quaternion.cpp; saveSnapshot.cpp; vec.cpp; ); set(UI_FILES; ImageInterface.ui; VRenderInterface.ui; ). if (Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); qt5_wrap_ui(FORM_FILES ${UI_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}),MatchSource.DOCS,Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:7,Deployability,install,install,7,"# Post-install scripts; if(NOT SOFA_BUILD_RELEASE_PACKAGE); return(); endif(). find_package(Qt5 COMPONENTS Gui REQUIRED); get_target_property(qt5gui_loc Qt5::Gui LOCATION_RELEASE); get_filename_component(QT_LIB_DIR ""${qt5gui_loc}"" DIRECTORY); if(QT_LIB_DIR MATCHES ""\.framework$""); get_filename_component(QT_LIB_DIR ""${QT_LIB_DIR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n P",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:737,Deployability,install,install,737,"# Post-install scripts; if(NOT SOFA_BUILD_RELEASE_PACKAGE); return(); endif(). find_package(Qt5 COMPONENTS Gui REQUIRED); get_target_property(qt5gui_loc Qt5::Gui LOCATION_RELEASE); get_filename_component(QT_LIB_DIR ""${qt5gui_loc}"" DIRECTORY); if(QT_LIB_DIR MATCHES ""\.framework$""); get_filename_component(QT_LIB_DIR ""${QT_LIB_DIR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n P",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:918,Deployability,install,install,918,"# Post-install scripts; if(NOT SOFA_BUILD_RELEASE_PACKAGE); return(); endif(). find_package(Qt5 COMPONENTS Gui REQUIRED); get_target_property(qt5gui_loc Qt5::Gui LOCATION_RELEASE); get_filename_component(QT_LIB_DIR ""${qt5gui_loc}"" DIRECTORY); if(QT_LIB_DIR MATCHES ""\.framework$""); get_filename_component(QT_LIB_DIR ""${QT_LIB_DIR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n P",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:1313,Deployability,install,install,1313,"${qt5gui_loc}"" DIRECTORY); if(QT_LIB_DIR MATCHES ""\.framework$""); get_filename_component(QT_LIB_DIR ""${QT_LIB_DIR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND bash; \""${CMAKE_CURRENT_LIST_DIR}/windows-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:1605,Deployability,install,install,1605,"IR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND bash; \""${CMAKE_CURRENT_LIST_DIR}/windows-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; )""; COMPONENT resources); endif(); ",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:1905,Deployability,install,install,1905,"IR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND bash; \""${CMAKE_CURRENT_LIST_DIR}/windows-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; )""; COMPONENT resources); endif(); ",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:2086,Deployability,install,install,2086,"IR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND bash; \""${CMAKE_CURRENT_LIST_DIR}/windows-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; )""; COMPONENT resources); endif(); ",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:619,Integrability,message,message,619,"# Post-install scripts; if(NOT SOFA_BUILD_RELEASE_PACKAGE); return(); endif(). find_package(Qt5 COMPONENTS Gui REQUIRED); get_target_property(qt5gui_loc Qt5::Gui LOCATION_RELEASE); get_filename_component(QT_LIB_DIR ""${qt5gui_loc}"" DIRECTORY); if(QT_LIB_DIR MATCHES ""\.framework$""); get_filename_component(QT_LIB_DIR ""${QT_LIB_DIR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n P",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt:658,Integrability,message,message,658,"# Post-install scripts; if(NOT SOFA_BUILD_RELEASE_PACKAGE); return(); endif(). find_package(Qt5 COMPONENTS Gui REQUIRED); get_target_property(qt5gui_loc Qt5::Gui LOCATION_RELEASE); get_filename_component(QT_LIB_DIR ""${qt5gui_loc}"" DIRECTORY); if(QT_LIB_DIR MATCHES ""\.framework$""); get_filename_component(QT_LIB_DIR ""${QT_LIB_DIR}"" DIRECTORY); endif(); get_target_property(qjpeg_loc Qt5::QJpegPlugin LOCATION_RELEASE); get_filename_component(imageformats_dir ""${qjpeg_loc}"" DIRECTORY); get_filename_component(plugins_dir ""${imageformats_dir}"" DIRECTORY); get_filename_component(QT_DATA_DIR ""${plugins_dir}"" DIRECTORY). message(""QT_LIB_DIR = ${QT_LIB_DIR}""); message(""QT_DATA_DIR = ${QT_DATA_DIR}""). if(CMAKE_SYSTEM_NAME STREQUAL Linux); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n Prefix = ..\\n Plugins = bin\\n LibraryExecutables = bin\""; )""; COMPONENT resources); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/linux-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""${CMAKE_BINARY_DIR}\""; \""\$ENV{DESTDIR\}\${CMAKE_INSTALL_PREFIX\}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); elseif(CMAKE_SYSTEM_NAME STREQUAL Darwin); if(SOFA_BUILD_APP_BUNDLE); include(macdeployqt) # set MACDEPLOYQT_EXECUTABLE; install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/../..\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; \""${MACDEPLOYQT_EXECUTABLE}\""; )""; COMPONENT resources); else(); install(CODE ""execute_process(COMMAND /bin/bash; \""${CMAKE_CURRENT_LIST_DIR}/macos-postinstall-fixup.sh\""; \""${CMAKE_CURRENT_LIST_DIR}\""; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}\""; \""${QT_LIB_DIR}\""; \""${QT_DATA_DIR}\""; )""; COMPONENT resources); endif(); elseif(CMAKE_SYSTEM_NAME STREQUAL Windows); install(CODE ""file(WRITE; \""\$ENV{DESTDIR}\${CMAKE_INSTALL_PREFIX}/bin/qt.conf\""; \""[Paths]\\n P",MatchSource.DOCS,tools/postinstall-fixup/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/postinstall-fixup/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:160,Deployability,configurat,configuration,160,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:626,Deployability,configurat,configuration,626,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:1798,Deployability,install,install,1798,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:121,Integrability,message,message,121,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:206,Integrability,message,message,206,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:591,Integrability,message,message,591,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:1144,Integrability,depend,dependencies,1144,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:1377,Integrability,depend,dependencies,1377,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:1637,Integrability,depend,dependencies,1637,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:160,Modifiability,config,configuration,160,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt:626,Modifiability,config,configuration,626,"cmake_minimum_required(VERSION 3.22). project(stylecheck.exe). if( CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR ); message(STATUS ""Stylecheck out-of-tree configuration""). if( NOT DEFINED LLVM_PATH ); message(FATAL_ERROR ""LLVM_PATH must be provided using -DLLVM_PATH=<path to llvm package root>""); endif(). link_directories(${LLVM_PATH}/lib); include_directories(${LLVM_PATH}/include). add_definitions(; -D__STDC_LIMIT_MACROS; -D__STDC_CONSTANT_MACROS; ). if( CMAKE_SYSTEM_NAME MATCHES ""Darwin"" ); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fvisibility-inlines-hidden""); endif(); else(); message(STATUS ""Stylecheck in-tree configuration""); endif(). add_executable(stylecheck.exe; stylecheck.cpp; utilsllvm.cpp; fileutils.cpp; ). if( MSVC ); # Disable warnings for Stylecheck; add_definitions(; -wd4722 # Suppress ''destructor'' : destructor never returns, potential memory leak; ). # Put project in solution folder; set_target_properties(stylecheck; PROPERTIES FOLDER ""Clang executables""; ); else(); # Disable RTTI to be compatible with LLVM/Clang libraries.; set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -std=c++11 -fno-rtti""); endif(). # Clang dependencies.; target_link_libraries(stylecheck.exe; clangTooling ; clangFrontend; clangSerialization; clangDriver; clangParse; clangSema; clangAnalysis; clangAST; clangBasic; clangEdit; clangLex; clangASTMatchers ; clang; ). # LLVM dependencies.; target_link_libraries(stylecheck.exe; #LLVMSupport; #LLVMTransformUtils; #LLVMMC # Object, Support; #LLVMMCParser # MC, Support; #LLVMObject # Support; #LLVMCore # Support; #LLVMBitReader; #LLVMScalarOpts; LLVMSupport; LLVMOption; ). # Platform dependencies.; if( WIN32 ); target_link_libraries(stylecheck.exe; shlwapi; ); else(); target_link_libraries(stylecheck.exe; pthread; dl; ncurses; z; ); endif(). install(TARGETS stylecheck.exe; RUNTIME DESTINATION bin); ",MatchSource.DOCS,tools/stylechecker/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/stylechecker/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/ColladaSceneLoader.html:55,Usability,simpl,simple,55,". Plugin example; Plugin Example; This example shows a simple pendulum, as shown in the following image.; More documentation can be found in doc/index.html. ",MatchSource.DOCS,applications/plugins/SofaAssimp/ColladaSceneLoader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/ColladaSceneLoader.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html:107,Modifiability,plugin,plugin,107,". Plugin Image; PluginImage Load. Load simply an image with ImageContainer component, the main tool in the plugin image. It can load many types of image, video, etc... And the ImageViewer second main tool allow to display image 2D/3D, vector, tensor, video, etc... Refer to other loadXXX.scn for more examples. ",MatchSource.DOCS,applications/plugins/image/examples/loadHDR.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html:128,Performance,load,load,128,". Plugin Image; PluginImage Load. Load simply an image with ImageContainer component, the main tool in the plugin image. It can load many types of image, video, etc... And the ImageViewer second main tool allow to display image 2D/3D, vector, tensor, video, etc... Refer to other loadXXX.scn for more examples. ",MatchSource.DOCS,applications/plugins/image/examples/loadHDR.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html:280,Performance,load,loadXXX,280,". Plugin Image; PluginImage Load. Load simply an image with ImageContainer component, the main tool in the plugin image. It can load many types of image, video, etc... And the ImageViewer second main tool allow to display image 2D/3D, vector, tensor, video, etc... Refer to other loadXXX.scn for more examples. ",MatchSource.DOCS,applications/plugins/image/examples/loadHDR.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html:39,Usability,simpl,simply,39,". Plugin Image; PluginImage Load. Load simply an image with ImageContainer component, the main tool in the plugin image. It can load many types of image, video, etc... And the ImageViewer second main tool allow to display image 2D/3D, vector, tensor, video, etc... Refer to other loadXXX.scn for more examples. ",MatchSource.DOCS,applications/plugins/image/examples/loadHDR.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/loadHDR.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/marchingCubes.html:100,Modifiability,plugin,plugin,100,". Image Plugin; Image marchingCube Example; This marchingCube Example shows an example of the Image plugin, which demonstrates the algorithm of MarchingCube.; It constructs a surface mesh from a 3D medical image. A blur filter is applied to the image. ; To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/marchingCubes.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/marchingCubes.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/marchingCubes.html:277,Performance,load,load,277,". Image Plugin; Image marchingCube Example; This marchingCube Example shows an example of the Image plugin, which demonstrates the algorithm of MarchingCube.; It constructs a surface mesh from a 3D medical image. A blur filter is applied to the image. ; To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/marchingCubes.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/marchingCubes.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage.html:92,Modifiability,plugin,plugin,92,". Image Plugin; Image MeshToImage Example; This example scene shows an example of the Image plugin, which computes a rasterization image from a mesh. ; It can be seen as an inverse processing of marchingCube: a 3D voxel image (binary) is created from the mesh so that; the voxel values inside the mesh object are 1 and the ones outside the mesh object are 0. You can visualize the cut plan in the ; mesh by setting it in the ImageViewer. . To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/MeshToImage.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage.html:463,Performance,load,load,463,". Image Plugin; Image MeshToImage Example; This example scene shows an example of the Image plugin, which computes a rasterization image from a mesh. ; It can be seen as an inverse processing of marchingCube: a 3D voxel image (binary) is created from the mesh so that; the voxel values inside the mesh object are 1 and the ones outside the mesh object are 0. You can visualize the cut plan in the ; mesh by setting it in the ImageViewer. . To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/MeshToImage.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage_Frame.html:98,Modifiability,plugin,plugin,98,". Image Plugin; Image MeshToImage_Frame Example. This example scene shows an example of the Image plugin, which computes a rasterization image from a mesh and generate uniformly sampled frames , combined with the Flexible plugin, which applies continuum mechanics to these frames. More documentation can be found in ../doc/index.html. More documentation can be found in ../doc/index.html. ",MatchSource.DOCS,applications/plugins/image/examples/MeshToImage_Frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage_Frame.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage_Frame.html:222,Modifiability,plugin,plugin,222,". Image Plugin; Image MeshToImage_Frame Example. This example scene shows an example of the Image plugin, which computes a rasterization image from a mesh and generate uniformly sampled frames , combined with the Flexible plugin, which applies continuum mechanics to these frames. More documentation can be found in ../doc/index.html. More documentation can be found in ../doc/index.html. ",MatchSource.DOCS,applications/plugins/image/examples/MeshToImage_Frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/MeshToImage_Frame.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/multipleFilters.html:93,Modifiability,plugin,plugin,93,". PluginImage; PluginImage multipleFilters Example; This scene shows an example of the image plugin. It demonstrates how to use multiple filters on one image. In this example,; a blur filter is first applied to the 3D image, after which a resize filter is applied and finally a structure tensors filter is used. To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/multipleFilters.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/multipleFilters.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/multipleFilters.html:335,Performance,load,load,335,". PluginImage; PluginImage multipleFilters Example; This scene shows an example of the image plugin. It demonstrates how to use multiple filters on one image. In this example,; a blur filter is first applied to the 3D image, after which a resize filter is applied and finally a structure tensors filter is used. To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/multipleFilters.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/multipleFilters.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/openMeshToImage.html:93,Modifiability,plugin,plugin,93,". PluginImage; PluginImage openMeshToImage Example; This scene shows an example of the image plugin. It constructs a 3D voxel image from a surface mesh (cf. MeshToImage.scn) however; in this case the mesh given is not a closed one, which means with holes. It shows also the possiblity of filling holes in the mesh; from the 3D voxel image. ; To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/openMeshToImage.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/openMeshToImage.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/openMeshToImage.html:365,Performance,load,load,365,". PluginImage; PluginImage openMeshToImage Example; This scene shows an example of the image plugin. It constructs a 3D voxel image from a surface mesh (cf. MeshToImage.scn) however; in this case the mesh given is not a closed one, which means with holes. It shows also the possiblity of filling holes in the mesh; from the 3D voxel image. ; To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/openMeshToImage.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/openMeshToImage.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_Frames.html:92,Modifiability,plugin,plugin,92,". PluginImage; PluginImage Sampler_Frames Example; This scene shows an example of the image plugin, which samples an object represented by an image with rigid frames.; To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/sampler_Frames.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_Frames.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_Frames.html:191,Performance,load,load,191,". PluginImage; PluginImage Sampler_Frames Example; This scene shows an example of the image plugin, which samples an object represented by an image with rigid frames.; To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/sampler_Frames.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_Frames.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_HexaFEM.html:113,Modifiability,plugin,plugin,113,". PluginImage; PluginImage Sampler_HexaFEM Example. This scene shows another example of the sampler of the image plugin. A FEM model is used for the simulation of the object. . Run and shift+rightclick the object to get it moving. . To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/sampler_HexaFEM.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_HexaFEM.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_HexaFEM.html:256,Performance,load,load,256,". PluginImage; PluginImage Sampler_HexaFEM Example. This scene shows another example of the sampler of the image plugin. A FEM model is used for the simulation of the object. . Run and shift+rightclick the object to get it moving. . To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/sampler_HexaFEM.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_HexaFEM.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_meshSpring.html:112,Modifiability,plugin,plugin,112,". PluginImage; PluginImage Sampler_meshSpring Example. This scene shows anohter example of the sampler of image plugin. It shows the use of the sampler with meshSpring model for simulation. . Run and shift+rightclick the object to get it moving. . To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/sampler_meshSpring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_meshSpring.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_meshSpring.html:271,Performance,load,load,271,". PluginImage; PluginImage Sampler_meshSpring Example. This scene shows anohter example of the sampler of image plugin. It shows the use of the sampler with meshSpring model for simulation. . Run and shift+rightclick the object to get it moving. . To run it, you need to load image Plugin using the Plugin Manager of the GUI, or the command line. ",MatchSource.DOCS,applications/plugins/image/examples/sampler_meshSpring.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/sampler_meshSpring.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/smoothingengine.html:138,Availability,avail,available,138,". Plugin Image; PluginImage smoothingEngine. This scene shows an example of use of the ImageFilter component. Here we use one of the blur available in the ImageFilter, which is a classical gaussian blur. ",MatchSource.DOCS,applications/plugins/image/examples/smoothingengine.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/examples/smoothingengine.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1472,Availability,avail,available,1472,"D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an Og",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:4678,Availability,down,down,4678,"in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation directly from the collada file.; The SkeletalMotionProjectiveConstraint automatically interpolates between animation frames, play with the animation time step to slown down or speed up the animation. As you can see on the other example below, the woman's hair does not fit her head very well because its coordinates system belongs to a dummy object not supported for the moment. A skinned and bones animated mesh representing a woman. Intellectual property and rights. Author. Olivier CARRE. Contact. olivier.carre@inria.fr or sofa-devel@lists.gforge.inria.fr; . License. Your can distribute this plugin under the same license as the core of SOFA, or any other license of your choice. Sponsors. Assimp Library. ",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:535,Deployability,pipeline,pipeline,535,". ColladaSceneLoader Plugin Documentation. ColladaSceneLoader Plugin Documentation. 		A skinned and bones animated character walking. Introduction; How to use; Examples; Intellectual property and rights. Introduction; This page explains how to use the ColladaSceneLoader plugin to load collada scene (.dae) into Sofa. What is Collada ?.       COLLADA defines an XML-based schema to make it easy to transport 3D assets between applications ; - enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For eve",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1043,Deployability,configurat,configuration,1043,"ocumentation. ColladaSceneLoader Plugin Documentation. 		A skinned and bones animated character walking. Introduction; How to use; Examples; Intellectual property and rights. Introduction; This page explains how to use the ColladaSceneLoader plugin to load collada scene (.dae) into Sofa. What is Collada ?.       COLLADA defines an XML-based schema to make it easy to transport 3D assets between applications ; - enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneCo",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:3528,Integrability,depend,depends,3528," and if the mesh is not skinned an IdentityMapping to link the MechanicalObject containing the mesh vertices to the OglModel (this step is ; automatically done by the SkinningMapping if we have a skinned mesh). Examples.       The file example.scn (located in the folder : ColladaSceneLoader/Demos/ ) which loads the collada file ""example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:271,Modifiability,plugin,plugin,271,". ColladaSceneLoader Plugin Documentation. ColladaSceneLoader Plugin Documentation. 		A skinned and bones animated character walking. Introduction; How to use; Examples; Intellectual property and rights. Introduction; This page explains how to use the ColladaSceneLoader plugin to load collada scene (.dae) into Sofa. What is Collada ?.       COLLADA defines an XML-based schema to make it easy to transport 3D assets between applications ; - enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For eve",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1003,Modifiability,plugin,plugin,1003,"ocumentation. ColladaSceneLoader Plugin Documentation. 		A skinned and bones animated character walking. Introduction; How to use; Examples; Intellectual property and rights. Introduction; This page explains how to use the ColladaSceneLoader plugin to load collada scene (.dae) into Sofa. What is Collada ?.       COLLADA defines an XML-based schema to make it easy to transport 3D assets between applications ; - enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneCo",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1043,Modifiability,config,configuration,1043,"ocumentation. ColladaSceneLoader Plugin Documentation. 		A skinned and bones animated character walking. Introduction; How to use; Examples; Intellectual property and rights. Introduction; This page explains how to use the ColladaSceneLoader plugin to load collada scene (.dae) into Sofa. What is Collada ?.       COLLADA defines an XML-based schema to make it easy to transport 3D assets between applications ; - enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneCo",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1397,Modifiability,plugin,plugin,1397,"D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an Og",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1457,Modifiability,plugin,plugin,1457,"D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an Og",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:2889,Modifiability,plugin,plugin,2889,"ou will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an OglModel component to draw the mesh on the screen and if the mesh is not skinned an IdentityMapping to link the MechanicalObject containing the mesh vertices to the OglModel (this step is ; automatically done by the SkinningMapping if we have a skinned mesh). Examples.       The file example.scn (located in the folder : ColladaSceneLoader/Demos/ ) which loads the collada file ""example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is v",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:5107,Modifiability,plugin,plugin,5107,"in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation directly from the collada file.; The SkeletalMotionProjectiveConstraint automatically interpolates between animation frames, play with the animation time step to slown down or speed up the animation. As you can see on the other example below, the woman's hair does not fit her head very well because its coordinates system belongs to a dummy object not supported for the moment. A skinned and bones animated mesh representing a woman. Intellectual property and rights. Author. Olivier CARRE. Contact. olivier.carre@inria.fr or sofa-devel@lists.gforge.inria.fr; . License. Your can distribute this plugin under the same license as the core of SOFA, or any other license of your choice. Sponsors. Assimp Library. ",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:281,Performance,load,load,281,". ColladaSceneLoader Plugin Documentation. ColladaSceneLoader Plugin Documentation. 		A skinned and bones animated character walking. Introduction; How to use; Examples; Intellectual property and rights. Introduction; This page explains how to use the ColladaSceneLoader plugin to load collada scene (.dae) into Sofa. What is Collada ?.       COLLADA defines an XML-based schema to make it easy to transport 3D assets between applications ; - enabling diverse 3D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For eve",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1408,Performance,load,load,1408,"D authoring and content processing tools to be combined into a production pipeline. ; The intermediate language provides comprehensive encoding of visual scenes including: geometry, shaders and effects, physics, animation, kinematics, ; and even multiple version representations of the same asset.COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an Og",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:1826,Performance,load,load,1826,".COLLADA FX enables leading 3D authoring tools to work effectively together to create shader ; and effects applications and assets to be authored and packaged using OpenGL Shading Language, Cg, CgFX, and DirectX FX. How to use.       To use this plugin, you just have to go in you sofa configuration file (sofa-local.prf or if you have not this file, use sofa-default.prf in the sofa root directory) and uncomment or add this following line :. DEFINES += SOFA_HAVE_PLUGIN_COLLADA. If you are a Visual Studio user you must generate sofa projects again using the corresponding batch file (Project VC*.bat).       Build the ColladaSceneLoader plugin and load the resulting dynamic library with the Sofa plugin manager available in runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an OglModel component to draw the mesh on the screen and if the mesh is not skinned an IdentityMapping to link the MechanicalObject containing the mesh vertices to the OglModel (this step is ; automatically done by the SkinningMapping if we have a skinned mesh). Examples.       The file example.scn (l",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:2290,Performance,load,loader,2290,"runSofa or in the sofa Modeler (in the main toolbar : Edit / Plugin Manager...).; You are now able to use the new SceneColladaLoader component. In the Modeler, you can find it in the Loader category. To do so, drag and drop the component into your scene graph and fill up the data ""filename"" with ; the path of the collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an OglModel component to draw the mesh on the screen and if the mesh is not skinned an IdentityMapping to link the MechanicalObject containing the mesh vertices to the OglModel (this step is ; automatically done by the SkinningMapping if we have a skinned mesh). Examples.       The file example.scn (located in the folder : ColladaSceneLoader/Demos/ ) which loads the collada file ""example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm anim",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:2815,Performance,load,loads,2815," collada scene you want to load. If you launch runSofa with your scene you will see your SceneColladaLoader component and a new generated node below which contains the whole collada scene.       For every skinned mesh, the SceneColladaLoader component creates a MechanicalObject containing the bones used to skin the mesh, a SkeletalMotionContraint containing the whole bones animation ; and a SkinningMapping in order to apply the skinning on the mesh.; For every mesh, skinned or not, the loader also creates components needed for visualisation : a MechanicalObject with the mesh vertices, a MeshTopology containing the mesh edges, triangles and ; quads, an OglModel component to draw the mesh on the screen and if the mesh is not skinned an IdentityMapping to link the MechanicalObject containing the mesh vertices to the OglModel (this step is ; automatically done by the SkinningMapping if we have a skinned mesh). Examples.       The file example.scn (located in the folder : ColladaSceneLoader/Demos/ ) which loads the collada file ""example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.    ",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:3402,Performance,load,loaded,3402,"pology containing the mesh edges, triangles and ; quads, an OglModel component to draw the mesh on the screen and if the mesh is not skinned an IdentityMapping to link the MechanicalObject containing the mesh vertices to the OglModel (this step is ; automatically done by the SkinningMapping if we have a skinned mesh). Examples.       The file example.scn (located in the folder : ColladaSceneLoader/Demos/ ) which loads the collada file ""example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:3848,Performance,load,load,3848,"example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation directly from the collada file.; The SkeletalMotionProjectiveConstraint automatically interpolates between animation frames, play with the animation time step to slown down or speed up the animation. As you can see on the other example below, the woman's hair does not fit her head very well because its coordinates system belongs",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:3918,Performance,load,load,3918,"ata filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation directly from the collada file.; The SkeletalMotionProjectiveConstraint automatically interpolates between animation frames, play with the animation time step to slown down or speed up the animation. As you can see on the other example below, the woman's hair does not fit her head very well because its coordinates system belongs to a dummy object not supported for the moment. A skinned and bones animated mesh representing a woman. Intellectual property and rights. Author. Olivier C",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:4339,Performance,load,loader,4339,"in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation directly from the collada file.; The SkeletalMotionProjectiveConstraint automatically interpolates between animation frames, play with the animation time step to slown down or speed up the animation. As you can see on the other example below, the woman's hair does not fit her head very well because its coordinates system belongs to a dummy object not supported for the moment. A skinned and bones animated mesh representing a woman. Intellectual property and rights. Author. Olivier CARRE. Contact. olivier.carre@inria.fr or sofa-devel@lists.gforge.inria.fr; . License. Your can distribute this plugin under the same license as the core of SOFA, or any other license of your choice. Sponsors. Assimp Library. ",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html:3876,Usability,simpl,simple,3876,"example.dae"" illustrate pretty well how works the plugin.; Its XML description contains a line with the new SceneColladaLoader component with its filename data filled as below :. <SceneColladaLoader name=""sceneColladaLoader"" filename=""example.dae"" />. The collada file example.dae contains a very basic scene with a mesh skinned with two bones representing an arm which is animated in two step as shown in the following screenshots [took from Blender (software)] :.       . Animation step 1 : Arm is raised. Animation step 2 : Arm is bent. And now the same scene loaded into Sofa :. Animation step 1 : Arm is raised; Animation step 1-2 : Arm animation interpolated by Sofa(animation speed depends of the animation time step); Animation step 2 : Arm is bent. Another example with a scene containing two meshes, one with the same bones as in the previous example and a sphere without skinning.       . The scene in the Sofa Modeler. The same scene in runSofa.       As you can see in Sofa Modeler, the scene to load a collada file is very simple. We have the SceneColladaLoader to load it and, important thing, we also have an EulerSolver ; which will be used by the potential SkeletalMotionProjectiveConstraints to ""play"" the animation updating positions and velocities.; When you launch runSofa with this scene, a new node will be added which contains the whole collada scene. The name of this node is the name you gave to the ; SceneColladaLoader plus the string ""_scene"". On the right picture, the loader generated two child nodes call ""mesh 0"" which contains a mesh without skinning (the sphere), and ; ""mesh 1"" which contains a mesh with skinning and bones animation directly from the collada file.; The SkeletalMotionProjectiveConstraint automatically interpolates between animation frames, play with the animation time step to slown down or speed up the animation. As you can see on the other example below, the woman's hair does not fit her head very well because its coordinates system belongs",MatchSource.DOCS,applications/plugins/SofaAssimp/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1370,Integrability,depend,depends,1370,"ze the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1415,Integrability,depend,dependencies,1415,"ze the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1445,Integrability,depend,dependencies,1445,"and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other lice",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1483,Integrability,depend,dependencies,1483,"; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP reg",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:61,Modifiability,plugin,plugin,61,". SofaHAPI. SofaHAPI. Representative; image of the; SofaHAPI plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:283,Modifiability,plugin,plugin,283,". SofaHAPI. SofaHAPI. Representative; image of the; SofaHAPI plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:373,Modifiability,plugin,plugin,373,". SofaHAPI. SofaHAPI. Representative; image of the; SofaHAPI plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:864,Modifiability,plugin,plugin,864,". SofaHAPI. SofaHAPI. Representative; image of the; SofaHAPI plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1110,Modifiability,plugin,plugin,1110,"operty; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1363,Modifiability,plugin,plugin,1363,"ze the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1387,Modifiability,plugin,plugins,1387,"ze the template, you can:. Copy the SofaHAPI directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh ; to replace SofaHAPI; with MyPlugin in all; the file; names and their content:; utils/changeClassName.sh SofaHAPI MyPlugin; cd examples; ../utils/changeClassName.sh SofaHAPI MyPlugin; cd ../doc/; ../utils/changeClassName.sh SofaHAPI MyPlugin. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:1988,Modifiability,plugin,plugin,1988,"so reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:2242,Modifiability,plugin,plugin,2242,"so reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:2376,Modifiability,plugin,plugin,2376,"so reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:2787,Modifiability,config,config,2787,"so reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html:2637,Usability,simpl,simply,2637,"so reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_SofaHAPI ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_SofaHAPI); {; usePlugin(SofaHAPI) } . if your plugin depends on other plugins, edit file SofaHAPI-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. SofaHAPI.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initSofaHAPI.h. a template of user documentation is found in SofaHAPI.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is SofaHAPI.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaHAPI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html:844,Modifiability,plugin,plugin,844,". SimpleGUI. SimpleGUI. SimpleGUI helps inserting a Sofa simulation in graphics applications, such as this simple Glut program. Introduction; Compilation. Examples; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction; This is a simpler alternative to the standard Sofa GUI. See the code documentation (*) for more detail. Compilation; One subproject uses qtquick. On Ubuntu 14.04, it requires package qtdeclarative5-dev. Examples. glutOnePick: a glut application with a Sofa simulation. The user can interact by clicking and dragging particles.; ; qtSofa: a qt application with a Sofa simulation. The user can interact by shift-clicking and dragging particles.; . Intellectual; property and rights. Authors. Francois Faure. Contact. Francois.Faure@inria.fr. License. This plugin is distributed under; the same license as the core of SOFA.; . Patents. APP registration. Sponsors. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaSimpleGUI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html:1179,Modifiability,config,config,1179,". SimpleGUI. SimpleGUI. SimpleGUI helps inserting a Sofa simulation in graphics applications, such as this simple Glut program. Introduction; Compilation. Examples; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction; This is a simpler alternative to the standard Sofa GUI. See the code documentation (*) for more detail. Compilation; One subproject uses qtquick. On Ubuntu 14.04, it requires package qtdeclarative5-dev. Examples. glutOnePick: a glut application with a Sofa simulation. The user can interact by clicking and dragging particles.; ; qtSofa: a qt application with a Sofa simulation. The user can interact by shift-clicking and dragging particles.; . Intellectual; property and rights. Authors. Francois Faure. Contact. Francois.Faure@inria.fr. License. This plugin is distributed under; the same license as the core of SOFA.; . Patents. APP registration. Sponsors. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaSimpleGUI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html:107,Usability,simpl,simple,107,". SimpleGUI. SimpleGUI. SimpleGUI helps inserting a Sofa simulation in graphics applications, such as this simple Glut program. Introduction; Compilation. Examples; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction; This is a simpler alternative to the standard Sofa GUI. See the code documentation (*) for more detail. Compilation; One subproject uses qtquick. On Ubuntu 14.04, it requires package qtdeclarative5-dev. Examples. glutOnePick: a glut application with a Sofa simulation. The user can interact by clicking and dragging particles.; ; qtSofa: a qt application with a Sofa simulation. The user can interact by shift-clicking and dragging particles.; . Intellectual; property and rights. Authors. Francois Faure. Contact. Francois.Faure@inria.fr. License. This plugin is distributed under; the same license as the core of SOFA.; . Patents. APP registration. Sponsors. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaSimpleGUI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html:300,Usability,simpl,simpler,300,". SimpleGUI. SimpleGUI. SimpleGUI helps inserting a Sofa simulation in graphics applications, such as this simple Glut program. Introduction; Compilation. Examples; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction; This is a simpler alternative to the standard Sofa GUI. See the code documentation (*) for more detail. Compilation; One subproject uses qtquick. On Ubuntu 14.04, it requires package qtdeclarative5-dev. Examples. glutOnePick: a glut application with a Sofa simulation. The user can interact by clicking and dragging particles.; ; qtSofa: a qt application with a Sofa simulation. The user can interact by shift-clicking and dragging particles.; . Intellectual; property and rights. Authors. Francois Faure. Contact. Francois.Faure@inria.fr. License. This plugin is distributed under; the same license as the core of SOFA.; . Patents. APP registration. Sponsors. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaSimpleGUI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html:1029,Usability,simpl,simply,1029,". SimpleGUI. SimpleGUI. SimpleGUI helps inserting a Sofa simulation in graphics applications, such as this simple Glut program. Introduction; Compilation. Examples; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction; This is a simpler alternative to the standard Sofa GUI. See the code documentation (*) for more detail. Compilation; One subproject uses qtquick. On Ubuntu 14.04, it requires package qtdeclarative5-dev. Examples. glutOnePick: a glut application with a Sofa simulation. The user can interact by clicking and dragging particles.; ; qtSofa: a qt application with a Sofa simulation. The user can interact by shift-clicking and dragging particles.; . Intellectual; property and rights. Authors. Francois Faure. Contact. Francois.Faure@inria.fr. License. This plugin is distributed under; the same license as the core of SOFA.; . Patents. APP registration. Sponsors. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaSimpleGUI/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1544,Integrability,depend,depends,1544,"ils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1591,Integrability,depend,dependencies,1591,"ils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1621,Integrability,depend,dependencies,1621,"e.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any ot",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1659,Integrability,depend,dependencies,1659,"ugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents.",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:67,Modifiability,plugin,plugin,67,". TestPlugin. TestPlugin. Representative; image of the; TestPlugin plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the TestPlugin directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:289,Modifiability,plugin,plugin,289,". TestPlugin. TestPlugin. Representative; image of the; TestPlugin plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the TestPlugin directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:379,Modifiability,plugin,plugin,379,". TestPlugin. TestPlugin. Representative; image of the; TestPlugin plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the TestPlugin directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1032,Modifiability,plugin,plugin,1032,". Representative; image of the; TestPlugin plugin. Introduction; Examples; Project structure; Intellectual property; and; rights; Howto. doxygen code documentation; \( \LaTeX \) formulas in this document. Introduction. This page explains how to customize the empty plugin. Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the TestPlugin directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is ",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1278,Modifiability,plugin,plugin,1278,". Once you have; read this page, you can replace it with the documentation of your; plugin. To customize the template, you can:. Copy the TestPlugin directory and rename it, for example,; MyPlugin; Open a command line tool in the MyPlugin directory and use the; script utils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the ex",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1537,Modifiability,plugin,plugin,1537,"ils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:1561,Modifiability,plugin,plugins,1561,"ils/changeClassName.sh  in Unix and utils\changeClassName.bat  in Windows ; to replace TestPlugin; with MyPlugin in all; the file; names and their content:; On Unix:; utils/changeClassName.bash TestPlugin MyPlugin. On Windows:; utils\changeClassName.bat TestPlugin MyPlugin; cd examples; ..\utils\changeClassName.bat TestPlugin MyPlugin; cd ../doc/; ..\utils\changeClassName.bat TestPlugin MyPlugin  This can take some time !. At this point, you may want to add the plugin directory to svn.; You can also reload this page, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:2170,Modifiability,plugin,plugin,2170,"age, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:2426,Modifiability,plugin,plugin,2426,"age, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:2560,Modifiability,plugin,plugin,2560,"age, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:2971,Modifiability,config,config,2971,"age, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html:2821,Usability,simpl,simply,2821,"age, since its content was changed by the; last command.; Finally, you can generate the (almost empty) code documentation; using in the same command line tool:; doxygen Doxyfile . To insert the plugin in the SOFA development project, you can:. add the following line to your sofa-local.prf; DEFINES += SOFA_HAVE_PLUGIN_TestPlugin ; add the following line to Sofa.pro; contains(DEFINES, SOFA_HAVE_PLUGIN_TestPlugin); {; usePlugin(TestPlugin) } . if your plugin depends on other plugins, edit file TestPlugin-dependencies.prf; .; See sofa-dependencies.prf; for examples of how dependencies are defined. Examples. Currently there is only one example:. TestPlugin.scn  , which does nothing, as shown in the figure. Project structure. the C++ code is in the root directory; the documentation starts in doc/index.html and it is; linked to the code documentation; which you can generate using; doxygen.; The main page of the code documentation is written in file initTestPlugin.h. a template of user documentation is found in TestPlugin.tex. Is should; be filled in for every component in the plugin, then compiled with your; favourite Latex distribution. The filename should match the name of the; component. ; the examples are in examples/; . The first one is TestPlugin.scn, and when; runSOFA; opens it, an html page pops; up, with a link to the plugin documentation. Intellectual; property and rights. Authors. You. Contact. You@your.institute. License. Your can distribute this plugin; under; the same license as the core of SOFA, or any other license of your; choice. Patents. APP registration. Sponsors. Do not forget to thank your; sponsors, they love it !. HowTo; Code documentation . can be generated using doxygen. In Unix; systems, simply type doxygen; Doxyfile in the doc directory. LaTeX formulas. can be directly copy-pasted from .tex to this html document thanks to the mathjax config and; script included in the header. Equation numbering and cross-referencing works, as well a newcommand. ",MatchSource.DOCS,applications/plugins/SofaTest/doc/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/doc/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/Modeler/Modeler.html:501,Availability,avail,available,501,". Modeler for SOFA. Tool designed to help you create new scenes, and understand how SOFA works. ; . Watch this VIDEO for more information. Complete documentation HERE. Creating a Scene:; The scene graph is fully modifiable. ; To add new components to the scene graph, DRAG from the Sofa Library located on the left of the application, and DROP it inside a Node of the graph.; You can try your scene under construction at any time by using the RunSofa menu, or pressing CTRL+R. Some preset objects are available to quickly add in your scene obstacles, rigid and deformable objects. Right click on a Node and select your preset. Learning SOFA:; * Almost all the components have an example scene to demonstrate how they behave in SOFA. Click on one of them in the Sofa Library, a small description with a clickable link should appear; * A Tutorial application is provided in the menu Tutorials. ",MatchSource.DOCS,applications/projects/Modeler/Modeler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/Modeler/Modeler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/resources/docs/runsofa.html:39,Usability,simpl,simple,39,". runSofa 1.0. . Welcome in runSofa, a simple way to execute and debug Sofa scene. This tool is part of the Sofa framework ; for simulation. . You can try the following examples:. Caduceus. ",MatchSource.DOCS,applications/projects/runSofa/resources/docs/runsofa.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/resources/docs/runsofa.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html:2882,Availability,avail,available,2882,"dels are typically defined as a whole and it is not easy to split; them. To overcome this limitation, we define the whole FE model as a common; child of the independent and the mapped particles, using a; MultiMapping, as illustrated in the next figure. The complete FEM,; including elements and masses, is defined at the bottom, while the; independent DOFs are the independent particles and the frames near the; top. The SubsetMultiMapping simply copies values from and to the two; subsets of particles. This way, there is no need to constrain FE vertices on the rigid; objects. They are perfectly attached using a mapping, without; introducing stiffness or hard constraints. The only additional cost is; due to the copies of state vectors through the SubsetMultiMapping. The kinematic hierarchy used to; create the composite object. The implementation in SOFA requires to address some issues:. Multimappings (mappings with several parents) can not generally; match tree structures. A directed acyclic graph (DAG) is required,; therefore the sofa::simulation::Simulation must be an instance of; DAGSimulation. This requires to uncheck the following line in you; sofa-local.prf file:    DEFINES += SOFA_HAVE_DAG; DAG structures can not currently be parsed from xml files. Such a; simulation must be created in C++, as given in this directory, or in; Python (no example available yet). The initialization of the scene is made bottom-up, because the; FEM is given, and the mapped and independent particles are created; based on it. This is opposite to the standard, top-down mapping; initialization of SOFA. Therefore, the mapped and independent particles; must be carefully set before the standard initialization, so that their; top-down propagation to the FE model does not change the position of; the vertices. An example is given in compositeObject.cpp.; To compile it, you need to; activate the tutorials by uncommenting the following line in your; sofa-local.prf: DEFINES += SOFA_HAVE_TUTORIALS . ",MatchSource.DOCS,applications/tutorials/compositeObject/doc.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html:3081,Availability,down,down,3081,"dels are typically defined as a whole and it is not easy to split; them. To overcome this limitation, we define the whole FE model as a common; child of the independent and the mapped particles, using a; MultiMapping, as illustrated in the next figure. The complete FEM,; including elements and masses, is defined at the bottom, while the; independent DOFs are the independent particles and the frames near the; top. The SubsetMultiMapping simply copies values from and to the two; subsets of particles. This way, there is no need to constrain FE vertices on the rigid; objects. They are perfectly attached using a mapping, without; introducing stiffness or hard constraints. The only additional cost is; due to the copies of state vectors through the SubsetMultiMapping. The kinematic hierarchy used to; create the composite object. The implementation in SOFA requires to address some issues:. Multimappings (mappings with several parents) can not generally; match tree structures. A directed acyclic graph (DAG) is required,; therefore the sofa::simulation::Simulation must be an instance of; DAGSimulation. This requires to uncheck the following line in you; sofa-local.prf file:    DEFINES += SOFA_HAVE_DAG; DAG structures can not currently be parsed from xml files. Such a; simulation must be created in C++, as given in this directory, or in; Python (no example available yet). The initialization of the scene is made bottom-up, because the; FEM is given, and the mapped and independent particles are created; based on it. This is opposite to the standard, top-down mapping; initialization of SOFA. Therefore, the mapped and independent particles; must be carefully set before the standard initialization, so that their; top-down propagation to the FE model does not change the position of; the vertices. An example is given in compositeObject.cpp.; To compile it, you need to; activate the tutorials by uncommenting the following line in your; sofa-local.prf: DEFINES += SOFA_HAVE_TUTORIALS . ",MatchSource.DOCS,applications/tutorials/compositeObject/doc.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html:3245,Availability,down,down,3245,"dels are typically defined as a whole and it is not easy to split; them. To overcome this limitation, we define the whole FE model as a common; child of the independent and the mapped particles, using a; MultiMapping, as illustrated in the next figure. The complete FEM,; including elements and masses, is defined at the bottom, while the; independent DOFs are the independent particles and the frames near the; top. The SubsetMultiMapping simply copies values from and to the two; subsets of particles. This way, there is no need to constrain FE vertices on the rigid; objects. They are perfectly attached using a mapping, without; introducing stiffness or hard constraints. The only additional cost is; due to the copies of state vectors through the SubsetMultiMapping. The kinematic hierarchy used to; create the composite object. The implementation in SOFA requires to address some issues:. Multimappings (mappings with several parents) can not generally; match tree structures. A directed acyclic graph (DAG) is required,; therefore the sofa::simulation::Simulation must be an instance of; DAGSimulation. This requires to uncheck the following line in you; sofa-local.prf file:    DEFINES += SOFA_HAVE_DAG; DAG structures can not currently be parsed from xml files. Such a; simulation must be created in C++, as given in this directory, or in; Python (no example available yet). The initialization of the scene is made bottom-up, because the; FEM is given, and the mapped and independent particles are created; based on it. This is opposite to the standard, top-down mapping; initialization of SOFA. Therefore, the mapped and independent particles; must be carefully set before the standard initialization, so that their; top-down propagation to the FE model does not change the position of; the vertices. An example is given in compositeObject.cpp.; To compile it, you need to; activate the tutorials by uncommenting the following line in your; sofa-local.prf: DEFINES += SOFA_HAVE_TUTORIALS . ",MatchSource.DOCS,applications/tutorials/compositeObject/doc.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html:197,Energy Efficiency,efficient,efficient,197,". Composite Object; Creating a composite object using a; SubsetMultiMapping; Fran�ois Faure, 2013. This page explains how to create a composite object as illustrated in; the following image, in an efficient way. The object is composed of a; deformable beam connected to rigid parts at the two ends. This requires; to attach points to the rigid objects using a RigidMapping, and to; connect these points to the FEM.  . Using AttachConstraint is not an option because it works only for; independent DOFs, and the points mapped to the rigid object are not; independent. The classic way would be to connect the deformable object to the rigid; objects using springs. However, this would require stiff springs which; harm the numerical conditioning of the system, without attaching the; points rigidly. . Replacing the spring with hard constraints using Lagrange multipliers; requires a constraint solver which consumes computation time. The solution we propose avoids these drawbacks. An FE model connected to two; rigid objects. The yellow squares highlight FE nodes embedded in the; rigid objects using a mapping. The white points are independent FE; nodes. Our approach is to distribute the FE vertices in two separate groups:; the mapped vertices at the ends, and the independent vertices in the; central part. This requires separate State components and graph nodes.; Unfortunately, the FEM force fields are internal, therefore they can; not be used to connect vertices of different objects. More generally,; FE models are typically defined as a whole and it is not easy to split; them. To overcome this limitation, we define the whole FE model as a common; child of the independent and the mapped particles, using a; MultiMapping, as illustrated in the next figure. The complete FEM,; including elements and masses, is defined at the bottom, while the; independent DOFs are the independent particles and the frames near the; top. The SubsetMultiMapping simply copies values from and to the two; subse",MatchSource.DOCS,applications/tutorials/compositeObject/doc.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html:956,Safety,avoid,avoids,956,". Composite Object; Creating a composite object using a; SubsetMultiMapping; Fran�ois Faure, 2013. This page explains how to create a composite object as illustrated in; the following image, in an efficient way. The object is composed of a; deformable beam connected to rigid parts at the two ends. This requires; to attach points to the rigid objects using a RigidMapping, and to; connect these points to the FEM.  . Using AttachConstraint is not an option because it works only for; independent DOFs, and the points mapped to the rigid object are not; independent. The classic way would be to connect the deformable object to the rigid; objects using springs. However, this would require stiff springs which; harm the numerical conditioning of the system, without attaching the; points rigidly. . Replacing the spring with hard constraints using Lagrange multipliers; requires a constraint solver which consumes computation time. The solution we propose avoids these drawbacks. An FE model connected to two; rigid objects. The yellow squares highlight FE nodes embedded in the; rigid objects using a mapping. The white points are independent FE; nodes. Our approach is to distribute the FE vertices in two separate groups:; the mapped vertices at the ends, and the independent vertices in the; central part. This requires separate State components and graph nodes.; Unfortunately, the FEM force fields are internal, therefore they can; not be used to connect vertices of different objects. More generally,; FE models are typically defined as a whole and it is not easy to split; them. To overcome this limitation, we define the whole FE model as a common; child of the independent and the mapped particles, using a; MultiMapping, as illustrated in the next figure. The complete FEM,; including elements and masses, is defined at the bottom, while the; independent DOFs are the independent particles and the frames near the; top. The SubsetMultiMapping simply copies values from and to the two; subse",MatchSource.DOCS,applications/tutorials/compositeObject/doc.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html:1954,Usability,simpl,simply,1954,"backs. An FE model connected to two; rigid objects. The yellow squares highlight FE nodes embedded in the; rigid objects using a mapping. The white points are independent FE; nodes. Our approach is to distribute the FE vertices in two separate groups:; the mapped vertices at the ends, and the independent vertices in the; central part. This requires separate State components and graph nodes.; Unfortunately, the FEM force fields are internal, therefore they can; not be used to connect vertices of different objects. More generally,; FE models are typically defined as a whole and it is not easy to split; them. To overcome this limitation, we define the whole FE model as a common; child of the independent and the mapped particles, using a; MultiMapping, as illustrated in the next figure. The complete FEM,; including elements and masses, is defined at the bottom, while the; independent DOFs are the independent particles and the frames near the; top. The SubsetMultiMapping simply copies values from and to the two; subsets of particles. This way, there is no need to constrain FE vertices on the rigid; objects. They are perfectly attached using a mapping, without; introducing stiffness or hard constraints. The only additional cost is; due to the copies of state vectors through the SubsetMultiMapping. The kinematic hierarchy used to; create the composite object. The implementation in SOFA requires to address some issues:. Multimappings (mappings with several parents) can not generally; match tree structures. A directed acyclic graph (DAG) is required,; therefore the sofa::simulation::Simulation must be an instance of; DAGSimulation. This requires to uncheck the following line in you; sofa-local.prf file:    DEFINES += SOFA_HAVE_DAG; DAG structures can not currently be parsed from xml files. Such a; simulation must be created in C++, as given in this directory, or in; Python (no example available yet). The initialization of the scene is made bottom-up, because the; FEM is given",MatchSource.DOCS,applications/tutorials/compositeObject/doc.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/compositeObject/doc.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/chainHybridNoGroup.html:268,Security,validat,validations,268,". simpleBoundaryConditions.html. simpleBoundaryConditions.scn; Description:; An FEM cube is stretched using a pressure field applied on one face, while the opposite face is maintained on a plane.; This scene contains typical boundary conditions involved in mechanical validations:; Surface pressure. Constraining particles to a plane, or to a line, or to a point. Interesting Point:. 		The constraints allow the constrained particles to freely slide on the plane without global translation or rotation.; The pressure applies uniform forces.; As a result, the object keeps a box shape with plane, orthogonal faces. See Also:. ",MatchSource.DOCS,examples/Demos/chainHybridNoGroup.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/chainHybridNoGroup.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/chainHybridNoGroup.html:2,Usability,simpl,simpleBoundaryConditions,2,". simpleBoundaryConditions.html. simpleBoundaryConditions.scn; Description:; An FEM cube is stretched using a pressure field applied on one face, while the opposite face is maintained on a plane.; This scene contains typical boundary conditions involved in mechanical validations:; Surface pressure. Constraining particles to a plane, or to a line, or to a point. Interesting Point:. 		The constraints allow the constrained particles to freely slide on the plane without global translation or rotation.; The pressure applies uniform forces.; As a result, the object keeps a box shape with plane, orthogonal faces. See Also:. ",MatchSource.DOCS,examples/Demos/chainHybridNoGroup.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/chainHybridNoGroup.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/chainHybridNoGroup.html:33,Usability,simpl,simpleBoundaryConditions,33,". simpleBoundaryConditions.html. simpleBoundaryConditions.scn; Description:; An FEM cube is stretched using a pressure field applied on one face, while the opposite face is maintained on a plane.; This scene contains typical boundary conditions involved in mechanical validations:; Surface pressure. Constraining particles to a plane, or to a line, or to a point. Interesting Point:. 		The constraints allow the constrained particles to freely slide on the plane without global translation or rotation.; The pressure applies uniform forces.; As a result, the object keeps a box shape with plane, orthogonal faces. See Also:. ",MatchSource.DOCS,examples/Demos/chainHybridNoGroup.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/chainHybridNoGroup.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/simpleBoundaryConditions.html:268,Security,validat,validations,268,". simpleBoundaryConditions.html. simpleBoundaryConditions.scn; Description:; An FEM cube is stretched using a pressure field applied on one face, while the opposite face is maintained on a plane.; This scene contains typical boundary conditions involved in mechanical validations:; Surface pressure. Constraining particles to a plane, or to a line, or to a point. Interesting Point:. 		The constraints allow the constrained particles to freely slide on the plane without global translation or rotation.; The pressure applies uniform forces.; As a result, the object keeps a box shape with plane, orthogonal faces. See Also:. ",MatchSource.DOCS,examples/Demos/simpleBoundaryConditions.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/simpleBoundaryConditions.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/simpleBoundaryConditions.html:2,Usability,simpl,simpleBoundaryConditions,2,". simpleBoundaryConditions.html. simpleBoundaryConditions.scn; Description:; An FEM cube is stretched using a pressure field applied on one face, while the opposite face is maintained on a plane.; This scene contains typical boundary conditions involved in mechanical validations:; Surface pressure. Constraining particles to a plane, or to a line, or to a point. Interesting Point:. 		The constraints allow the constrained particles to freely slide on the plane without global translation or rotation.; The pressure applies uniform forces.; As a result, the object keeps a box shape with plane, orthogonal faces. See Also:. ",MatchSource.DOCS,examples/Demos/simpleBoundaryConditions.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/simpleBoundaryConditions.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/simpleBoundaryConditions.html:33,Usability,simpl,simpleBoundaryConditions,33,". simpleBoundaryConditions.html. simpleBoundaryConditions.scn; Description:; An FEM cube is stretched using a pressure field applied on one face, while the opposite face is maintained on a plane.; This scene contains typical boundary conditions involved in mechanical validations:; Surface pressure. Constraining particles to a plane, or to a line, or to a point. Interesting Point:. 		The constraints allow the constrained particles to freely slide on the plane without global translation or rotation.; The pressure applies uniform forces.; As a result, the object keeps a box shape with plane, orthogonal faces. See Also:. ",MatchSource.DOCS,examples/Demos/simpleBoundaryConditions.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Demos/simpleBoundaryConditions.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Basic/TutorialBasicCube.html:617,Deployability,update,update,617,". TutorialBasicCube.scn; Description:. In this tutorial, a deformable cube undergoes internal and external forces. This is one of the simplest scenes we can simulate using Sofa. We use it to introduce the component structure. The shape is modeled using a MechanicalObject which desribes the particle states, and a Topology which describes how the particles are connected. The forces are the MeshSpringForceField, which defines springs according to the edges of the mesh (the Topology), and the PlaneForceField which try to prevent the particles to cross planes. The EulerImplicitSolver contains the algorithm used to update particle positions and velocities at each time step. It uses an auxiliary component, the CGLinearSolver, to solve equation systems. . See Also:. TutorialCollisionCubeObstacleSphere. TutorialMappingDragonRigid. TutorialForceFieldLiverSprings. TutorialBasicPendulum. ",MatchSource.DOCS,examples/Tutorials/Basic/TutorialBasicCube.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Basic/TutorialBasicCube.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Basic/TutorialBasicCube.html:134,Usability,simpl,simplest,134,". TutorialBasicCube.scn; Description:. In this tutorial, a deformable cube undergoes internal and external forces. This is one of the simplest scenes we can simulate using Sofa. We use it to introduce the component structure. The shape is modeled using a MechanicalObject which desribes the particle states, and a Topology which describes how the particles are connected. The forces are the MeshSpringForceField, which defines springs according to the edges of the mesh (the Topology), and the PlaneForceField which try to prevent the particles to cross planes. The EulerImplicitSolver contains the algorithm used to update particle positions and velocities at each time step. It uses an auxiliary component, the CGLinearSolver, to solve equation systems. . See Also:. TutorialCollisionCubeObstacleSphere. TutorialMappingDragonRigid. TutorialForceFieldLiverSprings. TutorialBasicPendulum. ",MatchSource.DOCS,examples/Tutorials/Basic/TutorialBasicCube.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Basic/TutorialBasicCube.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Collision/Collision.html:201,Safety,detect,detection,201,". Collision Tutorials. Triangle Based Modelization; Multiple Objects Handling; Advanced Response. Description; 		In these tutorials, we will try to explain the different ways of modeling the collision detection and response in SOFA. First, we will recall what you may have seen in the previous Step by step tutorials about the modelization of the collision model. Then we will explain how the collisions between objects are handled, and the effect on the stability of the different approaches. Finally, we will see advanced features about collision response, with constraint based response allowing us to simulate friction.; . ",MatchSource.DOCS,examples/Tutorials/Collision/Collision.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Collision/Collision.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/ForceFields.html:392,Integrability,depend,depend,392,". ForceField Tutorials. Description; ForceFields are components that exhibit mechanical properties in Sofa. These might be illustrated ; 	by several theories like linear elasticity, hyperelasticity, visco-elasticity, etc. These properties ; 	allow computing of the mechanical response of object when an external force is applied. They are mechanical intrinsic properties, and normally do not depend on the size or shape of the object.; ForceFields in Sofa deeply depend on the object's topology. ; 	When choosing a ForceField, the user must take care to pick the appropriated Topology. ForceField components ; 	sometimes have the name of a specific mechanical model. In this case, the user can search for documentation for a deeper ; 	understanding. In other cases, ForceFields are named by the combining the name of the computation method,; 	topology type, etc. ",MatchSource.DOCS,examples/Tutorials/ForceFields/ForceFields.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/ForceFields.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/ForceFields.html:463,Integrability,depend,depend,463,". ForceField Tutorials. Description; ForceFields are components that exhibit mechanical properties in Sofa. These might be illustrated ; 	by several theories like linear elasticity, hyperelasticity, visco-elasticity, etc. These properties ; 	allow computing of the mechanical response of object when an external force is applied. They are mechanical intrinsic properties, and normally do not depend on the size or shape of the object.; ForceFields in Sofa deeply depend on the object's topology. ; 	When choosing a ForceField, the user must take care to pick the appropriated Topology. ForceField components ; 	sometimes have the name of a specific mechanical model. In this case, the user can search for documentation for a deeper ; 	understanding. In other cases, ForceFields are named by the combining the name of the computation method,; 	topology type, etc. ",MatchSource.DOCS,examples/Tutorials/ForceFields/ForceFields.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/ForceFields.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialForceFieldSprings.html:1956,Deployability,integrat,integration,1956,"es particles belonging ; 			to the same mechanical object, the ForceField is said to be internal. Otherwise, if it links several mechanical objects, it is said to be an interaction forcefield. 			; 			Examples of SpringForceField components in Sofa are JointSpringForceField (for rigid mechanical objects) StiffSpringForceField, and MeshSpringForceField ; 		 (for deformable mechanical objects). ; 			; 			To describe a SpringForceField, we therefore have to specify the following parameters: ; 			; The two mechanical objects that are in interaction. It can be a unique mechanical object in the case of an internal ForceField.; A set of pairs of indices which specify the end particles for each spring to be created. ; Finally, the internal parameters of each spring, like the rest length, the stiffness, and damping factor. . Key Points:. If you have a limited number of particles that you want to connect with springs, you can use JointSpringForceField (for rigid bodies) ; 			or StiffSpringForceField (for deformable bodies) and specify manually the indices and spring parameters.; If you load particles from a mesh using a MeshTopology component, there is a corresponding MeshSpringForceField component which ; 			does the job of creating springs for you, leaving you only to specify global parameters for the springs. You can do fine tuning later on; 			if you wish to. Results:; 		At each time step, the force computed by the SpringForceField is added to the mechanical objects in interaction. When the spring network ; 		becomes large this can result in some instability, particularly if you wish to interact with your object using the mouse. ; 		You can tweak spring parameters or the simulation parameters to resolve that issue, (like the vdamping factor if you use an implicit integration scheme) ; 		but this can be a fastidious operation. ; 		As a general rule, FEM ForceField methods provide a neater way to handle deformations.; 		; 		. 	 A MeshSpringForceField becoming unstable; 		. ",MatchSource.DOCS,examples/Tutorials/ForceFields/TutorialForceFieldSprings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialForceFieldSprings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialForceFieldSprings.html:1956,Integrability,integrat,integration,1956,"es particles belonging ; 			to the same mechanical object, the ForceField is said to be internal. Otherwise, if it links several mechanical objects, it is said to be an interaction forcefield. 			; 			Examples of SpringForceField components in Sofa are JointSpringForceField (for rigid mechanical objects) StiffSpringForceField, and MeshSpringForceField ; 		 (for deformable mechanical objects). ; 			; 			To describe a SpringForceField, we therefore have to specify the following parameters: ; 			; The two mechanical objects that are in interaction. It can be a unique mechanical object in the case of an internal ForceField.; A set of pairs of indices which specify the end particles for each spring to be created. ; Finally, the internal parameters of each spring, like the rest length, the stiffness, and damping factor. . Key Points:. If you have a limited number of particles that you want to connect with springs, you can use JointSpringForceField (for rigid bodies) ; 			or StiffSpringForceField (for deformable bodies) and specify manually the indices and spring parameters.; If you load particles from a mesh using a MeshTopology component, there is a corresponding MeshSpringForceField component which ; 			does the job of creating springs for you, leaving you only to specify global parameters for the springs. You can do fine tuning later on; 			if you wish to. Results:; 		At each time step, the force computed by the SpringForceField is added to the mechanical objects in interaction. When the spring network ; 		becomes large this can result in some instability, particularly if you wish to interact with your object using the mouse. ; 		You can tweak spring parameters or the simulation parameters to resolve that issue, (like the vdamping factor if you use an implicit integration scheme) ; 		but this can be a fastidious operation. ; 		As a general rule, FEM ForceField methods provide a neater way to handle deformations.; 		; 		. 	 A MeshSpringForceField becoming unstable; 		. ",MatchSource.DOCS,examples/Tutorials/ForceFields/TutorialForceFieldSprings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialForceFieldSprings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialForceFieldSprings.html:1261,Performance,load,load,1261,"es particles belonging ; 			to the same mechanical object, the ForceField is said to be internal. Otherwise, if it links several mechanical objects, it is said to be an interaction forcefield. 			; 			Examples of SpringForceField components in Sofa are JointSpringForceField (for rigid mechanical objects) StiffSpringForceField, and MeshSpringForceField ; 		 (for deformable mechanical objects). ; 			; 			To describe a SpringForceField, we therefore have to specify the following parameters: ; 			; The two mechanical objects that are in interaction. It can be a unique mechanical object in the case of an internal ForceField.; A set of pairs of indices which specify the end particles for each spring to be created. ; Finally, the internal parameters of each spring, like the rest length, the stiffness, and damping factor. . Key Points:. If you have a limited number of particles that you want to connect with springs, you can use JointSpringForceField (for rigid bodies) ; 			or StiffSpringForceField (for deformable bodies) and specify manually the indices and spring parameters.; If you load particles from a mesh using a MeshTopology component, there is a corresponding MeshSpringForceField component which ; 			does the job of creating springs for you, leaving you only to specify global parameters for the springs. You can do fine tuning later on; 			if you wish to. Results:; 		At each time step, the force computed by the SpringForceField is added to the mechanical objects in interaction. When the spring network ; 		becomes large this can result in some instability, particularly if you wish to interact with your object using the mouse. ; 		You can tweak spring parameters or the simulation parameters to resolve that issue, (like the vdamping factor if you use an implicit integration scheme) ; 		but this can be a fastidious operation. ; 		As a general rule, FEM ForceField methods provide a neater way to handle deformations.; 		; 		. 	 A MeshSpringForceField becoming unstable; 		. ",MatchSource.DOCS,examples/Tutorials/ForceFields/TutorialForceFieldSprings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialForceFieldSprings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialTetrahedronFEMForceField.html:862,Deployability,update,updateStiffnessMatrix,862,". ForceField FEM on Tetrahedra. Description:; 		; 			The TetrahedronFEMForceField component is used to model an object by the Finite Element Method on a mesh composed tetrahedron.; 			There are three main methods of computation: ; 			; small : the simplest method using linear formulation in case of small displacement; large : the corotational formulation allowing large displacement; polar : the polar decomposition formulation allowing large displacement. 				Trivial user can use at least two main parameters related to the linear elasticity property of the modeled object; 			. Young's modulus; Poisson's ratio. 				By adjusting these coefficients, one can understand its relation with the mechanical behavior of objects and then ; 				can choose the appropriated parameters. There are also other parameters for advanced users :; 			. localStiffnessFactor; updateStiffnessMatrix; computeGlobalMatrix; etc. 				By double-clicking on the component, users can see all the parameters of the component. ; 			; Key Points:. TetrahedronFEMForceField works only with a tetrahedra mesh; Technical documentation [Nesme, Matthieu and Payan, Yohan and Faure, Francois] , Efficient Physically Plausible Finite Elements .2005. Results:. ",MatchSource.DOCS,examples/Tutorials/ForceFields/TutorialTetrahedronFEMForceField.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialTetrahedronFEMForceField.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialTetrahedronFEMForceField.html:248,Usability,simpl,simplest,248,". ForceField FEM on Tetrahedra. Description:; 		; 			The TetrahedronFEMForceField component is used to model an object by the Finite Element Method on a mesh composed tetrahedron.; 			There are three main methods of computation: ; 			; small : the simplest method using linear formulation in case of small displacement; large : the corotational formulation allowing large displacement; polar : the polar decomposition formulation allowing large displacement. 				Trivial user can use at least two main parameters related to the linear elasticity property of the modeled object; 			. Young's modulus; Poisson's ratio. 				By adjusting these coefficients, one can understand its relation with the mechanical behavior of objects and then ; 				can choose the appropriated parameters. There are also other parameters for advanced users :; 			. localStiffnessFactor; updateStiffnessMatrix; computeGlobalMatrix; etc. 				By double-clicking on the component, users can see all the parameters of the component. ; 			; Key Points:. TetrahedronFEMForceField works only with a tetrahedra mesh; Technical documentation [Nesme, Matthieu and Payan, Yohan and Faure, Francois] , Efficient Physically Plausible Finite Elements .2005. Results:. ",MatchSource.DOCS,examples/Tutorials/ForceFields/TutorialTetrahedronFEMForceField.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/ForceFields/TutorialTetrahedronFEMForceField.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingBarycentric.html:1560,Deployability,update,updated,1560,"del or a collision model to an underlying behaviour model.; 			. 				In the TutorialMappingLiverBarycentric scene, you get the following elements : ; 				; A node ""Liver"" containing the behavior model of a liver loaded through a MeshLoader component with a TetrahedronSetTopology and a TetrahedralCorotationalFEMForceField to handle the deformations.; A node ""Visual"" which is mapped to the ""Liver"" node by a barycentric mapping, which contains the visual representation of our liver.; A node ""Surf"" mapped to the ""Liver"" node by a barycentric mapping, containing the collision model of the liver. Key points. 			In this scene you actually have two kinds of barycentric mappings. A visual barycentric mapping, and a mechanical barycentric mapping.; 			. The visual barycentric mapping concerns the ""Visual"" node (child) and the ""Liver"" node (parent). Here the communication between the parent and the child is only one way. At each time step, the positions of the child are updated knowing the positions and the velocities of the parent and according to the barycentric weights.; 		. Mapping of a visual model to a behaviour model with a barycentric mapping. The mechanical barycentric mapping concerns the ""Surf"" node (child) and the ""Liver"" node (parent). It is this mapping which actually allows you to interact with the object using the mouse. Here the communication works in both ways. Like in a visual mapping, the child positions and velocities are updated knowing their barycentring weights and the parent state vector. On top of that, the interactions (or forces) computed at the level of the child are propagated back to the parent according to the barycentric weights. ; 				. Collision Model (yellow squares) mapped to the behaviour model (white dots) with a tetrahedral topology. Results; ; 		You can interact with the mouse to see how the two barycentric mappings work together in the scene.; . 		With the mouse interaction you can accumlate forces at the level of the collision mechanic",MatchSource.DOCS,examples/Tutorials/Mappings/TutorialMappingBarycentric.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingBarycentric.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingBarycentric.html:2042,Deployability,update,updated,2042,"s the visual representation of our liver.; A node ""Surf"" mapped to the ""Liver"" node by a barycentric mapping, containing the collision model of the liver. Key points. 			In this scene you actually have two kinds of barycentric mappings. A visual barycentric mapping, and a mechanical barycentric mapping.; 			. The visual barycentric mapping concerns the ""Visual"" node (child) and the ""Liver"" node (parent). Here the communication between the parent and the child is only one way. At each time step, the positions of the child are updated knowing the positions and the velocities of the parent and according to the barycentric weights.; 		. Mapping of a visual model to a behaviour model with a barycentric mapping. The mechanical barycentric mapping concerns the ""Surf"" node (child) and the ""Liver"" node (parent). It is this mapping which actually allows you to interact with the object using the mouse. Here the communication works in both ways. Like in a visual mapping, the child positions and velocities are updated knowing their barycentring weights and the parent state vector. On top of that, the interactions (or forces) computed at the level of the child are propagated back to the parent according to the barycentric weights. ; 				. Collision Model (yellow squares) mapped to the behaviour model (white dots) with a tetrahedral topology. Results; ; 		You can interact with the mouse to see how the two barycentric mappings work together in the scene.; . 		With the mouse interaction you can accumlate forces at the level of the collision mechanical object in the ""Surf"" node. These forces are propagated back at the level of the ""Liver"" node using the barycentric mechanical mapping. ; 		. 		The forces computed at the level of the behaviour model - the ""Liver"" node - create a motion, and our liver object now moves. In the ""Visual"" node the visual model now moves in a consistent way with respect to the behaviour model positions and velocities, thanks to the barycentric mapping.; 		. ",MatchSource.DOCS,examples/Tutorials/Mappings/TutorialMappingBarycentric.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingBarycentric.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingBarycentric.html:798,Performance,load,loaded,798,". Barycentric Mapping. Description:. Unlike RigidMapping, Barycentric Mapping can be used to attach points to a deformable body. The attached body coordinates are defined ; using the barycentric coordinates with respect to the parent cells. The parent cells are defined by the topology associated with the body points. ; 			 Many topology components exist in SOFA to describe the organization of point sets, like TetrahedronSetTopologyContainer, HexahedronSetTopologyContainer, ; 			 RegularGridTopology...; 			The most common use of Barycentric Mapping in SOFA is to attach a visual model or a collision model to an underlying behaviour model.; 			. 				In the TutorialMappingLiverBarycentric scene, you get the following elements : ; 				; A node ""Liver"" containing the behavior model of a liver loaded through a MeshLoader component with a TetrahedronSetTopology and a TetrahedralCorotationalFEMForceField to handle the deformations.; A node ""Visual"" which is mapped to the ""Liver"" node by a barycentric mapping, which contains the visual representation of our liver.; A node ""Surf"" mapped to the ""Liver"" node by a barycentric mapping, containing the collision model of the liver. Key points. 			In this scene you actually have two kinds of barycentric mappings. A visual barycentric mapping, and a mechanical barycentric mapping.; 			. The visual barycentric mapping concerns the ""Visual"" node (child) and the ""Liver"" node (parent). Here the communication between the parent and the child is only one way. At each time step, the positions of the child are updated knowing the positions and the velocities of the parent and according to the barycentric weights.; 		. Mapping of a visual model to a behaviour model with a barycentric mapping. The mechanical barycentric mapping concerns the ""Surf"" node (child) and the ""Liver"" node (parent). It is this mapping which actually allows you to interact with the object using the mouse. Here the communication works in both ways. Like in a visual mapping",MatchSource.DOCS,examples/Tutorials/Mappings/TutorialMappingBarycentric.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingBarycentric.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingSkinning.html:307,Modifiability,config,configure,307,". Skinning Mapping. Description:. The Skinning Mapping is widely used in computer animation:; ; We set a weight to each simulated node.; By computing the influence of each node on a particle of the skin, we are able to model its deformation. We have implemented lots of different algorithms to let the user configure his skinning mapping the way he desires, adjusting the tradeoff between performance and quality. Key points:. Weighting algorithms: The diffusion of the weights through the structure can be done using: ; 	 ; Inverse of the square distance; Linear along the distance; Hermite; Spline. Distance algorithms: To know this influence, we can use the distance of the particle of the skin to each simulated node. This distance can be:; 		 ; Euclidian; Geodesic; Harmonic. Interpolating algorithms: We implemented two methods to interpolate the deformation of the particles:; 		 ; Linear Interpolation: the fastest, but can result in some nasty visual artifacts.; Dual Quaternion: it gives much nicer results, but is slightly slower. ",MatchSource.DOCS,examples/Tutorials/Mappings/TutorialMappingSkinning.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingSkinning.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingSkinning.html:389,Performance,perform,performance,389,". Skinning Mapping. Description:. The Skinning Mapping is widely used in computer animation:; ; We set a weight to each simulated node.; By computing the influence of each node on a particle of the skin, we are able to model its deformation. We have implemented lots of different algorithms to let the user configure his skinning mapping the way he desires, adjusting the tradeoff between performance and quality. Key points:. Weighting algorithms: The diffusion of the weights through the structure can be done using: ; 	 ; Inverse of the square distance; Linear along the distance; Hermite; Spline. Distance algorithms: To know this influence, we can use the distance of the particle of the skin to each simulated node. This distance can be:; 		 ; Euclidian; Geodesic; Harmonic. Interpolating algorithms: We implemented two methods to interpolate the deformation of the particles:; 		 ; Linear Interpolation: the fastest, but can result in some nasty visual artifacts.; Dual Quaternion: it gives much nicer results, but is slightly slower. ",MatchSource.DOCS,examples/Tutorials/Mappings/TutorialMappingSkinning.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Mappings/TutorialMappingSkinning.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html:371,Availability,error,error,371,". Explicit Euler Solver. Description. 		In Sofa, EulerSolver denotes the ODE solver using the explicit integration scheme for the computing of ; 		the dynamic system. This integration scheme resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. ; 		; Key points		; 		According to Taylor expansion, the error for the first derivative approximation of a function ; 		f(t) is in relation to dt and f""(t). The term f""(t) can represent the dynamic (forces, acceleraion) of the system. Thus, there are two ; 		important criteria for stabilization when using the explicit EulerSolver:; 		; The time step dt.; The dynamic of the system. 		In this example, if the time step is set higher (dt=0.001), or by using [Shift + leftmouse] to tug the object in order to ; 		dynamically unstabilize the system, the system becomes unstable as showm below :; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html:103,Deployability,integrat,integration,103,". Explicit Euler Solver. Description. 		In Sofa, EulerSolver denotes the ODE solver using the explicit integration scheme for the computing of ; 		the dynamic system. This integration scheme resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. ; 		; Key points		; 		According to Taylor expansion, the error for the first derivative approximation of a function ; 		f(t) is in relation to dt and f""(t). The term f""(t) can represent the dynamic (forces, acceleraion) of the system. Thus, there are two ; 		important criteria for stabilization when using the explicit EulerSolver:; 		; The time step dt.; The dynamic of the system. 		In this example, if the time step is set higher (dt=0.001), or by using [Shift + leftmouse] to tug the object in order to ; 		dynamically unstabilize the system, the system becomes unstable as showm below :; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html:172,Deployability,integrat,integration,172,". Explicit Euler Solver. Description. 		In Sofa, EulerSolver denotes the ODE solver using the explicit integration scheme for the computing of ; 		the dynamic system. This integration scheme resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. ; 		; Key points		; 		According to Taylor expansion, the error for the first derivative approximation of a function ; 		f(t) is in relation to dt and f""(t). The term f""(t) can represent the dynamic (forces, acceleraion) of the system. Thus, there are two ; 		important criteria for stabilization when using the explicit EulerSolver:; 		; The time step dt.; The dynamic of the system. 		In this example, if the time step is set higher (dt=0.001), or by using [Shift + leftmouse] to tug the object in order to ; 		dynamically unstabilize the system, the system becomes unstable as showm below :; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html:103,Integrability,integrat,integration,103,". Explicit Euler Solver. Description. 		In Sofa, EulerSolver denotes the ODE solver using the explicit integration scheme for the computing of ; 		the dynamic system. This integration scheme resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. ; 		; Key points		; 		According to Taylor expansion, the error for the first derivative approximation of a function ; 		f(t) is in relation to dt and f""(t). The term f""(t) can represent the dynamic (forces, acceleraion) of the system. Thus, there are two ; 		important criteria for stabilization when using the explicit EulerSolver:; 		; The time step dt.; The dynamic of the system. 		In this example, if the time step is set higher (dt=0.001), or by using [Shift + leftmouse] to tug the object in order to ; 		dynamically unstabilize the system, the system becomes unstable as showm below :; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html:172,Integrability,integrat,integration,172,". Explicit Euler Solver. Description. 		In Sofa, EulerSolver denotes the ODE solver using the explicit integration scheme for the computing of ; 		the dynamic system. This integration scheme resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. ; 		; Key points		; 		According to Taylor expansion, the error for the first derivative approximation of a function ; 		f(t) is in relation to dt and f""(t). The term f""(t) can represent the dynamic (forces, acceleraion) of the system. Thus, there are two ; 		important criteria for stabilization when using the explicit EulerSolver:; 		; The time step dt.; The dynamic of the system. 		In this example, if the time step is set higher (dt=0.001), or by using [Shift + leftmouse] to tug the object in order to ; 		dynamically unstabilize the system, the system becomes unstable as showm below :; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:750,Availability,error,errors,750,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:976,Availability,error,error,976,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:124,Deployability,integrat,integration,124,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:189,Deployability,integrat,integration,189,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:397,Deployability,integrat,integration,397,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:124,Integrability,integrat,integration,124,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:189,Integrability,integrat,integration,189,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:397,Integrability,integrat,integration,397,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:1306,Integrability,depend,dependence,1306,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html:1297,Testability,test,test,1297,". RungeKutta Solver. Description; 	; 		Like EulerSolver in Sofa, RungeKuttaSolver denotes the ODE solver using the explicit integration scheme for computing of ; 		the dynamic system. This integration scheme explicitely resolves the system in relation to time: given the mechanical state; 		at time Tn, compute the state at time Tn+1=Tn + dt. The difference with RungeKuttaSolver is that this ; 		integration use a more sophisticated algorithm for the computation of the state at time Tn+1. Therefore there is more stability; 		and can use a higher time step than the EulerSolver one. Otherwise, RungeKuttaSolver uses a more general explicit method than EulerSolver.; ; Key points. 		As with every Explicit Integration method, RungeKutta accumulates errors for each time step. Therefore, two criteria must be ; 		controled when using it : ; 		; The time step dt.; The dynamic of the system. 		However, RungeKutta4 is certainly more stable than Explicit Euler: The convergence error in RungeKutta4 is in relation to o(dt4), ; 		but in Explicit Euler it's only o(dt). For this example, RungeKutta can resolve the system with dt=0.001, but not the ExplicitEuler (0.0001). ; . 		Users can try several solvers with different values of the dt parameter to gain an idea of the solver's differences (also test the dependence of the solver ; 		according to the dynamics of the system by using [Shift + left mouse]).; 		. ",MatchSource.DOCS,examples/Tutorials/Solvers/ExplicitRungeKutta4.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ExplicitRungeKutta4.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html:147,Deployability,integrat,integration,147,". Euler Implicit Solver. Description. 	The EulerImplicitSolver can be used to solve ODE systems of first or second order, using the Euler implicit integration scheme. The step size of the discretization corresponds to the timeStep of SOFA.; 	; 	At each step of the scheme, the linear equation systems obtained have to be solved by an auxiliary component, the CGLinearSolver, which can be of different kinds (conjugated gradient, ...).; ; Key points. 	Different simulations are proposed:; 	; Green: reference deformation.; Yellow: Mechanical system using springs along edges.; Light blue: Mechanical system using tetrahedron finite elements.; Blue: Same system as before but using a first order integration scheme.; Red: Mechanical system with tetrahedron finite linear elements. Results. ",MatchSource.DOCS,examples/Tutorials/Solvers/ImplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html:694,Deployability,integrat,integration,694,". Euler Implicit Solver. Description. 	The EulerImplicitSolver can be used to solve ODE systems of first or second order, using the Euler implicit integration scheme. The step size of the discretization corresponds to the timeStep of SOFA.; 	; 	At each step of the scheme, the linear equation systems obtained have to be solved by an auxiliary component, the CGLinearSolver, which can be of different kinds (conjugated gradient, ...).; ; Key points. 	Different simulations are proposed:; 	; Green: reference deformation.; Yellow: Mechanical system using springs along edges.; Light blue: Mechanical system using tetrahedron finite elements.; Blue: Same system as before but using a first order integration scheme.; Red: Mechanical system with tetrahedron finite linear elements. Results. ",MatchSource.DOCS,examples/Tutorials/Solvers/ImplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html:147,Integrability,integrat,integration,147,". Euler Implicit Solver. Description. 	The EulerImplicitSolver can be used to solve ODE systems of first or second order, using the Euler implicit integration scheme. The step size of the discretization corresponds to the timeStep of SOFA.; 	; 	At each step of the scheme, the linear equation systems obtained have to be solved by an auxiliary component, the CGLinearSolver, which can be of different kinds (conjugated gradient, ...).; ; Key points. 	Different simulations are proposed:; 	; Green: reference deformation.; Yellow: Mechanical system using springs along edges.; Light blue: Mechanical system using tetrahedron finite elements.; Blue: Same system as before but using a first order integration scheme.; Red: Mechanical system with tetrahedron finite linear elements. Results. ",MatchSource.DOCS,examples/Tutorials/Solvers/ImplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html:694,Integrability,integrat,integration,694,". Euler Implicit Solver. Description. 	The EulerImplicitSolver can be used to solve ODE systems of first or second order, using the Euler implicit integration scheme. The step size of the discretization corresponds to the timeStep of SOFA.; 	; 	At each step of the scheme, the linear equation systems obtained have to be solved by an auxiliary component, the CGLinearSolver, which can be of different kinds (conjugated gradient, ...).; ; Key points. 	Different simulations are proposed:; 	; Green: reference deformation.; Yellow: Mechanical system using springs along edges.; Light blue: Mechanical system using tetrahedron finite elements.; Blue: Same system as before but using a first order integration scheme.; Red: Mechanical system with tetrahedron finite linear elements. Results. ",MatchSource.DOCS,examples/Tutorials/Solvers/ImplicitEuler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitEuler.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitNewmark.html:128,Deployability,integrat,integration,128,". Newmark Implicit Solver. Description. 	The NewmarkImplicitSolver can be used to solve ODE systems, using the Newmark implicit integration scheme. The step size of the discretization corresponds to the timeStep of SOFA.; 	; 	At each step of the scheme, the linear equation systems obtained have to be solved by an auxiliary component, the CGLinearSolver, which can be of different kinds (conjugated gradient, ...).; 	 ; Key points; 	Different simulations are proposed:; 	; Green: reference deformation.; Yellow: Mechanical system using springs along edges. Results. ",MatchSource.DOCS,examples/Tutorials/Solvers/ImplicitNewmark.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitNewmark.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitNewmark.html:128,Integrability,integrat,integration,128,". Newmark Implicit Solver. Description. 	The NewmarkImplicitSolver can be used to solve ODE systems, using the Newmark implicit integration scheme. The step size of the discretization corresponds to the timeStep of SOFA.; 	; 	At each step of the scheme, the linear equation systems obtained have to be solved by an auxiliary component, the CGLinearSolver, which can be of different kinds (conjugated gradient, ...).; 	 ; Key points; 	Different simulations are proposed:; 	; Green: reference deformation.; Yellow: Mechanical system using springs along edges. Results. ",MatchSource.DOCS,examples/Tutorials/Solvers/ImplicitNewmark.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/ImplicitNewmark.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:162,Availability,avail,available,162,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:127,Deployability,integrat,integration,127,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:293,Deployability,integrat,integration,293,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:324,Deployability,integrat,integration,324,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:354,Deployability,integrat,integration,354,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:385,Deployability,integrat,integration,385,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:985,Deployability,integrat,integration,985," Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variable",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1003,Deployability,integrat,integration,1003," Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variable",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1072,Deployability,integrat,integration,1072,"ials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In c",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:127,Integrability,integrat,integration,127,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:293,Integrability,integrat,integration,293,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:324,Integrability,integrat,integration,324,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:354,Integrability,integrat,integration,354,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:385,Integrability,integrat,integration,385,". OdeSolver Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new sta",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:985,Integrability,integrat,integration,985," Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variable",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1003,Integrability,integrat,integration,1003," Tutorial. Truth and initial cylinders; Simulation results. Description. 	In these tutorials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variable",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1072,Integrability,integrat,integration,1072,"ials, we show the different integration schemes and algorithms available to solve the system of Ordinary Differential Equations (ODE) at each step of the simulation. SOFA provides the following integration schemes:; ; Static integration scheme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In c",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1305,Integrability,depend,depending,1305,"eme,; Explicit integration schemes,; Implicit integration schemes. Before going any further, it is important to know that state vectors in SOFA are saved in a component called ""State"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In contrast, implicit solvers are very stable (without conditions on the time step) and therefore work with larger time steps. The drawback of such a method is that it is more time consuming.; For example, implicit solvers would be advised for s",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1521,Modifiability,variab,variables,1521,"ate"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In contrast, implicit solvers are very stable (without conditions on the time step) and therefore work with larger time steps. The drawback of such a method is that it is more time consuming.; For example, implicit solvers would be advised for stiff or low-mass objects. Finally, it must be pointed out that explicit and implicit solvers are not the only way to solve ODEs.; Some other solvers do exist, such as semi-implici",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1546,Modifiability,variab,variables,1546,"ate"" (see chapter ""State"" in the documentation).; For instance, when mechanical models are being solved, the user needs to add a ""MechanicalState"" component in the graph.; Inside the component, the format of storage for the state vector is a structure called MultiVector.; The size and the nature of the degrees of freedom is chosen by setting a ""template"" in the State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In contrast, implicit solvers are very stable (without conditions on the time step) and therefore work with larger time steps. The drawback of such a method is that it is more time consuming.; For example, implicit solvers would be advised for stiff or low-mass objects. Finally, it must be pointed out that explicit and implicit solvers are not the only way to solve ODEs.; Some other solvers do exist, such as semi-implici",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:2004,Modifiability,variab,variables,2004,"to details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In contrast, implicit solvers are very stable (without conditions on the time step) and therefore work with larger time steps. The drawback of such a method is that it is more time consuming.; For example, implicit solvers would be advised for stiff or low-mass objects. Finally, it must be pointed out that explicit and implicit solvers are not the only way to solve ODEs.; Some other solvers do exist, such as semi-implicit (also called explicit-implicit solvers) solvers. Such solvers solve a part of the equation explicitly and the other part implicitly.; With such solvers using data from different steps, the user may face the need to save some state vectors during several time steps.; More details about the implementation of these solvers are given in the documentation: chapter ""State"", and chapter ""Solvers"". ",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:2066,Modifiability,variab,variables,2066,"to details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In contrast, implicit solvers are very stable (without conditions on the time step) and therefore work with larger time steps. The drawback of such a method is that it is more time consuming.; For example, implicit solvers would be advised for stiff or low-mass objects. Finally, it must be pointed out that explicit and implicit solvers are not the only way to solve ODEs.; Some other solvers do exist, such as semi-implicit (also called explicit-implicit solvers) solvers. Such solvers solve a part of the equation explicitly and the other part implicitly.; With such solvers using data from different steps, the user may face the need to save some state vectors during several time steps.; More details about the implementation of these solvers are given in the documentation: chapter ""State"", and chapter ""Solvers"". ",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html:1869,Performance,load,loadings,1869," State component. Let us now go into details about the different ODE solvers in SOFA. First, the static integration is an integration which does not take the time into account. Such a static integration can be useful for checking the convergence of algorithms. Furthermore, different dynamic solvers have been implement in SOFA. Unlike static solvers, these solvers do take the dynamics of the system into account. However, depending on the aim of the computation, the solver has to be carefully chosen.; Let us review the basic differences between explicit and implicit solvers. Concerning the explicit solvers, they compute the new state variables from the state variables at the previous step.; The advantage is that explicit solvers can be fast, but the stability of the solver is not always granted. Very small time steps can be required to get satisfactory accuracy.; Moreover, such solvers are not suitable for every simulation. For example, explicit solvers do not compute cyclic loadings correctly, but could be advised in case of soft or high-mass objects. Concerning implicit solvers, they compute the new state variables by solving an equation involving the previous state variables and the new ones.; In contrast, implicit solvers are very stable (without conditions on the time step) and therefore work with larger time steps. The drawback of such a method is that it is more time consuming.; For example, implicit solvers would be advised for stiff or low-mass objects. Finally, it must be pointed out that explicit and implicit solvers are not the only way to solve ODEs.; Some other solvers do exist, such as semi-implicit (also called explicit-implicit solvers) solvers. Such solvers solve a part of the equation explicitly and the other part implicitly.; With such solvers using data from different steps, the user may face the need to save some state vectors during several time steps.; More details about the implementation of these solvers are given in the documentation: chapter",MatchSource.DOCS,examples/Tutorials/Solvers/Solvers.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/Solvers.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/StaticSolver.html:78,Deployability,update,update,78,". Static Solver. Description. The StaticSolver contains the algorithm used to update particle positions at each time step. As we are dealing with a Static solver, time (i.e. velocity and acceleration terms) is not taken into account. At each time step, the solver is looking for an equilibrium of the generalized forces at each nodes. Using a static solver can be useful to measure the convergence of several algorithms.; Solving for each point, the static equation amounts to solving a linear system Ax=b. In this scene, the static solver is coupled with an iterative linear solver: the CGLinearSolver, used to solve equation systems. . ",MatchSource.DOCS,examples/Tutorials/Solvers/StaticSolver.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Solvers/StaticSolver.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/StepByStep.html:473,Deployability,pipeline,pipeline,473,". Step by Step Tutorials. Pendulum Creation; Scene Creation; Topological Mapping. Description; In this set of tutorials, we will construct scenes from scratch, step by step.; The first Tutorial is about the creation of a Pendulum involving two simulated objects: we will rely on a mass spring system to simulate internal and external forces. ; In the second tutorial, we will simulate the collision of a deformable object against a floor. We will present how the collision pipeline works, and how models can be visually and mechanically. This concept of mapping is really central in Sofa, and is used in almost all our scenes. ",MatchSource.DOCS,examples/Tutorials/StepByStep/StepByStep.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/StepByStep.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html:515,Availability,avail,available,515,". Topology Tutorial. Triangular Topology. Description. 		In these tutorials we will introduce the different topologies that exist in SOFA. Indeed, depending on the number of dimension representing our mechanical object (1D,2D or 3D), a suitable topologies has to be found.; 		For a linear object (1D), beams must be used.; 		For a surface object (2D), the user can choose between different element types such as triangles or quads.; 		And finally, for a volume object (3D), tetrahedral or hexahedral topologies are available.; 		The choice of the element type is very important and has to be done depending on the geometry to mesh and on the aimed simulation. 		Once the type of element has been properly chosen, you need to import the topology of your objects in SOFA.; 		- If you are using an imported mesh, you just need to use the suitable meshLoader or use the MeshTopology to load the whole object topology. 		- Otherwise, you will have to define the following components in your scene file:; 		; SetTopologyContainer,; SetTopologyModifier,; SetTopologyAlgorithms,; SetGeometryAlgorithms. Almost all the topologies implemented in SOFA are linear elements. The implementation of quadratic elements is however possible, but the topology is to be reconsidered. ; Finally, we also introduce in this tutorial the notion of TopologicalMapping. It corresponds to transformation mapping of one topology to another. It is thereby possible to get a tetrahedral mesh based on a hexahedral mesh. ",MatchSource.DOCS,examples/Tutorials/Topologies/Topologies.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html:147,Integrability,depend,depending,147,". Topology Tutorial. Triangular Topology. Description. 		In these tutorials we will introduce the different topologies that exist in SOFA. Indeed, depending on the number of dimension representing our mechanical object (1D,2D or 3D), a suitable topologies has to be found.; 		For a linear object (1D), beams must be used.; 		For a surface object (2D), the user can choose between different element types such as triangles or quads.; 		And finally, for a volume object (3D), tetrahedral or hexahedral topologies are available.; 		The choice of the element type is very important and has to be done depending on the geometry to mesh and on the aimed simulation. 		Once the type of element has been properly chosen, you need to import the topology of your objects in SOFA.; 		- If you are using an imported mesh, you just need to use the suitable meshLoader or use the MeshTopology to load the whole object topology. 		- Otherwise, you will have to define the following components in your scene file:; 		; SetTopologyContainer,; SetTopologyModifier,; SetTopologyAlgorithms,; SetGeometryAlgorithms. Almost all the topologies implemented in SOFA are linear elements. The implementation of quadratic elements is however possible, but the topology is to be reconsidered. ; Finally, we also introduce in this tutorial the notion of TopologicalMapping. It corresponds to transformation mapping of one topology to another. It is thereby possible to get a tetrahedral mesh based on a hexahedral mesh. ",MatchSource.DOCS,examples/Tutorials/Topologies/Topologies.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html:597,Integrability,depend,depending,597,". Topology Tutorial. Triangular Topology. Description. 		In these tutorials we will introduce the different topologies that exist in SOFA. Indeed, depending on the number of dimension representing our mechanical object (1D,2D or 3D), a suitable topologies has to be found.; 		For a linear object (1D), beams must be used.; 		For a surface object (2D), the user can choose between different element types such as triangles or quads.; 		And finally, for a volume object (3D), tetrahedral or hexahedral topologies are available.; 		The choice of the element type is very important and has to be done depending on the geometry to mesh and on the aimed simulation. 		Once the type of element has been properly chosen, you need to import the topology of your objects in SOFA.; 		- If you are using an imported mesh, you just need to use the suitable meshLoader or use the MeshTopology to load the whole object topology. 		- Otherwise, you will have to define the following components in your scene file:; 		; SetTopologyContainer,; SetTopologyModifier,; SetTopologyAlgorithms,; SetGeometryAlgorithms. Almost all the topologies implemented in SOFA are linear elements. The implementation of quadratic elements is however possible, but the topology is to be reconsidered. ; Finally, we also introduce in this tutorial the notion of TopologicalMapping. It corresponds to transformation mapping of one topology to another. It is thereby possible to get a tetrahedral mesh based on a hexahedral mesh. ",MatchSource.DOCS,examples/Tutorials/Topologies/Topologies.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html:882,Performance,load,load,882,". Topology Tutorial. Triangular Topology. Description. 		In these tutorials we will introduce the different topologies that exist in SOFA. Indeed, depending on the number of dimension representing our mechanical object (1D,2D or 3D), a suitable topologies has to be found.; 		For a linear object (1D), beams must be used.; 		For a surface object (2D), the user can choose between different element types such as triangles or quads.; 		And finally, for a volume object (3D), tetrahedral or hexahedral topologies are available.; 		The choice of the element type is very important and has to be done depending on the geometry to mesh and on the aimed simulation. 		Once the type of element has been properly chosen, you need to import the topology of your objects in SOFA.; 		- If you are using an imported mesh, you just need to use the suitable meshLoader or use the MeshTopology to load the whole object topology. 		- Otherwise, you will have to define the following components in your scene file:; 		; SetTopologyContainer,; SetTopologyModifier,; SetTopologyAlgorithms,; SetGeometryAlgorithms. Almost all the topologies implemented in SOFA are linear elements. The implementation of quadratic elements is however possible, but the topology is to be reconsidered. ; Finally, we also introduce in this tutorial the notion of TopologicalMapping. It corresponds to transformation mapping of one topology to another. It is thereby possible to get a tetrahedral mesh based on a hexahedral mesh. ",MatchSource.DOCS,examples/Tutorials/Topologies/Topologies.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/Topologies.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html:2018,Deployability,update,updated,2018,"torial, a cube is represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation, whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	You can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	 When deleting quads (Shift + right click during the simulation), the topological mapping is updated. Thus, hexahedrons behind the selected quad will be deleted as well. Then, the list of quads on the border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html:2141,Deployability,update,updated,2141,"torial, a cube is represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation, whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	You can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	 When deleting quads (Shift + right click during the simulation), the topological mapping is updated. Thus, hexahedrons behind the selected quad will be deleted as well. Then, the list of quads on the border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html:1173,Energy Efficiency,green,green,1173,"olume mesh and a 2D surface mesh. In this tutorial, a cube is represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation, whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	You can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	 When deleting quads (Shift + right click during the simulation), the topological mapping is updated. Thus, hexahedrons behind the selected quad will be deleted as well. Then, the list of quads on the border will be u",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html:238,Performance,load,loader,238,". Topology Dynamic Surface Mesh. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between a 3D volume mesh and a 2D surface mesh. In this tutorial, a cube is represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation, whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	You can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	 When deleting quads (Shift + right click during the simulation), the topolo",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyDynamicSurfaceMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html:1979,Deployability,update,updated,1979,"3D volume mesh and a 2D surface mesh. In this tutorial, a cube is represented, implying:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactiona between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual modela which reproduce the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	you can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally, try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	When deleting quads, the topological mapping is updated. Thus, hexahedra behind the selected quad will be deleted as well. Then, the list of quads on the border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html:2100,Deployability,update,updated,2100,"3D volume mesh and a 2D surface mesh. In this tutorial, a cube is represented, implying:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactiona between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual modela which reproduce the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	you can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally, try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	When deleting quads, the topological mapping is updated. Thus, hexahedra behind the selected quad will be deleted as well. Then, the list of quads on the border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html:1178,Energy Efficiency,green,green,1178,"3D volume mesh and a 2D surface mesh. In this tutorial, a cube is represented, implying:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactiona between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual modela which reproduce the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	you can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally, try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	When deleting quads, the topological mapping is updated. Thus, hexahedra behind the selected quad will be deleted as well. Then, the list of quads on the border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html:244,Performance,load,loader,244,". Topology Hexa2QuadTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between a 3D volume mesh and a 2D surface mesh. In this tutorial, a cube is represented, implying:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactiona between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual modela which reproduce the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the hexahedra, a second node is used to represent the quad topology.; 	; 	This second representation won't reproduce all quads of the hexahedra topology, but only quads on the mesh borders. I.e quads with only one adjacent hexahedron. This process is similar to the Tetra2TriangleTopologicalMapping.; 	; 	Edges of hexahedra are represented in yellow in the simulation whereas the visual model is based on the quads. Thus, display the scene in wire frame to see hexahedra and quads (in green).; 	. 	To create this mapping, the component Hexa2QuadTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (hexahedron here) and has an output topology (Data Object2) which is the container of the above topology (quad here).; 	. Results. 	As explained, the visual model uses the output topology (quads) to render the surface model.; 	; 	you can try to use directly the quads created in the HexahedronSetTopologyContainer for the ogl model. The result will be a cube with quads displayed inside the volume.; 	. 	Finally, try to remove the HexahedronFEMForceField or QuadularBendingSprings component. The result will be a bad behavior of the cube.; 	. Additional results. 	When deleting quads, the topological mapping is updated. Thus, hexahed",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2QuadTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html:106,Availability,avail,available,106,". Tutorial Topology Hexa2TetraTopologicalMapping. Description. 	This tutorial shows a very useful mapping available in SOFA. As its name suggests, this mapping enables you to get a tetrahedral topology from a hexadral one.; 	Therefore, this mapping divides each hexahedron into 6 tetrahedra. This can be very useful to get tetrahedra if you are working with a RegularGrid geometry. . 	By using the Hexa2TetraTopologicalMapping, you will collect all the data concerning the tetrahedra in the following components:; 	; TetrahedronSetTopologyContainer,; TetrahedronSetTopologyModifier,; TetrahedronSetTopologyAlgorithms,; TetrahedronSetGeometryAlgorithms. It must be stressed that the default division of each hexahedron is always made in the same way, so that it can lead to mesh orientation.; 	To avoid this bias effect, a swapping method is proposed just by activating a flag ""swapping"" in order to perform the better division. ; And do not forget that topological changes are not handled in this mapping. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html:899,Performance,perform,perform,899,". Tutorial Topology Hexa2TetraTopologicalMapping. Description. 	This tutorial shows a very useful mapping available in SOFA. As its name suggests, this mapping enables you to get a tetrahedral topology from a hexadral one.; 	Therefore, this mapping divides each hexahedron into 6 tetrahedra. This can be very useful to get tetrahedra if you are working with a RegularGrid geometry. . 	By using the Hexa2TetraTopologicalMapping, you will collect all the data concerning the tetrahedra in the following components:; 	; TetrahedronSetTopologyContainer,; TetrahedronSetTopologyModifier,; TetrahedronSetTopologyAlgorithms,; TetrahedronSetGeometryAlgorithms. It must be stressed that the default division of each hexahedron is always made in the same way, so that it can lead to mesh orientation.; 	To avoid this bias effect, a swapping method is proposed just by activating a flag ""swapping"" in order to perform the better division. ; And do not forget that topological changes are not handled in this mapping. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html:796,Safety,avoid,avoid,796,". Tutorial Topology Hexa2TetraTopologicalMapping. Description. 	This tutorial shows a very useful mapping available in SOFA. As its name suggests, this mapping enables you to get a tetrahedral topology from a hexadral one.; 	Therefore, this mapping divides each hexahedron into 6 tetrahedra. This can be very useful to get tetrahedra if you are working with a RegularGrid geometry. . 	By using the Hexa2TetraTopologicalMapping, you will collect all the data concerning the tetrahedra in the following components:; 	; TetrahedronSetTopologyContainer,; TetrahedronSetTopologyModifier,; TetrahedronSetTopologyAlgorithms,; TetrahedronSetGeometryAlgorithms. It must be stressed that the default division of each hexahedron is always made in the same way, so that it can lead to mesh orientation.; 	To avoid this bias effect, a swapping method is proposed just by activating a flag ""swapping"" in order to perform the better division. ; And do not forget that topological changes are not handled in this mapping. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyHexa2TetraTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyLinearDifferentMesh.html:1164,Performance,perform,perform,1164,". Topology Linear Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create linear mesh topologies. In this tutorial, three linear pendulums are represented, implying:; 	 ; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A mesh spring forcefield to create springs between points; An ODE scheme and a linear solver to solve the system at each time step.; And a topological component. Key points. 	There are three possible ways to build a linear mesh using the components:; 	; MeshTopology, to create a static mesh. I.e a component able to handle different topologies (2D/3D), either triangles, tetrahedra, quads, or hexahedra. But this component is only a container. This means, the structure can be accessed, as well as further information. But no modifications are possible.; RegularGridTopology, to create a regular mesh. I.e a component able to create a mesh (no mesh file needed) with a regular grid, by giving the boundaries and the scaling.; EdgeSetTopologyContainer, to create a dynamic mesh. I.e a component able to handle only edge topology, but, other classes can be added to perform topological operations. Classes are EdgeSetTopologyModifier (for unitary operation), EdgeSetTopologyAlgorithms (for more complex topological operations) and EdgeSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulate, the three models will act as a pendulum, the same way.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyLinearDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyLinearDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyLinearDifferentMesh.html:777,Security,access,accessed,777,". Topology Linear Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create linear mesh topologies. In this tutorial, three linear pendulums are represented, implying:; 	 ; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A mesh spring forcefield to create springs between points; An ODE scheme and a linear solver to solve the system at each time step.; And a topological component. Key points. 	There are three possible ways to build a linear mesh using the components:; 	; MeshTopology, to create a static mesh. I.e a component able to handle different topologies (2D/3D), either triangles, tetrahedra, quads, or hexahedra. But this component is only a container. This means, the structure can be accessed, as well as further information. But no modifications are possible.; RegularGridTopology, to create a regular mesh. I.e a component able to create a mesh (no mesh file needed) with a regular grid, by giving the boundaries and the scaling.; EdgeSetTopologyContainer, to create a dynamic mesh. I.e a component able to handle only edge topology, but, other classes can be added to perform topological operations. Classes are EdgeSetTopologyModifier (for unitary operation), EdgeSetTopologyAlgorithms (for more complex topological operations) and EdgeSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulate, the three models will act as a pendulum, the same way.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyLinearDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyLinearDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyLinearMesh.html:787,Availability,down,down,787,". Topology Linear Mesh. Description. 	The aim of this tutorial is to show the importance of topological components. Indeed, in this tutorial, two linear pendulums are represented, implying:; 	; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A mesh spring forcefield to create springs between points; An ODE scheme and a linear solver to solve the system at each time step. Key points. 	The only difference between the models is the MeshTopology component. In the first case, edges are defined. Thus, meshSpringForceField will know a list of edges where it will create springs. In the other case, no springs are created.; 	. Results. 	Thus, when simulated, the first model will act as a pendulum, whereas in the other case, points will just fall down, as they are not attached together.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyLinearMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyLinearMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyQuad2TriangleTopologicalMapping.html:1765,Deployability,update,updated,1765,". Tutorial Topology Quad2TriangleTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between two 2D surface meshes. In this tutorial, a soft cube is represented, implying:; 	 ; A mesh loader to read mesh file.; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the quad mesh, a second node is used to represent the triangle mesh.; 	; 	This is not the same case as a topological mapping with different dimension. In this case, both topologies are 2D surfaces. Thus, the triangulation will split each quad into 2 adjacent triangles.; 	; 	Triangle edges are represented in yellow in the simulation. Display the scene in wire frame to see the quads.; 	. 	To create this mapping, the component Quad2TriangleTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (quad here) and has an output topology (Data Object2) which is the container of the above topology (triangle here).; 	. Results. 	In this simulation, no forcefield is linked to the quads, showing that the ""above"" topology can be used as a base for the simulation. (useful when a more precise topology is wanted); 	; 	Try to remove either the TriangularBendingSprings or TriangularFEMForceField component. The result will be a completely stretched tissue.; 	. Additional results. 	When deleting triangles, the topological mapping is updated, and so is the list of quads.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyQuad2TriangleTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyQuad2TriangleTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyQuad2TriangleTopologicalMapping.html:246,Performance,load,loader,246,". Tutorial Topology Quad2TriangleTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between two 2D surface meshes. In this tutorial, a soft cube is represented, implying:; 	 ; A mesh loader to read mesh file.; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the quad mesh, a second node is used to represent the triangle mesh.; 	; 	This is not the same case as a topological mapping with different dimension. In this case, both topologies are 2D surfaces. Thus, the triangulation will split each quad into 2 adjacent triangles.; 	; 	Triangle edges are represented in yellow in the simulation. Display the scene in wire frame to see the quads.; 	. 	To create this mapping, the component Quad2TriangleTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (quad here) and has an output topology (Data Object2) which is the container of the above topology (triangle here).; 	. Results. 	In this simulation, no forcefield is linked to the quads, showing that the ""above"" topology can be used as a base for the simulation. (useful when a more precise topology is wanted); 	; 	Try to remove either the TriangularBendingSprings or TriangularFEMForceField component. The result will be a completely stretched tissue.; 	. Additional results. 	When deleting triangles, the topological mapping is updated, and so is the list of quads.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyQuad2TriangleTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyQuad2TriangleTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html:1162,Energy Efficiency,green,green,1162,". Topology Surface Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create 2D surface mesh topologies. In this tutorial, three soft tissues are represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interaction between points; An ODE scheme and a linear solver to solve the system at each time step.; A topological component.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	There are three possible ways to build a 2D surface mesh using the following components.; 	These components are extensions of the ones explained in the Tutorial Topology Linear Different Mesh.; 	; MeshTopology creates a static mesh (red model). Here there are triangles and edges, using a mesh file. But no modifications are possible.; RegularGridTopology creates a regular mesh (blue model). Here there are regular quads. No mesh file needed, using only boundaries and the scaling.; TriangleSetTopologyContainer creates a dynamic mesh (green model). Here there are triangles and edges, using a mesh file. Other classes can be added to perform topological operations. Classes are TriangleSetTopologyModifier (for unitary operation), TriangleSetTopologyAlgorithms (for more complex topological operations) and TriangleSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulated, the three models will fall due to gravity. A different behavior can be noticed for the regular grid near the fix points due to the different topology elements used (triangles versus quads). ; 	; 	Note that it is possible to add triangle behavior for the regular grid, using a topological mapping. See TutorialTopologyQuad2TriangleTopologicalMapping.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html:218,Performance,load,loader,218,". Topology Surface Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create 2D surface mesh topologies. In this tutorial, three soft tissues are represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interaction between points; An ODE scheme and a linear solver to solve the system at each time step.; A topological component.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	There are three possible ways to build a 2D surface mesh using the following components.; 	These components are extensions of the ones explained in the Tutorial Topology Linear Different Mesh.; 	; MeshTopology creates a static mesh (red model). Here there are triangles and edges, using a mesh file. But no modifications are possible.; RegularGridTopology creates a regular mesh (blue model). Here there are regular quads. No mesh file needed, using only boundaries and the scaling.; TriangleSetTopologyContainer creates a dynamic mesh (green model). Here there are triangles and edges, using a mesh file. Other classes can be added to perform topological operations. Classes are TriangleSetTopologyModifier (for unitary operation), TriangleSetTopologyAlgorithms (for more complex topological operations) and TriangleSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulated, the three models will fall due to gravity. A different behavior can be noticed for the regular grid near the fix points due to the different topology elements used (triangles versus quads). ; 	; 	Note that it is possible to add triangle behavior for the regular grid, using a topological mapping. See TutorialTopologyQuad2TriangleTopologicalMapping.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html:1261,Performance,perform,perform,1261,". Topology Surface Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create 2D surface mesh topologies. In this tutorial, three soft tissues are represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interaction between points; An ODE scheme and a linear solver to solve the system at each time step.; A topological component.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	There are three possible ways to build a 2D surface mesh using the following components.; 	These components are extensions of the ones explained in the Tutorial Topology Linear Different Mesh.; 	; MeshTopology creates a static mesh (red model). Here there are triangles and edges, using a mesh file. But no modifications are possible.; RegularGridTopology creates a regular mesh (blue model). Here there are regular quads. No mesh file needed, using only boundaries and the scaling.; TriangleSetTopologyContainer creates a dynamic mesh (green model). Here there are triangles and edges, using a mesh file. Other classes can be added to perform topological operations. Classes are TriangleSetTopologyModifier (for unitary operation), TriangleSetTopologyAlgorithms (for more complex topological operations) and TriangleSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulated, the three models will fall due to gravity. A different behavior can be noticed for the regular grid near the fix points due to the different topology elements used (triangles versus quads). ; 	; 	Note that it is possible to add triangle behavior for the regular grid, using a topological mapping. See TutorialTopologyQuad2TriangleTopologicalMapping.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologySurfaceDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html:2067,Deployability,update,updated,2067,"ing:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the tetrahedrization, a second node is used to represent the triangle topology.; 	; 	This second representation won't reproduce all triangles of the tetrahedrization, but only triangles on the mesh borders. I.e triangles with only one adjacent tetrahedron. This process is similar to the Triangle2EdgeTopologicalMapping.; 	; 	Edges of tetrahedra are represented in yellow in the simulation whereas the visual model is based on the triangles. Thus, display the scene in wire frame to see tetrahedra and triangles (in blue).; 	. 	To create this mapping, the component Tetra2TriangleTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (tetrahedron here) and has an output topology (Data Object2) which is the container of the above topology (triangle here).; 	. Results. 	As explained the visual model uses the output topology (triangles) to render the surface model.; 	; 	You can try to directly use the triangles created in the TetrahedronSetTopologyContainer for the ogl model. The result will be a cylinder with triangles displayed inside the volume.; 	. 	Finally, try to remove the TetrahedralCorotationalFEMForceField or TriangularBendingSprings component. The result will be a bad behavior of the cylinder.; 	. Additional results. 	When deleting triangles, the topological mapping is updated. Thus, tetrahedra behind the selected triangle will be deleted as well. Then, the list of triangles on border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html:2193,Deployability,update,updated,2193,"ing:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the tetrahedrization, a second node is used to represent the triangle topology.; 	; 	This second representation won't reproduce all triangles of the tetrahedrization, but only triangles on the mesh borders. I.e triangles with only one adjacent tetrahedron. This process is similar to the Triangle2EdgeTopologicalMapping.; 	; 	Edges of tetrahedra are represented in yellow in the simulation whereas the visual model is based on the triangles. Thus, display the scene in wire frame to see tetrahedra and triangles (in blue).; 	. 	To create this mapping, the component Tetra2TriangleTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (tetrahedron here) and has an output topology (Data Object2) which is the container of the above topology (triangle here).; 	. Results. 	As explained the visual model uses the output topology (triangles) to render the surface model.; 	; 	You can try to directly use the triangles created in the TetrahedronSetTopologyContainer for the ogl model. The result will be a cylinder with triangles displayed inside the volume.; 	. 	Finally, try to remove the TetrahedralCorotationalFEMForceField or TriangularBendingSprings component. The result will be a bad behavior of the cylinder.; 	. Additional results. 	When deleting triangles, the topological mapping is updated. Thus, tetrahedra behind the selected triangle will be deleted as well. Then, the list of triangles on border will be updated and the surface rendering also.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html:253,Performance,load,loader,253,". Topology Tetra2TriangleTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between a 3D volume mesh and a 2D surface mesh. In this tutorial, a cylinder is represented, implying:; 	; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the tetrahedrization, a second node is used to represent the triangle topology.; 	; 	This second representation won't reproduce all triangles of the tetrahedrization, but only triangles on the mesh borders. I.e triangles with only one adjacent tetrahedron. This process is similar to the Triangle2EdgeTopologicalMapping.; 	; 	Edges of tetrahedra are represented in yellow in the simulation whereas the visual model is based on the triangles. Thus, display the scene in wire frame to see tetrahedra and triangles (in blue).; 	. 	To create this mapping, the component Tetra2TriangleTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (tetrahedron here) and has an output topology (Data Object2) which is the container of the above topology (triangle here).; 	. Results. 	As explained the visual model uses the output topology (triangles) to render the surface model.; 	; 	You can try to directly use the triangles created in the TetrahedronSetTopologyContainer for the ogl model. The result will be a cylinder with triangles displayed inside the volume.; 	. 	Finally, try to remove the TetrahedralCorotationalFEMForceField or TriangularBendingSprings component. The result will be a bad behavior of the cylinder.; 	. Additio",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html:1757,Deployability,update,updated,1757,". Topology Triangle2EdgeTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between a 2D surface mesh and a 1D linear mesh. In this tutorial, a soft tissues is represented, implying:; 	 ; A mesh loader to read mesh file.; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the triangulation, a second node is used to represent the linear topology.; 	; 	This second representation won't reproduce all edges of the triangulation, but only edges on the mesh borders. I.e edges with only one adjacent triangle. ; 	; 	They are represented in green in the simulation.; 	. 	To create this mapping, the component Triangle2EdgeTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (triangulation here) and has an output topology (Data Object2) which is the container of the above topology (edges here).; 	. Results. 	In this simulation, both triangulation and edge mesh have spring forcefields to create interaction between points. Thus, when simulating, the soft tissue won't stretch.; 	; 	Try to remove the TriangularBendingSprings component. The result will be a tissue completely stretched.; 	. 	Finally, try to remove the MeshSringForceField component. The result will be a bad behavior of the mesh borders.; 	. Additional results. 	When deleting triangles, the topological mapping is updated and so is the list of border edges.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html:938,Energy Efficiency,green,green,938,". Topology Triangle2EdgeTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between a 2D surface mesh and a 1D linear mesh. In this tutorial, a soft tissues is represented, implying:; 	 ; A mesh loader to read mesh file.; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the triangulation, a second node is used to represent the linear topology.; 	; 	This second representation won't reproduce all edges of the triangulation, but only edges on the mesh borders. I.e edges with only one adjacent triangle. ; 	; 	They are represented in green in the simulation.; 	. 	To create this mapping, the component Triangle2EdgeTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (triangulation here) and has an output topology (Data Object2) which is the container of the above topology (edges here).; 	. Results. 	In this simulation, both triangulation and edge mesh have spring forcefields to create interaction between points. Thus, when simulating, the soft tissue won't stretch.; 	; 	Try to remove the TriangularBendingSprings component. The result will be a tissue completely stretched.; 	. 	Finally, try to remove the MeshSringForceField component. The result will be a bad behavior of the mesh borders.; 	. Additional results. 	When deleting triangles, the topological mapping is updated and so is the list of border edges.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html:257,Performance,load,loader,257,". Topology Triangle2EdgeTopologicalMapping. Description. 	The aim of this tutorial is to show the interest of using a topological mapping between a 2D surface mesh and a 1D linear mesh. In this tutorial, a soft tissues is represented, implying:; 	 ; A mesh loader to read mesh file.; A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; Dynamic topological components.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	Under the first node representing the triangulation, a second node is used to represent the linear topology.; 	; 	This second representation won't reproduce all edges of the triangulation, but only edges on the mesh borders. I.e edges with only one adjacent triangle. ; 	; 	They are represented in green in the simulation.; 	. 	To create this mapping, the component Triangle2EdgeTopologicalMapping is used. This component takes an input topology (Data Object1) which is the container of the ""upper"" topology (triangulation here) and has an output topology (Data Object2) which is the container of the above topology (edges here).; 	. Results. 	In this simulation, both triangulation and edge mesh have spring forcefields to create interaction between points. Thus, when simulating, the soft tissue won't stretch.; 	; 	Try to remove the TriangularBendingSprings component. The result will be a tissue completely stretched.; 	. 	Finally, try to remove the MeshSringForceField component. The result will be a bad behavior of the mesh borders.; 	. Additional results. 	When deleting triangles, the topological mapping is updated and so is the list of border edges.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyTriangle2EdgeTopologicalMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyVolumeDifferentMesh.html:213,Performance,load,loader,213,". Topology Volume Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create 3D volume mesh topologies. In this tutorial, three cylinders are represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; A topological component.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	There are three possible ways to build a 3D volume mesh using the following components.; 	These components are extensions of the ones explained in the Tutorial Topology Linear Different Mesh.; 	; MeshTopology creates a static mesh. Here there are tetrahedra, triangles and edges, using a mesh file. But no modifications are possible.; CylinderGridTopology creates a regular mesh. Here there are regular hexahedra. No mesh file is needed, using only boundaries and the scaling. CylinderGridTopology is an extension of the RegularGridTopology which would create a cube in this case.; TriangleSetTopologyContainer creates a dynamic mesh. Here there are tetrahedra, triangles and edges, using a mesh file. Other classes can be added to perform topological operations. Classes are TetrahedronSetTopologyModifier (for unitary operation), TetrahedronSetTopologyAlgorithms (for more complex topological operations) and TetrahedronSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulated, the three models will fall due to gravity. A different behavior can be noticed for the regular grid near the fixed points due to the different topology elements used (hexahedra versus tetrahedra).; 	; 	Note that it is possible to change the behavior for the regular grid, using a topological mapping. See TutorialTopologyHexa2TetraTopologicalMapp",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyVolumeDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyVolumeDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyVolumeDifferentMesh.html:1353,Performance,perform,perform,1353," Volume Different Mesh. Description. 	The aim of this tutorial is to show the different ways to create 3D volume mesh topologies. In this tutorial, three cylinders are represented, implying:; 	 ; A mesh loader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; A mass for gravity and fixed points.; A FEM forcefield to create interactions between points; An ODE scheme and a linear solver to solve the system at each time step.; A topological component.; A visual model which reproduces the current model geometry thanks to the identity mapping. Key points. 	There are three possible ways to build a 3D volume mesh using the following components.; 	These components are extensions of the ones explained in the Tutorial Topology Linear Different Mesh.; 	; MeshTopology creates a static mesh. Here there are tetrahedra, triangles and edges, using a mesh file. But no modifications are possible.; CylinderGridTopology creates a regular mesh. Here there are regular hexahedra. No mesh file is needed, using only boundaries and the scaling. CylinderGridTopology is an extension of the RegularGridTopology which would create a cube in this case.; TriangleSetTopologyContainer creates a dynamic mesh. Here there are tetrahedra, triangles and edges, using a mesh file. Other classes can be added to perform topological operations. Classes are TetrahedronSetTopologyModifier (for unitary operation), TetrahedronSetTopologyAlgorithms (for more complex topological operations) and TetrahedronSetGeometryAlgorithms (to couple topology algorithms and geometry positions). . Results. 	Thus, when simulated, the three models will fall due to gravity. A different behavior can be noticed for the regular grid near the fixed points due to the different topology elements used (hexahedra versus tetrahedra).; 	; 	Note that it is possible to change the behavior for the regular grid, using a topological mapping. See TutorialTopologyHexa2TetraTopologicalMapping.; 	. ",MatchSource.DOCS,examples/Tutorials/Topologies/TopologyVolumeDifferentMesh.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/Topologies/TopologyVolumeDifferentMesh.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_01.html:214,Performance,load,load,214,". Tutorials for Haptics in a dentistry context; Description:. 		The aim of these tutorials is to understand, step by step, how to create a scene with an Omni phantom device.; 		. 		This first tutorial shows how to load the visual model of the tooth.; 		The first line defines global parameters for the scene which are attached to the root node of the scene.; 		Then we build an arborescence to contain the different objects of the scene:; 		; A root node for all the head; In the head node, we display the visual model of the head with the OglModelComponent.; In the head node, we create a new node for the tongue and another for the teeth.; In each of these nodes, we respectively display the visual model with the OglModelComponent. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_01.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_01.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html:347,Deployability,integrat,integrator,347,". Instrument visual model; Description:. 		In this scene, we build the basics for a moving object. . 		; Key points:. First, we put a gravity in the whole scene with the Gravity component.; We set the instrument as a MechanicalObject. It describes the state of the particles of the object.; To compute the states at each time step, we need a time integrator, like the EulerImplicitSolver.; We need a linear solver, like CGLinearSolver, to solve the linear system generated with our implicit solver.; We finally add a mass to the object with the UniformMass component. Note:; The gravity can be set in a node with the vec3d argument gravity instead of with a component.; See other tutorials to learn more about time integration.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html:715,Deployability,integrat,integration,715,". Instrument visual model; Description:. 		In this scene, we build the basics for a moving object. . 		; Key points:. First, we put a gravity in the whole scene with the Gravity component.; We set the instrument as a MechanicalObject. It describes the state of the particles of the object.; To compute the states at each time step, we need a time integrator, like the EulerImplicitSolver.; We need a linear solver, like CGLinearSolver, to solve the linear system generated with our implicit solver.; We finally add a mass to the object with the UniformMass component. Note:; The gravity can be set in a node with the vec3d argument gravity instead of with a component.; See other tutorials to learn more about time integration.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html:347,Integrability,integrat,integrator,347,". Instrument visual model; Description:. 		In this scene, we build the basics for a moving object. . 		; Key points:. First, we put a gravity in the whole scene with the Gravity component.; We set the instrument as a MechanicalObject. It describes the state of the particles of the object.; To compute the states at each time step, we need a time integrator, like the EulerImplicitSolver.; We need a linear solver, like CGLinearSolver, to solve the linear system generated with our implicit solver.; We finally add a mass to the object with the UniformMass component. Note:; The gravity can be set in a node with the vec3d argument gravity instead of with a component.; See other tutorials to learn more about time integration.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html:715,Integrability,integrat,integration,715,". Instrument visual model; Description:. 		In this scene, we build the basics for a moving object. . 		; Key points:. First, we put a gravity in the whole scene with the Gravity component.; We set the instrument as a MechanicalObject. It describes the state of the particles of the object.; To compute the states at each time step, we need a time integrator, like the EulerImplicitSolver.; We need a linear solver, like CGLinearSolver, to solve the linear system generated with our implicit solver.; We finally add a mass to the object with the UniformMass component. Note:; The gravity can be set in a node with the vec3d argument gravity instead of with a component.; See other tutorials to learn more about time integration.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html:693,Usability,learn,learn,693,". Instrument visual model; Description:. 		In this scene, we build the basics for a moving object. . 		; Key points:. First, we put a gravity in the whole scene with the Gravity component.; We set the instrument as a MechanicalObject. It describes the state of the particles of the object.; To compute the states at each time step, we need a time integrator, like the EulerImplicitSolver.; We need a linear solver, like CGLinearSolver, to solve the linear system generated with our implicit solver.; We finally add a mass to the object with the UniformMass component. Note:; The gravity can be set in a node with the vec3d argument gravity instead of with a component.; See other tutorials to learn more about time integration.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_03.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html:153,Deployability,pipeline,pipeline,153,". Collision detection; Description:. 			In this tutorial, we add the collision between the teeth and the instrument.; 		; Key points:. Added a collision pipeline using hierarchical bounding boxes and a proximity detection algorithm ; Added collision model (Triangle, Line, Point) for the teeth; Added collision model (Line, Point) for the instrument; Added a mapping (RigidMapping) to ""connect"" the Mechanical Model and the Collision Model. Note:; The collision model mesh is charged using the objects MeshLoader and Mesh; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html:476,Energy Efficiency,charge,charged,476,". Collision detection; Description:. 			In this tutorial, we add the collision between the teeth and the instrument.; 		; Key points:. Added a collision pipeline using hierarchical bounding boxes and a proximity detection algorithm ; Added collision model (Triangle, Line, Point) for the teeth; Added collision model (Line, Point) for the instrument; Added a mapping (RigidMapping) to ""connect"" the Mechanical Model and the Collision Model. Note:; The collision model mesh is charged using the objects MeshLoader and Mesh; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html:12,Safety,detect,detection,12,". Collision detection; Description:. 			In this tutorial, we add the collision between the teeth and the instrument.; 		; Key points:. Added a collision pipeline using hierarchical bounding boxes and a proximity detection algorithm ; Added collision model (Triangle, Line, Point) for the teeth; Added collision model (Line, Point) for the instrument; Added a mapping (RigidMapping) to ""connect"" the Mechanical Model and the Collision Model. Note:; The collision model mesh is charged using the objects MeshLoader and Mesh; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html:212,Safety,detect,detection,212,". Collision detection; Description:. 			In this tutorial, we add the collision between the teeth and the instrument.; 		; Key points:. Added a collision pipeline using hierarchical bounding boxes and a proximity detection algorithm ; Added collision model (Triangle, Line, Point) for the teeth; Added collision model (Line, Point) for the instrument; Added a mapping (RigidMapping) to ""connect"" the Mechanical Model and the Collision Model. Note:; The collision model mesh is charged using the objects MeshLoader and Mesh; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_04.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_05.html:210,Safety,avoid,avoid,210,". Constraint resolution; Description:. 			The aim of this tutorial is to add the constraint response in our scene. ; 			When a contact between two objects occurs, a constraint is created to generate a force to avoid the contact at the next time step.; 		; Key points:. In the root node, we add a FreeMotionAnimationLoop solver which gets the constraints from the objects, computes the LCP and propagates the contact correction.; In the instrument node, we add UncoupledConstraintCorrection to compute the constraints of the related object. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_05.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_05.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_05b.html:211,Safety,detect,detection,211,". Instrument visual model; Description:. 		Added LCP contact resolution. The modifications are:; 		In the root node:; Added a different collision response (FrictionContact); Added local minimal distance contact detection; Added a FreeMotionAnimationLoop which gets the constraints from the objects, computes the LCP and propagates the contact correction; 		In the instrument node:; Added UncoupledConstraintCorrection to compute the constraints of the related object. 		Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_05b.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_05b.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06.html:269,Deployability,update,updates,269,. Connection with the Omni device; Description:; 		; 		This scene introduces the omni device and connect it to control the instrument. 		Key points:. Added a driver for the Omni phantom device; Added a mechanical state controller that gathers data from the phantom and updates the position of a representation of the device in the simulation ; Added a computation (LCPForceFeedback) of the haptic forces ; Added VectorSpringForceField & JointSpringForceField to link the mouvements of the Omni phantom and the instrument. Next. ,MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06a.html:198,Deployability,update,updates,198,. Instrument visual model; Description:. 		Using DistanceGrid collision:; 		Added a driver for the Omni phantom device ; 		Added a mechanical state controller that gathers data from the phantom and updates the position of a representation of the device in the simulation ; 		Added a computation (EnslavementForceFeedback) of the haptic forces ; 		Added VectorSpringForceField && JointSpringForceField to link the mouvements of the Omni phantom and the instrument; Redo this tutorial with proximity collision. ,MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06a.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06a.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06b.html:212,Deployability,update,updates,212,. Instrument visual model; Description:. 		Using LCP contact detection and resolution:; 		Added a driver for the Omni phantom device ; 		Added a mechanical state controller that gathers data from the phantom and updates the position of a representation of the device in the simulation ; 		Added a computation (LCPForceFeedback) of the haptic forces ; 		Added VectorSpringForceField && JointSpringForceField to link the mouvements of the Omni phantom and the instrument; Redo this tutorial with distance grid collision. ,MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06b.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06b.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06b.html:61,Safety,detect,detection,61,. Instrument visual model; Description:. 		Using LCP contact detection and resolution:; 		Added a driver for the Omni phantom device ; 		Added a mechanical state controller that gathers data from the phantom and updates the position of a representation of the device in the simulation ; 		Added a computation (LCPForceFeedback) of the haptic forces ; 		Added VectorSpringForceField && JointSpringForceField to link the mouvements of the Omni phantom and the instrument; Redo this tutorial with distance grid collision. ,MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06b.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_06b.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:1402,Availability,avail,available,1402,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:514,Deployability,integrat,integration,514,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:858,Deployability,update,updated,858,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:132,Integrability,depend,depending,132,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:514,Integrability,integrat,integration,514,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:1498,Integrability,depend,depending,1498,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:1180,Modifiability,plugin,plugin,1180,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:1259,Modifiability,plugin,plugin,1259,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html:1215,Usability,learn,learn,1215,". Deformable model of the Tongue; Description:. 		We add a deformable model to the tongue. It means the tongue will move and deform depending on the forces applied on it.; 		To do this, we use the component TetrahedralCorotanionalFEMForceField. It uses finite element methods to compute the internal forces.; 		; Key points:. 			To add a deformable model in the scene, we need to create a MechanicalObject. All the forces and displacement are computed using an Euler implicit solver (EulerImplicitSolver) for time integration and a Conjugate Gradient linear solver (CGLinearSolver) to solve a linear system. ; 			We also need a container to store the tetrahedra (TetrahedronSetTopologyContainer). With all these components, we can add a force field to compute internal forces (TetrahedralCorotanionalFEMForceField).; 		. 			The visual model of the tongue is updated because of a mapping (BarycentricMapping) between the deformable model and the visual.; 		; Note:. 			In the current scene, the visual model of the tongue is not displayed, but the deformable model is displayed with the blue tetrahedra.; 		. 			The tetrahedric mesh of the tongue has been generated using the CGAL plugin in SOFA. Read this annex to learn more about mesh generation using CGAL plugin.; 		. 			The mass choosen for the deformable model of the tongue is a DiagonalMass. It has been choosen to show the diversity of masses available in SOFA. This kind of mass computes the mass matrix with non uniform diagonal values, depending on the tetrahedra size.; 		. Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_07.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_08.html:419,Usability,learn,learn,419,". Collision model of the Tongue; Description:. 			A node ""TongueCollisionModel"" is added to take the collision with the tongue into account.; 			We could use a different mesh (less detailed for example) of the tongue for the collision model, or (like here) we can use only the surface of the volumetric mesh used in the deformable model. ; 			This is done via a topological mapping (see Topological mapping tutorial to learn more).; 		. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_08.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_08.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.html:195,Modifiability,plugin,plugin,195,". Mesh generation; Preliminary note:. 			This scene is based on the component MeshTetraStuffing to generate from a surface mesh a tetrahedral mesh. Note that this can also be done using the CGAL plugin (which you would need to compile).; 		; Description:. 			This scene is not a simulation, it only generates a volumetric mesh from a surfacic mesh. ; 			Unlike surfacic meshes, volumetric meshes represent the interior volume of an object. ; 			The goal is to create this mesh and export it as a VTK file to use it later in another simulation.; 		; Key points:. Loading of the surfacic mesh with the Mesh component.; The MeshTetraStuffing component generates the interior volume geometry from the surfacic mesh.; We build a mesh from the generated geometry in a second Mesh component.; We export the mesh as a VTK file with the VTKExporter component. Note:. 			The MeshTetraStuffing component needs some crucial parameters to generate good quality meshes.; 		; Back. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html:1230,Performance,perform,performed,1230,"g not to enter into all the details related to the template selection. This will be done in another tutorial.; Find the icon on the far left of the toolbar in the Modeler. It looks like a piece of paper with the corner folded, and its tool tip is New Tab. Press the button.; This will give us a scene graph with some default components.; Right click on the TreeCollisionGroupManager and select Delete.; We don't need this component for our scene.; Find the OglModel component with the Filter, and drag and drop it onto the root node. Double click the OglModel node to edit its properties.; Rename the model ""Objective"".; Under the Property 2/3 tab, find the fileMesh section. Click on the ... button to bring up the file browser. Select the file /Sofa/share/mesh/dragon.obj, and press OK to return to the Modeler.; We now have a scene with all the components needed to handle collisions in a scene, and a visual model representing our deformable object.; Key points; This is how the collisions are performed in SOFA using these default components.; DefaultPipeline: Launch all the operations to perform the collision detection and response. Collision Detection:. Broad Phase: using ""Axis Aligned Bounding Boxes"" (AABB), we only keep potential colliding pair of objects; Narrow Phase: we use the geometrical primitives (spheres, triangles, lines, points) to test the distance between two objects. ; we use the BruteForceDetection to select which primitives will be used, and the MinProximityIntersection to detect if a collision exists between two geometrical primitives. Collision Response:. With all the colliding primitives, we create an appropriate collision response: the ContactManager gives the information about what response we have to use. ; Components are created dynamically in the graph to create repulsive forces, or constraints. In this tutorial, we will create PenalityContactForceField. . Advanced collision detection and response are implemented in SOFA, so don't hesitate to experim",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/0_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html:1327,Performance,perform,perform,1327,"nother tutorial.; Find the icon on the far left of the toolbar in the Modeler. It looks like a piece of paper with the corner folded, and its tool tip is New Tab. Press the button.; This will give us a scene graph with some default components.; Right click on the TreeCollisionGroupManager and select Delete.; We don't need this component for our scene.; Find the OglModel component with the Filter, and drag and drop it onto the root node. Double click the OglModel node to edit its properties.; Rename the model ""Objective"".; Under the Property 2/3 tab, find the fileMesh section. Click on the ... button to bring up the file browser. Select the file /Sofa/share/mesh/dragon.obj, and press OK to return to the Modeler.; We now have a scene with all the components needed to handle collisions in a scene, and a visual model representing our deformable object.; Key points; This is how the collisions are performed in SOFA using these default components.; DefaultPipeline: Launch all the operations to perform the collision detection and response. Collision Detection:. Broad Phase: using ""Axis Aligned Bounding Boxes"" (AABB), we only keep potential colliding pair of objects; Narrow Phase: we use the geometrical primitives (spheres, triangles, lines, points) to test the distance between two objects. ; we use the BruteForceDetection to select which primitives will be used, and the MinProximityIntersection to detect if a collision exists between two geometrical primitives. Collision Response:. With all the colliding primitives, we create an appropriate collision response: the ContactManager gives the information about what response we have to use. ; Components are created dynamically in the graph to create repulsive forces, or constraints. In this tutorial, we will create PenalityContactForceField. . Advanced collision detection and response are implemented in SOFA, so don't hesitate to experiment other examples.; Results; Press the Run in SOFA (or press Ctrl-R), and press Animate; In t",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/0_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html:1349,Safety,detect,detection,1349,"nother tutorial.; Find the icon on the far left of the toolbar in the Modeler. It looks like a piece of paper with the corner folded, and its tool tip is New Tab. Press the button.; This will give us a scene graph with some default components.; Right click on the TreeCollisionGroupManager and select Delete.; We don't need this component for our scene.; Find the OglModel component with the Filter, and drag and drop it onto the root node. Double click the OglModel node to edit its properties.; Rename the model ""Objective"".; Under the Property 2/3 tab, find the fileMesh section. Click on the ... button to bring up the file browser. Select the file /Sofa/share/mesh/dragon.obj, and press OK to return to the Modeler.; We now have a scene with all the components needed to handle collisions in a scene, and a visual model representing our deformable object.; Key points; This is how the collisions are performed in SOFA using these default components.; DefaultPipeline: Launch all the operations to perform the collision detection and response. Collision Detection:. Broad Phase: using ""Axis Aligned Bounding Boxes"" (AABB), we only keep potential colliding pair of objects; Narrow Phase: we use the geometrical primitives (spheres, triangles, lines, points) to test the distance between two objects. ; we use the BruteForceDetection to select which primitives will be used, and the MinProximityIntersection to detect if a collision exists between two geometrical primitives. Collision Response:. With all the colliding primitives, we create an appropriate collision response: the ContactManager gives the information about what response we have to use. ; Components are created dynamically in the graph to create repulsive forces, or constraints. In this tutorial, we will create PenalityContactForceField. . Advanced collision detection and response are implemented in SOFA, so don't hesitate to experiment other examples.; Results; Press the Run in SOFA (or press Ctrl-R), and press Animate; In t",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/0_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html:1738,Safety,detect,detect,1738,"ner folded, and its tool tip is New Tab. Press the button.; This will give us a scene graph with some default components.; Right click on the TreeCollisionGroupManager and select Delete.; We don't need this component for our scene.; Find the OglModel component with the Filter, and drag and drop it onto the root node. Double click the OglModel node to edit its properties.; Rename the model ""Objective"".; Under the Property 2/3 tab, find the fileMesh section. Click on the ... button to bring up the file browser. Select the file /Sofa/share/mesh/dragon.obj, and press OK to return to the Modeler.; We now have a scene with all the components needed to handle collisions in a scene, and a visual model representing our deformable object.; Key points; This is how the collisions are performed in SOFA using these default components.; DefaultPipeline: Launch all the operations to perform the collision detection and response. Collision Detection:. Broad Phase: using ""Axis Aligned Bounding Boxes"" (AABB), we only keep potential colliding pair of objects; Narrow Phase: we use the geometrical primitives (spheres, triangles, lines, points) to test the distance between two objects. ; we use the BruteForceDetection to select which primitives will be used, and the MinProximityIntersection to detect if a collision exists between two geometrical primitives. Collision Response:. With all the colliding primitives, we create an appropriate collision response: the ContactManager gives the information about what response we have to use. ; Components are created dynamically in the graph to create repulsive forces, or constraints. In this tutorial, we will create PenalityContactForceField. . Advanced collision detection and response are implemented in SOFA, so don't hesitate to experiment other examples.; Results; Press the Run in SOFA (or press Ctrl-R), and press Animate; In this scene, we only have a OglModel corresponding to a pure visual representation of an object. ; Nothing happens.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/0_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html:2156,Safety,detect,detection,2156,"ner folded, and its tool tip is New Tab. Press the button.; This will give us a scene graph with some default components.; Right click on the TreeCollisionGroupManager and select Delete.; We don't need this component for our scene.; Find the OglModel component with the Filter, and drag and drop it onto the root node. Double click the OglModel node to edit its properties.; Rename the model ""Objective"".; Under the Property 2/3 tab, find the fileMesh section. Click on the ... button to bring up the file browser. Select the file /Sofa/share/mesh/dragon.obj, and press OK to return to the Modeler.; We now have a scene with all the components needed to handle collisions in a scene, and a visual model representing our deformable object.; Key points; This is how the collisions are performed in SOFA using these default components.; DefaultPipeline: Launch all the operations to perform the collision detection and response. Collision Detection:. Broad Phase: using ""Axis Aligned Bounding Boxes"" (AABB), we only keep potential colliding pair of objects; Narrow Phase: we use the geometrical primitives (spheres, triangles, lines, points) to test the distance between two objects. ; we use the BruteForceDetection to select which primitives will be used, and the MinProximityIntersection to detect if a collision exists between two geometrical primitives. Collision Response:. With all the colliding primitives, we create an appropriate collision response: the ContactManager gives the information about what response we have to use. ; Components are created dynamically in the graph to create repulsive forces, or constraints. In this tutorial, we will create PenalityContactForceField. . Advanced collision detection and response are implemented in SOFA, so don't hesitate to experiment other examples.; Results; Press the Run in SOFA (or press Ctrl-R), and press Animate; In this scene, we only have a OglModel corresponding to a pure visual representation of an object. ; Nothing happens.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/0_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html:1589,Testability,test,test,1589,"ner folded, and its tool tip is New Tab. Press the button.; This will give us a scene graph with some default components.; Right click on the TreeCollisionGroupManager and select Delete.; We don't need this component for our scene.; Find the OglModel component with the Filter, and drag and drop it onto the root node. Double click the OglModel node to edit its properties.; Rename the model ""Objective"".; Under the Property 2/3 tab, find the fileMesh section. Click on the ... button to bring up the file browser. Select the file /Sofa/share/mesh/dragon.obj, and press OK to return to the Modeler.; We now have a scene with all the components needed to handle collisions in a scene, and a visual model representing our deformable object.; Key points; This is how the collisions are performed in SOFA using these default components.; DefaultPipeline: Launch all the operations to perform the collision detection and response. Collision Detection:. Broad Phase: using ""Axis Aligned Bounding Boxes"" (AABB), we only keep potential colliding pair of objects; Narrow Phase: we use the geometrical primitives (spheres, triangles, lines, points) to test the distance between two objects. ; we use the BruteForceDetection to select which primitives will be used, and the MinProximityIntersection to detect if a collision exists between two geometrical primitives. Collision Response:. With all the colliding primitives, we create an appropriate collision response: the ContactManager gives the information about what response we have to use. ; Components are created dynamically in the graph to create repulsive forces, or constraints. In this tutorial, we will create PenalityContactForceField. . Advanced collision detection and response are implemented in SOFA, so don't hesitate to experiment other examples.; Results; Press the Run in SOFA (or press Ctrl-R), and press Animate; In this scene, we only have a OglModel corresponding to a pure visual representation of an object. ; Nothing happens.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/0_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/0_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/3_FullObject.html:1093,Availability,down,down,1093,". Creation of a Scene (4/9). Description; Now that we have a topology, a mechanical object well initialized, it is time to simulate the deformation of the object. To do so, we add a ForceField to the scene.; You have to choose a ForceField that is compatible with your MechanicalObject. In order to be compatible, the two must use the same template.; Find the MechanicalObject component using the Filter.; Notice that beside MechanicalObject is a dropdown menu with Vec3d selected.; Click the dropdown menu to see the other possible selections.; You will see choices such as Rigid and Vec2f. These are possible templates. Since we didn't concern ourselves with the template when we added the MechanicalObject to our scene, our MechanicalObject uses the default template, Vec3d. This means we won't be able to add ForceFields using Rigid types, for example. Some ForceFields rely on a given topology. Most of the time, their name informs you about the topology the are relying on.; We can see that the SparceGridTopology makes a grid of particles. If these particles were joined by lines going down the rows and columns of these particles, they would become cubes. Cubes have six faces, and are therefore hexahedral. This means that we can use all Hexadedron based ForceFields with the SpaceGridTopology.; Key points; We chose to model our deformation using Finite Elements: HexahedronFEMForceField.; Find and add the HexahedronFEMForceField to the Object node. Go to the Properties 2/2 tab, and change the Young's Modulus from 5000 to ""200"".; Results; Run in SOFA. To get a better view of the animation, change the DT from 0.02 to ""0.001"", and animate.; Now you should see the hexahedra corresponding to the Finite Elements. When you animate, you will be able to see the deformation of the cells of the grid.; Related; Modify the young modulus of the FEM force field: the higher, the stiffer will be the model. ; Modify the poisson ratio (between 0 and 0.5).; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/3_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/3_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/4_FullObject.html:1490,Availability,down,down,1490,"VisualNode.; Select the OglModel in the Modeler's scene graph. Press the Copy button, found in the Modeler toolbar, 4th from the left. Select the VisualNode, and press the Paste button, found to the right of the Copy button. Right click the original OglModel, and select Delete.; Now to make the link between the deformation of the simulated particles and a given visual model, we need a mapping. As we only need to update the positions of the visual model at each time step, we will use a Visual Mapping: BarycentricMapping.; Here we really need to pay attention to the template used for this component.; Open the OglModel properties and go to the Infos tab. ; Under instance, you can see that the Template is ExtVec3f. This means we need our BarycentricMapping to map from Vec3d (the template used by the MechanicalObject) to ExtVec3f.; Find the BarycentricMapping component using the Filter. Be sure that the template information to the right reads Vec3d, ExtVec3f. If it doesn't, choose that combination from the drop down menu. Add this component to the VisualModel node. ; Edit the properties of the BarycentricMapping, and open the Property 2/2 tab. Change Input object to map from @ to ""@.."".; This refers to the MechanicalObject placed in the node above (Object node); Change Output object to map to ""@Objective"".; This refers to the OglModel that we named Objective earlier; Result; Run in SOFA and animate; Now not only are the particles of the grid deformed, but this deformation is propagated to the visual model, which remains embedded inside the grid at all times.; Related; As you may have noticed, the visual model is fully independent from the simulated model: We used the same model to create the deformable grid as we did to create the visual model, but nothing stops you from using a different model. Change the visual model or the model used in the SparseGridTopology and see the effect.; To understand how the barycentric mapping works, display the Visual Mappings debug inform",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/4_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/4_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/4_FullObject.html:884,Deployability,update,update,884,". Creation of a Scene (5/9). Description; In this step we will use a visual model to represent our deformable object. Nevertheless, you must keep in mind that it will only be a visual representation. The computational work will be done on the particles you are not used to seeing.; Key points; Add a GNode to the Object node. Rename this node ""VisualNode"".; We added a Node that will contain our Visual Model. Next, we move our Visual Model from the root level to the VisualNode.; Select the OglModel in the Modeler's scene graph. Press the Copy button, found in the Modeler toolbar, 4th from the left. Select the VisualNode, and press the Paste button, found to the right of the Copy button. Right click the original OglModel, and select Delete.; Now to make the link between the deformation of the simulated particles and a given visual model, we need a mapping. As we only need to update the positions of the visual model at each time step, we will use a Visual Mapping: BarycentricMapping.; Here we really need to pay attention to the template used for this component.; Open the OglModel properties and go to the Infos tab. ; Under instance, you can see that the Template is ExtVec3f. This means we need our BarycentricMapping to map from Vec3d (the template used by the MechanicalObject) to ExtVec3f.; Find the BarycentricMapping component using the Filter. Be sure that the template information to the right reads Vec3d, ExtVec3f. If it doesn't, choose that combination from the drop down menu. Add this component to the VisualModel node. ; Edit the properties of the BarycentricMapping, and open the Property 2/2 tab. Change Input object to map from @ to ""@.."".; This refers to the MechanicalObject placed in the node above (Object node); Change Output object to map to ""@Objective"".; This refers to the OglModel that we named Objective earlier; Result; Run in SOFA and animate; Now not only are the particles of the grid deformed, but this deformation is propagated to the visual model, which ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/4_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/4_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/4_FullObject.html:2552,Integrability,depend,depends,2552,"the Paste button, found to the right of the Copy button. Right click the original OglModel, and select Delete.; Now to make the link between the deformation of the simulated particles and a given visual model, we need a mapping. As we only need to update the positions of the visual model at each time step, we will use a Visual Mapping: BarycentricMapping.; Here we really need to pay attention to the template used for this component.; Open the OglModel properties and go to the Infos tab. ; Under instance, you can see that the Template is ExtVec3f. This means we need our BarycentricMapping to map from Vec3d (the template used by the MechanicalObject) to ExtVec3f.; Find the BarycentricMapping component using the Filter. Be sure that the template information to the right reads Vec3d, ExtVec3f. If it doesn't, choose that combination from the drop down menu. Add this component to the VisualModel node. ; Edit the properties of the BarycentricMapping, and open the Property 2/2 tab. Change Input object to map from @ to ""@.."".; This refers to the MechanicalObject placed in the node above (Object node); Change Output object to map to ""@Objective"".; This refers to the OglModel that we named Objective earlier; Result; Run in SOFA and animate; Now not only are the particles of the grid deformed, but this deformation is propagated to the visual model, which remains embedded inside the grid at all times.; Related; As you may have noticed, the visual model is fully independent from the simulated model: We used the same model to create the deformable grid as we did to create the visual model, but nothing stops you from using a different model. Change the visual model or the model used in the SparseGridTopology and see the effect.; To understand how the barycentric mapping works, display the Visual Mappings debug information in the SOFA main application. You will see how each point of the visual model depends on some of the points of the mechanical model.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/4_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/4_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/5_FullObject.html:371,Safety,detect,detection,371,". Creation of a Scene (6/9). Description; We will now replace the PlaneForceField with a true obstacle, modeled with a topology (read from a mesh file), a mechanical object, and some collision models.; Key points; To use the Collision Pipeline described here, you need to use Collision Models. They describe geometrical primitives which will be involved in the collision detection. To demonstrate the flexibility you can have, we will use at the same time some spheres, triangles, lines and points.; There will be as many spheres as particules contained in the Topology.; Add a new GNode to the root node, and rename it ""Obstacle"".; Add a MeshTopology component to the Obstacle node. Set the Filename of the mesh to mySofaDirectory/Sofa/share/mesh/cube.obj.; Add a MechanicalObject to the Obstacle node. Change to the Transformation tab, and change the Scale of the DOFs in 3 dimensions from (1 1 1) to ""(40 40 0.1)"".; Add a TTriangleModel to the Obstacle node. In the Property 2/3 tab, change the Default contact stiffness to 500. Repeat both steps with a LineModel and a PointModel; Add a OglModel component to the Obstacle node. In the Property 2/3 tab, set the Path to the model to /Sofa/share/mesh/cube.obj. In the Transformation tab, change the Initial Translation of the object to ""(0 0 -10)"" and the Initial Scale of the object to ""(40 40 0.1)"".; Results; Delete the PlaneForceField. Run in SOFA and animate.; At this point, our deformable object will interact with the floor using spheres placed at each particle. The collision detection does not take correctly into account what we visually see, but the dragon does not pass through the floor.; Related; You have several way to modify the collision detection and response.; Modify the proximity distance to know when two primitives are colliding: open MinProximityIntersection and edit ""alarmDistance"" and ""contactDistance"". ; Modify the stiffness of the response: the response is computed using the product of the contactStiffness of the tw",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/5_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/5_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/5_FullObject.html:1537,Safety,detect,detection,1537," some collision models.; Key points; To use the Collision Pipeline described here, you need to use Collision Models. They describe geometrical primitives which will be involved in the collision detection. To demonstrate the flexibility you can have, we will use at the same time some spheres, triangles, lines and points.; There will be as many spheres as particules contained in the Topology.; Add a new GNode to the root node, and rename it ""Obstacle"".; Add a MeshTopology component to the Obstacle node. Set the Filename of the mesh to mySofaDirectory/Sofa/share/mesh/cube.obj.; Add a MechanicalObject to the Obstacle node. Change to the Transformation tab, and change the Scale of the DOFs in 3 dimensions from (1 1 1) to ""(40 40 0.1)"".; Add a TTriangleModel to the Obstacle node. In the Property 2/3 tab, change the Default contact stiffness to 500. Repeat both steps with a LineModel and a PointModel; Add a OglModel component to the Obstacle node. In the Property 2/3 tab, set the Path to the model to /Sofa/share/mesh/cube.obj. In the Transformation tab, change the Initial Translation of the object to ""(0 0 -10)"" and the Initial Scale of the object to ""(40 40 0.1)"".; Results; Delete the PlaneForceField. Run in SOFA and animate.; At this point, our deformable object will interact with the floor using spheres placed at each particle. The collision detection does not take correctly into account what we visually see, but the dragon does not pass through the floor.; Related; You have several way to modify the collision detection and response.; Modify the proximity distance to know when two primitives are colliding: open MinProximityIntersection and edit ""alarmDistance"" and ""contactDistance"". ; Modify the stiffness of the response: the response is computed using the product of the contactStiffness of the two collision models involved. Open SphereModel and edit this parameter. You can do the same process with the TTriangleModel, LineModel, PointModel.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/5_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/5_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/5_FullObject.html:1709,Safety,detect,detection,1709," some collision models.; Key points; To use the Collision Pipeline described here, you need to use Collision Models. They describe geometrical primitives which will be involved in the collision detection. To demonstrate the flexibility you can have, we will use at the same time some spheres, triangles, lines and points.; There will be as many spheres as particules contained in the Topology.; Add a new GNode to the root node, and rename it ""Obstacle"".; Add a MeshTopology component to the Obstacle node. Set the Filename of the mesh to mySofaDirectory/Sofa/share/mesh/cube.obj.; Add a MechanicalObject to the Obstacle node. Change to the Transformation tab, and change the Scale of the DOFs in 3 dimensions from (1 1 1) to ""(40 40 0.1)"".; Add a TTriangleModel to the Obstacle node. In the Property 2/3 tab, change the Default contact stiffness to 500. Repeat both steps with a LineModel and a PointModel; Add a OglModel component to the Obstacle node. In the Property 2/3 tab, set the Path to the model to /Sofa/share/mesh/cube.obj. In the Transformation tab, change the Initial Translation of the object to ""(0 0 -10)"" and the Initial Scale of the object to ""(40 40 0.1)"".; Results; Delete the PlaneForceField. Run in SOFA and animate.; At this point, our deformable object will interact with the floor using spheres placed at each particle. The collision detection does not take correctly into account what we visually see, but the dragon does not pass through the floor.; Related; You have several way to modify the collision detection and response.; Modify the proximity distance to know when two primitives are colliding: open MinProximityIntersection and edit ""alarmDistance"" and ""contactDistance"". ; Modify the stiffness of the response: the response is computed using the product of the contactStiffness of the two collision models involved. Open SphereModel and edit this parameter. You can do the same process with the TTriangleModel, LineModel, PointModel.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/5_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/5_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html:2975,Availability,down,down,2975," collision object is mapped to the simulated deformable model using a Mapping, this time a MechanicalMapping: BarycentricMapping. You may wonder what the difference is between this mapping and the one used for the visual model, as we are using the same component! What makes a mapping visual or mechanical?; This is determined by the template used to create the mapping:; Find the BarycentricMapping component using the Filter. From the dropdown menu, select Vec3d, Vec3d.; This mean it transforms a state expressed by Vec3d type into Vec3d. Remember, collision models are only expressed in Vec3d type, so the mapped state must be of Vec3d types.; Open the BarycentricMapping properties and go to the Properties 2/2 tab. Set the Input object to map to ""@.."" and the Output object to map to ""@.""; This corresponds to mapping from the MechanicalObject from one node above to the MechanicalObject of the current node.; Finally, we will remove our old TSphereModel, and replace it with one in the CollisionNode; Delete the current TSphereModel. Add a new TSphereModel to the CollisionNode, and change the Default contact stiffness property to ""1000"".; Results; Run in SOFA. Change to DT to ""0.005"". Animate.; You can see height spheres, corresponding to the height corners of the cube chosen to represent our collision mode. Of course, using four height spheres to do the collision detection is much faster than 171 as in the previous scene. But the behavior is also very different.; Apply a force on one of the spheres by holding down the Shift key, and clicking and dragging a sphere with the mouse.; You will be able to deform the object. This is due to the MechanicalMapping.; We display some debug information about the mechanical mapping using blue lines. Each point of the collision model depends on several points of the simulated object. If a force is applied to one of the collision model's points, the force will be propagated to all the points that depend on it.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/6_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html:3240,Integrability,depend,depends,3240," collision object is mapped to the simulated deformable model using a Mapping, this time a MechanicalMapping: BarycentricMapping. You may wonder what the difference is between this mapping and the one used for the visual model, as we are using the same component! What makes a mapping visual or mechanical?; This is determined by the template used to create the mapping:; Find the BarycentricMapping component using the Filter. From the dropdown menu, select Vec3d, Vec3d.; This mean it transforms a state expressed by Vec3d type into Vec3d. Remember, collision models are only expressed in Vec3d type, so the mapped state must be of Vec3d types.; Open the BarycentricMapping properties and go to the Properties 2/2 tab. Set the Input object to map to ""@.."" and the Output object to map to ""@.""; This corresponds to mapping from the MechanicalObject from one node above to the MechanicalObject of the current node.; Finally, we will remove our old TSphereModel, and replace it with one in the CollisionNode; Delete the current TSphereModel. Add a new TSphereModel to the CollisionNode, and change the Default contact stiffness property to ""1000"".; Results; Run in SOFA. Change to DT to ""0.005"". Animate.; You can see height spheres, corresponding to the height corners of the cube chosen to represent our collision mode. Of course, using four height spheres to do the collision detection is much faster than 171 as in the previous scene. But the behavior is also very different.; Apply a force on one of the spheres by holding down the Shift key, and clicking and dragging a sphere with the mouse.; You will be able to deform the object. This is due to the MechanicalMapping.; We display some debug information about the mechanical mapping using blue lines. Each point of the collision model depends on several points of the simulated object. If a force is applied to one of the collision model's points, the force will be propagated to all the points that depend on it.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/6_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html:3405,Integrability,depend,depend,3405," collision object is mapped to the simulated deformable model using a Mapping, this time a MechanicalMapping: BarycentricMapping. You may wonder what the difference is between this mapping and the one used for the visual model, as we are using the same component! What makes a mapping visual or mechanical?; This is determined by the template used to create the mapping:; Find the BarycentricMapping component using the Filter. From the dropdown menu, select Vec3d, Vec3d.; This mean it transforms a state expressed by Vec3d type into Vec3d. Remember, collision models are only expressed in Vec3d type, so the mapped state must be of Vec3d types.; Open the BarycentricMapping properties and go to the Properties 2/2 tab. Set the Input object to map to ""@.."" and the Output object to map to ""@.""; This corresponds to mapping from the MechanicalObject from one node above to the MechanicalObject of the current node.; Finally, we will remove our old TSphereModel, and replace it with one in the CollisionNode; Delete the current TSphereModel. Add a new TSphereModel to the CollisionNode, and change the Default contact stiffness property to ""1000"".; Results; Run in SOFA. Change to DT to ""0.005"". Animate.; You can see height spheres, corresponding to the height corners of the cube chosen to represent our collision mode. Of course, using four height spheres to do the collision detection is much faster than 171 as in the previous scene. But the behavior is also very different.; Apply a force on one of the spheres by holding down the Shift key, and clicking and dragging a sphere with the mouse.; You will be able to deform the object. This is due to the MechanicalMapping.; We display some debug information about the mechanical mapping using blue lines. Each point of the collision model depends on several points of the simulated object. If a force is applied to one of the collision model's points, the force will be propagated to all the points that depend on it.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/6_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html:1005,Performance,load,load,1005,"f a Scene (7/9). Description; Like we did in this part of the tutorial, we will map another model to the simulated mechanical object.; 		This time, it won't be only a visual model, but a mechanical object which aims at handling the collisions, and to transmit the forces due to the collision response to the simulated object. ; Once this model is able to transmit the forces, we just need to add some collision models like we did here ; Remember:; ; Visual Mapping: the information is passed Top-Down: the simulated object propagates the positions (method apply) and the velocities (method applyJ) to the mapped model; Mechanical Mapping: the information is passed both ways: the simulated object propagates the positions (method apply) and the velocities (method applyJ) to the mapped model, and on the other site, the mapped model propagates the forces to the simulated object (method applyJT) . Key points; Add a new GNode to the Object node, and rename it ""CollisionNode"".; Now we need to load the model from a mesh file. As a first example we will use a cube as the collision object.; Add a MeshTopology to the CollisionNode, and change the Filename of the mesh to ; /mySofaDirectory/Sofa/share/mesh/cube.obj.; Next we need a MechanicalObject to store the positions, velocities and forces of the collision object; Add a MechanicalObject to the CollisionNode. Change the Scale of the DOFs in 3 dimensions property to ""(6 6 6)"".; The collision object is mapped to the simulated deformable model using a Mapping, this time a MechanicalMapping: BarycentricMapping. You may wonder what the difference is between this mapping and the one used for the visual model, as we are using the same component! What makes a mapping visual or mechanical?; This is determined by the template used to create the mapping:; Find the BarycentricMapping component using the Filter. From the dropdown menu, select Vec3d, Vec3d.; This mean it transforms a state expressed by Vec3d type into Vec3d. Remember, collision mod",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/6_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html:2826,Safety,detect,detection,2826," collision object is mapped to the simulated deformable model using a Mapping, this time a MechanicalMapping: BarycentricMapping. You may wonder what the difference is between this mapping and the one used for the visual model, as we are using the same component! What makes a mapping visual or mechanical?; This is determined by the template used to create the mapping:; Find the BarycentricMapping component using the Filter. From the dropdown menu, select Vec3d, Vec3d.; This mean it transforms a state expressed by Vec3d type into Vec3d. Remember, collision models are only expressed in Vec3d type, so the mapped state must be of Vec3d types.; Open the BarycentricMapping properties and go to the Properties 2/2 tab. Set the Input object to map to ""@.."" and the Output object to map to ""@.""; This corresponds to mapping from the MechanicalObject from one node above to the MechanicalObject of the current node.; Finally, we will remove our old TSphereModel, and replace it with one in the CollisionNode; Delete the current TSphereModel. Add a new TSphereModel to the CollisionNode, and change the Default contact stiffness property to ""1000"".; Results; Run in SOFA. Change to DT to ""0.005"". Animate.; You can see height spheres, corresponding to the height corners of the cube chosen to represent our collision mode. Of course, using four height spheres to do the collision detection is much faster than 171 as in the previous scene. But the behavior is also very different.; Apply a force on one of the spheres by holding down the Shift key, and clicking and dragging a sphere with the mouse.; You will be able to deform the object. This is due to the MechanicalMapping.; We display some debug information about the mechanical mapping using blue lines. Each point of the collision model depends on several points of the simulated object. If a force is applied to one of the collision model's points, the force will be propagated to all the points that depend on it.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/6_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/6_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/7_FullObject.html:644,Availability,redundant,redundant,644,". Creation of a Scene (8/9). Description; In this step of the tutorial we will change the collision model from the cube object to the dragon object, so that the collision model is using the same model as the visual one.; ; In the properties of the CollisionNode, change the Filename of the mesh from /Sofa/share/mesh/cube.onj to /Sofa/share/mesh/dragon.obj. In the properties of the CollisionNode's MechanicalObject, under Transformation, change the Scale of the DOFs in 3 dimensions from (6 6 6) to (1 1 1).; Results; Run in SOFA. Change the DT to 0.005. Animate.; You can see that there are many more sphere to handle the collision. Some are redundant, and useless.; This example demonstrated the need to carefully choose the collision model you want to use. A good approach is to have two versions of your model: a fine version used to do the rendering of the scene, and a much coarser one to handle the collisions quickly.; The presence of spheres may create some artifacts during the collision response, but they are very fast to simulate. Disable the display of the collision models and activate the visual models to really see the efficiency of the spheres.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/7_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/7_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/7_FullObject.html:644,Safety,redund,redundant,644,". Creation of a Scene (8/9). Description; In this step of the tutorial we will change the collision model from the cube object to the dragon object, so that the collision model is using the same model as the visual one.; ; In the properties of the CollisionNode, change the Filename of the mesh from /Sofa/share/mesh/cube.onj to /Sofa/share/mesh/dragon.obj. In the properties of the CollisionNode's MechanicalObject, under Transformation, change the Scale of the DOFs in 3 dimensions from (6 6 6) to (1 1 1).; Results; Run in SOFA. Change the DT to 0.005. Animate.; You can see that there are many more sphere to handle the collision. Some are redundant, and useless.; This example demonstrated the need to carefully choose the collision model you want to use. A good approach is to have two versions of your model: a fine version used to do the rendering of the scene, and a much coarser one to handle the collisions quickly.; The presence of spheres may create some artifacts during the collision response, but they are very fast to simulate. Disable the display of the collision models and activate the visual models to really see the efficiency of the spheres.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/7_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/7_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/8_FullObject.html:123,Safety,detect,detection,123,". Creation of a Scene (8/9). Description; In this last step, we will change the collision components pass to the collision detection.; Delete the TSphereModel.; Add a PointModel component to the CollisionNode.; Repeat with a LineModel and a TTriangleModel.; Results; Run in SOFA. Change DT to 0.005. Animate.; Instead of spheres, we model our object using exactly the mesh. This should improve the quality of the response, but with a higher computational cost.; Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/FullObject/8_FullObject.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/FullObject/8_FullObject.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/1_getyourbearings.html:114,Usability,simpl,simple,114,". Get your bearings in SOFA; Description:. 		To get an idea of the size of the objects in the scene, we can add a simple visual grid.; 		. 		In this tutorial, we added the component OglGrid. It display a simple grid on a choosen plane. By default, the grid is displayed on the plane xy.; 		If we know the size of the grid (10 units in the example), we can have a visual hint on the size of the liver.; 		It also gives the orientation of the liver compared to the grid.; 		. Previous; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Getyourbearings/1_getyourbearings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/1_getyourbearings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/1_getyourbearings.html:204,Usability,simpl,simple,204,". Get your bearings in SOFA; Description:. 		To get an idea of the size of the objects in the scene, we can add a simple visual grid.; 		. 		In this tutorial, we added the component OglGrid. It display a simple grid on a choosen plane. By default, the grid is displayed on the plane xy.; 		If we know the size of the grid (10 units in the example), we can have a visual hint on the size of the liver.; 		It also gives the orientation of the liver compared to the grid.; 		. Previous; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Getyourbearings/1_getyourbearings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/1_getyourbearings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/2_getyourbearings.html:372,Energy Efficiency,green,green,372,". Get your bearings in SOFA; Description:. 		To identify the axis of the 3D scene, we can display them with the component OglLineAxis. 		; 		We add the component OglLineAxis in the scene file. ; 		With the '@' symbol, we create a link between the size of the grid and the size of the axis.; 		; 		. The red axis corresponds to x (the first coordinate in a 3d vector); The green axis corresponds to y (the second coordinate in a 3d vector); The blue axis corresponds to z (the third coordinate in a 3d vector). Previous; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Getyourbearings/2_getyourbearings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/2_getyourbearings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/3_getyourbearings.html:253,Availability,avail,available,253,". Get your bearings in SOFA; Description:. 		Sometimes, we just need to get the orientation of the camera in the scene.; 		That is what the component OglSceneFrame is for.; 		It displays a small frame at the corner of the scene view. Several styles are available. 		. Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Getyourbearings/3_getyourbearings.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Getyourbearings/3_getyourbearings.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/0_Pendulum.html:182,Modifiability,config,configure,182,". Creation of a Pendulum (1/8). Description; The objective of this small step by step tutorial is to discover the basic components used with SOFA, how they interact, and how you can configure them. We will create a pendulum made of two object, and two different springs. We will not go into the details about the template parameter of the mechanical states, nor the forcefields used.; Press the Edit in Modeler button at the top of the window.; This will show the scene graph for our initial basic scene in the Modeler window.; Key points; We used 3 components:; ; A Node ""FirstObject"" to store the components describing the object we want to simulate. It is important that the hierarchy of the nodes in the scene graph reflects the scene you want to model.; The shape is modeled using a MechanicalObject which desribes the particle states. ; A UniformMass is added for the MechanicalObject, giving the same mass for each particle of the MechanicalObject. . Hold the cursor over the button with the SOFA logo on the far right of the Modeler toolbar. ; The tooltip will say Run in SOFA.; Press this Run in SOFA button.; This will open the scene described by the scene graph in SOFA. In SOFA, you can see one Particle represented by a white dot. (Note: you may need to select ""Behavior"" in the View table in order to see the scene).; Results; Press the Animate button.; You will see that nothing happens. In the next step we will see why.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/0_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/0_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/0_Pendulum.html:1004,Testability,log,logo,1004,". Creation of a Pendulum (1/8). Description; The objective of this small step by step tutorial is to discover the basic components used with SOFA, how they interact, and how you can configure them. We will create a pendulum made of two object, and two different springs. We will not go into the details about the template parameter of the mechanical states, nor the forcefields used.; Press the Edit in Modeler button at the top of the window.; This will show the scene graph for our initial basic scene in the Modeler window.; Key points; We used 3 components:; ; A Node ""FirstObject"" to store the components describing the object we want to simulate. It is important that the hierarchy of the nodes in the scene graph reflects the scene you want to model.; The shape is modeled using a MechanicalObject which desribes the particle states. ; A UniformMass is added for the MechanicalObject, giving the same mass for each particle of the MechanicalObject. . Hold the cursor over the button with the SOFA logo on the far right of the Modeler toolbar. ; The tooltip will say Run in SOFA.; Press this Run in SOFA button.; This will open the scene described by the scene graph in SOFA. In SOFA, you can see one Particle represented by a white dot. (Note: you may need to select ""Behavior"" in the View table in order to see the scene).; Results; Press the Animate button.; You will see that nothing happens. In the next step we will see why.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/0_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/0_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html:241,Deployability,integrat,integration,241,". Creation of a Pendulum (2/8); Description; In the previous scene, no solver was present, so no simulation was done. In this step, we will add an ODE solver in the Root node of the simulation. We provide several ODE solvers, with different integration schemes. Take a look at our tutorials on Solvers later.; Key points; We will use the classic explicit euler solver EulerSolver to update particle positions and velocities at each time step. In SOFA, a solver acts on all the object placed below in the hierarchy. ; In the Modeler's Filter textbox, type ""Euler"". Click and drag the EulerSolver component over the root node. Press the Run in SOFA button. Press Animate.; Results; This time, when you animate the scene, the particule falls along the direction of the gravity.; The gravity is specified in the root node of the simulation. We use a default value of (0, 0, -9.81).; In the Modeler scene graph, double click the root node.; This opens the components for this node, and allows you to edit them. We won't make any changes for now.; Press OK to return to the Modeler window. ; Changing the gravity on child nodes of the simulation will not do anything as at each time step the gravity, and other parameters, (time, dt...) is overwritten using the value specified in the root node.; The component Gravity lets you specify a particular gravity for a node and all its children.; To see an example of this, type ""Gravity"" into the Filter textbox in the Modeler. Click on the Gravity component. In the top right section of the window, a description of the component will appear, with links to examples. Click on the links to open the example scene in the Modeler. When you are done, close the Gravity.scn tab to return to the tutorial scene. ; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html:383,Deployability,update,update,383,". Creation of a Pendulum (2/8); Description; In the previous scene, no solver was present, so no simulation was done. In this step, we will add an ODE solver in the Root node of the simulation. We provide several ODE solvers, with different integration schemes. Take a look at our tutorials on Solvers later.; Key points; We will use the classic explicit euler solver EulerSolver to update particle positions and velocities at each time step. In SOFA, a solver acts on all the object placed below in the hierarchy. ; In the Modeler's Filter textbox, type ""Euler"". Click and drag the EulerSolver component over the root node. Press the Run in SOFA button. Press Animate.; Results; This time, when you animate the scene, the particule falls along the direction of the gravity.; The gravity is specified in the root node of the simulation. We use a default value of (0, 0, -9.81).; In the Modeler scene graph, double click the root node.; This opens the components for this node, and allows you to edit them. We won't make any changes for now.; Press OK to return to the Modeler window. ; Changing the gravity on child nodes of the simulation will not do anything as at each time step the gravity, and other parameters, (time, dt...) is overwritten using the value specified in the root node.; The component Gravity lets you specify a particular gravity for a node and all its children.; To see an example of this, type ""Gravity"" into the Filter textbox in the Modeler. Click on the Gravity component. In the top right section of the window, a description of the component will appear, with links to examples. Click on the links to open the example scene in the Modeler. When you are done, close the Gravity.scn tab to return to the tutorial scene. ; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html:241,Integrability,integrat,integration,241,". Creation of a Pendulum (2/8); Description; In the previous scene, no solver was present, so no simulation was done. In this step, we will add an ODE solver in the Root node of the simulation. We provide several ODE solvers, with different integration schemes. Take a look at our tutorials on Solvers later.; Key points; We will use the classic explicit euler solver EulerSolver to update particle positions and velocities at each time step. In SOFA, a solver acts on all the object placed below in the hierarchy. ; In the Modeler's Filter textbox, type ""Euler"". Click and drag the EulerSolver component over the root node. Press the Run in SOFA button. Press Animate.; Results; This time, when you animate the scene, the particule falls along the direction of the gravity.; The gravity is specified in the root node of the simulation. We use a default value of (0, 0, -9.81).; In the Modeler scene graph, double click the root node.; This opens the components for this node, and allows you to edit them. We won't make any changes for now.; Press OK to return to the Modeler window. ; Changing the gravity on child nodes of the simulation will not do anything as at each time step the gravity, and other parameters, (time, dt...) is overwritten using the value specified in the root node.; The component Gravity lets you specify a particular gravity for a node and all its children.; To see an example of this, type ""Gravity"" into the Filter textbox in the Modeler. Click on the Gravity component. In the top right section of the window, a description of the component will appear, with links to examples. Click on the links to open the example scene in the Modeler. When you are done, close the Gravity.scn tab to return to the tutorial scene. ; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/1_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html:356,Availability,avail,available,356,". Creation of a Pendulum (5/8); Description; Now we will create internal forces to add interactions between the particles of our mechanical object. ; The concept of Forces are handled in SOFA by components called ForceFields. We implemented numerous algorithms to simulate Mass Spring systems, Finite Elements, Rigid Bodies, etc. Again, there are examples available for these different types. In this tutorial, we will add a Spring between the two particles.; Key points; We will use a StiffSpringForceField to model our spring. ; Type ""StiffSpring"" in the Filter textbox. You will see StiffSpringForceField in two categories. Both are the same. Drag and drop the StiffSpringForceField from either category over the FirstObject node. Double click the StiffSpringForceField in the Modeler scene graph.; Click on the Property 2/2 tab. In the spring section, increase the 0 to ""1"", and press Display the values. Then, press the Update button found in the bottom left corner of the window. ; The titles of the columns now describe all the parameters needed to create a spring: two indices (Index1, Index2) corresponding to the particles attached by the spring, a stiffness coefficient (Ks), a damping coefficient (Kd), and the rest length of the spring (L).; Type the values ""0"", ""1"", ""100"", ""5"" and ""1"" into the columns Index1, Index2, Ks, Kd and L respectively. Press OK to return to the Modeler. Run the scene in SOFA, and animate.; Results; The two particles are now linked together by a spring. The second particle continues to fall because of gravity, but a spring, displayed by a green line, keeps them close. (Note: If you can't see the green line, make sure ""Force Fields"" is selected in the View tab in SOFA); We have modeled a very basic pendulum with only 5 components. Take some time to customize this scene. Try modifying the parameters of the spring, the position and parameters of the particles of the mechanical object, or adding particles or springs.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html:1583,Energy Efficiency,green,green,1583,". Creation of a Pendulum (5/8); Description; Now we will create internal forces to add interactions between the particles of our mechanical object. ; The concept of Forces are handled in SOFA by components called ForceFields. We implemented numerous algorithms to simulate Mass Spring systems, Finite Elements, Rigid Bodies, etc. Again, there are examples available for these different types. In this tutorial, we will add a Spring between the two particles.; Key points; We will use a StiffSpringForceField to model our spring. ; Type ""StiffSpring"" in the Filter textbox. You will see StiffSpringForceField in two categories. Both are the same. Drag and drop the StiffSpringForceField from either category over the FirstObject node. Double click the StiffSpringForceField in the Modeler scene graph.; Click on the Property 2/2 tab. In the spring section, increase the 0 to ""1"", and press Display the values. Then, press the Update button found in the bottom left corner of the window. ; The titles of the columns now describe all the parameters needed to create a spring: two indices (Index1, Index2) corresponding to the particles attached by the spring, a stiffness coefficient (Ks), a damping coefficient (Kd), and the rest length of the spring (L).; Type the values ""0"", ""1"", ""100"", ""5"" and ""1"" into the columns Index1, Index2, Ks, Kd and L respectively. Press OK to return to the Modeler. Run the scene in SOFA, and animate.; Results; The two particles are now linked together by a spring. The second particle continues to fall because of gravity, but a spring, displayed by a green line, keeps them close. (Note: If you can't see the green line, make sure ""Force Fields"" is selected in the View tab in SOFA); We have modeled a very basic pendulum with only 5 components. Take some time to customize this scene. Try modifying the parameters of the spring, the position and parameters of the particles of the mechanical object, or adding particles or springs.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html:1641,Energy Efficiency,green,green,1641,". Creation of a Pendulum (5/8); Description; Now we will create internal forces to add interactions between the particles of our mechanical object. ; The concept of Forces are handled in SOFA by components called ForceFields. We implemented numerous algorithms to simulate Mass Spring systems, Finite Elements, Rigid Bodies, etc. Again, there are examples available for these different types. In this tutorial, we will add a Spring between the two particles.; Key points; We will use a StiffSpringForceField to model our spring. ; Type ""StiffSpring"" in the Filter textbox. You will see StiffSpringForceField in two categories. Both are the same. Drag and drop the StiffSpringForceField from either category over the FirstObject node. Double click the StiffSpringForceField in the Modeler scene graph.; Click on the Property 2/2 tab. In the spring section, increase the 0 to ""1"", and press Display the values. Then, press the Update button found in the bottom left corner of the window. ; The titles of the columns now describe all the parameters needed to create a spring: two indices (Index1, Index2) corresponding to the particles attached by the spring, a stiffness coefficient (Ks), a damping coefficient (Kd), and the rest length of the spring (L).; Type the values ""0"", ""1"", ""100"", ""5"" and ""1"" into the columns Index1, Index2, Ks, Kd and L respectively. Press OK to return to the Modeler. Run the scene in SOFA, and animate.; Results; The two particles are now linked together by a spring. The second particle continues to fall because of gravity, but a spring, displayed by a green line, keeps them close. (Note: If you can't see the green line, make sure ""Force Fields"" is selected in the View tab in SOFA); We have modeled a very basic pendulum with only 5 components. Take some time to customize this scene. Try modifying the parameters of the spring, the position and parameters of the particles of the mechanical object, or adding particles or springs.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/4_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html:1606,Deployability,integrat,integration,1606,". Creation of a Pendulum (7/8); Description; To link the two different mechanical objects, we will create a spring between them.; Find the StiffSpringForceField component. Drag and drop it on the root node. The Modeler will warn you ""No MechanicalState found in your Node root"". Press Ignore. We will define what the ForceField should act on manually.; Double click the new StiffSpringForceField to edit its properties. Towards the bottom of the window, in the First object in interaction textbox, type ""FirstObject"". In the Second object in interaction textbox, type ""SecondObject"". ; Go to the Property 2/2 tab, increase the spring's pairs of indices, stiffness, damping, and rest length to 1, and press Display the values, then Update. Fill in ""1"", ""0"", ""10"", ""0.1"", and ""1"" in the columns Index1, Index2, Ks, Kd, and L respectively.; Run the scene in SOFA. Click the Graph tab.; Key points; We use the same component as in the previous part of the tutorial (StiffSpringForceField). But you may notice the the colour used in the SOFA scene graph is not the same. Internal Springs use a blue color, while Interaction Springs use a red colour. The difference with the previous use of the StiffSpringForceField resides in the fact that we need to specify the two mechanical objects in interaction: we specified the MechanicalObjects FirstObject and SecondObject. The creation of the springs is exactly the same: two indices, Ks, Kd and rest length. The second spring is displayed in green, representing the interaction between the two objects. ; Results; To get a better view of the simulation, reduce the integration time step by finding the DT textbox on the top left of the SOFA window, and changing it from 0.01 to ""0.001"". Press Animate.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html:1483,Energy Efficiency,green,green,1483,". Creation of a Pendulum (7/8); Description; To link the two different mechanical objects, we will create a spring between them.; Find the StiffSpringForceField component. Drag and drop it on the root node. The Modeler will warn you ""No MechanicalState found in your Node root"". Press Ignore. We will define what the ForceField should act on manually.; Double click the new StiffSpringForceField to edit its properties. Towards the bottom of the window, in the First object in interaction textbox, type ""FirstObject"". In the Second object in interaction textbox, type ""SecondObject"". ; Go to the Property 2/2 tab, increase the spring's pairs of indices, stiffness, damping, and rest length to 1, and press Display the values, then Update. Fill in ""1"", ""0"", ""10"", ""0.1"", and ""1"" in the columns Index1, Index2, Ks, Kd, and L respectively.; Run the scene in SOFA. Click the Graph tab.; Key points; We use the same component as in the previous part of the tutorial (StiffSpringForceField). But you may notice the the colour used in the SOFA scene graph is not the same. Internal Springs use a blue color, while Interaction Springs use a red colour. The difference with the previous use of the StiffSpringForceField resides in the fact that we need to specify the two mechanical objects in interaction: we specified the MechanicalObjects FirstObject and SecondObject. The creation of the springs is exactly the same: two indices, Ks, Kd and rest length. The second spring is displayed in green, representing the interaction between the two objects. ; Results; To get a better view of the simulation, reduce the integration time step by finding the DT textbox on the top left of the SOFA window, and changing it from 0.01 to ""0.001"". Press Animate.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html:1595,Energy Efficiency,reduce,reduce,1595,". Creation of a Pendulum (7/8); Description; To link the two different mechanical objects, we will create a spring between them.; Find the StiffSpringForceField component. Drag and drop it on the root node. The Modeler will warn you ""No MechanicalState found in your Node root"". Press Ignore. We will define what the ForceField should act on manually.; Double click the new StiffSpringForceField to edit its properties. Towards the bottom of the window, in the First object in interaction textbox, type ""FirstObject"". In the Second object in interaction textbox, type ""SecondObject"". ; Go to the Property 2/2 tab, increase the spring's pairs of indices, stiffness, damping, and rest length to 1, and press Display the values, then Update. Fill in ""1"", ""0"", ""10"", ""0.1"", and ""1"" in the columns Index1, Index2, Ks, Kd, and L respectively.; Run the scene in SOFA. Click the Graph tab.; Key points; We use the same component as in the previous part of the tutorial (StiffSpringForceField). But you may notice the the colour used in the SOFA scene graph is not the same. Internal Springs use a blue color, while Interaction Springs use a red colour. The difference with the previous use of the StiffSpringForceField resides in the fact that we need to specify the two mechanical objects in interaction: we specified the MechanicalObjects FirstObject and SecondObject. The creation of the springs is exactly the same: two indices, Ks, Kd and rest length. The second spring is displayed in green, representing the interaction between the two objects. ; Results; To get a better view of the simulation, reduce the integration time step by finding the DT textbox on the top left of the SOFA window, and changing it from 0.01 to ""0.001"". Press Animate.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html:1606,Integrability,integrat,integration,1606,". Creation of a Pendulum (7/8); Description; To link the two different mechanical objects, we will create a spring between them.; Find the StiffSpringForceField component. Drag and drop it on the root node. The Modeler will warn you ""No MechanicalState found in your Node root"". Press Ignore. We will define what the ForceField should act on manually.; Double click the new StiffSpringForceField to edit its properties. Towards the bottom of the window, in the First object in interaction textbox, type ""FirstObject"". In the Second object in interaction textbox, type ""SecondObject"". ; Go to the Property 2/2 tab, increase the spring's pairs of indices, stiffness, damping, and rest length to 1, and press Display the values, then Update. Fill in ""1"", ""0"", ""10"", ""0.1"", and ""1"" in the columns Index1, Index2, Ks, Kd, and L respectively.; Run the scene in SOFA. Click the Graph tab.; Key points; We use the same component as in the previous part of the tutorial (StiffSpringForceField). But you may notice the the colour used in the SOFA scene graph is not the same. Internal Springs use a blue color, while Interaction Springs use a red colour. The difference with the previous use of the StiffSpringForceField resides in the fact that we need to specify the two mechanical objects in interaction: we specified the MechanicalObjects FirstObject and SecondObject. The creation of the springs is exactly the same: two indices, Ks, Kd and rest length. The second spring is displayed in green, representing the interaction between the two objects. ; Results; To get a better view of the simulation, reduce the integration time step by finding the DT textbox on the top left of the SOFA window, and changing it from 0.01 to ""0.001"". Press Animate.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/6_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html:161,Deployability,integrat,integration,161,". Creation of a Pendulum (8/8); Description; To show the genericity of SOFA, the last tutorial will simulate the same scene but using a different ODE solver and integration scheme.; We will remove the EulerSolver and replace it with the EulerImplicitSolver. This solver contains the algorithm used to update particle positions and velocities at each time step. It uses an auxiliary component, the CGLinearSolver, to solve equation systems.; Key points; Right click on the EulerSolver in the Modeler's scene graph, and select Delete.; Find the EulerImplicitSolver component, and add it on the root node. Find the CGLinearSolver component, and add it on the root node.; Results; Run in SOFA and animate.; The behavior is slightly different. Try modifying the parameters of the ODE Solver and the Linear Solver.; Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html:301,Deployability,update,update,301,". Creation of a Pendulum (8/8); Description; To show the genericity of SOFA, the last tutorial will simulate the same scene but using a different ODE solver and integration scheme.; We will remove the EulerSolver and replace it with the EulerImplicitSolver. This solver contains the algorithm used to update particle positions and velocities at each time step. It uses an auxiliary component, the CGLinearSolver, to solve equation systems.; Key points; Right click on the EulerSolver in the Modeler's scene graph, and select Delete.; Find the EulerImplicitSolver component, and add it on the root node. Find the CGLinearSolver component, and add it on the root node.; Results; Run in SOFA and animate.; The behavior is slightly different. Try modifying the parameters of the ODE Solver and the Linear Solver.; Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html:161,Integrability,integrat,integration,161,". Creation of a Pendulum (8/8); Description; To show the genericity of SOFA, the last tutorial will simulate the same scene but using a different ODE solver and integration scheme.; We will remove the EulerSolver and replace it with the EulerImplicitSolver. This solver contains the algorithm used to update particle positions and velocities at each time step. It uses an auxiliary component, the CGLinearSolver, to solve equation systems.; Key points; Right click on the EulerSolver in the Modeler's scene graph, and select Delete.; Find the EulerImplicitSolver component, and add it on the root node. Find the CGLinearSolver component, and add it on the root node.; Results; Run in SOFA and animate.; The behavior is slightly different. Try modifying the parameters of the ODE Solver and the Linear Solver.; Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Pendulum/7_Pendulum.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:58,Performance,load,load,58,". Topological Mapping (2/7). Description; In this step we load a tetrahedral mesh using a mesh file and dynamic topological components. For details concerning differences between static and dynamic topologies, refer to; 		 topological tutorials. ; Key points; ; A meshLoader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; Dynamic topological components to store the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedr",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:574,Performance,load,loader,574,". Topological Mapping (2/7). Description; In this step we load a tetrahedral mesh using a mesh file and dynamic topological components. For details concerning differences between static and dynamic topologies, refer to; 		 topological tutorials. ; Key points; ; A meshLoader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; Dynamic topological components to store the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedr",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:861,Performance,load,loader,861,". Topological Mapping (2/7). Description; In this step we load a tetrahedral mesh using a mesh file and dynamic topological components. For details concerning differences between static and dynamic topologies, refer to; 		 topological tutorials. ; Key points; ; A meshLoader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; Dynamic topological components to store the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedr",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:942,Performance,load,loader,942,". Topological Mapping (2/7). Description; In this step we load a tetrahedral mesh using a mesh file and dynamic topological components. For details concerning differences between static and dynamic topologies, refer to; 		 topological tutorials. ; Key points; ; A meshLoader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; Dynamic topological components to store the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedr",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:1017,Performance,load,loader,1017,". Topological Mapping (2/7). Description; In this step we load a tetrahedral mesh using a mesh file and dynamic topological components. For details concerning differences between static and dynamic topologies, refer to; 		 topological tutorials. ; Key points; ; A meshLoader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; Dynamic topological components to store the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedr",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:1164,Performance,load,loader,1164,"concerning differences between static and dynamic topologies, refer to; 		 topological tutorials. ; Key points; ; A meshLoader to read mesh file. (not necessary in regular mesh); A mechanicalObject with geometry point positions.; Dynamic topological components to store the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedra in the topology box; Change the RGB code color used to draw tetrahedra property to (1 1 0.3). ; The options in the TetrahedronSetGeometryAlgorithm",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:1669,Performance,load,loader,1669,"re the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedra in the topology box; Change the RGB code color used to draw tetrahedra property to (1 1 0.3). ; The options in the TetrahedronSetGeometryAlgorithms component are used to display the topological element (tetrahedra here).; Results; Run in SOFA and animate.; In this scene we only have the tetrahedral mesh in terms of topology and geometry. No interactions are possible at this step.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html:1814,Performance,load,loader,1814,"re the volume mesh. Add a new GNode to the root node. Rename it ""Tetrahedrons Mesh"".; Add a MeshGmshLoader component to the Tetrahedrons Mesh node. Rename it ""loader"". Specify the Filename of the object to be /Sofa/share/mesh/cylinder.msh.; Add a MechanicalObject component to the Tetrahedrons Mesh node. Rename it ""Volume"".; Under the Transformations tab, press the Scale of the DOFs in 3 dimensions button. In the textbox that appears, enter ""@loader.scale3d"". Similarly, press the Translation of the DOFs button and enter ""@loader.translation"", and press the Rotation of the DOFs button and enter ""@loader.rotation"".; Under the Vector 1/4 tab, press the position coordinates of the degrees of freedom button. In the textbox that appears, enter ""@loader.position"". ; Add a TetrahedronSetTopologyContainer component to the Tetrahedrons Mesh node. Rename it ""Container"". Specify /Sofa/share/mesh/cylinder.msh as the Filename of the mesh. TetrahedronSetTopologyContainer is a topology container, it is used to store a topology (positions, edges, triangles, tetrahedrons). Usually this topology is not defined manually, but copied from the topology of a MeshLoader component.; In the Property 2/2 tab, press the List of tetrahedron indices button. Enter ""@loader.tetrahedra"" in the textbox that appears. This syntax means that the Data ""tetrahedra"" contained in the SOFA Component of this node named ""loader"" must be copied into this Data. ; Add a TetrahedronSetGeometryAlgorithms component to the Tetrahedrons Mesh node. In the Visualization 2/2 tab, check the if true, draw the tetahedra in the topology box; Change the RGB code color used to draw tetrahedra property to (1 1 0.3). ; The options in the TetrahedronSetGeometryAlgorithms component are used to display the topological element (tetrahedra here).; Results; Run in SOFA and animate.; In this scene we only have the tetrahedral mesh in terms of topology and geometry. No interactions are possible at this step.; Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/1_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/2_TopoMapping.html:756,Availability,toler,tolerance,756,". Topological Mapping (3/7). Description; In this step we will add a mechanical behavior to the tetrahedral mesh using an ODE solver, finite element and mass. Thus, the cylinder can be deformed by gravity or the user.; Key points. EulerImplicitSolver component is used to solve the mechanical ODE system.; CGLinearSolver component is used to solve the linear system at each step of the ODE system.; TetrahedralCorotationalFEM is used to create tetrahedral finite element on this mechanical system.; DiagonalMass describe a global mass of the mesh elements.; Constraint components are used here to fix on extremity face of the cylinder. Add an EulerImplicitSolver component to the Tetrahedrons Mesh node.; Repeat with a CGLinearSolver component. Change the tolerance property to 1e-09, and in the Property 2/2 tab, change the threshold property to 1e-09.; Add a TetrahedralCorotationalFEMForceField component. Change the FEM Poisson Ratio to ""0.3"", and the FEM Young Modulus to 360.; Add a DiagonalMass component. In the Property 2/2 tab, change the mass density to ""2"".; Add a FixedPlaneProjectiveConstraint component. In the Property 2/2 tab, change the normal direction of the plane to (0 0 1), the minimum plane distance from the origin to ""-0.1"" and the maximum plane distance from the origin to ""0.1"".; Add a FixedConstraint component.; Results; Adding these components create a mechanical behavior for this cylinder. Adding some gravity on the scene, we can see that the cylinder starts to bend.; In this step, as there is no surface for visual model. We can see the finite elements. Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/2_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/2_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/3_TopoMapping.html:1184,Energy Efficiency,allocate,allocates,1184,"of this tutorial. We add a child node containing the triangular topology which is directly linked to the tetrahedral mesh thanks to the topological mapping component. This will allow us to display a visual model.; Key points; In this step, we add a number of components that will contribute to the visual model. Dynamic topological components to store the surface mesh. ; Tetra2TriangleTopologicalMapping component is used to map triangles on the border of the tetrahedral mesh to the surface topological container. ; Then, OglModel can be used to visualize the surface mesh. Add a new GNode to the Tetrahedrons Mesh node. Rename it ""Triangles Mesh"".; Add the following components to the Triangles Mesh node, giving them appropriate names:. TriangleSetTopologyContainer named ""Container""; TriangleSetTopoologyModifier named ""Modifier""; TriangleSetGeometryAlgorithms named ""GeomAlgo""; Tetra2TriangleTopologicalMapping named ""Mapping"". The TriangleSetTopoologyModifier is a component which can manipulate an; associated TriangleSetTopologyContainer. There is therefore a clean separation between the container, which allocates and store the memory, and the algorithms which can manipulate this data. ; In the Mapping properties, change the Input topology to map to ""@../Container"", and change the Output topology to map to @Container.; This tells the mapping to convert the tetrahedron topology to a triangle topology.; Add a new GNode to the Triangles Mesh node, and rename it ""Visu"".; Add an OglModel component to the Visu node. Rename it ""Visual"".; Find the IdentityMapping component using the Filter. In the dropdown menu on the right, select Vec3d, ExtVec3f, and add it to the Visu node.; In the Property 2/2 tab, change the Input object to map to ""@../../Volume"" and the Output object to map to ""@Visual"".; Results; Run in SOFA and animate.; In this step the mechanical behavior stays the same. But a visual model can now be used to display the surface of the object. Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/3_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/3_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/4_TopoMapping.html:623,Availability,down,down,623,". Topological Mapping (5/7). Description; This step shows that it is possible to define mechanical behavior directly on a child topology. This can be useful, as often the surface mesh is only a small part of the entire topology.; Key points. Springs are added to the edges on surface of the mesh using TriangularBendingSprings.; TriangleModel components can be added to interact with the model (using Shift and the mouse). Add a TriangularBendingSprings component to the Triangles Mesh node. Change the uniform stiffness for all the springs property to 10.; Results; Run in SOFA and Animate. Deform the cylinder by holding down the Shift key and dragging the triangles with the mouse.; In this step, edges on the surface of the mesh have springs, so the cylinder doesn't bend as much as in the previous steps.; 		The advantage is that elements in the rest of the cylinder are not taken into account, resulting in faster computation. Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/4_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/4_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/5_TopoMapping.html:961,Deployability,configurat,configuration,961,". Topological Mapping (6/7). Description; This step does not continue from the previous steps. It shows a hexahedra mesh which already has mechanical behavior and could be also linked to a surface mesh.; Key points; Press the Edit in Modeler button at the top of this window.; This opens a pre-built scene graph in the Modeler.; This scene includes components we are already familiar with:. An ODE solver and a linear solver. ; MechanicalObject with geometry point positions.; RegularGridTopology is used to create a 3D grid mesh. ; HexahedronFEMForcefield is used to create tetrahedral finite elements on this mechanical system.; DiagonalMass describes a global mass of the mesh elements.; Constraint components are used here to fix the four corners of the upper face of the cube. Results; Run in SOFA and animate. Interact with the cube by holding the Shift key and dragging with the mouse.; This scene represents a 3D cube mesh under gravity. It is the same configuration as the step ""Embedding the Model"". Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/5_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/5_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/5_TopoMapping.html:961,Modifiability,config,configuration,961,". Topological Mapping (6/7). Description; This step does not continue from the previous steps. It shows a hexahedra mesh which already has mechanical behavior and could be also linked to a surface mesh.; Key points; Press the Edit in Modeler button at the top of this window.; This opens a pre-built scene graph in the Modeler.; This scene includes components we are already familiar with:. An ODE solver and a linear solver. ; MechanicalObject with geometry point positions.; RegularGridTopology is used to create a 3D grid mesh. ; HexahedronFEMForcefield is used to create tetrahedral finite elements on this mechanical system.; DiagonalMass describes a global mass of the mesh elements.; Constraint components are used here to fix the four corners of the upper face of the cube. Results; Run in SOFA and animate. Interact with the cube by holding the Shift key and dragging with the mouse.; This scene represents a 3D cube mesh under gravity. It is the same configuration as the step ""Embedding the Model"". Previous ____________ Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/5_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/5_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html:1580,Availability,down,down,1580,". Topological Mapping (7/7). Description; This final step is a second pipeline of topological mappings from an hexahedral mesh to a triangular one, going through Quads.; Key points. Dynamic topological components to store the quad mesh. ; Hexa2QuadTopologicalMapping component is used to map Quads on the border of the hexahedral mesh to this container.; Dynamic topological components to store the triangular mesh. ; Quad2TriangleTopologicalMapping component is used to map Quads to Triangles.; Springs are added to the edges of the surface of the mesh using TriangularBendingSprings.; Finally, OglModel is used to visualize the surface mesh. Press the Edit in Modeler button at the top of this window.; Again, a pre-built scene graph opens in the Modeler. You can also look at the details of the scene in the right panel of this window.; Here we see five nodes, each a child of the previous node. This is a good visual representation of the flow of the collision pipeline.; Starting at the root node, we have all the basic components needed for the scene, including the DefaultPipeline.; Next we come to the Hexahedral Mesh, which includes the Ogl solver to determine the forces that the model will experience.; Once the solver determines the movement of the hexahedrons, the Quad Mesh maps that movement to a quad representation of only the surface of the model.; In turn, the Triangles Mesh maps the movement of the quad representation to a triangular representation. Here we also add springs and constraints to the surface.; Finally, all the information that has been passed down the pipeline is used by Visu to create a visualization of the surface of the model.; Results; Run in SOFA and Animate.; This last step shows another example of topological mappings with a mechanical behavior similar to step Change mesh behaviour. Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html:70,Deployability,pipeline,pipeline,70,". Topological Mapping (7/7). Description; This final step is a second pipeline of topological mappings from an hexahedral mesh to a triangular one, going through Quads.; Key points. Dynamic topological components to store the quad mesh. ; Hexa2QuadTopologicalMapping component is used to map Quads on the border of the hexahedral mesh to this container.; Dynamic topological components to store the triangular mesh. ; Quad2TriangleTopologicalMapping component is used to map Quads to Triangles.; Springs are added to the edges of the surface of the mesh using TriangularBendingSprings.; Finally, OglModel is used to visualize the surface mesh. Press the Edit in Modeler button at the top of this window.; Again, a pre-built scene graph opens in the Modeler. You can also look at the details of the scene in the right panel of this window.; Here we see five nodes, each a child of the previous node. This is a good visual representation of the flow of the collision pipeline.; Starting at the root node, we have all the basic components needed for the scene, including the DefaultPipeline.; Next we come to the Hexahedral Mesh, which includes the Ogl solver to determine the forces that the model will experience.; Once the solver determines the movement of the hexahedrons, the Quad Mesh maps that movement to a quad representation of only the surface of the model.; In turn, the Triangles Mesh maps the movement of the quad representation to a triangular representation. Here we also add springs and constraints to the surface.; Finally, all the information that has been passed down the pipeline is used by Visu to create a visualization of the surface of the model.; Results; Run in SOFA and Animate.; This last step shows another example of topological mappings with a mechanical behavior similar to step Change mesh behaviour. Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html:965,Deployability,pipeline,pipeline,965,". Topological Mapping (7/7). Description; This final step is a second pipeline of topological mappings from an hexahedral mesh to a triangular one, going through Quads.; Key points. Dynamic topological components to store the quad mesh. ; Hexa2QuadTopologicalMapping component is used to map Quads on the border of the hexahedral mesh to this container.; Dynamic topological components to store the triangular mesh. ; Quad2TriangleTopologicalMapping component is used to map Quads to Triangles.; Springs are added to the edges of the surface of the mesh using TriangularBendingSprings.; Finally, OglModel is used to visualize the surface mesh. Press the Edit in Modeler button at the top of this window.; Again, a pre-built scene graph opens in the Modeler. You can also look at the details of the scene in the right panel of this window.; Here we see five nodes, each a child of the previous node. This is a good visual representation of the flow of the collision pipeline.; Starting at the root node, we have all the basic components needed for the scene, including the DefaultPipeline.; Next we come to the Hexahedral Mesh, which includes the Ogl solver to determine the forces that the model will experience.; Once the solver determines the movement of the hexahedrons, the Quad Mesh maps that movement to a quad representation of only the surface of the model.; In turn, the Triangles Mesh maps the movement of the quad representation to a triangular representation. Here we also add springs and constraints to the surface.; Finally, all the information that has been passed down the pipeline is used by Visu to create a visualization of the surface of the model.; Results; Run in SOFA and Animate.; This last step shows another example of topological mappings with a mechanical behavior similar to step Change mesh behaviour. Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html:1589,Deployability,pipeline,pipeline,1589,". Topological Mapping (7/7). Description; This final step is a second pipeline of topological mappings from an hexahedral mesh to a triangular one, going through Quads.; Key points. Dynamic topological components to store the quad mesh. ; Hexa2QuadTopologicalMapping component is used to map Quads on the border of the hexahedral mesh to this container.; Dynamic topological components to store the triangular mesh. ; Quad2TriangleTopologicalMapping component is used to map Quads to Triangles.; Springs are added to the edges of the surface of the mesh using TriangularBendingSprings.; Finally, OglModel is used to visualize the surface mesh. Press the Edit in Modeler button at the top of this window.; Again, a pre-built scene graph opens in the Modeler. You can also look at the details of the scene in the right panel of this window.; Here we see five nodes, each a child of the previous node. This is a good visual representation of the flow of the collision pipeline.; Starting at the root node, we have all the basic components needed for the scene, including the DefaultPipeline.; Next we come to the Hexahedral Mesh, which includes the Ogl solver to determine the forces that the model will experience.; Once the solver determines the movement of the hexahedrons, the Quad Mesh maps that movement to a quad representation of only the surface of the model.; In turn, the Triangles Mesh maps the movement of the quad representation to a triangular representation. Here we also add springs and constraints to the surface.; Finally, all the information that has been passed down the pipeline is used by Visu to create a visualization of the surface of the model.; Results; Run in SOFA and Animate.; This last step shows another example of topological mappings with a mechanical behavior similar to step Change mesh behaviour. Previous. ",MatchSource.DOCS,examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/TopologicalMapping/6_TopoMapping.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/0_Visual.html:384,Modifiability,enhance,enhance,384,". Mesh Loading and Rendering 1 (1/7). Description; The objective of this first tutorial about visualization is to load an obj file and render it in the viewer.; Key points; OglModel is the main component for rendering file. This is where all geometrical information (vertices, faces ...) are given to OpenGL, which render it afterwards. Vertex Buffer Object is used (if supported) to enhance speed.; Just put an OglModel in the scene and fill the field filename with the path to your OBJ file.; Create a new scene. Clear it of the default components by selecting File > Clear.; Add an OglModel component to the root node. Change the Path to the model (found in the Property 2/3 tab) to /Sofa/share/mesh/dragon.obj; Run in SOFA and Animate.; Nothing happens, but you can see the object.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/0_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/0_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/0_Visual.html:114,Performance,load,load,114,". Mesh Loading and Rendering 1 (1/7). Description; The objective of this first tutorial about visualization is to load an obj file and render it in the viewer.; Key points; OglModel is the main component for rendering file. This is where all geometrical information (vertices, faces ...) are given to OpenGL, which render it afterwards. Vertex Buffer Object is used (if supported) to enhance speed.; Just put an OglModel in the scene and fill the field filename with the path to your OBJ file.; Create a new scene. Clear it of the default components by selecting File > Clear.; Add an OglModel component to the root node. Change the Path to the model (found in the Property 2/3 tab) to /Sofa/share/mesh/dragon.obj; Run in SOFA and Animate.; Nothing happens, but you can see the object.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/0_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/0_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:74,Performance,load,load,74,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:378,Performance,load,load,378,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:411,Performance,load,loaded,411,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:647,Performance,load,loader,647,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:999,Performance,load,loader,999,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:1093,Performance,load,loader,1093,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:180,Usability,simpl,simply,180,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html:1275,Usability,simpl,simply,1275,". Mesh Loading and Rendering 2 (2/7). Description; This step shows how to load mesh files which are not in OBJ format.; Key points; As we saw in the last step, OglModel can render simply OBJ file. This was done directly in this component because OBJ is widely used.; 		But if you have less common format files, there is a different method to render them.; MeshLoader is used to load several kinds of files. Its loaded data is connected to OglModel, which will used it to visualize.; 		In this example, we render an OFF file, using MeshOffLoader.; Clear the scene to start with just a root node again.; Add a MeshVTKLoader component and rename it ""loader"". Change the Filename of the object to /Sofa/share/mesh/aneurysm3d_2_small.off.; Add a OglModel. ; Save your scene file by selecting File > Save. We will refer to this file as myTutorial.scn.; In your favorite XML editor, open myTutorial.scn. Look for the line:; OglModel template=""ExtVec3f"" name=""oglModel8""; After the name property, add src=""@loader"". The line should now look like: ; OglModel template=""ExtVec3f"" name=""oglModel8"" src=""@loader""; Save the file. Re-open myTutorial.scn in the Modeler.; Run in SOFA.; You can now see the model of an aneurysm. If it is dark and difficult to see, don't be alarmed. That is simply because of the default colors specified for this model.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/1_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/1_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html:1494,Energy Efficiency,green,green,1494,". Mesh Loading and Rendering 3 (3/7). Description; Now we will go into more detail on how to use OglModel.; Key points; Clear the scene graph.; We will start by setting up a simple scene.; Add two GNodes to the root node. Name one ""DragonVisu"" and the other ""TexturedSofaVisu"".; Add an OglModel to each of the two new nodes. Name them ""dragon"" and ""sofa"".; Change the Path to the model in dragon to /Sofa/share/mesh/dragon.obj and the Path to the model in sofa to /Sofa/share/mesh/canapVM.obj.; Run in SOFA; The model is now correctly loaded and rendered; but we want to customize it.; Different kinds of parameters are offered through OglModel :. Transformation : rotation, translation and scale, each as a vector of 3 floats; Materials : describes ambient, diffuse, specular, emissive and shininess components. ; 		This is loaded either in a .MTL file attached to the OBJ; or as a string with the field material. You can also; 		use the color field, which will fill the material fields accordingly.; Texture : basic texture mapping with texturename field. In the properties for dragon, change the Initial Translation of the object to (0 10 2), the Initial Rotation of the object to (90 0 0) and the Initial Scale of the object to (0.5 0.5 0.5).; In the Property 2/3 tab, change the Ambient property to (0 191 0 255) and the Diffuse property to (51 51 0 229). Check the Specular and the Shininess checkboxes. Set Specular to (204 204 204 255) and Shininess to 25.; Run in SOFA.; Now we have a green dragon lying on the sofa.; In the Property 2/3 tab of the sofa, set the Name of the Texture to /Sofa/share/textures/snakeskin.png using the file browser.; Run in SOFA.; Now our sofa has been customized as well.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/2_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html:535,Performance,load,loaded,535,". Mesh Loading and Rendering 3 (3/7). Description; Now we will go into more detail on how to use OglModel.; Key points; Clear the scene graph.; We will start by setting up a simple scene.; Add two GNodes to the root node. Name one ""DragonVisu"" and the other ""TexturedSofaVisu"".; Add an OglModel to each of the two new nodes. Name them ""dragon"" and ""sofa"".; Change the Path to the model in dragon to /Sofa/share/mesh/dragon.obj and the Path to the model in sofa to /Sofa/share/mesh/canapVM.obj.; Run in SOFA; The model is now correctly loaded and rendered; but we want to customize it.; Different kinds of parameters are offered through OglModel :. Transformation : rotation, translation and scale, each as a vector of 3 floats; Materials : describes ambient, diffuse, specular, emissive and shininess components. ; 		This is loaded either in a .MTL file attached to the OBJ; or as a string with the field material. You can also; 		use the color field, which will fill the material fields accordingly.; Texture : basic texture mapping with texturename field. In the properties for dragon, change the Initial Translation of the object to (0 10 2), the Initial Rotation of the object to (90 0 0) and the Initial Scale of the object to (0.5 0.5 0.5).; In the Property 2/3 tab, change the Ambient property to (0 191 0 255) and the Diffuse property to (51 51 0 229). Check the Specular and the Shininess checkboxes. Set Specular to (204 204 204 255) and Shininess to 25.; Run in SOFA.; Now we have a green dragon lying on the sofa.; In the Property 2/3 tab of the sofa, set the Name of the Texture to /Sofa/share/textures/snakeskin.png using the file browser.; Run in SOFA.; Now our sofa has been customized as well.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/2_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html:825,Performance,load,loaded,825,". Mesh Loading and Rendering 3 (3/7). Description; Now we will go into more detail on how to use OglModel.; Key points; Clear the scene graph.; We will start by setting up a simple scene.; Add two GNodes to the root node. Name one ""DragonVisu"" and the other ""TexturedSofaVisu"".; Add an OglModel to each of the two new nodes. Name them ""dragon"" and ""sofa"".; Change the Path to the model in dragon to /Sofa/share/mesh/dragon.obj and the Path to the model in sofa to /Sofa/share/mesh/canapVM.obj.; Run in SOFA; The model is now correctly loaded and rendered; but we want to customize it.; Different kinds of parameters are offered through OglModel :. Transformation : rotation, translation and scale, each as a vector of 3 floats; Materials : describes ambient, diffuse, specular, emissive and shininess components. ; 		This is loaded either in a .MTL file attached to the OBJ; or as a string with the field material. You can also; 		use the color field, which will fill the material fields accordingly.; Texture : basic texture mapping with texturename field. In the properties for dragon, change the Initial Translation of the object to (0 10 2), the Initial Rotation of the object to (90 0 0) and the Initial Scale of the object to (0.5 0.5 0.5).; In the Property 2/3 tab, change the Ambient property to (0 191 0 255) and the Diffuse property to (51 51 0 229). Check the Specular and the Shininess checkboxes. Set Specular to (204 204 204 255) and Shininess to 25.; Run in SOFA.; Now we have a green dragon lying on the sofa.; In the Property 2/3 tab of the sofa, set the Name of the Texture to /Sofa/share/textures/snakeskin.png using the file browser.; Run in SOFA.; Now our sofa has been customized as well.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/2_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html:174,Usability,simpl,simple,174,". Mesh Loading and Rendering 3 (3/7). Description; Now we will go into more detail on how to use OglModel.; Key points; Clear the scene graph.; We will start by setting up a simple scene.; Add two GNodes to the root node. Name one ""DragonVisu"" and the other ""TexturedSofaVisu"".; Add an OglModel to each of the two new nodes. Name them ""dragon"" and ""sofa"".; Change the Path to the model in dragon to /Sofa/share/mesh/dragon.obj and the Path to the model in sofa to /Sofa/share/mesh/canapVM.obj.; Run in SOFA; The model is now correctly loaded and rendered; but we want to customize it.; Different kinds of parameters are offered through OglModel :. Transformation : rotation, translation and scale, each as a vector of 3 floats; Materials : describes ambient, diffuse, specular, emissive and shininess components. ; 		This is loaded either in a .MTL file attached to the OBJ; or as a string with the field material. You can also; 		use the color field, which will fill the material fields accordingly.; Texture : basic texture mapping with texturename field. In the properties for dragon, change the Initial Translation of the object to (0 10 2), the Initial Rotation of the object to (90 0 0) and the Initial Scale of the object to (0.5 0.5 0.5).; In the Property 2/3 tab, change the Ambient property to (0 191 0 255) and the Diffuse property to (51 51 0 229). Check the Specular and the Shininess checkboxes. Set Specular to (204 204 204 255) and Shininess to 25.; Run in SOFA.; Now we have a green dragon lying on the sofa.; In the Property 2/3 tab of the sofa, set the Name of the Texture to /Sofa/share/textures/snakeskin.png using the file browser.; Run in SOFA.; Now our sofa has been customized as well.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/2_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/2_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/3_Visual.html:1247,Energy Efficiency,green,greenLight,1247,". Lighting (4/7). Description; Next, we will see how to manage lights.; Key points. Clear the scene graph.; Add a GNode to the root node and name it ""Dragon"".; Add an OglModel to the Dragon node, and set the Path to the model to /Sofa/share/mesh/dragon.obj.; By default, a (positional) light is present in the OpenGL Viewer, for those who do not want to mess with it.; 		But if you want to tweak your scene, you may want to modify this light or add other lights.; In order to do that, first you need to add a LightManager, without any kind of parameters; 		(We will see later why we need it). After that, you can add up to the maximum number of lights permitted by OpenGL,; 		which is 8 on most common systems.; Add a LightManager component to the root node. Rename it ""lightManager"".; There are 3 kinds of lights in SOFA. They are basically the same as in OpenGL :; 		. PositionalLight (main parameter : position) ;; DirectionalLight (main parameter : direction) ;; SpotLight (main parameters : position and direction) . color is a common parameter for all these 3 lights.; SpotLight has other non-essential parameters : cutoff and exponent (default value may suffice).; Add three Spotlight components to the root node. Name one ""redLight"", one ""greenLight"", and one ""blueLight"".; In the redLight, set the color of the light to (1 0 0) and the position to (-5 -2.5 20).; In the greenLight, set the color of the light to (0 1 0) and the position to (0 2.5 20).; In the blueLight, set the color of the light to (0 0 1) and the position to (5 -2.5 20).; Run in SOFA; Note:; LightManager and *Light must be in the root node if you want your whole scene to be lighted.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/3_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/3_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/3_Visual.html:1379,Energy Efficiency,green,greenLight,1379,". Lighting (4/7). Description; Next, we will see how to manage lights.; Key points. Clear the scene graph.; Add a GNode to the root node and name it ""Dragon"".; Add an OglModel to the Dragon node, and set the Path to the model to /Sofa/share/mesh/dragon.obj.; By default, a (positional) light is present in the OpenGL Viewer, for those who do not want to mess with it.; 		But if you want to tweak your scene, you may want to modify this light or add other lights.; In order to do that, first you need to add a LightManager, without any kind of parameters; 		(We will see later why we need it). After that, you can add up to the maximum number of lights permitted by OpenGL,; 		which is 8 on most common systems.; Add a LightManager component to the root node. Rename it ""lightManager"".; There are 3 kinds of lights in SOFA. They are basically the same as in OpenGL :; 		. PositionalLight (main parameter : position) ;; DirectionalLight (main parameter : direction) ;; SpotLight (main parameters : position and direction) . color is a common parameter for all these 3 lights.; SpotLight has other non-essential parameters : cutoff and exponent (default value may suffice).; Add three Spotlight components to the root node. Name one ""redLight"", one ""greenLight"", and one ""blueLight"".; In the redLight, set the color of the light to (1 0 0) and the position to (-5 -2.5 20).; In the greenLight, set the color of the light to (0 1 0) and the position to (0 2.5 20).; In the blueLight, set the color of the light to (0 0 1) and the position to (5 -2.5 20).; Run in SOFA; Note:; LightManager and *Light must be in the root node if you want your whole scene to be lighted.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/3_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/3_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/4_Visual.html:952,Availability,down,down,952,". Shadowing (5/7). Description; Casting shadows in SOFA.; Key points; With SpotLight, it is possible to cast shadows simply in SOFA.; 		All we have to do is to put the component OglShadowShader (Shaders in general will be seen later), preferably ; 		in the same Node as the LightManager, i.e. root node of the scene.; First, add a floor by adding a new OglModel to the Dragon node and setting the Path to the model to /Sofa/share/mesh/floor.obj. Set its position to (0 -7 0).; Add a new Spotlight to the Root node. Set its position to (0 60 0) and its direction to (0 -1 0.01).; Add a OglShadowShader component to the Root node.; ; 		Then, you just have to either type the CONTROL+'L' key combination, or set the parameter Enable Shadow in the scene to true in the LightManager.; The only remarkable parameter is shadowTextureSize. The higher this parameter is, the nicer the shadow will be. Be careful with this, because if it is too high it can slow down your computer or even freeze it. It can be considered that 4096 is the maximum reasonable value.; Note:; For now, shadows are rendered ""hardly"" (contours are raw).; 		Don't forget that it uses GPU quite badly, so try to activate shadows only when necessary. ; 		; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/4_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/4_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/4_Visual.html:117,Usability,simpl,simply,117,". Shadowing (5/7). Description; Casting shadows in SOFA.; Key points; With SpotLight, it is possible to cast shadows simply in SOFA.; 		All we have to do is to put the component OglShadowShader (Shaders in general will be seen later), preferably ; 		in the same Node as the LightManager, i.e. root node of the scene.; First, add a floor by adding a new OglModel to the Dragon node and setting the Path to the model to /Sofa/share/mesh/floor.obj. Set its position to (0 -7 0).; Add a new Spotlight to the Root node. Set its position to (0 60 0) and its direction to (0 -1 0.01).; Add a OglShadowShader component to the Root node.; ; 		Then, you just have to either type the CONTROL+'L' key combination, or set the parameter Enable Shadow in the scene to true in the LightManager.; The only remarkable parameter is shadowTextureSize. The higher this parameter is, the nicer the shadow will be. Be careful with this, because if it is too high it can slow down your computer or even freeze it. It can be considered that 4096 is the maximum reasonable value.; Note:; For now, shadows are rendered ""hardly"" (contours are raw).; 		Don't forget that it uses GPU quite badly, so try to activate shadows only when necessary. ; 		; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/4_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/4_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/5_Visual.html:237,Deployability,pipeline,pipeline,237,". Simple Shader (6/7). Description:; The final tweak we will explore in visualizing is the use of Shaders, and other ways to replace OpenGL standard operations. We will add our own operation, using three different parts in the rendering pipeline.; Key points; Clear the scene graph. Add a dragon OglModel as we did in the previous steps.; Shaders are applied in SOFA with the OglShader component. It will apply shading to all the Visual Models (OglModels) in its node, and all its child nodes. That way, you can have several Shaders in your scene.; Add an OlgShader component.; The mandatory parameters are vertFilename and fragFilename where you give the path to the vertex and fragment GLSL code.; Using the file browser, set the vertFilename to /Sofa/share/shaders/phong.vert, and the fragFilename to /Sofa/share/shaders/phong.frag.; Run in SOFA.; Next. ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/5_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/5_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:509,Availability,avail,available,509,". Advanced Shader (7/7). Description; This follows the previous part on Shader, but now we will see how to use it more efficiently.; Key points; We have seen how to call a Shader, but we may need to send uniform values to the Shader in order to change parameters on the fly.; 		This can be done with a set of objects called Ogl{Type}{Size}Variable. They can handle a lot of different formats : vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to """,MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:617,Availability,avail,available,617,". Advanced Shader (7/7). Description; This follows the previous part on Shader, but now we will see how to use it more efficiently.; Key points; We have seen how to call a Shader, but we may need to send uniform values to the Shader in order to change parameters on the fly.; 		This can be done with a set of objects called Ogl{Type}{Size}Variable. They can handle a lot of different formats : vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to """,MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:119,Energy Efficiency,efficient,efficiently,119,". Advanced Shader (7/7). Description; This follows the previous part on Shader, but now we will see how to use it more efficiently.; Key points; We have seen how to call a Shader, but we may need to send uniform values to the Shader in order to change parameters on the fly.; 		This can be done with a set of objects called Ogl{Type}{Size}Variable. They can handle a lot of different formats : vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to """,MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:1095,Modifiability,variab,variables,1095,"ore efficiently.; Key points; We have seen how to call a Shader, but we may need to send uniform values to the Shader in order to change parameters on the fly.; 		This can be done with a set of objects called Ogl{Type}{Size}Variable. They can handle a lot of different formats : vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to ""6"", ""0.9"" and ""0.2"" respectively.; Add a OglIntVariable component and name it ""perlinBumpOctave"". Set the Uniform ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:1294,Modifiability,variab,variable,1294," be done with a set of objects called Ogl{Type}{Size}Variable. They can handle a lot of different formats : vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to ""6"", ""0.9"" and ""0.2"" respectively.; Add a OglIntVariable component and name it ""perlinBumpOctave"". Set the Uniform Value to ""1"".; Run in SOFA.; We have defined all the variables for the pattern of the dragon. Now we will define the color.; You can define a macro by giving it the same na",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:1357,Modifiability,variab,variable,1357,"vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to ""6"", ""0.9"" and ""0.2"" respectively.; Add a OglIntVariable component and name it ""perlinBumpOctave"". Set the Uniform Value to ""1"".; Run in SOFA.; We have defined all the variables for the pattern of the dragon. Now we will define the color.; You can define a macro by giving it the same name as the variable, like we did above, or by setting the ID name.; Add a OglShaderDefineMacro component, and",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:1381,Modifiability,variab,variables,1381,"vectors, matrices, array of vectors in int and float types (see components/visualmodel/OglVariable.h for a list of available types).; Texture can be also given to the Shader, using OglTexture, which has a lot of parameters available; but the most important one is the texture unit id.; Another problem arises if you want to mix different effects (for example: toon shading and normal mapping).; 		You can write a big Shader that does a lot of things, and activate only what you want with a system of macro.; In your favorite editor, open /Sofa/share/shaders/generalRenderingShader.vert and /Sofa/share/shaders/generalRenderingShader.frag.; In the .frag file, look at line 85. This section defines the variables that are needed to execute the Perlin Noise Bump effect.; Now look at line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to ""6"", ""0.9"" and ""0.2"" respectively.; Add a OglIntVariable component and name it ""perlinBumpOctave"". Set the Uniform Value to ""1"".; Run in SOFA.; We have defined all the variables for the pattern of the dragon. Now we will define the color.; You can define a macro by giving it the same name as the variable, like we did above, or by setting the ID name.; Add a OglShaderDefineMacro component, and",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:2168,Modifiability,variab,variables,2168,"line 369. This section executes the Perlin Noise Bump effect.; Notice for either of these sections to be compiled, the variable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to ""6"", ""0.9"" and ""0.2"" respectively.; Add a OglIntVariable component and name it ""perlinBumpOctave"". Set the Uniform Value to ""1"".; Run in SOFA.; We have defined all the variables for the pattern of the dragon. Now we will define the color.; You can define a macro by giving it the same name as the variable, like we did above, or by setting the ID name.; Add a OglShaderDefineMacro component, and set the ID name to ""PERLIN_NOISE_COLOR"".; Add a perlinFloat4Variables, naming it ""perlinColorFactor"" and setting the Uniform Value to (0.2 0.9 0 0).; Add two OglFloatVariables. Name one ""perlinColorFrequency"" and give it a Uniform Value of ""0.5"". Name the other ""perlinColorPersistance""and give it a Uniform Value of ""0.5"".; Add a OglIntVariable named ""perlinColorOctave"" with a Uniform Value of ""3"".; Run in SOFA.; Lastly, we can add a texture to the dragon.; The Perlin texture requires a lot of values, too many to enter by hand. We will cheat a bit.; Open your scene in your favorite XML editor. Copy the bold text below, and paste it into your scene, right before </Node>.; <OglTexture2D id=""perlinPermutationsTexture"" proceduralTextureNbBits=""8"" proceduralTextureWidth=""1"" ",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html:2297,Modifiability,variab,variable,2297,"ariable PERLIN_NOISE_BUMP must be defined. We can define this variable, and the other variables that are needed for this effect, directly in the scene graph.; In the OglShader component, change to vertFilename and the fragFilename to ""/Sofa/share/shaders/generalrenderingshader.vert"" and ""/Sofa/share/shaders/generalrenderingshader.frag""; Add a OglShaderDefineMacro component, and change the name to ""PHONG"".; This will give the same basic shading as in the last step.; Add a OglShaderDefineMacro component, and change the name to ""PERLIN_NOISE_BUMP"".; Add three OglFloatVariables, and name them ""perlinBumpFrequency"", ""perlinBumpFactor"" and ""perlinBumpPersistance"". Set their Uniform Value properties to ""6"", ""0.9"" and ""0.2"" respectively.; Add a OglIntVariable component and name it ""perlinBumpOctave"". Set the Uniform Value to ""1"".; Run in SOFA.; We have defined all the variables for the pattern of the dragon. Now we will define the color.; You can define a macro by giving it the same name as the variable, like we did above, or by setting the ID name.; Add a OglShaderDefineMacro component, and set the ID name to ""PERLIN_NOISE_COLOR"".; Add a perlinFloat4Variables, naming it ""perlinColorFactor"" and setting the Uniform Value to (0.2 0.9 0 0).; Add two OglFloatVariables. Name one ""perlinColorFrequency"" and give it a Uniform Value of ""0.5"". Name the other ""perlinColorPersistance""and give it a Uniform Value of ""0.5"".; Add a OglIntVariable named ""perlinColorOctave"" with a Uniform Value of ""3"".; Run in SOFA.; Lastly, we can add a texture to the dragon.; The Perlin texture requires a lot of values, too many to enter by hand. We will cheat a bit.; Open your scene in your favorite XML editor. Copy the bold text below, and paste it into your scene, right before </Node>.; <OglTexture2D id=""perlinPermutationsTexture"" proceduralTextureNbBits=""8"" proceduralTextureWidth=""1"" proceduralTextureHeight=""256"" repeat=""true"" linearInterpolation=""false"" proceduralTextureData=""151 160 137 91 90 15 ; 		",MatchSource.DOCS,examples/Tutorials/StepByStep/Visual/6_Visual.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/examples/Tutorials/StepByStep/Visual/6_Visual.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:3300,Availability,avail,available,3300,"he main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/l",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:3395,Availability,avail,available,3395," root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; We",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4118,Availability,down,download,4118," DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... T",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:559,Deployability,configurat,configuration,559,". The Graphic User; Interface in SOFA; I) An overview of the GUI; II) Structure; III) Viewers; IV) QtOgreViewer; . An Overview of the GUI. The main; program is divided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the change",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:607,Deployability,configurat,configuration,607,". The Graphic User; Interface in SOFA; I) An overview of the GUI; II) Structure; III) Viewers; IV) QtOgreViewer; . An Overview of the GUI. The main; program is divided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the change",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:1050,Deployability,release,release,1050,"tructure; III) Viewers; IV) QtOgreViewer; . An Overview of the GUI. The main; program is divided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Lin",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:1114,Deployability,release,release,1114,"vided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with th",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:1967,Deployability,update,update,1967,"ated, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:2327,Deployability,configurat,configuration,2327,"wn above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:2647,Deployability,update,update,2647,"scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the li",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:3995,Deployability,install,install,3995," choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to b",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4131,Deployability,install,install,4131," DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... T",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4227,Deployability,install,installed,4227,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4459,Deployability,install,installed,4459,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4493,Deployability,configurat,configuration,4493,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:1338,Integrability,depend,depending,1338," the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:2025,Integrability,interface,interface,2025,"pring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgre",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:2311,Integrability,depend,depends,2311,"wn above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:559,Modifiability,config,configuration,559,". The Graphic User; Interface in SOFA; I) An overview of the GUI; II) Structure; III) Viewers; IV) QtOgreViewer; . An Overview of the GUI. The main; program is divided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the change",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:607,Modifiability,config,configuration,607,". The Graphic User; Interface in SOFA; I) An overview of the GUI; II) Structure; III) Viewers; IV) QtOgreViewer; . An Overview of the GUI. The main; program is divided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the change",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:2327,Modifiability,config,configuration,2327,"wn above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the changes. Structure ; The main interface uses a Qt; environment (Qt3.3 for Linux and Qt4 for Windows). The Main window,; providing all the interactions possible with the simulation,was created; using QtDesigner. The RealGUI contains the viewer which can be selected; directly in the main window. The possible choices depends on the; configuration file, sofa-default.cfg. The RealGUI gets a pointer to the root of the scene graph, and controls; the application by calling class; sofa::simulation::tree:Simulation.; The RealGUI uses an internal timer to repeatedly call; method sofa::simulation::tree:Simulation::animate(GNode* root, double; dt) and then update the viewer. To select the; viewers:. sofa-default.cfg located in; your Sofa main directory allows to define what kind of viewer you are; willing to have. ; By commenting (adding a�#� in front of the line) or uncommenting; (removing the �#�) lines, you can allow multiple kind of viewer.; For example, if you want to have the choice to render the scene with; QtGLViewer and QtOgreViewer, just modify sofa-default.cfg as below:. # DEFINES += SOFA_GUI_QT ; DEFINES += SOFA_GUI_QTOGREVIEWER; DEFINES += SOFA_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4353,Modifiability,config,config,4353,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4493,Modifiability,config,configuration,4493,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4554,Modifiability,config,config,4554,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4565,Modifiability,plugin,plugins,4565,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:4592,Modifiability,plugin,plugins,4592,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:720,Performance,load,load,720,". The Graphic User; Interface in SOFA; I) An overview of the GUI; II) Structure; III) Viewers; IV) QtOgreViewer; . An Overview of the GUI. The main; program is divided in two main parts, a rendering window and a control; panel. A slider between them sets their; dimension. Common Interactions:. ANIM: launch the Simulation.; The text field, DTsets the step of time used during the; simulation. STEP: the simulation will; compute its state at the time: t+DT. Reset Scene: reset the; Simulation to the initial time, t=0. Reset View: set your camera at; initial configuration found in a view file, or default; configuration. Save View: keep in memory the; position and orientation of the camera, for the next time you will load; the scene. Save Screenshot: take a picture; of the current scene. Direct interaction with the scene is; possible. To do so, maintain SHIFT button pressed and click on a; collision model present in the scene; A �Pick Interactor� will be; created, and attached to the picked collision model, if any, with a; spring. ; If; you release the mouse button first, the spring is removed.; If; you release the SHIFT button first, the spring is fixed and exists; until you pick another point in the scene. Several tabs give more information; about the current scene: ; This images were taken for the scene shown above. . - depending on the viewer, you can control what is displayed, and the; way it is. ; - statistical outputs during the simulation (position and velocity for; each elements, time passed at each branch of the graph, gnuplot files); ; - the graph of the scene, with all the nodes. You can export this graph; into a nice png file.; - the last tab, �Viewer� gives the name and information about; the possibilities of the current viewer, and the shortcuts. Double clicking on a node allows you to modify several values and; change dynamically the simulation (here, the TetrahedronFEMForceField; node). In some cases, you need to press the update button; to apply the change",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html:5116,Performance,load,loaded,5116,"_GUI_QGLVIEWER. Then, in the main window, you select the kind of viewer you; want. Qt will appear in gray, whereas QGLViewer and Ogre will be; available.; Warning, you must reload the scene when this change is made!. Viewers. The Viewers available now are:. QtViewer: uses openGL, derives a; QGLWidget in order to be embedded within Qt. This class will probably; not be maintained. Use QtGLViewer instead. QtGLViewer: uses the library; QGLViewer. Provides lots of functions to navigate through the scene.; More information at QGLViewer; Website. QtOgreViewer: Embed Ogre within a; Qwidget. Allows to get great visuals, through an intensive use of; shaders, materials.; Shadows are provided, but all the controls (show the mechanical; objects, force fields...) are disabled. ; Warning: Ogre is not provided by Sofa, you have to previously install; Ogre on your computer. ; The support works with Windows, Linux. ; - For Windows, the easiest way to proceed is to download and install; the SDK. ; - For Linux, you have to compile from the source. If Ogre's library; aren't installed in the default directory �/usr/local/lib/Ogre�; then, you have to set the; correct path in �YourSofaDirectory/share/config/plugins_unix.cfg�; To get it: Ogre; Website. QtOgreViewer; To; use this viewer, you must have Ogre installed on your computer. ; The configuration files are located in: �YourSofaDirectory/share/config/�. �plugins.cfg� describes the plugins used by Ogre for; Windows, and �plugins_unix.cfg� for... Linux.; By creating a .scene file with the same name as the simulation, you can; provide additional models, lights, visuals to the simulation( see Ogre; documentation for mode details ). This won't interact with Sofa, but; allows you to get a better render.; Additional textures, materials,; shaders... in Ogre, have to be put in �; YourSofaDirectory/share/textures� or �; YourSofaDirectory/share/materials� or; �YourSofaDirectory/share/shaders� ... They are loaded at the; start-up of the viewer. . ",MatchSource.DOCS,Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/Qt/src/sofa/gui/qt/Doc_Viewer/index.html
