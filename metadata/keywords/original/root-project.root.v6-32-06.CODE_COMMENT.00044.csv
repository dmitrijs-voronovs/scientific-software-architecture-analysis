id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h:12,Integrability,Wrap,WrappedFunction,12,"// virtual ~WrappedFunction() { /**/ }",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h:3,Integrability,Wrap,WrappedMultiFunction,3,"// WrappedMultiFunction",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h:84,Integrability,interface,interface,84,"// use default copy constructor and assignment operator; /// clone (required by the interface)",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h:3,Integrability,Wrap,WrappedMemMultiFunction,3,"// WrappedMemMultiFunction",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:429,Integrability,Wrap,WrappedParamFunction,429,"// @(#)root/mathcore:$Id$; // Author: L. Moneta Thu Nov 23 10:38:32 2006; /**********************************************************************; * *; * Copyright (c) 2006 CERN *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; * *; **********************************************************************/; // Header file for class WrappedParamFunction",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:5,Integrability,Wrap,WrappedParamFunction,5,"/**; WrappedParamFunction class to wrap any multi-dimensional function object; implementing the operator()(const double * x, const double * p); in an interface-like IParamFunction with a vector storing and caching internally the; parameter values. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:35,Integrability,wrap,wrap,35,"/**; WrappedParamFunction class to wrap any multi-dimensional function object; implementing the operator()(const double * x, const double * p); in an interface-like IParamFunction with a vector storing and caching internally the; parameter values. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:150,Integrability,interface,interface-like,150,"/**; WrappedParamFunction class to wrap any multi-dimensional function object; implementing the operator()(const double * x, const double * p); in an interface-like IParamFunction with a vector storing and caching internally the; parameter values. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:19,Integrability,wrap,wrapped,19,"/**; Constructor a wrapped function from a pointer to a callable object, the function dimension and number of parameters; which are set to zero by default; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:25,Integrability,wrap,wrapped,25,"// /**; // Constructor a wrapped function from a non-const pointer to a callable object, the function dimension and number of parameters; // which are set to zero by default; // This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; // */; // WrappedParamFunction (FuncPtr & func, unsigned int dim = 1, unsigned int npar = 0, double * par = 0) :; // fFunc(func),; // fDim(dim),; // fParams(std::vector<double>(npar) ); // {; // if (par != 0) std::copy(par,par+npar,fParams.begin() );; // }; /**; Constructor a wrapped function from a pointer to a callable object, the function dimension and an iterator specifying begin and end; of parameters; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:304,Integrability,Wrap,WrappedParamFunction,304,"// /**; // Constructor a wrapped function from a non-const pointer to a callable object, the function dimension and number of parameters; // which are set to zero by default; // This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; // */; // WrappedParamFunction (FuncPtr & func, unsigned int dim = 1, unsigned int npar = 0, double * par = 0) :; // fFunc(func),; // fDim(dim),; // fParams(std::vector<double>(npar) ); // {; // if (par != 0) std::copy(par,par+npar,fParams.begin() );; // }; /**; Constructor a wrapped function from a pointer to a callable object, the function dimension and an iterator specifying begin and end; of parameters; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:571,Integrability,wrap,wrapped,571,"// /**; // Constructor a wrapped function from a non-const pointer to a callable object, the function dimension and number of parameters; // which are set to zero by default; // This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; // */; // WrappedParamFunction (FuncPtr & func, unsigned int dim = 1, unsigned int npar = 0, double * par = 0) :; // fFunc(func),; // fDim(dim),; // fParams(std::vector<double>(npar) ); // {; // if (par != 0) std::copy(par,par+npar,fParams.begin() );; // }; /**; Constructor a wrapped function from a pointer to a callable object, the function dimension and an iterator specifying begin and end; of parameters; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:25,Integrability,wrap,wrapped,25,"// /**; // Constructor a wrapped function from a non - const pointer to a callable object, the function dimension and an iterator specifying begin and end of parameters.; // This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; // */; // template<class Iterator>; // WrappedParamFunction (FuncPtr func, unsigned int dim, Iterator begin, Iterator end) :; // fFunc(func),; // fDim(dim),; // fParams(std::vector<double>(begin,end) ); // {}; /// clone the function",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:329,Integrability,Wrap,WrappedParamFunction,329,"// /**; // Constructor a wrapped function from a non - const pointer to a callable object, the function dimension and an iterator specifying begin and end of parameters.; // This constructor is needed in the case FuncPtr is a std::unique_ptr which has a copy ctor taking non const objects; // */; // template<class Iterator>; // WrappedParamFunction (FuncPtr func, unsigned int dim, Iterator begin, Iterator end) :; // fFunc(func),; // fDim(dim),; // fParams(std::vector<double>(begin,end) ); // {}; /// clone the function",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:65,Integrability,interface,interface,65,"/// evaluate the function given values and parameters (requested interface)",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:5,Integrability,Wrap,WrappedParamGenFunction,5,"/**; WrappedParamGenFunction class to wrap any multi-dimensional function; implementing the operator()(const double * ); in an interface-like IParamFunction, by fixing some of the variables and define them as; parameters.; i.e. transform any multi-dim function in a parametric function. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:38,Integrability,wrap,wrap,38,"/**; WrappedParamGenFunction class to wrap any multi-dimensional function; implementing the operator()(const double * ); in an interface-like IParamFunction, by fixing some of the variables and define them as; parameters.; i.e. transform any multi-dim function in a parametric function. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:127,Integrability,interface,interface-like,127,"/**; WrappedParamGenFunction class to wrap any multi-dimensional function; implementing the operator()(const double * ); in an interface-like IParamFunction, by fixing some of the variables and define them as; parameters.; i.e. transform any multi-dim function in a parametric function. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:180,Modifiability,variab,variables,180,"/**; WrappedParamGenFunction class to wrap any multi-dimensional function; implementing the operator()(const double * ); in an interface-like IParamFunction, by fixing some of the variables and define them as; parameters.; i.e. transform any multi-dim function in a parametric function. @ingroup ParamFunc. */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:19,Integrability,wrap,wrapped,19,"/**; Constructor a wrapped function from a pointer to a generic callable object implementation operator()(const double *), the new function dimension, the number of parameters (number of fixed variables) and an array specifying the index of the fixed variables which became; parameters in the new API; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:193,Modifiability,variab,variables,193,"/**; Constructor a wrapped function from a pointer to a generic callable object implementation operator()(const double *), the new function dimension, the number of parameters (number of fixed variables) and an array specifying the index of the fixed variables which became; parameters in the new API; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:251,Modifiability,variab,variables,251,"/**; Constructor a wrapped function from a pointer to a generic callable object implementation operator()(const double *), the new function dimension, the number of parameters (number of fixed variables) and an array specifying the index of the fixed variables which became; parameters in the new API; */",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:3,Performance,cache,cached,3,"// cached vector",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:3,Performance,cache,cached,3,"// cached vector",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:38,Energy Efficiency,efficient,efficient,38,"// // re-implement this since is more efficient; // double operator() (const double * x, const double * p) {; // unsigned int n = fX.size();; // unsigned int npar = fParams.size();; // unsigned j = 0;; // return (*fFunc)( fX);; // }",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:55,Energy Efficiency,efficient,efficient,55,"/// evaluate the function (re-implement for being more efficient)",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:257,Testability,assert,assert,257,"// std::cout << this << fDim << "" x : "";; // std::ostream_iterator<double> oix(std::cout,"" , "");; // std::copy(x, x+fDim, oix);; // std::cout << std::endl;; // std::cout << ""npar "" << npar << std::endl;; // std::cout << fVarIndices.size() << std::endl;; // assert ( fVarIndices.size() == fDim); // otherwise something is wrong",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:43,Integrability,interface,interface,43,/**; implement the required IParamFunction interface; */,MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:13,Modifiability,variab,variable,13,"// calculate variable indices and set in X the parameter values",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:52,Modifiability,variab,variables,52,"// otherwise something is wrong; // std::cout << ""n variables "" << fVarIndices.size() << std::endl;; // std::ostream_iterator<int> oi(std::cout,"" "");; // std::copy(fVarIndices.begin(), fVarIndices.end(), oi);; // std::cout << std::endl;; // assert( fVarIndices.size() == fDim);; // std::cout << this << std::endl;; // set parameter values in fX",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:241,Testability,assert,assert,241,"// otherwise something is wrong; // std::cout << ""n variables "" << fVarIndices.size() << std::endl;; // std::ostream_iterator<int> oi(std::cout,"" "");; // std::copy(fVarIndices.begin(), fVarIndices.end(), oi);; // std::cout << std::endl;; // assert( fVarIndices.size() == fDim);; // std::cout << this << std::endl;; // set parameter values in fX",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h:35,Performance,cache,cached,35,"// set the parameter values in the cached fX vector; // make const because it might be called from const methods",MatchSource.CODE_COMMENT,math/mathcore/inc/Math/WrappedParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/inc/Math/WrappedParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:37,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,37,"// Implementation file for class; // AdaptiveIntegratorMultiDim; //",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:37,Modifiability,Adapt,AdaptiveIntegratorMultiDim,37,"// Implementation file for class; // AdaptiveIntegratorMultiDim; //",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:52,Integrability,interface,interface,52,"// constructor passing a multi-dimensional function interface; // constructor - without passing a function",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:124,Availability,Error,Error,124,"//double AdaptiveIntegratorMultiDim::Result() const { return fIntegrator->Result(); }; //double AdaptiveIntegratorMultiDim::Error() const { return fIntegrator->Error(); }",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:160,Availability,Error,Error,160,"//double AdaptiveIntegratorMultiDim::Result() const { return fIntegrator->Result(); }; //double AdaptiveIntegratorMultiDim::Error() const { return fIntegrator->Error(); }",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:9,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,9,"//double AdaptiveIntegratorMultiDim::Result() const { return fIntegrator->Result(); }; //double AdaptiveIntegratorMultiDim::Error() const { return fIntegrator->Error(); }",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:96,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,96,"//double AdaptiveIntegratorMultiDim::Result() const { return fIntegrator->Result(); }; //double AdaptiveIntegratorMultiDim::Error() const { return fIntegrator->Error(); }",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:9,Modifiability,Adapt,AdaptiveIntegratorMultiDim,9,"//double AdaptiveIntegratorMultiDim::Result() const { return fIntegrator->Result(); }; //double AdaptiveIntegratorMultiDim::Error() const { return fIntegrator->Error(); }",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:96,Modifiability,Adapt,AdaptiveIntegratorMultiDim,96,"//double AdaptiveIntegratorMultiDim::Result() const { return fIntegrator->Result(); }; //double AdaptiveIntegratorMultiDim::Error() const { return fIntegrator->Error(); }",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:11,Deployability,integrat,integration,11,"// set the integration function",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:11,Integrability,integrat,integration,11,"// set the integration function",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:117,Deployability,integrat,integration,117,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:293,Deployability,integrat,integration,293,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:84,Energy Efficiency,adapt,adaptive,84,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:256,Energy Efficiency,adapt,adaptive,256,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:117,Integrability,integrat,integration,117,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:293,Integrability,integrat,integration,293,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:84,Modifiability,adapt,adaptive,84,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:256,Modifiability,adapt,adaptive,256,"// References:; //; // 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; // An adaptive algorithm for numerical integration over; // an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; // 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; // integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217.; //to be changed later",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:2,Availability,error,error,2,"//error weights/2^n",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:174,Energy Efficiency,allocate,allocated,174,"// The original algorithm expected a working space array WK of length IWK; // with IWK Length ( >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2).; // Here, this array is allocated dynamically",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:33,Availability,error,error,33,"//storing dimension with biggest error/difference (?)",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:3,Safety,avoid,avoid,3,"// avoid difference of too small numbers; //rgnval = 1.0E-30;; //rgnerr = TMath::Max( std::abs(rgnval-rgncmp), TMath::Max(std::abs(rgncmp), std::abs(rgnval) )*4.0E-16 );",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:17,Availability,error,error,17,"//compares estim error with expected error",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:37,Availability,error,error,37,"//compares estim error with expected error",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:136,Availability,error,error,136,"//if (result > 0 && aresult< 1e-100) {; // delete [] wk;; // fStatus = 0; //function is probably symmetric ==> integral is null: not an error; // return result;; //}; //if division",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:18,Availability,error,error,18,"//storing value & error in last",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:26,Availability,error,error,26,"//coordinate with biggest error",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:57,Availability,toler,tolerance,57,"//..and accuracy appropriare; // should not use absolute tolerance especially for sharp peaks",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:30,Availability,error,error,30,"// We do not use the absolute error.",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:30,Availability,error,error,30,"// We do not use the absolute error.",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:4,Availability,Error,Error,4,"//::Error(""AdaptiveIntegratorMultiDim::DoIntegral()"", ""Logic error: idvax0 < 1!"");",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:61,Availability,error,error,61,"//::Error(""AdaptiveIntegratorMultiDim::DoIntegral()"", ""Logic error: idvax0 < 1!"");",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:11,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,11,"//::Error(""AdaptiveIntegratorMultiDim::DoIntegral()"", ""Logic error: idvax0 < 1!"");",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:11,Modifiability,Adapt,AdaptiveIntegratorMultiDim,11,"//::Error(""AdaptiveIntegratorMultiDim::DoIntegral()"", ""Logic error: idvax0 < 1!"");",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:55,Testability,Log,Logic,55,"//::Error(""AdaptiveIntegratorMultiDim::DoIntegral()"", ""Logic error: idvax0 < 1!"");",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:33,Performance,perform,performed,33,"//number of function evaluations performed.",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:7,Deployability,integrat,integration,7,"// set integration options",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx:7,Integrability,integrat,integration,7,"// set integration options",MatchSource.CODE_COMMENT,math/mathcore/src/AdaptiveIntegratorMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/AdaptiveIntegratorMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// set variable in minimizer - support only free variables; // no transformation implemented - so far",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:49,Modifiability,variab,variables,49,"// set variable in minimizer - support only free variables; // no transformation implemented - so far",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:21,Modifiability,variab,variable,21,"// set lower limited variable",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:21,Modifiability,variab,variable,21,"// set upper limited variable",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:22,Modifiability,variab,variable,22,"// set double bounded variable",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:14,Modifiability,variab,variable,14,"/// set fixed variable",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// set variable value in minimizer; // no change to transformation or variable status",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:70,Modifiability,variab,variable,70,"// set variable value in minimizer; // no change to transformation or variable status",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:11,Modifiability,variab,variable,11,"// set all variable values in minimizer",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// set variable lower limit",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// set variable upper limit",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// set variable limits (remove limits if lower >= upper)",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:39,Deployability,update,update,39,"// if limits do not exists add them or update",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// fix variable",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:7,Modifiability,variab,variable,7,"// fix variable",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:29,Integrability,wrap,wrap,29,"// in case of transformation wrap objective function in a new transformation function; // and transform from external variables to internals ones type; // Transformations are supported only for gradient function",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:118,Modifiability,variab,variables,118,"// in case of transformation wrap objective function in a new transformation function; // and transform from external variables to internals ones type; // Transformations are supported only for gradient function",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx:18,Modifiability,variab,variables,18,"// number of free variables",MatchSource.CODE_COMMENT,math/mathcore/src/BasicMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BasicMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:64,Availability,error,errors,64,/**; constructor from options and range; efault is 1D and value errors; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:89,Availability,error,errors,89,/** constructors using external data */; /**; constructor from external data for 1D with errors on coordinate and value; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:48,Availability,error,errors,48,/**; constructor from external data for 2D with errors on coordinate and value; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:48,Availability,error,errors,48,/**; constructor from external data for 3D with errors on coordinate and value; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:19,Availability,error,errors,19,"// copy coordinate errors and set correct pointers",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:13,Availability,error,error,13,"// copy data error",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:28,Availability,error,error,28,"// copy the asymmetric data error",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:8,Availability,error,error,8,"// both error low and high should be empty or not",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:60,Availability,error,error,60,"/**; preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints); */",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:308,Energy Efficiency,allocate,allocated,308,"/**; preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints); */",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:13,Testability,Log,Log,13,"/**; apply a Log transformation of the data values; can be used for example when fitting an exponential or gaussian; Transform the data in place need to copy if want to preserve original data; The data sets must not contain negative values. IN case it does,; an empty data set is returned; */",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:9,Testability,log,log,9,"// apply log transform on the bin data values",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:30,Availability,error,error,30,/**; add one dim data with no error in the coordinate (x); in this case store the inverse of the error in the value (y); */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:97,Availability,error,error,97,/**; add one dim data with no error in the coordinate (x); in this case store the inverse of the error in the value (y); */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:35,Availability,error,error,35,"// set the weight flag checking if error^2 != y",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:27,Availability,error,error,27,/**; add one dim data with error in the coordinate (x); in this case store the value (y) error and not the inverse; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:89,Availability,error,error,89,/**; add one dim data with error in the coordinate (x); in this case store the value (y) error and not the inverse; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:35,Availability,error,error,35,"// set the weight flag checking if error^2 != y",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:27,Availability,error,error,27,/**; add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:70,Availability,error,errors,70,/**; add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:120,Availability,error,errors,120,/**; add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:45,Availability,error,error,45,/**; add multi-dim coordinate data with only error in value; The class stores internally the inverse of the error in this case; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:108,Availability,error,error,108,/**; add multi-dim coordinate data with only error in value; The class stores internally the inverse of the error in this case; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:45,Availability,error,error,45,/**; add multi-dim coordinate data with both error in coordinates and value; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:31,Availability,error,error,31,"// in this case we store the y error and not the inverse",MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx:45,Availability,error,error,45,/**; add multi-dim coordinate data with both error in coordinates and value; */,MatchSource.CODE_COMMENT,math/mathcore/src/BinData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BinData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx:403,Availability,toler,tolerance,403,"//Finds a minimum of a function, if the function is unimodal between xmin and xmax; //This method uses a combination of golden section search and parabolic interpolation; //Details about convergence and properties of this algorithm can be; //found in the book by R.P.Brent ""Algorithms for Minimization Without Derivatives""; //or in the ""Numerical Recipes"", chapter 10.2; // convergence is reached using tolerance = 2 *( epsrel * abs(x) + epsabs); //; //type: 0-returns MinimumX; // 1-returns Minimum; // 2-returns MaximumX; // 3-returns Maximum; // 4-returns X corresponding to fy; //if ok=true the method has converged",MatchSource.CODE_COMMENT,math/mathcore/src/BrentMethods.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx:157,Testability,test,testing,157,"// last delta x; // current Deltax = p/q; // take a parabolic step only if:; // Deltax < 0.5* (DeltaX before last) && Deltax > a && Deltax < b; // (a BUG in testing this condition is fixed 11/3/2010 (with revision 32544)",MatchSource.CODE_COMMENT,math/mathcore/src/BrentMethods.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx:2,Deployability,update,update,2,"//update a, b, v, w and x",MatchSource.CODE_COMMENT,math/mathcore/src/BrentMethods.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMethods.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMinimizer1D.cxx:96,Availability,toler,tolerance,96,"// Find minimum position iterating until convergence specified by the; // absolute and relative tolerance or the maximum number of iteration; // is reached.; // repeat search (Bracketing + Brent) until max number of search is reached (default is 10); // maxITer refers to the iterations inside the Brent algorithm",MatchSource.CODE_COMMENT,math/mathcore/src/BrentMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/BrentMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DataRange.cxx:82,Energy Efficiency,allocate,allocated,82,"// no op in case of bad values; // case the coordinate is larger than the current allocated vector size",MatchSource.CODE_COMMENT,math/mathcore/src/DataRange.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DataRange.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DataRange.cxx:82,Energy Efficiency,allocate,allocated,82,"// no op in case of bad values; // case the coordinate is larger than the current allocated vector size",MatchSource.CODE_COMMENT,math/mathcore/src/DataRange.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DataRange.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx:286,Availability,error,error,286,"// function to test if a point with barycentric coordinates (a,b,c) is inside the triangle; // If the point is outside one or more of the coordinate are negative.; // If the point is on a triangle edge, one of the coordinate (the one not part of the edge) is zero.; // Due to numerical error, it can happen that if the point is at the edge the result is a small negative value.; // Use then a tolerance (of - eps) to still consider the point within the triangle",MatchSource.CODE_COMMENT,math/mathcore/src/Delaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx:393,Availability,toler,tolerance,393,"// function to test if a point with barycentric coordinates (a,b,c) is inside the triangle; // If the point is outside one or more of the coordinate are negative.; // If the point is on a triangle edge, one of the coordinate (the one not part of the edge) is zero.; // Due to numerical error, it can happen that if the point is at the edge the result is a small negative value.; // Use then a tolerance (of - eps) to still consider the point within the triangle",MatchSource.CODE_COMMENT,math/mathcore/src/Delaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx:15,Testability,test,test,15,"// function to test if a point with barycentric coordinates (a,b,c) is inside the triangle; // If the point is outside one or more of the coordinate are negative.; // If the point is on a triangle edge, one of the coordinate (the one not part of the edge) is zero.; // Due to numerical error, it can happen that if the point is at the edge the result is a small negative value.; // Use then a tolerance (of - eps) to still consider the point within the triangle",MatchSource.CODE_COMMENT,math/mathcore/src/Delaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Delaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:3,Testability,test,test,3,"// test if sampler is initialized; // trying to generate one event (for this cannot be const)",MatchSource.CODE_COMMENT,math/mathcore/src/DistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:3,Testability,test,test,3,"// test one event",MatchSource.CODE_COMMENT,math/mathcore/src/DistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:20,Availability,error,error,20,"// store always the error; // use for the moment bin center (should use bin integral)",MatchSource.CODE_COMMENT,math/mathcore/src/DistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx:3,Safety,avoid,avoid,3,"// avoid dx <= 0 and not inf",MatchSource.CODE_COMMENT,math/mathcore/src/DistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/DistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:47,Modifiability,plugin,plugin,47,"// uncomment these if you dont want to use the plugin manager; // but you need to link also the needed minimization libraries (e.g Minuit and/or Minuit2); // #define MATH_NO_PLUGIN_MANAGER; // #define HAS_MINUIT; // #define HAS_MINUIT2",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:12,Modifiability,Plug-in,Plug-in,12,"// use ROOT Plug-in manager",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:12,Modifiability,Plugin,Plugin,12,"// use ROOT Plugin Manager to create Minimizer concrete classes",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:30,Modifiability,plug-in,plug-in,30,"// create Minimizer using the plug-in manager given the type of Minimizer (MINUIT, MINUIT2, FUMILI, etc..) and; // algorithm (MIGRAD, SIMPLEX, etc..)",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:134,Usability,SIMPL,SIMPLEX,134,"// create Minimizer using the plug-in manager given the type of Minimizer (MINUIT, MINUIT2, FUMILI, etc..) and; // algorithm (MIGRAD, SIMPLEX, etc..)",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:10,Modifiability,plug-in,plug-in,10,"// create plug-in with required algorithm",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:68,Integrability,depend,dependency,68,"// static method to create a minimizer .; // not using PM so direct dependency on all libraries (Minuit, Minuit2, MathMore, etc...); // The default is the Minuit2 minimizer or GSL Minimizer; // should use enumerations instead of string ?",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx:45,Modifiability,plug-in,plug-in,45,"// create a DistSampler class using the ROOT plug-in manager",MatchSource.CODE_COMMENT,math/mathcore/src/Factory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Factory.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:45,Availability,error,errors,45,"// ensure that in any case correct parabolic errors are estimated",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:17,Availability,error,error,17,"// do full Minos error analysis for all parameters",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:3,Deployability,update,update,3,"// update after fit",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:20,Testability,test,test,20,"// time saving self-test",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:25,Availability,error,errors,25,"// set information about errors",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:109,Usability,clear,clear,109,"// initialize FitConfig from given parameter values and step sizes; // if npar different than existing one - clear old one and create new ones",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:44,Deployability,configurat,configuration,44,"// create minimizer according to the chosen configuration using the; // plug-in manager; // in case of empty string usesd default values",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:44,Modifiability,config,configuration,44,"// create minimizer according to the chosen configuration using the; // plug-in manager; // in case of empty string usesd default values",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:72,Modifiability,plug-in,plug-in,72,"// create minimizer according to the chosen configuration using the; // plug-in manager; // in case of empty string usesd default values",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:101,Energy Efficiency,adapt,adapted,101,"// set default max of function calls according to the number of parameters; // formula from Minuit2 (adapted)",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx:101,Modifiability,adapt,adapted,101,"// set default max of function calls according to the number of parameters; // formula from Minuit2 (adapted)",MatchSource.CODE_COMMENT,math/mathcore/src/FitConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:85,Availability,error,errors,85,"// create a Fit result from a fit config (i.e. with initial parameter values; // and errors equal to step values; // The model function is NULL in this case; // set minimizer type and algorithm",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:34,Modifiability,config,config,34,"// create a Fit result from a fit config (i.e. with initial parameter values; // and errors equal to step values; // The model function is NULL in this case; // set minimizer type and algorithm",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:28,Availability,error,errors,28,"// get parameter values and errors (step sizes)",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:72,Deployability,configurat,configuration,72,"// case minimizer does not provide minimum values (it failed) take from configuration",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:72,Modifiability,config,configuration,72,"// case minimizer does not provide minimum values (it failed) take from configuration",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:18,Safety,avoid,avoid,18,"// I think we can avoid cloning the model function; //fFitFunc = dynamic_cast<IModelFunction *>( func->Clone() );; //assert(fFitFunc);",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:117,Testability,assert,assert,117,"// I think we can avoid cloning the model function; //fFitFunc = dynamic_cast<IModelFunction *>( func->Clone() );; //assert(fFitFunc);",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:8,Availability,error,error,8,"// fill error matrix; // if minimizer provides error provides also error matrix; // clear in case of re-filling an existing result",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:47,Availability,error,error,47,"// fill error matrix; // if minimizer provides error provides also error matrix; // clear in case of re-filling an existing result",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:67,Availability,error,error,67,"// fill error matrix; // if minimizer provides error provides also error matrix; // clear in case of re-filling an existing result",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:84,Usability,clear,clear,84,"// fill error matrix; // if minimizer provides error provides also error matrix; // clear in case of re-filling an existing result",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:9,Availability,error,errors,9,"// minos errors are set separately when calling Fitter::CalculateMinosErrors(); // globalCC",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:3,Deployability,update,update,3,"// update fit result with new status from minimizer; // ncalls if it is not zero is used instead of value from minimizer",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:3,Deployability,update,update,3,"// update minimum value",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:3,Deployability,update,update,3,"// update number of function calls",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:28,Availability,error,errors,28,"// copy parameter value and errors",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:10,Availability,error,error,10,"// update error matrix",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:3,Deployability,update,update,3,"// update error matrix",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:3,Deployability,update,update,3,"// update global CC",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:13,Availability,error,errors,13,"// normalize errors and covariance matrix according to chi2 value",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:42,Availability,error,error,42,"// query if the parameter i has the Minos error",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:22,Availability,error,error,22,"// return lower Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:69,Availability,error,error,69,"// return lower Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:84,Availability,error,error,84,"// return lower Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:22,Availability,error,error,22,"// return upper Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:69,Availability,error,error,69,"// return upper Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:84,Availability,error,error,84,"// return upper Minos error for parameter i; // return the parabolic error if Minos error has not been calculated for the parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:17,Availability,error,error,17,"// set the Minos error for parameter i",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:67,Availability,error,errors,67,"// print the result in the given stream; // need to add also minos errors , globalCC, etc..",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:46,Availability,error,errors,46,"// use student quantile in case of normalized errors",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:30,Availability,error,errors,30,"// correction to apply to the errors given a CL different than 1 sigma (cl=0.683)",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:48,Availability,error,error,48,"// compute step size as a small fraction of the error; // (see numerical recipes in C 5.7.8) 1.E-5 is ~ (eps)^1/3",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:360,Availability,Error,ErrorDef,360,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// A array for x and y points should be provided; /// Pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:389,Availability,error,error,389,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// A array for x and y points should be provided; /// Pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:424,Availability,error,error,424,"////////////////////////////////////////////////////////////////////////////////; /// Create a 2D contour around the minimum for the parameter ipar and jpar; /// if a minimum does not exist or is invalid it will return false; /// A array for x and y points should be provided; /// Pass optionally the confidence level, default is 0.683; /// it is assumed that ErrorDef() defines the right error definition; /// (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:7,Availability,error,error,7,"// get error level used for fitting",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:63,Availability,error,error,63,"// 2 is number of parameter we do the contour; // set required error definition in minimizer",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx:15,Availability,error,error,15,"// restore the error level used for fitting",MatchSource.CODE_COMMENT,math/mathcore/src/FitResult.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitResult.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:62,Availability,error,error,62,"// use a static variable to get default minimizer options for error def; // to see if user has changed it later on. If it has not been changed we set; // for the likelihood method an error def of 0.5; // t.b.d : multiply likelihood by 2 so have same error def definition as chi2",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:183,Availability,error,error,183,"// use a static variable to get default minimizer options for error def; // to see if user has changed it later on. If it has not been changed we set; // for the likelihood method an error def of 0.5; // t.b.d : multiply likelihood by 2 so have same error def definition as chi2",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:250,Availability,error,error,250,"// use a static variable to get default minimizer options for error def; // to see if user has changed it later on. If it has not been changed we set; // for the likelihood method an error def of 0.5; // t.b.d : multiply likelihood by 2 so have same error def definition as chi2",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:16,Modifiability,variab,variable,16,"// use a static variable to get default minimizer options for error def; // to see if user has changed it later on. If it has not been changed we set; // for the likelihood method an error def of 0.5; // t.b.d : multiply likelihood by 2 so have same error def definition as chi2",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:29,Deployability,configurat,configuration,29,"// this will create also the configuration",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:29,Modifiability,config,configuration,29,"// this will create also the configuration",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:90,Energy Efficiency,adapt,adapter,90,"//std::cout << ""set a 1d function"" << std::endl;; // function is cloned when creating the adapter",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:90,Integrability,adapter,adapter,90,"//std::cout << ""set a 1d function"" << std::endl;; // function is cloned when creating the adapter",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:90,Modifiability,adapt,adapter,90,"//std::cout << ""set a 1d function"" << std::endl;; // function is cloned when creating the adapter",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:40,Energy Efficiency,adapt,adapter,40,"// function is cloned when creating the adapter",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:40,Integrability,adapter,adapter,40,"// function is cloned when creating the adapter",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:40,Modifiability,adapt,adapter,40,"// function is cloned when creating the adapter",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:33,Integrability,interface,interface,33,"// case FCN is built from Minuit interface so function object is created internally in Fitter class; // and needs to be cloned and managed",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform the minimization",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:36,Deployability,configurat,configuration,36,"// create a Fit result from the fit configuration",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:36,Modifiability,config,configuration,36,"// create a Fit result from the fit configuration",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update fit result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform a chi2 fit on a set of binned data",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:67,Modifiability,extend,extended,67,"// perform a likelihood fit on a set of binned data; // The fit is extended (Poisson logl_ by default",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform a likelihood fit on a set of binned data; // The fit is extended (Poisson logl_ by default",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:13,Availability,error,error,13,"// logl fit (error should be 0.5) set if different than default values (of 1)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Testability,log,logl,3,"// logl fit (error should be 0.5) set if different than default values (of 1)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:7,Modifiability,extend,extended,7,"// not-extended is not implemented in this case",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform a likelihood fit on a set of unbinned data",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:13,Availability,error,error,13,"// logl fit (error should be 0.5) set if different than default values (of 1)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Testability,log,logl,3,"// logl fit (error should be 0.5) set if different than default values (of 1)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform a linear fit on a set of binned data",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:21,Availability,error,errors,21,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:41,Deployability,configurat,configuration,41,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:41,Modifiability,config,configuration,41,"// compute the Hesse errors according to configuration; // set in the parameters and append value in fit result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update minimizer (recreate if not done or if name has changed",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update minimizer results with what comes out from Hesse; // in case is empty - create from a FitConfig",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update obj function in case it was an external one",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:16,Availability,error,errors,16,"// set also new errors in FitConfig",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:21,Availability,error,errors,21,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:131,Availability,error,errors,131,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:41,Deployability,configurat,configuration,41,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:41,Modifiability,config,configuration,41,"// compute the Minos errors according to configuration; // set in the parameters and append value in fit result; // normally Minos errors are computed just after the minimization; // (in DoMinimization) aftewr minimizing if the; // FitConfig::MinosErrors() flag is set",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update minimizer (but cannot re-create in this case). Must use an existing one",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:29,Availability,error,error,29,"// set flag to compute Minos error to false in FitConfig to avoid that; // following minimizaiton calls perform unwanted Minos error calculations; /// fConfig.SetMinosErrors(false);",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:127,Availability,error,error,127,"// set flag to compute Minos error to false in FitConfig to avoid that; // following minimizaiton calls perform unwanted Minos error calculations; /// fConfig.SetMinosErrors(false);",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:104,Performance,perform,perform,104,"// set flag to compute Minos error to false in FitConfig to avoid that; // following minimizaiton calls perform unwanted Minos error calculations; /// fConfig.SetMinosErrors(false);",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:60,Safety,avoid,avoid,60,"// set flag to compute Minos error to false in FitConfig to avoid that; // following minimizaiton calls perform unwanted Minos error calculations; /// fConfig.SetMinosErrors(false);",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:6,Safety,avoid,avoid,6,"// to avoid infinite looping",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update obj function in case it was an external one",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:9,Deployability,configurat,configuration,9,"// check configuration and objective function",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:9,Modifiability,config,configuration,9,"// check configuration and objective function",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:45,Availability,down,downcast,45,"// in case of gradient function one needs to downcast the pointer",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:23,Availability,avail,available,23,"// set also Hessian if available",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:26,Availability,error,error,26,"// if requested parabolic error do correct error analysis by the minimizer (call HESSE)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:43,Availability,error,error,43,"// if requested parabolic error do correct error analysis by the minimizer (call HESSE)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:76,Availability,error,errors,76,"// update minimizer options when re-doing a Fit or computing Hesse or Minos errors; // create a new minimizer if it is different type; // minimizer type string stored in FitResult is ""minimizer name"" + "" / "" + minimizer algo",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update minimizer options when re-doing a Fit or computing Hesse or Minos errors; // create a new minimizer if it is different type; // minimizer type string stored in FitResult is ""minimizer name"" + "" / "" + minimizer algo",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform the minimization (assume we have already initialized the minimizer)",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:9,Availability,error,error,9,"// minos error calculation will update also FitResult",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:32,Deployability,update,update,32,"// minos error calculation will update also FitResult",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:37,Availability,error,errors,37,"// set also new parameter values and errors in FitConfig",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform the minimization initializing the minimizer starting from a given obj function",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform the minimization initializing the minimizer starting from a given obj function; // and apply afterwards the correction for weights. This applies only for logL fitting",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:165,Testability,log,logL,165,"// perform the minimization initializing the minimizer starting from a given obj function; // and apply afterwards the correction for weights. This applies only for logL fitting",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update the fit configuration after a fit using the obtained result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:18,Deployability,configurat,configuration,18,"// update the fit configuration after a fit using the obtained result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:18,Modifiability,config,configuration,18,"// update the fit configuration after a fit using the obtained result",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:65,Testability,log,loglikelihood,65,"// apply correction for weight square; // Compute Hessian of the loglikelihood function using the sum of the weight squared; // This method assumes:; // - a fit has been done before and a covariance matrix exists; // - the objective function is a likelihood function and Likelihood::UseSumOfWeightSquare(); // has been called before",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:11,Availability,error,errors,11,"// correct errors for weight squared",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:105,Availability,error,error,105,"//std::cout << ""Running Hesse ..."" << std::endl;; // run eventually before a minimization; // ignore its error",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:20,Testability,log,log-likelihood,20,"// run Hesse on the log-likelihood build using sum of weight squared",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:84,Integrability,depend,dependence,84,"// perform product of matrix cov * hes * cov; // since we do not want to add matrix dependence do product by hand; // first do hes * cov",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Performance,perform,perform,3,"// perform product of matrix cov * hes * cov; // since we do not want to add matrix dependence do product by hand; // first do hes * cov",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:3,Deployability,update,update,3,"// update fit result with new corrected covariance matrix",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx:124,Availability,avail,available,124,"//MATH_INFO_MSG(""Fitter::ExamineFCN"",""Objective function is not of a known type - FitData and ModelFunction objects are not available"");",MatchSource.CODE_COMMENT,math/mathcore/src/Fitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Fitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:7,Safety,safe,safe,7,"// for safe log(x)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,Testability,log,log,12,"// for safe log(x)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:50,Deployability,integrat,integrated,50,"// derivative with respect of the parameter to be integrated",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:50,Integrability,integrat,integrated,50,"// derivative with respect of the parameter to be integrated",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Usability,simpl,simple,3,"// simple gradient calculator using the 2 points rule",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:24,Performance,optimiz,optimized,24,"// this can be probably optimized",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:69,Performance,cache,cached,69,"// internal method to calculate single partial derivative; // assume cached vector fVec is already set",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:16,Performance,cache,cached,16,"// fVec are the cached parameter values",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:16,Performance,cache,cached,16,"// fVec are the cached parameter values",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:16,Performance,cache,cached,16,"// fVec are the cached coordinate values",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Performance,cache,cached,3,"// cached coordinates (or parameter values in case of gradientpar)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:15,Safety,avoid,avoid,15,"// function to avoid infinities or nan",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Safety,avoid,avoid,3,"// avoid infinities or nan in rval",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:63,Deployability,update,updated,63,"// Check if the value is a finite number. The argument rval is updated if it is infinite or NaN,; // setting it to the maximum finite value (preserving the sign).",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:140,Deployability,integrat,integration,140,"// calculation of the integral of the gradient functions; // for a function providing derivative w.r.t parameters; // x1 and x2 defines the integration interval , p the parameters",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:140,Integrability,integrat,integration,140,"// calculation of the integral of the gradient functions; // for a function providing derivative w.r.t parameters; // x1 and x2 defines the integration interval , p the parameters",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:165,Availability,error,error,165,"// evaluate the chi2 given a function reference , the data and returns the value and also in nPoints; // the actual number of used points; // normal chi2 using only error on values (from fitting histogram); // optionally the integral of function in the bin is used",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:37,Performance,cache,cache,37,"// set parameters of the function to cache integral value",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:10,Performance,cache,cache,10,"// do not cache parameter values (it is not thread safe); //func.SetParameters(p);; // get fit option and check case if using integral of bins",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:51,Safety,safe,safe,51,"// do not cache parameter values (it is not thread safe); //func.SetParameters(p);; // get fit option and check case if using integral of bins",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Deployability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Integrability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:49,Safety,safe,safe,49,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:109,Modifiability,variab,variable,109,"// normalize result if requested according to bin volume; // we need to multiply by the bin volume (e.g. for variable bins histograms)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,Availability,error,errors,12,"// expected errors",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:146,Availability,error,error,146,"// in case of requested a weighted Pearson fit (option ""PW"") a weight factor needs to be applied; // the bin inverse weight is estimated from bin error and bin content",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:20,Availability,error,error,20,"// compute expected error as f(x) or f(x) / weight (if weighted fit)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Safety,avoid,avoid,3,"// avoid infinity or nan in chi2 values due to wrong function values",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:159,Availability,error,error,159,"// evaluate the chi2 given a function reference , the data and returns the value and also in nPoints; // the actual number of used points; // method using the error in the coordinates; // integral of bin does not make sense in this case",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:50,Availability,error,error,50,"// before calculating the gradient check that all error in x are not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:11,Energy Efficiency,adapt,adapter,11,"// need an adapter from a multi-dim function to a one-dimensional",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:11,Integrability,adapter,adapter,11,"// need an adapter from a multi-dim function to a one-dimensional",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:11,Modifiability,adapt,adapter,11,"// need an adapter from a multi-dim function to a one-dimensional",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Safety,avoid,avoid,3,"// avoid (infinity and nan ) in the chi2 sum; // eventually add possibility of excluding some points (like singularity)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:161,Availability,error,errors,161,"////////////////////////////////////////////////////////////////////////////////; /// evaluate the chi2 contribution (residual term) only for data with no coord-errors; /// This function is used in the specialized least square algorithms like FUMILI or L.M.; /// if we have error on the coordinates the residual weight depends on the function value and; /// the approximation used by Fumili and Levenberg-Marquardt cannot be used.; /// Also the expected error and bin integral options should not be used in this case",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:274,Availability,error,error,274,"////////////////////////////////////////////////////////////////////////////////; /// evaluate the chi2 contribution (residual term) only for data with no coord-errors; /// This function is used in the specialized least square algorithms like FUMILI or L.M.; /// if we have error on the coordinates the residual weight depends on the function value and; /// the approximation used by Fumili and Levenberg-Marquardt cannot be used.; /// Also the expected error and bin integral options should not be used in this case",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:454,Availability,error,error,454,"////////////////////////////////////////////////////////////////////////////////; /// evaluate the chi2 contribution (residual term) only for data with no coord-errors; /// This function is used in the specialized least square algorithms like FUMILI or L.M.; /// if we have error on the coordinates the residual weight depends on the function value and; /// the approximation used by Fumili and Levenberg-Marquardt cannot be used.; /// Also the expected error and bin integral options should not be used in this case",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:319,Integrability,depend,depends,319,"////////////////////////////////////////////////////////////////////////////////; /// evaluate the chi2 contribution (residual term) only for data with no coord-errors; /// This function is used in the specialized least square algorithms like FUMILI or L.M.; /// if we have error on the coordinates the residual weight depends on the function value and; /// the approximation used by Fumili and Levenberg-Marquardt cannot be used.; /// Also the expected error and bin integral options should not be used in this case",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:11,Testability,assert,assert,11,"// it will assert otherwise later in GetPoint",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,Availability,error,errors,12,"// expected errors",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:20,Availability,error,error,20,"// compute expected error as f(x) / weight",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Safety,avoid,avoid,3,"// avoid infinities or nan in resval",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,Integrability,depend,depending,12,"// add term depending on only gradient of model function",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:223,Availability,error,errors,223,"// evaluate the gradient of the chi2 function; // this function is used when the model function knows how to calculate the derivative and we can; // avoid that the minimizer re-computes them; //; // case of chi2 effective (errors on coordinate) is not supported",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:149,Safety,avoid,avoid,149,"// evaluate the gradient of the chi2 function; // this function is used when the model function knows how to calculate the derivative and we can; // avoid that the minimizer re-computes them; //; // case of chi2 effective (errors on coordinate) is not supported",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:11,Testability,assert,assert,11,"// it will assert otherwise later in GetPoint",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Deployability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Integrability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:49,Safety,safe,safe,49,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Safety,avoid,avoid,3,"// avoid singularity in the function (infinity and nan ) in the chi2 sum; // eventually add possibility of excluding some points (like singularity)",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:14,Energy Efficiency,reduce,reduce,14,"// Vertically reduce the set of vectors by summing its equally-indexed components",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:113,Testability,Log,Log,113,"//______________________________________________________________________________________________________; //; // Log Likelihood functions; //_______________________________________________________________________________________________________; // utility function used by the likelihoods; // for LogLikelihood functions",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:298,Testability,Log,LogLikelihood,298,"//______________________________________________________________________________________________________; //; // Log Likelihood functions; //_______________________________________________________________________________________________________; // utility function used by the likelihoods; // for LogLikelihood functions",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:48,Testability,log,logl,48,"// evaluate the pdf contribution to the generic logl function in case of bin data; // return actually the log of the pdf and its derivatives; //func.SetParameters(p);",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:106,Testability,log,log,106,"// evaluate the pdf contribution to the generic logl function in case of bin data; // return actually the log of the pdf and its derivatives; //func.SetParameters(p);",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:100,Testability,log,log,100,"// estimate gradient numerically with simple 2 point rule; // should probably calculate gradient of log(pdf) is more stable numerically",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:38,Usability,simpl,simple,38,"// estimate gradient numerically with simple 2 point rule; // should probably calculate gradient of log(pdf) is more stable numerically",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:57,Testability,log,logs,57,"// divide gradient by function value since returning the logs",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:16,Testability,Log,LogLikelihood,16,"// evaluate the LogLikelihood",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:37,Performance,cache,cache,37,"// set parameters of the function to cache integral value",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:201,Safety,safe,safe,201,"// in case parameter needs to be propagated to user function use trick to set parameters by calling one time the function; // this will be done in sequential mode and parameters can be set in a thread safe manner",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:56,Modifiability,extend,extended,56,"// needed to compute effective global weight in case of extended likelihood",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:68,Modifiability,extend,extended,68,"// needed sum of weights and sum of weight square if likelkihood is extended",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:15,Modifiability,extend,extended,15,"// add Poisson extended term",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Modifiability,extend,extended,3,"// extended term in likelihood",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:33,Testability,log,log,33,"// no need to add in this case n log(nu) since is already computed before",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:32,Testability,log,log,32,"// evaluate the gradient of the log likelihood function",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:14,Energy Efficiency,reduce,reduce,14,"// Vertically reduce the set of vectors by summing its equally-indexed components",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:115,Testability,log,log,115,"//_________________________________________________________________________________________________; // for binned log likelihood functions; ////////////////////////////////////////////////////////////////////////////////; /// evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf); /// and its gradient (gradient of log(pdf))",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:274,Testability,log,logl,274,"//_________________________________________________________________________________________________; // for binned log likelihood functions; ////////////////////////////////////////////////////////////////////////////////; /// evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf); /// and its gradient (gradient of log(pdf))",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:296,Testability,log,log,296,"//_________________________________________________________________________________________________; // for binned log likelihood functions; ////////////////////////////////////////////////////////////////////////////////; /// evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf); /// and its gradient (gradient of log(pdf))",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:343,Testability,log,log,343,"//_________________________________________________________________________________________________; // for binned log likelihood functions; ////////////////////////////////////////////////////////////////////////////////; /// evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf); /// and its gradient (gradient of log(pdf))",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:44,Integrability,depend,depending,44,"// logPdf for Poisson: ignore constant term depending on N",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Testability,log,logPdf,3,"// logPdf for Poisson: ignore constant term depending on N",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:3,Safety,avoid,avoid,3,"// avoid negative or too small values",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:213,Modifiability,extend,extended,213,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:226,Modifiability,extend,extended,226,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:259,Modifiability,extend,extended,259,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:441,Modifiability,extend,extended,441,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:24,Testability,Log,Log,24,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:103,Testability,log,log,103,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:529,Testability,log,logL,529,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:630,Testability,log,logL,630,"// evaluate the Poisson Log Likelihood; // for binned likelihood fits; // this is Sum ( f(x_i) - y_i * log( f (x_i) ) ); // add as well constant term for saturated model to make it like a Chi2/2; // by default is extended. If extended is false the fit is not extended and; // the global poisson term is removed (i.e is a binomial fit); // (remember that in this case one needs to have a function with a fixed normalization; // like in a non extended unbinned fit); //; // if use Weight use a weighted dataset; // iWeight = 1 ==> logL = Sum( w f(x_i) ); // case of iWeight==1 is actually identical to weight==0; // iWeight = 2 ==> logL = Sum( w*w * f(x_i) ); //; // nPoints returns the points where bin content is not zero",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Deployability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Integrability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:49,Safety,safe,safe,49,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:75,Testability,log,log,75,"// EvalLog protects against 0 values of fval but don't want to add in the -log sum; // negative values of fval",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:12,Testability,log,loglikelihood,12,"// negative loglikelihood",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:49,Availability,error,error,49,"// apply weight correction . Effective weight is error^2/ y; // and expected events in bins is fval/weight; // can apply correction only when y is not zero otherwise weight is undefined; // (in case of weighted likelihood I don't care about the constant term due to; // the saturated model); // use for the empty bins the global weight",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:94,Modifiability,extend,extended,94,"// standard case no weights or iWeight=1; // this is needed for Poisson likelihood (which are extended and not for multinomial); // the formula below include constant term due to likelihood of saturated model (f(x) = y); // (same formula as in Baker-Cousins paper, page 439 except a factor of 2",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:40,Testability,log,log,40,"// evaluate the gradient of the Poisson log likelihood function",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Deployability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:18,Integrability,integrat,integrator,18,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:49,Safety,safe,safe,49,"// do not use GSL integrator which is not thread safe",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx:14,Energy Efficiency,reduce,reduce,14,"// Vertically reduce the set of vectors by summing its equally-indexed components",MatchSource.CODE_COMMENT,math/mathcore/src/FitUtil.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/FitUtil.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx:27,Availability,toler,tolerances,27,"// Default Constructor. If tolerances are not given use default values from ROOT::Math::IntegratorOneDimOptions",MatchSource.CODE_COMMENT,math/mathcore/src/GaussIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx:88,Deployability,Integrat,IntegratorOneDimOptions,88,"// Default Constructor. If tolerances are not given use default values from ROOT::Math::IntegratorOneDimOptions",MatchSource.CODE_COMMENT,math/mathcore/src/GaussIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx:88,Integrability,Integrat,IntegratorOneDimOptions,88,"// Default Constructor. If tolerances are not given use default values from ROOT::Math::IntegratorOneDimOptions",MatchSource.CODE_COMMENT,math/mathcore/src/GaussIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx:7,Deployability,integrat,integration,7,"// Set integration function",MatchSource.CODE_COMMENT,math/mathcore/src/GaussIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx:7,Integrability,integrat,integration,7,"// Set integration function",MatchSource.CODE_COMMENT,math/mathcore/src/GaussIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx:28,Availability,Error,Error,28,"// Set the desired relative Error.",MatchSource.CODE_COMMENT,math/mathcore/src/GaussLegendreIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx:44,Integrability,rout,routine,44,"// Given the number of sampling points this routine fills the; // arrays x and w.",MatchSource.CODE_COMMENT,math/mathcore/src/GaussLegendreIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx:7,Deployability,integrat,integration,7,"// set integration options; // std::cout << ""fEpsilon = "" << fEpsilon << std::endl;; // std::cout << opt.RelTolerance() << "" abs "" << opt.AbsTolerance() << std::endl;; //double tol = opt.RelTolerance(); fEpsilon = tol;",MatchSource.CODE_COMMENT,math/mathcore/src/GaussLegendreIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx:7,Integrability,integrat,integration,7,"// set integration options; // std::cout << ""fEpsilon = "" << fEpsilon << std::endl;; // std::cout << opt.RelTolerance() << "" abs "" << opt.AbsTolerance() << std::endl;; //double tol = opt.RelTolerance(); fEpsilon = tol;",MatchSource.CODE_COMMENT,math/mathcore/src/GaussLegendreIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GaussLegendreIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:3,Integrability,wrap,wrapper,3,"// wrapper around a cdf function to re-scale for the range",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:38,Integrability,wrap,wrapper,38,"// function will be cloned inside the wrapper PDFIntegral of CDFWrapper classes",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:44,Performance,cache,cache,44,"// use approximate formulas for large N; // cache Sum( 1 / i)",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:26,Availability,error,error,26,"// for N larger than 2000 error difference in g is ~ 5 10^-3 while in h is at the level of 10^-5",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:919,Safety,avoid,avoid,919,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:70,Testability,Test,Tests,70,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:351,Testability,test,test,351,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:1021,Testability,test,test,1021,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:1073,Testability,test,test,1073,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:1091,Testability,log,log,1091,"/*; Computation of p-values according to ; ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; and M.A. Stephens (1987), Journal of the American Statistical Association, ; Vol 82, No. 399, pp 918-924.; Code from kSamples package from R (author F. Scholtz). This function uses the upper T_m quantiles as obtained via simulation of; the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; for each sample, and after standardization, in order to emulate the Table 1 ; values given in the above reference. However, here we estimate p-quantiles; for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; First the appropriate p-quantiles are determined from those simulated; for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; Since we use only m=2 we avoid this interpolation. . Next linear inetrpolation to find the observed p value given the observed test statistic value. ; We use interpolation in the test statistic -> log((1-p)/p) domain; and we extrapolatelinearly) beyond p = .00001 and .99999.; */; // sample values ; //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; //int ns = ms.size();",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:2,Testability,assert,assert,2,"//assert ( nbins*ns == ts.size() ); ; // get ts values for nsamples = 2; // corresponding value is for m=nsamples-1",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:3,Testability,log,log,3,"// log ( p / (1-p) )",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:69,Testability,test,test,69,"// do linear interpolation to find right lp value for given observed test staistic value; //auto it = std::lower_bound(ts2.begin(), ts2.end(), tx ); ",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:79,Testability,test,test,79,"// code from kSamples (R) F. Scholz; /* computes the k-sample Anderson-Darling test statistics in both original ; and alternative versions for the nonparametric (rank) test described in; Scholz F.W. and Stephens M.A. (1987), K-sample Anderson-Darling Tests,; Journal of the American Statistical Association, Vol 82, No. 399,; pp. 918-924. Arguments:; adk: double array with length 2, stores AkN2 and AakN2; k: integer, number of samples being compared; x: double array storing the concatenated samples in the same order as ns; ns: integer array storing the k sample sizes, corresponding to x; zstar: double array storing the l distinct ordered observations in the; pooled sample; l: integer, length of zstar. Outputs:; when the computation ends, AkN2 and AakN2 are stored in the given memory; pointed by adk; */; /* counts and returns the number of occurrence of a given number ; in a double array */",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:168,Testability,test,test,168,"// code from kSamples (R) F. Scholz; /* computes the k-sample Anderson-Darling test statistics in both original ; and alternative versions for the nonparametric (rank) test described in; Scholz F.W. and Stephens M.A. (1987), K-sample Anderson-Darling Tests,; Journal of the American Statistical Association, Vol 82, No. 399,; pp. 918-924. Arguments:; adk: double array with length 2, stores AkN2 and AakN2; k: integer, number of samples being compared; x: double array storing the concatenated samples in the same order as ns; ns: integer array storing the k sample sizes, corresponding to x; zstar: double array storing the l distinct ordered observations in the; pooled sample; l: integer, length of zstar. Outputs:; when the computation ends, AkN2 and AakN2 are stored in the given memory; pointed by adk; */; /* counts and returns the number of occurrence of a given number ; in a double array */",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:251,Testability,Test,Tests,251,"// code from kSamples (R) F. Scholz; /* computes the k-sample Anderson-Darling test statistics in both original ; and alternative versions for the nonparametric (rank) test described in; Scholz F.W. and Stephens M.A. (1987), K-sample Anderson-Darling Tests,; Journal of the American Statistical Association, Vol 82, No. 399,; pp. 918-924. Arguments:; adk: double array with length 2, stores AkN2 and AakN2; k: integer, number of samples being compared; x: double array storing the concatenated samples in the same order as ns; ns: integer array storing the k sample sizes, corresponding to x; zstar: double array storing the l distinct ordered observations in the; pooled sample; l: integer, length of zstar. Outputs:; when the computation ends, AkN2 and AakN2 are stored in the given memory; pointed by adk; */; /* counts and returns the number of occurrence of a given number ; in a double array */",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:192,Energy Efficiency,allocate,allocate,192,"/* samples is a two-dimensional double array with length k;; it stores an array of k pointers to double arrays which are; the k samples being compared */; // double **samples;; /* dynamically allocate memory */; //std::vector< std::vector<double> > samples(k);",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:29,Testability,test,test,29,"/* k-sample Anderson-Darling test statistics in both original and; alternative versions, AkN2 and AakN2, are stored in the given; double array adk */",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:24,Testability,Test,Test,24,"// Anderson-Darling A^2 Test Statistic",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:26,Testability,test,test,26,"// compute the normalized test statistic ",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:16,Testability,test,test,16,"// standardized test statistic",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:29,Testability,test,test,29,"/*; Compute Anderson Darling test for two binned data set. ; A binned data set can be seen as many identical observation happening at the center of the bin; In this way it is trivial to apply the formula (6) in the paper of W. Scholz, M. Stephens, ""K-Sample Anderson-Darling Tests""; to the case of histograms. See also http://arxiv.org/pdf/0804.0380v1.pdf paragraph 3.3.5; It is important that empty bins are not present ; */",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:275,Testability,Test,Tests,275,"/*; Compute Anderson Darling test for two binned data set. ; A binned data set can be seen as many identical observation happening at the center of the bin; In this way it is trivial to apply the formula (6) in the paper of W. Scholz, M. Stephens, ""K-Sample Anderson-Darling Tests""; to the case of histograms. See also http://arxiv.org/pdf/0804.0380v1.pdf paragraph 3.3.5; It is important that empty bins are not present ; */",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:32,Testability,test,tests,32,"// now compute the sums for the tests ",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:26,Testability,test,test,26,"// compute the normalized test statistic ",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx:16,Testability,test,test,16,"// standardized test statistic; //std::cout << "" sigmaN "" << sigmaN << "" new A2 "" << A2;",MatchSource.CODE_COMMENT,math/mathcore/src/GoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/GoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:26,Deployability,Integrat,Integrator,26,"// @(#)root/mathmore:$Id: Integrator.cxx 19826 2007-09-19 19:56:11Z rdm $; // Authors: L. Moneta, M. Slawinska 10/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * *; **********************************************************************/",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:26,Integrability,Integrat,Integrator,26,"// @(#)root/mathmore:$Id: Integrator.cxx 19826 2007-09-19 19:56:11Z rdm $; // Authors: L. Moneta, M. Slawinska 10/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * *; **********************************************************************/",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:29,Availability,avail,available,29,"// case no plugin manager is available",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:11,Modifiability,plugin,plugin,11,"// case no plugin manager is available",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:21,Deployability,integrat,integrators,21,"// methods to create integrators",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:21,Integrability,integrat,integrators,21,"// methods to create integrators",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:49,Deployability,integrat,integration,49,"// create the concrete class for one-dimensional integration. Use the plug-in manager if needed",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:49,Integrability,integrat,integration,49,"// create the concrete class for one-dimensional integration. Use the plug-in manager if needed",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:70,Modifiability,plug-in,plug-in,70,"// create the concrete class for one-dimensional integration. Use the plug-in manager if needed",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:26,Deployability,Integrat,IntegratorOneDimOptions,26,"//if (ncall <= 0) ncall = IntegratorOneDimOptions::DefaultNCalls();",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:26,Integrability,Integrat,IntegratorOneDimOptions,26,"//if (ncall <= 0) ncall = IntegratorOneDimOptions::DefaultNCalls();",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:9,Availability,avail,available,9,"// no PM available",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:17,Modifiability,Plugin,Plugin,17,"// case of using Plugin Manager",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:3,Modifiability,plugin,plugin,3,"// plugin manager requires a string",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:46,Deployability,integrat,integration,46,"// create concrete class for multidimensional integration",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:46,Integrability,integrat,integration,46,"// create concrete class for multidimensional integration",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:52,Energy Efficiency,ADAPT,ADAPTIVE,52,"// when Mathmore is not built only possible type is ADAPTIVE. There is no other choice",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:52,Modifiability,ADAPT,ADAPTIVE,52,"// when Mathmore is not built only possible type is ADAPTIVE. There is no other choice",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:25,Energy Efficiency,adapt,adaptive,25,"// no need for PM in the adaptive case using Genz method (class is in MathCore)",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:25,Modifiability,adapt,adaptive,25,"// no need for PM in the adaptive case using Genz method (class is in MathCore)",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:47,Deployability,integrat,integrator,47,"// use now plugin-manager for creating the GSL integrator",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:47,Integrability,integrat,integrator,47,"// use now plugin-manager for creating the GSL integrator",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:11,Modifiability,plugin,plugin-manager,11,"// use now plugin-manager for creating the GSL integrator",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:9,Availability,avail,available,9,"// no PM available",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx:12,Modifiability,Plugin,Plugin-Manager,12,"// use ROOT Plugin-Manager to instantiate GSLMCIntegrator",MatchSource.CODE_COMMENT,math/mathcore/src/Integrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Integrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:34,Availability,toler,tolerance,34,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:96,Availability,toler,tolerance,96,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:115,Deployability,integrat,integration,115,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:47,Energy Efficiency,Adapt,AdaptiveIntegration,47,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:115,Integrability,integrat,integration,115,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:47,Modifiability,Adapt,AdaptiveIntegration,47,"// by default do not use absolute tolerance in AdaptiveIntegration multidim.; // If an absolute tolerance is given integration of shar peaks often failed",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:31,Safety,avoid,avoid,31,"/// constructor (protected) to avoid user creating this class",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:22,Deployability,integrat,integrator,22,"// set the default 1D integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:22,Integrability,integrat,integrator,22,"// set the default 1D integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:11,Deployability,integrat,integrator,11,"// one dim integrator options: implementation for static methods; /// print default options",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:11,Integrability,integrat,integrator,11,"// one dim integrator options: implementation for static methods; /// print default options",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:22,Deployability,integrat,integrator,22,"// set the default 1D integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:22,Integrability,integrat,integrator,22,"// set the default 1D integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Deployability,integrat,integrator,18,"// return default integrator name",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Integrability,integrat,integrator,18,"// return default integrator name",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Deployability,integrat,integrator,18,"// return default integrator type (enum)",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Integrability,integrat,integrator,18,"// return default integrator type (enum)",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Availability,toler,tolerance,19,"// set the default tolerance",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Availability,toler,tolerance,19,"// set the default tolerance",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:44,Deployability,integrat,integration,44,"// set the default number of points for the integration rule",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:44,Integrability,integrat,integration,44,"// set the default number of points for the integration rule",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:68,Deployability,integrat,integration,68,"//////////////////////////////////////////////////////; //Multi-dim integration options implementation; /////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:68,Integrability,integrat,integration,68,"//////////////////////////////////////////////////////; //Multi-dim integration options implementation; /////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Deployability,integrat,integrator,19,"// set the default integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Integrability,integrat,integrator,19,"// set the default integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:13,Deployability,integrat,integrator,13,"// multi dim integrator options: implementation for static methods; /// print default options",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:13,Integrability,integrat,integrator,13,"// multi dim integrator options: implementation for static methods; /// print default options",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Deployability,integrat,integrator,19,"// set the default integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Integrability,integrat,integrator,19,"// set the default integrator",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Deployability,integrat,integrator,18,"// return default integrator name",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Integrability,integrat,integrator,18,"// return default integrator name",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Deployability,integrat,integrator,18,"// return default integrator type (enum)",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:18,Integrability,integrat,integrator,18,"// return default integrator type (enum)",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Availability,toler,tolerance,19,"// set the default tolerance",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx:19,Availability,toler,tolerance,19,"// set the default tolerance",MatchSource.CODE_COMMENT,math/mathcore/src/IntegratorOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/IntegratorOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MersenneTwisterEngine.cxx:5,Energy Efficiency,Power,Power,5,"// * Power(2,-32)",MatchSource.CODE_COMMENT,math/mathcore/src/MersenneTwisterEngine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MersenneTwisterEngine.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:34,Modifiability,variab,variable,34,"/// set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited; /// variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:125,Modifiability,variab,variable,125,"/// set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited; /// variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:20,Modifiability,variab,variable,20,"/// set a new fixed variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:41,Modifiability,variab,variable,41,"/// set the value of an already existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:45,Modifiability,variab,variable,45,"/// set the step size of an already existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:47,Modifiability,variab,variable,47,"/// set the lower-limit of an already existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:47,Modifiability,variab,variable,47,"/// set the upper-limit of an already existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:20,Modifiability,variab,variable,20,"/// fix an existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:4,Deployability,release,release,4,"/// release an existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:24,Modifiability,variab,variable,24,"/// release an existing variable",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:25,Modifiability,variab,variable,25,"/// query if an existing variable is fixed (i.e. considered constant in the minimization); /// note that by default all variables are not fixed",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:120,Modifiability,variab,variables,120,"/// query if an existing variable is fixed (i.e. considered constant in the minimization); /// note that by default all variables are not fixed",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:8,Modifiability,variab,variable,8,"/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings)",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:31,Modifiability,variab,variable,31,"/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings)",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:181,Availability,error,errors,181,"/** return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:43,Modifiability,variab,variables,43,"/** return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:71,Modifiability,variab,variable,71,"/** return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:135,Modifiability,variab,variables,135,"/** return covariance matrices element for variables ivar,jvar; if the variable is fixed the return value is zero; The ordering of the variables is the same as in the parameter and errors vectors; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:212,Availability,error,errors,212,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:275,Integrability,interface,interface,275,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:71,Modifiability,variab,variable,71,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:184,Modifiability,variab,variables,184,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:347,Modifiability,variab,variable,347,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:173,Modifiability,variab,variable,173,/**; Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:220,Modifiability,variab,variables,220,/**; Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:47,Modifiability,variab,variable,47,/**; return global correlation coefficient for variable i; This is a number between zero and one which gives; the correlation between the i-th parameter and that linear combination of all; other parameters which is most strongly correlated with i.; Minimizer must overload method if implemented; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:11,Availability,error,error,11,"/**; minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:104,Availability,error,errors,104,"/**; minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:224,Availability,error,error,224,"/**; minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:21,Modifiability,variab,variable,21,"/**; minos error for variable i, return false if Minos failed or not supported; and the lower and upper errors are returned in errLow and errUp; An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:58,Availability,error,error,58,/**; perform a full calculation of the Hessian matrix for error calculation; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:5,Performance,perform,perform,5,/**; perform a full calculation of the Hessian matrix for error calculation; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:115,Availability,error,error,115,/**; scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:31,Modifiability,variab,variable,31,/**; scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:43,Modifiability,Variab,Variable,43,/**; scan function minimum for variable i. Variable and function must be set before using Scan; Return false if an error or if minimizer does not support this functionality; */,MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:161,Availability,Error,ErrorUp,161,"/**; find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();; */",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:16,Modifiability,variab,variables,16,"/// get name of variables (override if minimizer support storing of variable names); /// return an empty string if variable is not found",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:68,Modifiability,variab,variable,68,"/// get name of variables (override if minimizer support storing of variable names); /// return an empty string if variable is not found",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:115,Modifiability,variab,variable,115,"/// get name of variables (override if minimizer support storing of variable names); /// return an empty string if variable is not found",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:17,Modifiability,variab,variable,17,"/// get index of variable given a variable given a name; /// return -1 if variable is not found",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:34,Modifiability,variab,variable,34,"/// get index of variable given a variable given a name; /// return -1 if variable is not found",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx:74,Modifiability,variab,variable,74,"/// get index of variable given a variable given a name; /// return -1 if variable is not found",MatchSource.CODE_COMMENT,math/mathcore/src/Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx:22,Modifiability,plug-in,plug-in,22,"// case of using ROOT plug-in manager",MatchSource.CODE_COMMENT,math/mathcore/src/MinimizerOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx:19,Availability,error,error,19,"// set the default error definition",MatchSource.CODE_COMMENT,math/mathcore/src/MinimizerOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx:19,Availability,toler,tolerance,19,"// set the default tolerance",MatchSource.CODE_COMMENT,math/mathcore/src/MinimizerOptions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimizerOptions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:104,Modifiability,variab,variable,104,"// constructor of the class from a pointer to the function (which is managed); // vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); // variable values (used for the fixed ones) and a map with the bounds (for the bounded variables)",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:186,Modifiability,variab,variable,186,"// constructor of the class from a pointer to the function (which is managed); // vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); // variable values (used for the fixed ones) and a map with the bounds (for the bounded variables)",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:271,Modifiability,variab,variables,271,"// constructor of the class from a pointer to the function (which is managed); // vector specifying the variable types (free, bounded or fixed, defined in enum EMinimVariableTypes ); // variable values (used for the fixed ones) and a map with the bounds (for the bounded variables)",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:9,Modifiability,variab,variables,9,"// bound variables",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:13,Modifiability,variab,variables,13,"// loop on j variables for not fixed i variables (forget that matrix is symmetric) - could be optimized",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:39,Modifiability,variab,variables,39,"// loop on j variables for not fixed i variables (forget that matrix is symmetric) - could be optimized",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx:94,Performance,optimiz,optimized,94,"// loop on j variables for not fixed i variables (forget that matrix is symmetric) - could be optimized",MatchSource.CODE_COMMENT,math/mathcore/src/MinimTransformFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/MinimTransformFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:106,Deployability,release,released,106,"/*; * mixmax.c; * A Pseudo-Random Number Generator; *; * Created by Konstantin Savvidy.; *; * The code is released under GNU Lesser General Public License v3; *; *	G.K.Savvidy and N.G.Ter-Arutyunian,; * On the Monte Carlo simulation of physical systems,; *	J.Comput.Phys. 97, 566 (1991);; * Preprint EPI-865-16-86, Yerevan, Jan. 1986; *; * K.Savvidy; * The MIXMAX random number generator; * Computer Physics Communications 196 (2015), pp 161–165; * http://dx.doi.org/10.1016/j.cpc.2015.06.003; *; */",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:3,Energy Efficiency,allocate,allocate,3,/* allocate the state */,MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:72,Energy Efficiency,allocate,allocated,72,"/* init from vector, takes the vector Y, ; returns pointer to the newly allocated and initialized state */",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:52,Testability,test,testing,52,"// seeds with the i-th unit vector, i = 0..N-1, for testing only; // FUNCTIONS FOR GETTING RANDOM NUMBERS",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:106,Availability,error,error,106,"//const double INV_MERSBASE=(0.4336808689942017736029811203479766845703E-18); // gives ""duplicate symbol"" error; // the charpoly is irreducible for the combinations of N and SPECIAL",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:119,Availability,error,error,119,"// c++ can put code into header files, why cant we? (with the inline declaration, should be safe from duplicate-symbol error)",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:92,Safety,safe,safe,92,"// c++ can put code into header files, why cant we? (with the inline declaration, should be safe from duplicate-symbol error)",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h:3,Availability,ERROR,ERROR,3,"// ERROR CODES - exit() is called with these",MatchSource.CODE_COMMENT,math/mathcore/src/mixmax.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/mixmax.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:325,Energy Efficiency,power,power-law,325,"// compute the integral of the crystal ball function (ROOT::Math::crystalball_function); // If alpha > 0 the integral is the right tail integral.; // If alpha < 0 is the left tail integrals which are always finite for finite x. ; // parameters:; // alpha : is non equal to zero, define the # of sigma from which it becomes a power-law function (from mean-alpha*sigma); // n > 1 : is integrer, is the power of the low tail; // add a value xmin for cases when n <=1 the integral diverges ",MatchSource.CODE_COMMENT,math/mathcore/src/ProbFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:400,Energy Efficiency,power,power,400,"// compute the integral of the crystal ball function (ROOT::Math::crystalball_function); // If alpha > 0 the integral is the right tail integral.; // If alpha < 0 is the left tail integrals which are always finite for finite x. ; // parameters:; // alpha : is non equal to zero, define the # of sigma from which it becomes a power-law function (from mean-alpha*sigma); // n > 1 : is integrer, is the power of the low tail; // add a value xmin for cases when n <=1 the integral diverges ",MatchSource.CODE_COMMENT,math/mathcore/src/ProbFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:35,Testability,log,log,35,"// for n=1 the primitive of 1/x is log(x)",MatchSource.CODE_COMMENT,math/mathcore/src/ProbFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:31,Availability,error,errors,31,"// use expm1 function to avoid errors at small x",MatchSource.CODE_COMMENT,math/mathcore/src/ProbFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx:25,Safety,avoid,avoid,25,"// use expm1 function to avoid errors at small x",MatchSource.CODE_COMMENT,math/mathcore/src/ProbFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ProbFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:23,Usability,simpl,simply,23,"// inverse of Caucy is simply the tan(PI(z-0.5))",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:23,Usability,simpl,simply,23,"// inverse of Caucy is simply the tan(PI(z-0.5))",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:23,Availability,error,errors,23,"// use log1p for avoid errors at small z",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:17,Safety,avoid,avoid,17,"// use log1p for avoid errors at small z",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:11,Testability,log,log,11,"// if y is log normal, u = exp(y) is log-normal distributed",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:37,Testability,log,log-normal,37,"// if y is log normal, u = exp(y) is log-normal distributed",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:11,Testability,log,log,11,"// if y is log normal, u = exp(y) is log-normal distributed",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:37,Testability,log,log-normal,37,"// if y is log normal, u = exp(y) is log-normal distributed",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:160,Energy Efficiency,adapt,adapted,160,"// LANDAU quantile : algorithm from CERNLIB G110 ranlan; // with scale parameter xi; // Converted by Rene Brun from CERNLIB routine ranlan(G110),; // Moved and adapted to QuantFuncMathCore by B. List 29.4.2010",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:124,Integrability,rout,routine,124,"// LANDAU quantile : algorithm from CERNLIB G110 ranlan; // with scale parameter xi; // Converted by Rene Brun from CERNLIB routine ranlan(G110),; // Moved and adapted to QuantFuncMathCore by B. List 29.4.2010",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx:160,Modifiability,adapt,adapted,160,"// LANDAU quantile : algorithm from CERNLIB G110 ranlan; // with scale parameter xi; // Converted by Rene Brun from CERNLIB routine ranlan(G110),; // Moved and adapted to QuantFuncMathCore by B. List 29.4.2010",MatchSource.CODE_COMMENT,math/mathcore/src/QuantFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/QuantFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx:197,Testability,log,log,197,"// double GausImpl(TRandomEngine * r, double mean, double sigma) {; // double y = r->Rndm();; // double z = r->Rndm();; // double x = z * 6.28318530717958623;; // double radius = std::sqrt(-2*std::log(y));; // double g = radius * std::sin(x);; // return mean + g * sigma; ; // }",MatchSource.CODE_COMMENT,math/mathcore/src/RandomFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx:525,Integrability,rout,routine,525,"////////////////////////////////////////////////////////////////////////////////; /// Generates a random integer N according to a Poisson law.; /// Prob(N) = exp(-mean)*mean^N/Factorial(N); ///; /// Use a different procedure according to the mean value.; /// The algorithm is the same used by CLHEP.; /// For lower value (mean < 25) use the rejection method based on; /// the exponential.; /// For higher values use a rejection method comparing with a Lorentzian; /// distribution, as suggested by several authors.; /// This routine since is returning 32 bits integer will not work for values; /// larger than 2*10**9.; /// One should then use the Trandom::PoissonD for such large values.",MatchSource.CODE_COMMENT,math/mathcore/src/RandomFunctions.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RandomFunctions.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:946,Availability,avail,available,946,"// @(#)root/mathcore:$Id$; // Author: Jonas Hahnfeld 11/2020; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class ROOT::Math::RanluxppEngine; Implementation of the RANLUX++ generator. RANLUX++ is an LCG equivalent of RANLUX using 576 bit numbers. The idea of the generator (such as the initialization method) and the algorithm; for the modulo operation are described in; A. Sibidanov, *A revision of the subtract-with-borrow random numbergenerators*,; *Computer Physics Communications*, 221(2017), 299-303,; preprint https://arxiv.org/pdf/1705.03123.pdf. The code is loosely based on the Assembly implementation by A. Sibidanov; available at https://github.com/sibidanov/ranluxpp/. Compared to the original generator, this implementation contains a fix to ensure; that the modulo operation of the LCG always returns the smallest value congruent; to the modulus (based on notes by M. Lüscher). Also, the generator converts the; LCG state back to RANLUX numbers (implementation based on notes by M. Lüscher).; This avoids a bias in the generated numbers because the upper bits of the LCG; state, that is smaller than the modulus \f$ m = 2^{576} - 2^{240} + 1 \f$ (not; a power of 2!), have a higher probability of being 0 than 1. And finally, this; implementation draws 48 random bits for each generated floating point number; (instead of 52 bits as in the original generator) to maintain the theoretical; properties from understanding the original transition function of RANLUX as a; chaotic dynamical system.; */",MatchSource.CODE_COMMENT,math/mathcore/src/RanluxppEngineImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:1486,Energy Efficiency,power,power,1486,"// @(#)root/mathcore:$Id$; // Author: Jonas Hahnfeld 11/2020; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class ROOT::Math::RanluxppEngine; Implementation of the RANLUX++ generator. RANLUX++ is an LCG equivalent of RANLUX using 576 bit numbers. The idea of the generator (such as the initialization method) and the algorithm; for the modulo operation are described in; A. Sibidanov, *A revision of the subtract-with-borrow random numbergenerators*,; *Computer Physics Communications*, 221(2017), 299-303,; preprint https://arxiv.org/pdf/1705.03123.pdf. The code is loosely based on the Assembly implementation by A. Sibidanov; available at https://github.com/sibidanov/ranluxpp/. Compared to the original generator, this implementation contains a fix to ensure; that the modulo operation of the LCG always returns the smallest value congruent; to the modulus (based on notes by M. Lüscher). Also, the generator converts the; LCG state back to RANLUX numbers (implementation based on notes by M. Lüscher).; This avoids a bias in the generated numbers because the upper bits of the LCG; state, that is smaller than the modulus \f$ m = 2^{576} - 2^{240} + 1 \f$ (not; a power of 2!), have a higher probability of being 0 than 1. And finally, this; implementation draws 48 random bits for each generated floating point number; (instead of 52 bits as in the original generator) to maintain the theoretical; properties from understanding the original transition function of RANLUX as a; chaotic dynamical system.; */",MatchSource.CODE_COMMENT,math/mathcore/src/RanluxppEngineImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:1330,Safety,avoid,avoids,1330,"// @(#)root/mathcore:$Id$; // Author: Jonas Hahnfeld 11/2020; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class ROOT::Math::RanluxppEngine; Implementation of the RANLUX++ generator. RANLUX++ is an LCG equivalent of RANLUX using 576 bit numbers. The idea of the generator (such as the initialization method) and the algorithm; for the modulo operation are described in; A. Sibidanov, *A revision of the subtract-with-borrow random numbergenerators*,; *Computer Physics Communications*, 221(2017), 299-303,; preprint https://arxiv.org/pdf/1705.03123.pdf. The code is loosely based on the Assembly implementation by A. Sibidanov; available at https://github.com/sibidanov/ranluxpp/. Compared to the original generator, this implementation contains a fix to ensure; that the modulo operation of the LCG always returns the smallest value congruent; to the modulus (based on notes by M. Lüscher). Also, the generator converts the; LCG state back to RANLUX numbers (implementation based on notes by M. Lüscher).; This avoids a bias in the generated numbers because the upper bits of the LCG; state, that is smaller than the modulus \f$ m = 2^{576} - 2^{240} + 1 \f$ (not; a power of 2!), have a higher probability of being 0 than 1. And finally, this; implementation draws 48 random bits for each generated floating point number; (instead of 52 bits as in the original generator) to maintain the theoretical; properties from understanding the original transition function of RANLUX as a; chaotic dynamical system.; */",MatchSource.CODE_COMMENT,math/mathcore/src/RanluxppEngineImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:3,Modifiability,Variab,Variable,3,"// Variable templates are a feature of C++14, use the older technique of having; // a static member in a template class.; // The coefficients have been determined using Python, and in parts compared to the values given by Sibidanov.; //; // >>> def print_hex(a):; // ... while a > 0:; // ... print('{0:#018x}'.format(a & 0xffffffffffffffff)); // ... a >>= 64; // ...; // >>> m = 2 ** 576 - 2 ** 240 + 1; // >>> a = m - (m - 1) // 2 ** 24; // >>> kA = pow(a, <w>, m); // >>> print_hex(kA)",MatchSource.CODE_COMMENT,math/mathcore/src/RanluxppEngineImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:16,Security,access,access,16,"// Needs direct access to private members to initialize its four states.",MatchSource.CODE_COMMENT,math/mathcore/src/RanluxppEngineImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx:51,Availability,avail,available,51,"// Just skip the next few entries in the currently available bits.",MatchSource.CODE_COMMENT,math/mathcore/src/RanluxppEngineImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RanluxppEngineImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:59,Integrability,depend,depending,59,"// copy constructor; // copy constructor (deep copy or not depending on fFunctionCopied)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:18,Availability,error,error,18,"// // compute the error ( to be improved ) this is just a simple truncation error; // fLastError = kC1*h2*0.5*(f1+f2); //compute the error; // compute the error ( from GSL deriv implementation)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:76,Availability,error,error,76,"// // compute the error ( to be improved ) this is just a simple truncation error; // fLastError = kC1*h2*0.5*(f1+f2); //compute the error; // compute the error ( from GSL deriv implementation)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:133,Availability,error,error,133,"// // compute the error ( to be improved ) this is just a simple truncation error; // fLastError = kC1*h2*0.5*(f1+f2); //compute the error; // compute the error ( from GSL deriv implementation)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:155,Availability,error,error,155,"// // compute the error ( to be improved ) this is just a simple truncation error; // fLastError = kC1*h2*0.5*(f1+f2); //compute the error; // compute the error ( from GSL deriv implementation)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:58,Usability,simpl,simple,58,"// // compute the error ( to be improved ) this is just a simple truncation error; // fLastError = kC1*h2*0.5*(f1+f2); //compute the error; // compute the error ( from GSL deriv implementation)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:27,Availability,error,error,27,"// estimate the truncation error from d2-d0 which is O(h^2)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:12,Availability,error,error,12,"// rounding error due to cancellation",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:25,Availability,error,error,25,"// Estimate the rounding error for r4",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:18,Availability,error,error,18,"// The truncation error in the r4 approximation itself is O(h^3).; // However, for safety, we estimate the error from r4-r2, which is; // O(h). By scaling h we will minimise this estimated error, not; // the actual truncation error in r4.",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:107,Availability,error,error,107,"// The truncation error in the r4 approximation itself is O(h^3).; // However, for safety, we estimate the error from r4-r2, which is; // O(h). By scaling h we will minimise this estimated error, not; // the actual truncation error in r4.",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:189,Availability,error,error,189,"// The truncation error in the r4 approximation itself is O(h^3).; // However, for safety, we estimate the error from r4-r2, which is; // O(h). By scaling h we will minimise this estimated error, not; // the actual truncation error in r4.",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:226,Availability,error,error,226,"// The truncation error in the r4 approximation itself is O(h^3).; // However, for safety, we estimate the error from r4-r2, which is; // O(h). By scaling h we will minimise this estimated error, not; // the actual truncation error in r4.",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:83,Safety,safe,safety,83,"// The truncation error in the r4 approximation itself is O(h^3).; // However, for safety, we estimate the error from r4-r2, which is; // O(h). By scaling h we will minimise this estimated error, not; // the actual truncation error in r4.",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:24,Availability,error,error,24,"// Estimated truncation error O(h)",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:14,Availability,error,error,14,"//compute the error",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx:14,Availability,error,error,14,"//compute the error",MatchSource.CODE_COMMENT,math/mathcore/src/RichardsonDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RichardsonDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx:29,Availability,avail,available,29,"// case no plugin manager is available",MatchSource.CODE_COMMENT,math/mathcore/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx:11,Modifiability,plugin,plugin,11,"// case no plugin manager is available",MatchSource.CODE_COMMENT,math/mathcore/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx:24,Modifiability,plug-in,plug-in,24,"// set method - Use the plug-in manager if method is implemented in MathMore",MatchSource.CODE_COMMENT,math/mathcore/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx:9,Availability,avail,available,9,"// no PM available",MatchSource.CODE_COMMENT,math/mathcore/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx:17,Modifiability,Plugin,Plugin,17,"// case of using Plugin Manager",MatchSource.CODE_COMMENT,math/mathcore/src/RootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/RootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:95,Safety,avoid,avoid,95,"//This class is a helper. It represents a bin in N; //dimensions. The change in the name is to avoid name collision.",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:80,Availability,error,error,80,"// Creates a Box with limits specified by the vectors and; // content=value and error=error",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:86,Availability,error,error,86,"// Creates a Box with limits specified by the vectors and; // content=value and error=error",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:61,Modifiability,variab,variables,61,"// Compares to Boxes to see if they are equal in all its; // variables. This is to be used by the std::find algorithm",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:11,Availability,error,error,11,"// Get the error of the Box",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:66,Usability,simpl,simplify,66,"// This class is just a helper to be used in std::for_each to; // simplify the code later. It's just a definition of a method; // that will discern whether a Box is included into another one",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:55,Usability,simpl,simplify,55,"// Another helper class to be used in std::for_each to simplify; // the code later. It implements the operator() to know if a; // specified Box is big enough to contain any 'space' inside.",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx:128,Deployability,update,updated,128,"// Add a box to the stored ones. For that, it will look for; // the box that contains the new data and either replace it; // or updated it.; // Little box is the new Bin to be added",MatchSource.CODE_COMMENT,math/mathcore/src/SparseData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SparseData.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:3,Testability,log,log,3,/* log( sqrt( 2*pi ) ) */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:278,Energy Efficiency,power,power,278,"// incomplete gamma function (complement integral); // igamc(a,x) = 1 - igam(a,x); //; // inf.; // -; // 1 | | -t a-1; // = ----- | e t dt.; // - | |; // | (a) -; // x; //; //; // In this implementation both arguments must be positive.; // The integral is evaluated by either a power series or; // continued fraction expansion, depending on the relative; // values of a and x.",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:328,Integrability,depend,depending,328,"// incomplete gamma function (complement integral); // igamc(a,x) = 1 - igam(a,x); //; // inf.; // -; // 1 | | -t a-1; // = ----- | e t dt.; // - | |; // | (a) -; // x; //; //; // In this implementation both arguments must be positive.; // The integral is evaluated by either a power series or; // continued fraction expansion, depending on the relative; // values of a and x.",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:3,Energy Efficiency,power,power,3,/* power series */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:84,Testability,Log,Logarithm,84,"/*---------------------------------------------------------------------------*/; /* Logarithm of gamma function */; /* A[]: Stirling's formula expansion of log gamma; * B[], C[]: log gamma function between 2 and 3; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:156,Testability,log,log,156,"/*---------------------------------------------------------------------------*/; /* Logarithm of gamma function */; /* A[]: Stirling's formula expansion of log gamma; * B[], C[]: log gamma function between 2 and 3; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:179,Testability,log,log,179,"/*---------------------------------------------------------------------------*/; /* Logarithm of gamma function */; /* A[]: Stirling's formula expansion of log gamma; * B[], C[]: log gamma function between 2 and 3; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:7,Testability,log,log,7,/* z = log(ROOT::Math::Pi()) - log( z ) - w;*/,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:31,Testability,log,log,31,/* z = log(ROOT::Math::Pi()) - log( z ) - w;*/,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:28,Testability,log,log,28,/* #define kMAXSTIR kMAXLOG/log(kMAXLOG) */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:3,Safety,Avoid,Avoid,3,/* Avoid overflow in pow() */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:228,Testability,log,log,228,/*---------------------------------------------------------------------------*/; //#define kMAXLGM 2.556348e305; /*---------------------------------------------------------------------------*/; /* implementation based on cephes log gamma */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:857,Availability,error,error,857,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:1194,Availability,ERROR,ERROR,1194,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:1327,Deployability,Release,Release,1327,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:704,Energy Efficiency,power,power,704,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:1200,Integrability,MESSAGE,MESSAGES,1200,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:1213,Integrability,message,message,1213,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:740,Testability,Test,Tested,740,"/*---------------------------------------------------------------------------*/; /* implementation of the incomplete beta function */; /**; * DESCRIPTION:; *; * Returns incomplete beta integral of the arguments, evaluated; * from zero to x. The function is defined as; *; * x; * - -; * | (a+b) | | a-1 b-1; * ----------- | t (1-t) dt.; * - - | |; * | (a) | (b) -; * 0; *; * The domain of definition is 0 <= x <= 1. In this; * implementation a and b are restricted to positive values.; * The integral from x to 1 may be obtained by the symmetry; * relation; *; * 1 - incbet( a, b, x ) = incbet( b, a, 1-x ).; *; * The integral is evaluated by a continued fraction expansion; * or, when b*x is small, by a power series.; *; * ACCURACY:; *; * Tested at uniformly distributed random points (a,b,x) with a and b; * in ""domain"" and x between 0 and 1.; * Relative error; * arithmetic domain # trials peak rms; * IEEE 0,5 10000 6.9e-15 4.5e-16; * IEEE 0,85 250000 2.2e-13 1.7e-14; * IEEE 0,1000 30000 5.3e-12 6.3e-13; * IEEE 0,10000 250000 9.3e-11 7.1e-12; * IEEE 0,100000 10000 8.7e-10 4.8e-11; * Outputs smaller than the IEEE gradual underflow threshold; * were excluded from these statistics.; *; * ERROR MESSAGES:; * message condition value returned; * incbet domain x<0, x>1 0.0; * incbet underflow 0.0; *; * Cephes Math Library, Release 2.8: June, 2000; * Copyright 1984, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:8,Testability,test,test,8,"/* - to test if that way is better for large b/ (comment out from Cephes version); if( (bb * xx) <= 1.0 && xx <= 0.95); {; t = pseries(aa, bb, xx);; goto done;; }. **/",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:13,Testability,log,logarithms,13,/* Resort to logarithms. */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:84,Energy Efficiency,Power,Power,84,/*---------------------------------------------------------------------------*/; /* Power series for incomplete beta integral.; Use when b*x is small and x not too close to 1. */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:183,Availability,error,error,183,/*---------------------------------------------------------------------------*/; /*---------------------------------------------------------------------------*/; /* for evaluation of error function */; /*---------------------------------------------------------------------------*/,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:98,Availability,error,error,98,"/*---------------------------------------------------------------------------*/; /* complementary error function */; /* For small x, erfc(x) = 1 - erf(x); otherwise rational */; /* approximations are computed. */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:84,Availability,error,error,84,"/*---------------------------------------------------------------------------*/; /* error function */; /* For 0 <= |x| < 1, erf(x) = x * P4(x**2)/Q5(x**2); otherwise */; /* erf(x) = 1 - erfc(x). */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx:190,Integrability,Rout,Routines,190,// end namespace Cephes; /*---------------------------------------------------------------------------*/; /*---------------------------------------------------------------------------*/; /* Routines used within this implementation */; /*; * calculates a value of a polynomial of the form:; * a[0]x^N+a[1]x^(N-1) + ... + a[N]; */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:31,Availability,error,error,31,//---; /* the machine roundoff error */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:92,Modifiability,portab,portable,92,"/* the maximal number that pow(x,x-0.5) has no overflow */; /* we use a (very) conservative portable bound */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:3,Testability,Log,Logarithm,3,/* Logarithm of gamma function */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:3,Energy Efficiency,Power,Power,3,/* Power series for incomplete beta integral.; Use when b*x is small and x not too close to 1. */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:3,Availability,error,error,3,/* error function */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:17,Availability,error,error,17,/* complementary error function */,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:41,Energy Efficiency,efficient,efficient,41,// end namespace Cephes; /* routines for efficient polynomial evaluation*/,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h:28,Integrability,rout,routines,28,// end namespace Cephes; /* routines for efficient polynomial evaluation*/,MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:692,Availability,error,error,692,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:908,Availability,ERROR,ERROR,908,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:248,Deployability,integrat,integrated,248,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:1056,Deployability,Release,Release,1056,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:248,Integrability,integrat,integrated,248,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:914,Integrability,MESSAGE,MESSAGES,914,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:930,Integrability,message,message,930,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:390,Testability,log,log,390,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:437,Testability,log,log,437,"/*; *; * Inverse of Normal distribution function; *; *; *; * SYNOPSIS:; *; * double x, y, ndtri();; *; * x = ndtri( y );; *; *; *; * DESCRIPTION:; *; * Returns the argument, x, for which the area under the; * Gaussian probability density function (integrated from; * minus infinity to x) is equal to y.; *; *; * For small arguments 0 < y < exp(-2), the program computes; * z = sqrt( -2.0 * log(y) ); then the approximation is; * x = z - log(z)/z - (1/z) P(1/z) / Q(1/z).; * There are two rational functions P/Q, one for 0 < y < exp(-32); * and the other for y up to exp(-2). For larger arguments,; * w = y - 0.5, and x/sqrt(2pi) = w + w**3 R(w**2)/S(w**2)).; *; *; * ACCURACY:; *; * Relative error:; * arithmetic domain # trials peak rms; * DEC 0.125, 1 5500 9.5e-17 2.1e-17; * DEC 6e-39, 0.135 3500 5.7e-17 1.3e-17; * IEEE 0.125, 1 20000 7.2e-16 1.3e-16; * IEEE 3e-308, 0.135 50000 4.6e-16 9.8e-17; *; *; * ERROR MESSAGES:; *; * message condition value returned; * ndtri domain x <= 0 -MAXNUM; * ndtri domain x >= 1 MAXNUM; *; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1989, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:549,Availability,error,error,549,"/*; *; * Inverse of complemented incomplete gamma integral; *; *; *; * SYNOPSIS:; *; * double a, x, p, igami();; *; * x = igami( a, p );; *; * DESCRIPTION:; *; * Given p, the function finds x such that; *; * igamc( a, x ) = p.; *; * Starting with the approximate value; *; * 3; * x = a t; *; * where; *; * t = 1 - d - ndtri(p) sqrt(d); *; * and; *; * d = 1/9a,; *; * the routine performs up to 10 Newton iterations to find the; * root of igamc(a,x) - p = 0.; *; * ACCURACY:; *; * Tested at random a, p in the intervals indicated.; *; * a p Relative error:; * arithmetic domain domain # trials peak rms; * IEEE 0.5,100 0,0.5 100000 1.0e-14 1.7e-15; * IEEE 0.01,0.5 0,0.5 100000 9.0e-14 3.4e-15; * IEEE 0.5,10000 0,0.5 20000 2.3e-13 3.8e-14; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:768,Deployability,Release,Release,768,"/*; *; * Inverse of complemented incomplete gamma integral; *; *; *; * SYNOPSIS:; *; * double a, x, p, igami();; *; * x = igami( a, p );; *; * DESCRIPTION:; *; * Given p, the function finds x such that; *; * igamc( a, x ) = p.; *; * Starting with the approximate value; *; * 3; * x = a t; *; * where; *; * t = 1 - d - ndtri(p) sqrt(d); *; * and; *; * d = 1/9a,; *; * the routine performs up to 10 Newton iterations to find the; * root of igamc(a,x) - p = 0.; *; * ACCURACY:; *; * Tested at random a, p in the intervals indicated.; *; * a p Relative error:; * arithmetic domain domain # trials peak rms; * IEEE 0.5,100 0,0.5 100000 1.0e-14 1.7e-15; * IEEE 0.01,0.5 0,0.5 100000 9.0e-14 3.4e-15; * IEEE 0.5,10000 0,0.5 20000 2.3e-13 3.8e-14; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:371,Integrability,rout,routine,371,"/*; *; * Inverse of complemented incomplete gamma integral; *; *; *; * SYNOPSIS:; *; * double a, x, p, igami();; *; * x = igami( a, p );; *; * DESCRIPTION:; *; * Given p, the function finds x such that; *; * igamc( a, x ) = p.; *; * Starting with the approximate value; *; * 3; * x = a t; *; * where; *; * t = 1 - d - ndtri(p) sqrt(d); *; * and; *; * d = 1/9a,; *; * the routine performs up to 10 Newton iterations to find the; * root of igamc(a,x) - p = 0.; *; * ACCURACY:; *; * Tested at random a, p in the intervals indicated.; *; * a p Relative error:; * arithmetic domain domain # trials peak rms; * IEEE 0.5,100 0,0.5 100000 1.0e-14 1.7e-15; * IEEE 0.01,0.5 0,0.5 100000 9.0e-14 3.4e-15; * IEEE 0.5,10000 0,0.5 20000 2.3e-13 3.8e-14; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:379,Performance,perform,performs,379,"/*; *; * Inverse of complemented incomplete gamma integral; *; *; *; * SYNOPSIS:; *; * double a, x, p, igami();; *; * x = igami( a, p );; *; * DESCRIPTION:; *; * Given p, the function finds x such that; *; * igamc( a, x ) = p.; *; * Starting with the approximate value; *; * 3; * x = a t; *; * where; *; * t = 1 - d - ndtri(p) sqrt(d); *; * and; *; * d = 1/9a,; *; * the routine performs up to 10 Newton iterations to find the; * root of igamc(a,x) - p = 0.; *; * ACCURACY:; *; * Tested at random a, p in the intervals indicated.; *; * a p Relative error:; * arithmetic domain domain # trials peak rms; * IEEE 0.5,100 0,0.5 100000 1.0e-14 1.7e-15; * IEEE 0.01,0.5 0,0.5 100000 9.0e-14 3.4e-15; * IEEE 0.5,10000 0,0.5 20000 2.3e-13 3.8e-14; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:480,Testability,Test,Tested,480,"/*; *; * Inverse of complemented incomplete gamma integral; *; *; *; * SYNOPSIS:; *; * double a, x, p, igami();; *; * x = igami( a, p );; *; * DESCRIPTION:; *; * Given p, the function finds x such that; *; * igamc( a, x ) = p.; *; * Starting with the approximate value; *; * 3; * x = a t; *; * where; *; * t = 1 - d - ndtri(p) sqrt(d); *; * and; *; * d = 1/9a,; *; * the routine performs up to 10 Newton iterations to find the; * root of igamc(a,x) - p = 0.; *; * ACCURACY:; *; * Tested at random a, p in the intervals indicated.; *; * a p Relative error:; * arithmetic domain domain # trials peak rms; * IEEE 0.5,100 0,0.5 100000 1.0e-14 1.7e-15; * IEEE 0.01,0.5 0,0.5 100000 9.0e-14 3.4e-15; * IEEE 0.5,10000 0,0.5 20000 2.3e-13 3.8e-14; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1987, 1995, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:375,Availability,error,error,375,"/*; *; * Inverse of incomplete beta integral; *; *; *; * SYNOPSIS:; *; * double a, b, x, y, incbi();; *; * x = incbi( a, b, y );; *; *; *; * DESCRIPTION:; *; * Given y, the function finds x such that; *; * incbet( a, b, x ) = y .; *; * The routine performs interval halving or Newton iterations to find the; * root of incbet(a,b,x) - y = 0.; *; *; * ACCURACY:; *; * Relative error:; * x a,b; * arithmetic domain domain # trials peak rms; * IEEE 0,1 .5,10000 50000 5.8e-12 1.3e-13; * IEEE 0,1 .25,100 100000 1.8e-13 3.9e-15; * IEEE 0,1 0,5 50000 1.1e-12 5.5e-15; * VAX 0,1 .5,100 25000 3.5e-14 1.1e-15; * With a and b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 50000 5.8e-12 1.1e-13; * IEEE 0,1 .5,100 100000 1.7e-14 7.9e-16; * With a = .5, b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 10000 8.3e-11 1.0e-11; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1996, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:886,Deployability,Release,Release,886,"/*; *; * Inverse of incomplete beta integral; *; *; *; * SYNOPSIS:; *; * double a, b, x, y, incbi();; *; * x = incbi( a, b, y );; *; *; *; * DESCRIPTION:; *; * Given y, the function finds x such that; *; * incbet( a, b, x ) = y .; *; * The routine performs interval halving or Newton iterations to find the; * root of incbet(a,b,x) - y = 0.; *; *; * ACCURACY:; *; * Relative error:; * x a,b; * arithmetic domain domain # trials peak rms; * IEEE 0,1 .5,10000 50000 5.8e-12 1.3e-13; * IEEE 0,1 .25,100 100000 1.8e-13 3.9e-15; * IEEE 0,1 0,5 50000 1.1e-12 5.5e-15; * VAX 0,1 .5,100 25000 3.5e-14 1.1e-15; * With a and b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 50000 5.8e-12 1.1e-13; * IEEE 0,1 .5,100 100000 1.7e-14 7.9e-16; * With a = .5, b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 10000 8.3e-11 1.0e-11; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1996, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:240,Integrability,rout,routine,240,"/*; *; * Inverse of incomplete beta integral; *; *; *; * SYNOPSIS:; *; * double a, b, x, y, incbi();; *; * x = incbi( a, b, y );; *; *; *; * DESCRIPTION:; *; * Given y, the function finds x such that; *; * incbet( a, b, x ) = y .; *; * The routine performs interval halving or Newton iterations to find the; * root of incbet(a,b,x) - y = 0.; *; *; * ACCURACY:; *; * Relative error:; * x a,b; * arithmetic domain domain # trials peak rms; * IEEE 0,1 .5,10000 50000 5.8e-12 1.3e-13; * IEEE 0,1 .25,100 100000 1.8e-13 3.9e-15; * IEEE 0,1 0,5 50000 1.1e-12 5.5e-15; * VAX 0,1 .5,100 25000 3.5e-14 1.1e-15; * With a and b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 50000 5.8e-12 1.1e-13; * IEEE 0,1 .5,100 100000 1.7e-14 7.9e-16; * With a = .5, b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 10000 8.3e-11 1.0e-11; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1996, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx:248,Performance,perform,performs,248,"/*; *; * Inverse of incomplete beta integral; *; *; *; * SYNOPSIS:; *; * double a, b, x, y, incbi();; *; * x = incbi( a, b, y );; *; *; *; * DESCRIPTION:; *; * Given y, the function finds x such that; *; * incbet( a, b, x ) = y .; *; * The routine performs interval halving or Newton iterations to find the; * root of incbet(a,b,x) - y = 0.; *; *; * ACCURACY:; *; * Relative error:; * x a,b; * arithmetic domain domain # trials peak rms; * IEEE 0,1 .5,10000 50000 5.8e-12 1.3e-13; * IEEE 0,1 .25,100 100000 1.8e-13 3.9e-15; * IEEE 0,1 0,5 50000 1.1e-12 5.5e-15; * VAX 0,1 .5,100 25000 3.5e-14 1.1e-15; * With a and b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 50000 5.8e-12 1.1e-13; * IEEE 0,1 .5,100 100000 1.7e-14 7.9e-16; * With a = .5, b constrained to half-integer or integer values:; * IEEE 0,1 .5,10000 10000 8.3e-11 1.0e-11; */; /*; Cephes Math Library Release 2.8: June, 2000; Copyright 1984, 1996, 2000 by Stephen L. Moshier; */",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncCephesInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncCephesInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncMathCore.cxx:29,Availability,error,error,29,"// (26.x.21.2) complementary error function",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncMathCore.cxx:15,Availability,error,error,15,"// (26.x.21.1) error function",MatchSource.CODE_COMMENT,math/mathcore/src/SpecFuncMathCore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/SpecFuncMathCore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:1663,Availability,down,down,1663," multidimensional search key (e.g. range searches and; nearest neighbour searches). kd-trees are a special case of BSP trees. A kd-tree uses only splitting planes that are perpendicular to one of the coordinate system axes.; This differs from BSP trees, in which arbitrary splitting planes can be used.; In addition, in the typical definition every node of a kd-tree, from the root to the leaves, stores a point.; This differs from BSP trees, in which leaves are typically the only nodes that contain points; (or other geometric primitives). As a consequence, each splitting plane must go through one of; the points in the kd-tree. kd-trees are a variant that store data only in leaf nodes. ### 2. Constructing a classical kd-tree ( Pseudo code). Since there are many possible ways to choose axis-aligned splitting planes, there are many different ways; to construct kd-trees. The canonical method of kd-tree construction has the following constraints:. * As one moves down the tree, one cycles through the axes used to select the splitting planes.; (For example, the root would have an x-aligned plane, the root's children would both have y-aligned; planes, the root's grandchildren would all have z-aligned planes, and so on.); * At each step, the point selected to create the splitting plane is the median of the points being; put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption; that we feed the entire set of points into the algorithm up-front.). This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. ~~~~; function kdtree (list of points pointList, int depth); {; if pointList is empty; re",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:6354,Energy Efficiency,consumption,consumption,6354,"don't require the original data to be present after the tree; has been built. Check the functions documentation for more details. #### 3b. Navigating the kd-tree. Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). ### 4. TKDtree implementation details - internal information, not needed to use the kd-tree. #### 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. - Drawback: Insertion to the TKDtree is not supported.; - Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; ~~~~; fAxis[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value; ~~~~. Given the index of a node in those arrays, it's e",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:3762,Integrability,interface,interface,3762,"depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; ~~~~. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. ### 3. Using TKDTree. #### 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:. \code{.cpp}; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:4090,Modifiability,variab,variables,4090,"it from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. ### 3. Using TKDTree. #### 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:. \code{.cpp}; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for (Int_t i=0; i<npoints; i++){; data0[i]=gRandom->Uniform(xmin, xmax);; data1[i]=gRandom->Uniform(xmin, xmax);; data2[i]=gRandom->Uniform(xmin, xmax);; }; TKDTreeID *kdtree = new TKDTreeID(npoints, ndim, bsize);; kdtree->SetData(0, data0);; kdtree->SetData(1, data1);; kdtree->SetData(2, data2);; kdtree->Build();; }; \endcode. By default, the kd-tree doesn't own the data and doesn't delete it with itself. If you want th",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:3188,Performance,optimiz,optimized,3188,"ads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. ~~~~; function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; ~~~~. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. ### 3. Using TKDTree. #### 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:. \code{.cpp}; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1,",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:6325,Performance,optimiz,optimized,6325,"don't require the original data to be present after the tree; has been built. Check the functions documentation for more details. #### 3b. Navigating the kd-tree. Nodes of the tree are indexed top to bottom, left to right. The root node has index 0. Functions; TKDTree::GetLeft(Index inode), TKDTree::GetRight(Index inode) and TKDTree::GetParent(Index inode); allow to find the children and the parent of a given node. For a given node, one can find the indexes of the original points, contained in this node,; by calling the GetNodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). ### 4. TKDtree implementation details - internal information, not needed to use the kd-tree. #### 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. - Drawback: Insertion to the TKDtree is not supported.; - Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; ~~~~; fAxis[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value; ~~~~. Given the index of a node in those arrays, it's e",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:8549,Performance,perform,performed,8549,"ppose, that the child node is stored under the index inode. Then:; - Parent `index = inode/2`. Number of division nodes and number of terminals :; `fNNodes = (fNPoints/fBucketSize)`. The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; The TKDTree looks the following way:; Ideal case:; ~~~~; Number of _terminal_ nodes = 2^N, N=3. INode; irow 0 0 - 1 inode; irow 1 1 2 - 2 inodes; irow 2 3 4 5 6 - 4 inodes; irow 3 7 8 9 10 11 12 13 14 - 8 inodes; ~~~~. Non ideal case:; ~~~~; Number of _terminal_ nodes = 2^N+k, N=3 k=1. INode; irow 0 0 - 1 inode; irow 1 1 2 - 2 inodes; irow 2 3 4 5 6 - 3 inodes; irow 3 7 8 9 10 11 12 13 14 - 8 inodes; irow 4 15 16 - 2 inodes; ~~~~. #### 4b. The division algorithm:. As described above, the kd-tree is built by repeatingly dividing the given set of points into; 2 smaller sets. The cut is made on the axis with the biggest spread, and the value on the axis,; on which the cut is performed, is chosen based on the following formula:; Suppose, we want to divide n nodes into 2 groups, left and right. Then the left and right; will have the following number of nodes:. ~~~~; n=2^k+rest. Left = 2^k-1 + ((rest>2^k-2) ? 2^k-2 : rest); Right = 2^k-1 + ((rest>2^k-2) ? rest-2^k-2 : 0); ~~~~. For example, let `n_nodes=67`. Then, the closest `2^k=64, 2^k-1=32, 2^k-2=16`.; Left node gets `32+3=35` sub-nodes, and the right node gets 32 sub-nodes. The division process continues until all the nodes contain not more than a predefined number; of points. #### 4c. The order of nodes in boundary-related arrays. Some kd-tree based algorithms need to know the boundaries of each node. This information can; be computed by calling the TKDTree::MakeBoundaries() function. It fills the following arrays:. - `fRange` : array containing the boundaries of the domain:; `| 1st dimension (min + max) | 2nd dimension (min + max) | ...`; `fBoundaries` : nodes boundaries; `| 1st node {1st dim * 2 elements | 2nd",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:6869,Security,access,access,6869,"NodePointsIndexes(Index inode) function. Additionally, for terminal nodes,; there is a function GetPointsIndexes(Index inode) that returns a pointer to the relevant; part of the index array. To find the number of point in the node; (not only terminal), call TKDTree::GetNpointsNode(Index inode). ### 4. TKDtree implementation details - internal information, not needed to use the kd-tree. #### 4a. Order of nodes in the node information arrays:. TKDtree is optimized to minimize memory consumption.; Nodes of the TKDTree do not store pointers to the left and right children or to the parent node,; but instead there are several 1-d arrays of size fNNodes with information about the nodes.; The order of the nodes information in the arrays is described below. It's important to understand; it, if one's class needs to store some kind of additional information on the per node basis, for; example, the fit function parameters. - Drawback: Insertion to the TKDtree is not supported.; - Advantage: Random access is supported. As noted above, the construction of the kd-tree involves choosing the axis and the point on; that axis to divide the remaining points approximately in half. The exact algorithm for choosing; the division point is described in the next section. The sequence of divisions is; recorded in the following arrays:; ~~~~; fAxis[fNNodes] - Division axis (0,1,2,3 ...); fValue[fNNodes] - Division value; ~~~~. Given the index of a node in those arrays, it's easy to find the indices, corresponding to; children nodes or the parent node:; Suppose, the parent node is stored under the index inode. Then:; - Left child `index = inode*2+1`; - Right child `index = (inode+1)*2`. Suppose, that the child node is stored under the index inode. Then:; - Parent `index = inode/2`. Number of division nodes and number of terminals :; `fNNodes = (fNPoints/fBucketSize)`. The nodes are filled always from left side to the right side:; Let inode be the index of a node, and irow - the index of a row; ",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:2567,Usability,simpl,simple,2567,"-aligned splitting planes, there are many different ways; to construct kd-trees. The canonical method of kd-tree construction has the following constraints:. * As one moves down the tree, one cycles through the axes used to select the splitting planes.; (For example, the root would have an x-aligned plane, the root's children would both have y-aligned; planes, the root's grandchildren would all have z-aligned planes, and so on.); * At each step, the point selected to create the splitting plane is the median of the points being; put into the kd-tree, with respect to their coordinates in the axis being used. (Note the assumption; that we feed the entire set of points into the algorithm up-front.). This method leads to a balanced kd-tree, in which each leaf node is about the same distance from the root.; However, balanced trees are not necessarily optimal for all applications.; The following pseudo-code illustrates this canonical construction procedure (NOTE, that the procedure used; by the TKDTree class is a bit different, the following pseudo-code is given as a simple illustration of the; concept):. ~~~~; function kdtree (list of points pointList, int depth); {; if pointList is empty; return nil;; else; {; // Select axis based on depth so that axis cycles through all valid values; var int axis := depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; ~~~~. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balance",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:3841,Usability,simpl,simplify,3841,"depth mod k;. // Sort point list and choose median as pivot element; select median from pointList;. // Create node and construct subtrees; var tree_node node;; node.location := median;; node.leftChild := kdtree(points in pointList before median, depth+1);; node.rightChild := kdtree(points in pointList after median, depth+1);; return node;; }; }; ~~~~. Our construction method is optimized to save memory, and differs a bit from the constraints above.; In particular, the division axis is chosen as the one with the biggest spread, and the point to create the; splitting plane is chosen so, that one of the two subtrees contains exactly 2^k terminal nodes and is a; perfectly balanced binary tree, and, while at the same time, trying to keep the number of terminal nodes; in the 2 subtrees as close as possible. The following section gives more details about our implementation. ### 3. Using TKDTree. #### 3a. Creating the tree and setting the data; The interface of the TKDTree, that allows to set input data, has been developed to simplify using it; together with TTree::Draw() functions. That's why the data has to be provided column-wise. For example:. \code{.cpp}; {; TTree *datatree = ...; ...; datatree->Draw(""x:y:z"", ""selection"", ""goff"");; //now make a kd-tree on the drawn variables; TKDTreeID *kdtree = new TKDTreeID(npoints, 3, 1);; kdtree->SetData(0, datatree->GetV1());; kdtree->SetData(1, datatree->GetV2());; kdtree->SetData(2, datatree->GetV3());; kdtree->Build();; }; NOTE, that this implementation of kd-tree doesn't support adding new points after the tree has been built; Of course, it's not necessary to use TTree::Draw(). What is important, is to have data columnwise.; An example with regular arrays:; {; Int_t npoints = 100000;; Int_t ndim = 3;; Int_t bsize = 1;; Double_t xmin = -0.5;; Double_t xmax = 0.5;; Double_t *data0 = new Double_t[npoints];; Double_t *data1 = new Double_t[npoints];; Double_t *data2 = new Double_t[npoints];; Double_t *y = new Double_t[npoints];; for",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:556,Usability,simpl,simplify,556,"////////////////////////////////////////////////////////////////////////////////; /// Create a kd-tree from the provided data array. This function only sets the data,; /// call Build() to build the tree!!!; /// Parameters:; /// - npoints - total number of points. Adding points after the tree is built is not supported; /// - ndim - number of dimensions; /// - bsize - maximal number of points in the terminal nodes; /// - data - the data array; ///; /// The data should be placed columnwise (like in a TTree).; /// The columnwise orientation is chosen to simplify the usage together with TTree::GetV1() like functions.; /// An example of filling such an array for a 2d case:; /// Double_t **data = new Double_t*[2];; /// data[0] = new Double_t[npoints];; /// data[1] = new Double_t[npoints];; /// for (Int_t i=0; i<npoints; i++){; /// data[0][i]=gRandom->Uniform(-1, 1); //fill the x-coordinate; /// data[1][i]=gRandom->Uniform(-1, 1); //fill the y-coordinate; /// }; ///; /// By default, the kd-tree doesn't own the data. If you want the kd-tree to delete the data array, call; /// kdtree->SetOwner(kTRUE).; ///",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:128,Energy Efficiency,allocate,allocate,128,"// 2 = 2**0 + 1; // 3 = 2**1 + 1; // 4 = 2**1 + 2; // 5 = 2**2 + 1; // 6 = 2**2 + 2; // 7 = 2**2 + 3; // 8 = 2**2 + 4; //3.; // allocate space for boundaries",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:178,Availability,failure,failure,178,"////////////////////////////////////////////////////////////////////////////////; ///Find kNN nearest neighbors to the point in the first argument; ///Returns 1 on success, 0 on failure; ///Arrays ind and dist are provided by the user and are assumed to be at least kNN elements long",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:85,Deployability,Update,Update,85,"////////////////////////////////////////////////////////////////////////////////; ///Update the nearest neighbors values by examining the node inode",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:221,Availability,failure,failure,221,"////////////////////////////////////////////////////////////////////////////////; /// returns the index of the terminal node to which point belongs; /// (index in the fAxis, fValue, etc arrays); /// returns -1 in case of failure",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:361,Performance,perform,performed,361,"////////////////////////////////////////////////////////////////////////////////; ///Set the coordinate `#ndim` of all points (the column `#ndim` of the data matrix); ///After setting all the data columns, proceed by calling Build() function; ///Note, that calling this function after Build() is not possible; ///Note also, that no checks on the array sizes is performed anywhere",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx:39,Energy Efficiency,Allocate,Allocate,39,"//Info(""MakeBoundaries(Value*)"", Form(""Allocate boundaries for %d nodes"", totNodes));; // loop",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTree.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTree.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTreeBinning.cxx:35,Integrability,depend,depends,35,"// Boolean functor whose predicate depends on the bin's density. Used for ascending sort.",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTreeBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTreeBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTreeBinning.cxx:35,Integrability,depend,depends,35,"// Boolean functor whose predicate depends on the bin's density. Used for descending sort.",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTreeBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTreeBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTreeBinning.cxx:73,Safety,avoid,avoid,73,"// Readjusts the bins' minimum edge by shifting it slightly lower; // to avoid overlapping with the data",MatchSource.CODE_COMMENT,math/mathcore/src/TKDTreeBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TKDTreeBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:580,Integrability,rout,routines,580,"// @(#)root/mathcore:$Id$; // Authors: Rene Brun, Anna Kreshuk, Eddy Offermann, Fons Rademakers 29/07/95; /*************************************************************************; * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; ////////////////////////////////////////////////////////////////////////////////; // TMath; //; // Encapsulate math routines.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:114,Testability,log,logarithm,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns the binary (base-2) logarithm of `x`.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:105,Availability,error,error,105,"////////////////////////////////////////////////////////////////////////////////; /// Computation of the error function erf(x).; /// Erf(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between 0 and x",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Computes the complementary error function erfc(x).; /// Erfc(x) = (2/sqrt(pi)) Integral(exp(-t^2))dt between x and infinity",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:106,Availability,error,error,106,"////////////////////////////////////////////////////////////////////////////////; /// Returns the inverse error function.; /// x must be <-1<x<1",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:127,Availability,error,error,127,"////////////////////////////////////////////////////////////////////////////////; /// Returns the inverse of the complementary error function.; /// x must be 0<x<2; /// implement using the quantile of the normal distribution; /// instead of ErfInverse for better numerical precision for large x",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:477,Energy Efficiency,adapt,adapted,477,"////////////////////////////////////////////////////////////////////////////////; /// The LANDAU function.; ///; /// mu is a location parameter and correspond approximately to the most probable value; /// and sigma is a scale parameter (not the sigma of the full distribution which is not defined); /// Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution; /// (most proper value) is at x = -0.22278; /// This function has been adapted from the CERNLIB routine G110 denlan.; /// If norm=kTRUE (default is kFALSE) the result is divided by sigma",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:502,Integrability,rout,routine,502,"////////////////////////////////////////////////////////////////////////////////; /// The LANDAU function.; ///; /// mu is a location parameter and correspond approximately to the most probable value; /// and sigma is a scale parameter (not the sigma of the full distribution which is not defined); /// Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution; /// (most proper value) is at x = -0.22278; /// This function has been adapted from the CERNLIB routine G110 denlan.; /// If norm=kTRUE (default is kFALSE) the result is divided by sigma",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:477,Modifiability,adapt,adapted,477,"////////////////////////////////////////////////////////////////////////////////; /// The LANDAU function.; ///; /// mu is a location parameter and correspond approximately to the most probable value; /// and sigma is a scale parameter (not the sigma of the full distribution which is not defined); /// Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution; /// (most proper value) is at x = -0.22278; /// This function has been adapted from the CERNLIB routine G110 denlan.; /// If norm=kTRUE (default is kFALSE) the result is divided by sigma",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:366,Energy Efficiency,power,powerful,366,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Kolmogorov distribution function,; ///; /// \f[; /// P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; /// \f]; ///; /// which gives the probability that Kolmogorov's test statistic will exceed; /// the value z assuming the null hypothesis. This gives a very powerful; /// test for comparing two one-dimensional distributions.; /// see, for example, Eadie et al, ""statistical Methods in Experimental; /// Physics', pp 269-270).; ///; /// This function returns the confidence level for the null hypothesis, where:; /// - \f$ z = dn \sqrt{n} \f$, and; /// - \f$ dn \f$ is the maximum deviation between a hypothetical distribution; /// function and an experimental distribution with; /// - \f$ n \f$ events; ///; /// NOTE: To compare two experimental distributions with m and n events,; /// use \f$ z = \sqrt{m n/(m+n)) dn} \f$; ///; /// Accuracy: The function is far too accurate for any imaginable application.; /// Probabilities less than \f$ 10^{-15} \f$ are returned as zero.; /// However, remember that the formula is only valid for ""large"" n.; ///; /// Theta function inversion formula is used for z <= 1; ///; /// This function was translated by Rene Brun from PROBKL in CERNLIB.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:274,Testability,test,test,274,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Kolmogorov distribution function,; ///; /// \f[; /// P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; /// \f]; ///; /// which gives the probability that Kolmogorov's test statistic will exceed; /// the value z assuming the null hypothesis. This gives a very powerful; /// test for comparing two one-dimensional distributions.; /// see, for example, Eadie et al, ""statistical Methods in Experimental; /// Physics', pp 269-270).; ///; /// This function returns the confidence level for the null hypothesis, where:; /// - \f$ z = dn \sqrt{n} \f$, and; /// - \f$ dn \f$ is the maximum deviation between a hypothetical distribution; /// function and an experimental distribution with; /// - \f$ n \f$ events; ///; /// NOTE: To compare two experimental distributions with m and n events,; /// use \f$ z = \sqrt{m n/(m+n)) dn} \f$; ///; /// Accuracy: The function is far too accurate for any imaginable application.; /// Probabilities less than \f$ 10^{-15} \f$ are returned as zero.; /// However, remember that the formula is only valid for ""large"" n.; ///; /// Theta function inversion formula is used for z <= 1; ///; /// This function was translated by Rene Brun from PROBKL in CERNLIB.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:380,Testability,test,test,380,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the Kolmogorov distribution function,; ///; /// \f[; /// P(z) = 2 \sum_{j=1}^{\infty} (-1)^{j-1} e^{-2 j^2 z^2}; /// \f]; ///; /// which gives the probability that Kolmogorov's test statistic will exceed; /// the value z assuming the null hypothesis. This gives a very powerful; /// test for comparing two one-dimensional distributions.; /// see, for example, Eadie et al, ""statistical Methods in Experimental; /// Physics', pp 269-270).; ///; /// This function returns the confidence level for the null hypothesis, where:; /// - \f$ z = dn \sqrt{n} \f$, and; /// - \f$ dn \f$ is the maximum deviation between a hypothetical distribution; /// function and an experimental distribution with; /// - \f$ n \f$ events; ///; /// NOTE: To compare two experimental distributions with m and n events,; /// use \f$ z = \sqrt{m n/(m+n)) dn} \f$; ///; /// Accuracy: The function is far too accurate for any imaginable application.; /// Probabilities less than \f$ 10^{-15} \f$ are returned as zero.; /// However, remember that the formula is only valid for ""large"" n.; ///; /// Theta function inversion formula is used for z <= 1; ///; /// This function was translated by Rene Brun from PROBKL in CERNLIB.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1053,Availability,error,error,1053,"ther two one-dimensional sets of points are compatible; /// with coming from the same parent distribution, using the Kolmogorov test.; /// That is, it is used to compare two experimental distributions of unbinned data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;;",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1299,Deployability,integrat,integrated,1299," data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if ",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1419,Energy Efficiency,adapt,adapted,1419,"e given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; ",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1299,Integrability,integrat,integrated,1299," data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if ",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1453,Integrability,rout,routine,1453,"e given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; ",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1419,Modifiability,adapt,adapted,1419,"e given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; ",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:3251,Performance,perform,perform,3251,"/ The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; /// }; /// ~~~; ///; /// For the last case, a=b, the algorithm advances each array by one index in an; /// attempt to move through the equality. However, this is incorrect when one or; /// the other of a or b (or both) have a repeated value, call it x. For the KS; /// statistic to be computed properly, rdiff needs to be calculated after all of; /// the a and b at x have been tallied (this is due to the definition of the; /// empirical distribution function; another way to convince yourself that the; /// old CERNLIB method is wrong is that it implies that the function defined as the; /// difference between a and b is multi-valued at x -- besides being ugly, this; /// would invalidate Kolmogorov's theorem).; ///; /// The solution is to just add while-loops into the equality-case handling to; /// perform the tally:; ///; /// ~~~ {.cpp}; /// } else {; /// double x = a[ia-1];; /// while(a[ia-1] == x && ia <= na) {; /// rdiff -= sa;; /// ia++;; /// }; /// while(b[ib-1] == x && ib <= nb) {; /// rdiff += sb;; /// ib++;; /// }; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// ~~~; ///; /// ### Note:; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:98,Testability,test,test,98,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test whether two one-dimensional sets of points are compatible; /// with coming from the same parent distribution, using the Kolmogorov test.; /// That is, it is used to compare two experimental distributions of unbinned data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; ///",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:234,Testability,test,test,234,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test whether two one-dimensional sets of points are compatible; /// with coming from the same parent distribution, using the Kolmogorov test.; /// That is, it is used to compare two experimental distributions of unbinned data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; ///",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:750,Testability,test,test,750,"////////////////////////////////////////////////////////////////////////////////; /// Statistical test whether two one-dimensional sets of points are compatible; /// with coming from the same parent distribution, using the Kolmogorov test.; /// That is, it is used to compare two experimental distributions of unbinned data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; ///",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1220,Testability,test,test,1220,"bution, using the Kolmogorov test.; /// That is, it is used to compare two experimental distributions of unbinned data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; ///",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1238,Testability,test,test,1238," data.; ///; /// ### Input:; /// a,b: One-dimensional arrays of length na, nb, respectively.; /// The elements of a and b must be given in ascending order.; /// option is a character string to specify options; /// ""D"" Put out a line of ""Debug"" printout; /// ""M"" Return the Maximum Kolmogorov distance instead of prob; ///; /// ### Output:; /// The returned value prob is a calculated confidence level which gives a; /// statistical test for compatibility of a and b.; /// Values of prob close to zero are taken as indicating a small probability; /// of compatibility. For two point sets drawn randomly from the same parent; /// distribution, the value of prob should be uniformly distributed between; /// zero and one.; /// in case of error the function return -1; /// If the 2 sets have a different number of points, the minimum of; /// the two sets is used.; ///; /// ### Method:; /// The Kolmogorov test is used. The test statistic is the maximum deviation; /// between the two integrated distribution functions, multiplied by the; /// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; ///; /// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); /// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; /// Statistical Methods in Experimental Physics, (North-Holland,; /// Amsterdam 1971) 269-271); ///; /// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); ///; /// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if ",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:3636,Testability,test,test,3636,"/ The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; /// over the two sorted arrays a and b representing empirical distribution; /// functions. The for-loop handles 3 cases: when the next points to be; /// evaluated satisfy a>b, a<b, or a=b:; ///; /// ~~~ {.cpp}; /// for (Int_t i=0;i<na+nb;i++) {; /// if (a[ia-1] < b[ib-1]) {; /// rdiff -= sa;; /// ia++;; /// if (ia > na) {ok = kTRUE; break;}; /// } else if (a[ia-1] > b[ib-1]) {; /// rdiff += sb;; /// ib++;; /// if (ib > nb) {ok = kTRUE; break;}; /// } else {; /// rdiff += sb - sa;; /// ia++;; /// ib++;; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; /// }; /// ~~~; ///; /// For the last case, a=b, the algorithm advances each array by one index in an; /// attempt to move through the equality. However, this is incorrect when one or; /// the other of a or b (or both) have a repeated value, call it x. For the KS; /// statistic to be computed properly, rdiff needs to be calculated after all of; /// the a and b at x have been tallied (this is due to the definition of the; /// empirical distribution function; another way to convince yourself that the; /// old CERNLIB method is wrong is that it implies that the function defined as the; /// difference between a and b is multi-valued at x -- besides being ugly, this; /// would invalidate Kolmogorov's theorem).; ///; /// The solution is to just add while-loops into the equality-case handling to; /// perform the tally:; ///; /// ~~~ {.cpp}; /// } else {; /// double x = a[ia-1];; /// while(a[ia-1] == x && ia <= na) {; /// rdiff -= sa;; /// ia++;; /// }; /// while(b[ib-1] == x && ib <= nb) {; /// rdiff += sb;; /// ib++;; /// }; /// if (ia > na) {ok = kTRUE; break;}; /// if (ib > nb) {ok = kTRUE; break;}; /// }; /// ~~~; ///; /// ### Note:; /// A good description of the Kolmogorov test can be seen at:; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:503,Availability,error,error,503,"////////////////////////////////////////////////////////////////////////////////; /// Computation of Voigt function (normalised).; /// Voigt is a convolution of the two functions:; /// \f[; /// gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; /// \f]; /// and; /// \f[; /// lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; /// \f]; /// \.; ///; /// The Voigt function is known to be the real part of Faddeeva function also; /// called complex error function [2].; ///; /// The algorithm was developed by J. Humlicek [1].; /// This code is based on fortran code presented by R. J. Wells [2].; /// Translated and adapted by Miha D. Puc; ///; /// To calculate the Faddeeva function with relative error less than 10^(-r).; /// r can be set by the user subject to the constraints 2 <= r <= 5.; ///; /// - [1] J. Humlicek, JQSRT, 21, 437 (1982).; /// - [2] [R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48.](http://www-atm.physics.ox.ac.uk/user/wells/voigt.html)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:753,Availability,error,error,753,"////////////////////////////////////////////////////////////////////////////////; /// Computation of Voigt function (normalised).; /// Voigt is a convolution of the two functions:; /// \f[; /// gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; /// \f]; /// and; /// \f[; /// lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; /// \f]; /// \.; ///; /// The Voigt function is known to be the real part of Faddeeva function also; /// called complex error function [2].; ///; /// The algorithm was developed by J. Humlicek [1].; /// This code is based on fortran code presented by R. J. Wells [2].; /// Translated and adapted by Miha D. Puc; ///; /// To calculate the Faddeeva function with relative error less than 10^(-r).; /// r can be set by the user subject to the constraints 2 <= r <= 5.; ///; /// - [1] J. Humlicek, JQSRT, 21, 437 (1982).; /// - [2] [R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48.](http://www-atm.physics.ox.ac.uk/user/wells/voigt.html)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:671,Energy Efficiency,adapt,adapted,671,"////////////////////////////////////////////////////////////////////////////////; /// Computation of Voigt function (normalised).; /// Voigt is a convolution of the two functions:; /// \f[; /// gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; /// \f]; /// and; /// \f[; /// lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; /// \f]; /// \.; ///; /// The Voigt function is known to be the real part of Faddeeva function also; /// called complex error function [2].; ///; /// The algorithm was developed by J. Humlicek [1].; /// This code is based on fortran code presented by R. J. Wells [2].; /// Translated and adapted by Miha D. Puc; ///; /// To calculate the Faddeeva function with relative error less than 10^(-r).; /// r can be set by the user subject to the constraints 2 <= r <= 5.; ///; /// - [1] J. Humlicek, JQSRT, 21, 437 (1982).; /// - [2] [R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48.](http://www-atm.physics.ox.ac.uk/user/wells/voigt.html)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:671,Modifiability,adapt,adapted,671,"////////////////////////////////////////////////////////////////////////////////; /// Computation of Voigt function (normalised).; /// Voigt is a convolution of the two functions:; /// \f[; /// gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; /// \f]; /// and; /// \f[; /// lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; /// \f]; /// \.; ///; /// The Voigt function is known to be the real part of Faddeeva function also; /// called complex error function [2].; ///; /// The algorithm was developed by J. Humlicek [1].; /// This code is based on fortran code presented by R. J. Wells [2].; /// Translated and adapted by Miha D. Puc; ///; /// To calculate the Faddeeva function with relative error less than 10^(-r).; /// r can be set by the user subject to the constraints 2 <= r <= 5.; ///; /// - [1] J. Humlicek, JQSRT, 21, 437 (1982).; /// - [2] [R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48.](http://www-atm.physics.ox.ac.uk/user/wells/voigt.html)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:9,Modifiability,variab,variables,9,"// Local variables",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:8,Modifiability,variab,variables,8,"// Loop variables",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:16,Modifiability,variab,variables,16,"// W4 temporary variables",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:16,Safety,avoid,avoid,16,"// When y<10^-6 avoid W4 algorithm",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:14,Integrability,depend,dependents,14,"// Region 1 y-dependents",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:14,Integrability,depend,dependents,14,"// Region 2 y-dependents",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:14,Integrability,depend,dependents,14,"// Region 3 y-dependents",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1047,Deployability,continuous,continuous,1047,"////////////////////////////////////////////////////////////////////////////////; ///Computes sample quantiles, corresponding to the given probabilities; ///; /// \param[in] x the data sample; /// \param[in] n its size; /// \param[out] quantiles computed quantiles are returned in there; /// \param[in] prob probabilities where to compute quantiles; /// \param[in] nprob size of prob array; /// \param[in] isSorted is the input array x sorted ?; /// \param[in] index parameter index; /// \param[in] type method to compute (from 1 to 9).; ///; /// #### NOTE:; /// When the input is not sorted, an array of integers of size n needs; /// to be allocated. It can be passed by the user in parameter index,; /// or, if not passed, it will be allocated inside the function; ///; /// ### Following types are provided:; /// - Discontinuous:; /// - type=1 - inverse of the empirical distribution function; /// - type=2 - like type 1, but with averaging at discontinuities; /// - type=3 - SAS definition: nearest even order statistic; /// - Piecewise linear continuous:; /// - In this case, sample quantiles can be obtained by linear interpolation; /// between the k-th order statistic and p(k).; /// -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; /// - type=5 - a very popular definition, p(k) = (k-0.5)/n;; /// - type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; /// - type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; /// - type=8 - resulting sample quantiles are approximately median unbiased; /// regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; /// - type=9 - resulting sample quantiles are approximately unbiased, when; /// the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);; ///; /// default type = 7; ///; /// ### References:; /// 1. Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistical packages""; /// American Statistician, 50, 361-365; /// 2. R Project documentation for the function quantile of package {stats}",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:641,Energy Efficiency,allocate,allocated,641,"////////////////////////////////////////////////////////////////////////////////; ///Computes sample quantiles, corresponding to the given probabilities; ///; /// \param[in] x the data sample; /// \param[in] n its size; /// \param[out] quantiles computed quantiles are returned in there; /// \param[in] prob probabilities where to compute quantiles; /// \param[in] nprob size of prob array; /// \param[in] isSorted is the input array x sorted ?; /// \param[in] index parameter index; /// \param[in] type method to compute (from 1 to 9).; ///; /// #### NOTE:; /// When the input is not sorted, an array of integers of size n needs; /// to be allocated. It can be passed by the user in parameter index,; /// or, if not passed, it will be allocated inside the function; ///; /// ### Following types are provided:; /// - Discontinuous:; /// - type=1 - inverse of the empirical distribution function; /// - type=2 - like type 1, but with averaging at discontinuities; /// - type=3 - SAS definition: nearest even order statistic; /// - Piecewise linear continuous:; /// - In this case, sample quantiles can be obtained by linear interpolation; /// between the k-th order statistic and p(k).; /// -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; /// - type=5 - a very popular definition, p(k) = (k-0.5)/n;; /// - type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; /// - type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; /// - type=8 - resulting sample quantiles are approximately median unbiased; /// regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; /// - type=9 - resulting sample quantiles are approximately unbiased, when; /// the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);; ///; /// default type = 7; ///; /// ### References:; /// 1. Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistical packages""; /// American Statistician, 50, 361-365; /// 2. R Project documentation for the function quantile of package {stats}",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:736,Energy Efficiency,allocate,allocated,736,"////////////////////////////////////////////////////////////////////////////////; ///Computes sample quantiles, corresponding to the given probabilities; ///; /// \param[in] x the data sample; /// \param[in] n its size; /// \param[out] quantiles computed quantiles are returned in there; /// \param[in] prob probabilities where to compute quantiles; /// \param[in] nprob size of prob array; /// \param[in] isSorted is the input array x sorted ?; /// \param[in] index parameter index; /// \param[in] type method to compute (from 1 to 9).; ///; /// #### NOTE:; /// When the input is not sorted, an array of integers of size n needs; /// to be allocated. It can be passed by the user in parameter index,; /// or, if not passed, it will be allocated inside the function; ///; /// ### Following types are provided:; /// - Discontinuous:; /// - type=1 - inverse of the empirical distribution function; /// - type=2 - like type 1, but with averaging at discontinuities; /// - type=3 - SAS definition: nearest even order statistic; /// - Piecewise linear continuous:; /// - In this case, sample quantiles can be obtained by linear interpolation; /// between the k-th order statistic and p(k).; /// -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; /// - type=5 - a very popular definition, p(k) = (k-0.5)/n;; /// - type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; /// - type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; /// - type=8 - resulting sample quantiles are approximately median unbiased; /// regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; /// - type=9 - resulting sample quantiles are approximately unbiased, when; /// the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1/4);; ///; /// default type = 7; ///; /// ### References:; /// 1. Hyndman, R.J and Fan, Y, (1996) ""Sample quantiles in statistical packages""; /// American Statistician, 50, 361-365; /// 2. R Project documentation for the function quantile of package {stats}",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:129,Availability,avail,available,129,"// re-implemented by L.M (9/11/2011) to fix bug https://savannah.cern.ch/bugs/?87251; // following now exactly R implementation (available in library/stats/R/quantile.R ); // which follows precisely Hyndman-Fan paper; // (older implementation had a bug for type =3)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:103,Availability,error,error,103,"// LM : fix for numerical problems if nppm is actually equal to j, but results different for numerical error; // g in the paper is nppm -j",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:7,Deployability,continuous,continuous,7,"// for continuous quantiles type 4 to 9); // define alpha and beta",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:97,Security,hash,hash,97,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:301,Security,hash,hash,301,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:337,Security,hash,hash,337,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:417,Security,hash,hash,417,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:484,Security,Hash,Hash,484,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:493,Security,Hash,Hash,493,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:505,Security,Hash,Hash,505,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:638,Security,Hash,Hash,638,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:687,Security,Hash,Hash,687,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:746,Security,Hash,Hash,746,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:934,Security,Hash,Hash,934,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:518,Testability,test,tested,518,"////////////////////////////////////////////////////////////////////////////////; /// Calculates hash index from any char string.; /// Based on pre-calculated table of 256 specially selected numbers.; /// These numbers are selected in such a way, that for string; /// length == 4 (integer number) the hash is unambiguous, i.e.; /// from hash value we can recalculate input (no degeneration).; ///; /// The quality of hash method is good enough, that; /// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); /// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; /// as for libc rand().; ///; /// - For string: i = TMath::Hash(string,nstring);; /// - For int: i = TMath::Hash(&intword,sizeof(int));; /// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; ///; /// V.Perev; /// This function is kept for back compatibility. The code previously in this function; /// has been moved to the static function TString::Hash",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:3,Performance,Perform,Perform,3,"// Perform upward recurrence for all x",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:15,Modifiability,enhance,enhance,15,"// Increase to enhance accuracy",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:361,Energy Efficiency,Power,Power,361,"////////////////////////////////////////////////////////////////////////////////; /// Suppose an event occurs with probability _p_ per trial; /// Then the probability P of its occurring _k_ or more times; /// in _n_ trials is termed a cumulative binomial probability; /// the formula is:; /// ~~~ {cpp}; /// P = sum_from_j=k_to_n(TMath::Binomial (n, j)**TMath::Power (p, j)*TMath::Power (1-p, n-j); /// ~~~; /// For _n_ larger than 12 BetaIncomplete is a much better way; /// to evaluate the sum than would be the straightforward sum calculation; /// for _n_ smaller than 12 either method is acceptable (""Numerical Recipes""); ///; /// Note this function is not exactly implementing the cumulative or the complement of the cumulative of the; /// Binomial distrinution. It is equivalent to ROOT::Math::binomial_cdf_c(k-1,p,n); ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:381,Energy Efficiency,Power,Power,381,"////////////////////////////////////////////////////////////////////////////////; /// Suppose an event occurs with probability _p_ per trial; /// Then the probability P of its occurring _k_ or more times; /// in _n_ trials is termed a cumulative binomial probability; /// the formula is:; /// ~~~ {cpp}; /// P = sum_from_j=k_to_n(TMath::Binomial (n, j)**TMath::Power (p, j)*TMath::Power (1-p, n-j); /// ~~~; /// For _n_ larger than 12 BetaIncomplete is a much better way; /// to evaluate the sum than would be the straightforward sum calculation; /// for _n_ smaller than 12 either method is acceptable (""Numerical Recipes""); ///; /// Note this function is not exactly implementing the cumulative or the complement of the cumulative of the; /// Binomial distrinution. It is equivalent to ROOT::Math::binomial_cdf_c(k-1,p,n); ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:355,Deployability,continuous,continuous,355,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of Cauchy distribution at point x; /// by default, standard Cauchy distribution is used (t=0, s=1); /// - t is the location parameter; /// - s is the scale parameter; ///; /// The Cauchy distribution, also called Lorentzian distribution,; /// is a continuous distribution describing resonance behavior; /// The mean and standard deviation of the Cauchy distribution are undefined.; /// The practical meaning of this is that collecting 1,000 data points gives; /// no more accurate an estimate of the mean and standard deviation than; /// does a single point.; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3663.htm; ///; /// Example:; ///; /// ~~~ {cpp}; /// TF1* fc = new TF1(""fc"", ""TMath::CauchyDist(x, [0], [1])"", -5, 5);; /// fc->SetParameters(0, 1);; /// fc->Draw();; /// ~~~; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:327,Modifiability,variab,variable,327,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density function of F-distribution; /// (probability function, integral of density, is computed in FDistI).; ///; /// Parameters N and M stand for degrees of freedom of chi-squares; /// mentioned above parameter F is the actual variable x of the; /// density function p(x) and the point at which the density function; /// is calculated.; ///; /// ### About F distribution:; /// F-distribution arises in testing whether two random samples; /// have the same variance. It is the ratio of two chi-square; /// distributions, with N and M degrees of freedom respectively,; /// where each chi-square is first divided by it's number of degrees; /// of freedom.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:502,Testability,test,testing,502,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density function of F-distribution; /// (probability function, integral of density, is computed in FDistI).; ///; /// Parameters N and M stand for degrees of freedom of chi-squares; /// mentioned above parameter F is the actual variable x of the; /// density function p(x) and the point at which the density function; /// is calculated.; ///; /// ### About F distribution:; /// F-distribution arises in testing whether two random samples; /// have the same variance. It is the ratio of two chi-square; /// distributions, with N and M degrees of freedom respectively,; /// where each chi-square is first divided by it's number of degrees; /// of freedom.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:239,Testability,test,test,239,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the cumulative distribution function of F-distribution; /// (see ROOT::Math::fdistribution_cdf).; /// This function occurs in the statistical test of whether two observed; /// samples have the same variance. For this test a certain statistic F,; /// the ratio of observed dispersion of the first sample to that of the; /// second sample, is calculated. N and M stand for numbers of degrees; /// of freedom in the samples 1-FDistI() is the significance level at; /// which the hypothesis ""1 has smaller variance than 2"" can be rejected.; /// A small numerical value of 1 - FDistI() implies a very significant; /// rejection, in turn implying high confidence in the hypothesis; /// ""1 has variance greater than 2"".; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:314,Testability,test,test,314,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the cumulative distribution function of F-distribution; /// (see ROOT::Math::fdistribution_cdf).; /// This function occurs in the statistical test of whether two observed; /// samples have the same variance. For this test a certain statistic F,; /// the ratio of observed dispersion of the first sample to that of the; /// second sample, is calculated. N and M stand for numbers of degrees; /// of freedom in the samples 1-FDistI() is the significance level at; /// which the hypothesis ""1 has smaller variance than 2"" can be rejected.; /// A small numerical value of 1 - FDistI() implies a very significant; /// rejection, in turn implying high confidence in the hypothesis; /// ""1 has variance greater than 2"".; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:150,Modifiability,Variab,Variable,150,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:110,Testability,Log,LogNormal,110,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:165,Testability,log,lognormal,165,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:770,Testability,log,logn,770,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:786,Testability,log,logn,786,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:801,Testability,Log,LogNormal,801,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:843,Testability,log,logn,843,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:877,Testability,log,logn,877,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:916,Testability,log,logn,916,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:957,Testability,log,logn,957,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:983,Testability,log,logn,983,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1022,Testability,log,logn,1022,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1063,Testability,log,logn,1063,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1093,Testability,log,logn,1093,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1132,Testability,log,logn,1132,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1173,Testability,log,logn,1173,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1203,Testability,log,logn,1203,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1242,Testability,log,logn,1242,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:1283,Testability,log,logn,1283,"////////////////////////////////////////////////////////////////////////////////; /// Computes the density of LogNormal distribution at point x.; /// Variable X has lognormal distribution if Y=Ln(X) has normal distribution; ///; /// \param[in] x is the evaluation point; /// \param[in] sigma is the shape parameter; /// \param[in] theta is the location parameter; /// \param[in] m is the scale parameter; ///; /// The formula was taken from ""Engineering Statistics Handbook"" on site; /// http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; /// Implementation using ROOT::Math::lognormal_pdf; ///; /// Begin_Macro; /// {; /// TCanvas *c1 = new TCanvas(""c1"", ""c1"", 700, 500);; ///; /// c1->SetLogy();; /// c1->SetGridx();; /// c1->SetGridy();; ///; /// TF1 *logn = new TF1(""logn"", ""TMath::LogNormal(x, [0], [1], [2])"", 0, 5);; /// logn->SetMinimum(1e-3);; ///; /// logn->SetParameters(0.5, 0., 1.);; /// logn->SetLineColor(2);; /// TF1 *logn1 = logn->DrawCopy(""L"");; /// logn->SetParameters(1.0, 0., 1.);; /// logn->SetLineColor(3);; /// TF1 *logn2 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(2.0, 0., 1.);; /// logn->SetLineColor(4);; /// TF1 *logn3 = logn->DrawCopy(""LSAME"");; /// logn->SetParameters(5.0, 0., 1.);; /// logn->SetLineColor(6);; /// TF1 *logn4 = logn->DrawCopy(""LSAME"");; ///; /// auto legend = new TLegend(0.15, 0.15, 0.5, 0.35);; /// legend->AddEntry(logn1, ""sigma = 0.5, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn2, ""sigma = 1.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn3, ""sigma = 2.0, theta = 0, m = 1"", ""L"");; /// legend->AddEntry(logn4, ""sigma = 5.0, theta = 0, m = 1"", ""L"");; /// legend->Draw();; /// }; /// End_Macro",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:70,Testability,Log,Log-,70,"// lognormal_pdf uses same definition of http://en.wikipedia.org/wiki/Log-normal_distribution; // where mu = log(m)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:109,Testability,log,log,109,"// lognormal_pdf uses same definition of http://en.wikipedia.org/wiki/Log-normal_distribution; // where mu = log(m)",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:2,Availability,error,error,2,"//error case",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:199,Energy Efficiency,adapt,adapted,199,"////////////////////////////////////////////////////////////////////////////////; /// Simple recursive algorithm to find the permutations of; /// n natural numbers, not necessarily all distinct; /// adapted from CERNLIB routine PERMU.; /// The input array has to be initialised with a non descending; /// sequence. The method returns kFALSE when; /// all combinations are exhausted.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:220,Integrability,rout,routine,220,"////////////////////////////////////////////////////////////////////////////////; /// Simple recursive algorithm to find the permutations of; /// n natural numbers, not necessarily all distinct; /// adapted from CERNLIB routine PERMU.; /// The input array has to be initialised with a non descending; /// sequence. The method returns kFALSE when; /// all combinations are exhausted.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:199,Modifiability,adapt,adapted,199,"////////////////////////////////////////////////////////////////////////////////; /// Simple recursive algorithm to find the permutations of; /// n natural numbers, not necessarily all distinct; /// adapted from CERNLIB routine PERMU.; /// The input array has to be initialised with a non descending; /// sequence. The method returns kFALSE when; /// all combinations are exhausted.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:86,Usability,Simpl,Simple,86,"////////////////////////////////////////////////////////////////////////////////; /// Simple recursive algorithm to find the permutations of; /// n natural numbers, not necessarily all distinct; /// adapted from CERNLIB routine PERMU.; /// The input array has to be initialised with a non descending; /// sequence. The method returns kFALSE when; /// all combinations are exhausted.",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:62,Availability,down,downward,62,"// order the rest, in fact just invert, as there; // are only downward transitions from here on",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:273,Modifiability,variab,variable,273,"////////////////////////////////////////////////////////////////////////////////; /// Computes density function for Student's t- distribution; /// (the probability function (integral of density) is computed in StudentI).; ///; /// First parameter stands for x - the actual variable of the; /// density function p(x) and the point at which the density is calculated.; /// Second parameter stands for number of degrees of freedom.; ///; /// About Student distribution:; /// Student's t-distribution is used for many significance tests, for example,; /// for the Student's t-tests for the statistical significance of difference; /// between two sample means and for confidence intervals for the difference; /// between two population means.; ///; /// Example: suppose we have a random sample of size n drawn from normal; /// distribution with mean Mu and st.deviation Sigma. Then the variable; ///; /// t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); ///; /// has Student's t-distribution with n-1 degrees of freedom.; ///; /// NOTE that this function's second argument is number of degrees of freedom,; /// not the sample size.; ///; /// As the number of degrees of freedom grows, t-distribution approaches; /// Normal(0,1) distribution.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:881,Modifiability,variab,variable,881,"////////////////////////////////////////////////////////////////////////////////; /// Computes density function for Student's t- distribution; /// (the probability function (integral of density) is computed in StudentI).; ///; /// First parameter stands for x - the actual variable of the; /// density function p(x) and the point at which the density is calculated.; /// Second parameter stands for number of degrees of freedom.; ///; /// About Student distribution:; /// Student's t-distribution is used for many significance tests, for example,; /// for the Student's t-tests for the statistical significance of difference; /// between two sample means and for confidence intervals for the difference; /// between two population means.; ///; /// Example: suppose we have a random sample of size n drawn from normal; /// distribution with mean Mu and st.deviation Sigma. Then the variable; ///; /// t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); ///; /// has Student's t-distribution with n-1 degrees of freedom.; ///; /// NOTE that this function's second argument is number of degrees of freedom,; /// not the sample size.; ///; /// As the number of degrees of freedom grows, t-distribution approaches; /// Normal(0,1) distribution.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:527,Testability,test,tests,527,"////////////////////////////////////////////////////////////////////////////////; /// Computes density function for Student's t- distribution; /// (the probability function (integral of density) is computed in StudentI).; ///; /// First parameter stands for x - the actual variable of the; /// density function p(x) and the point at which the density is calculated.; /// Second parameter stands for number of degrees of freedom.; ///; /// About Student distribution:; /// Student's t-distribution is used for many significance tests, for example,; /// for the Student's t-tests for the statistical significance of difference; /// between two sample means and for confidence intervals for the difference; /// between two population means.; ///; /// Example: suppose we have a random sample of size n drawn from normal; /// distribution with mean Mu and st.deviation Sigma. Then the variable; ///; /// t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); ///; /// has Student's t-distribution with n-1 degrees of freedom.; ///; /// NOTE that this function's second argument is number of degrees of freedom,; /// not the sample size.; ///; /// As the number of degrees of freedom grows, t-distribution approaches; /// Normal(0,1) distribution.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx:572,Testability,test,tests,572,"////////////////////////////////////////////////////////////////////////////////; /// Computes density function for Student's t- distribution; /// (the probability function (integral of density) is computed in StudentI).; ///; /// First parameter stands for x - the actual variable of the; /// density function p(x) and the point at which the density is calculated.; /// Second parameter stands for number of degrees of freedom.; ///; /// About Student distribution:; /// Student's t-distribution is used for many significance tests, for example,; /// for the Student's t-tests for the statistical significance of difference; /// between two sample means and for confidence intervals for the difference; /// between two population means.; ///; /// Example: suppose we have a random sample of size n drawn from normal; /// distribution with mean Mu and st.deviation Sigma. Then the variable; ///; /// t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); ///; /// has Student's t-distribution with n-1 degrees of freedom.; ///; /// NOTE that this function's second argument is number of degrees of freedom,; /// not the sample size.; ///; /// As the number of degrees of freedom grows, t-distribution approaches; /// Normal(0,1) distribution.; ///; /// \author Anna Kreshuk",MatchSource.CODE_COMMENT,math/mathcore/src/TMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:6941,Deployability,continuous,continuous,6941,"); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions contained in TF1, TF2 or TF3 objects can also be; generated. For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; \endcode. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which contains various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. ~~~~; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 9",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:6691,Energy Efficiency,power,powerful,6691,":TRandom1 80 ns/call; - ::TRandomRanlux48 250 ns/call. The following methods are provided to generate random numbers distributed according to some basic distributions:. - Exp(Double_t tau); - Integer(UInt_t imax); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions contained in TF1, TF2 or TF3 objects can also be; generated. For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; \endcode. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which contains various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. ~~~~; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau..",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:6850,Energy Efficiency,power,powerful,6850,"); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions contained in TF1, TF2 or TF3 objects can also be; generated. For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; \endcode. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which contains various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. ~~~~; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 9",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:575,Integrability,interface,interface,575,"// @(#)root/mathcore:$Id$; // Author: Rene Brun, Lorenzo Moneta 15/12/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**. \class TRandom. @ingroup Random. This is the base class for the ROOT Random number generators.; This class defines the ROOT Random number interface and it should not be instantiated directly but used via its derived; classes. The generator provided in TRandom itself is a LCG (Linear Congruential Generator), the <a; href=""https://www.gnu.org/software/gsl/manual/html_node/Unix-random-number-generators.html"">BSD `rand` generator</a>,; that it should not be used because its period is only 2**31, i.e. approximately 2 billion events, that can be generated; in just few seconds. To generate random numbers, one should use one of the derived classes, which are:; - TRandom3: it is based on the ""Mersenne Twister generator"",; it is fast and a very long period of about \f$10^{6000}\f$. However it fails some of the most stringent tests of the; <a href=""http://simul.iro.umontreal.ca/testu01/tu01.html"">TestU01 suite</a>.; In addition this generator provide only numbers with 32 random bits, which might be not sufficient for some application; based on double or extended precision. This generator is however used in ROOT used to instantiate the global pointer to; the ROOT generator, *gRandom*.; - ::TRandomRanluxpp : New implementation of the Ranlux generator algorithm based on a fast modular multiplication of; 576 bits. This new implementation is built on the idea and the original code of Alexei Sibidanov, described in his; <a href=""https://arxiv.org/abs/1705.03123"">paper </a>. It generates random numbers with 52 bit precision (double; precision) and it has a",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:1496,Modifiability,extend,extended,1496,"*. \class TRandom. @ingroup Random. This is the base class for the ROOT Random number generators.; This class defines the ROOT Random number interface and it should not be instantiated directly but used via its derived; classes. The generator provided in TRandom itself is a LCG (Linear Congruential Generator), the <a; href=""https://www.gnu.org/software/gsl/manual/html_node/Unix-random-number-generators.html"">BSD `rand` generator</a>,; that it should not be used because its period is only 2**31, i.e. approximately 2 billion events, that can be generated; in just few seconds. To generate random numbers, one should use one of the derived classes, which are:; - TRandom3: it is based on the ""Mersenne Twister generator"",; it is fast and a very long period of about \f$10^{6000}\f$. However it fails some of the most stringent tests of the; <a href=""http://simul.iro.umontreal.ca/testu01/tu01.html"">TestU01 suite</a>.; In addition this generator provide only numbers with 32 random bits, which might be not sufficient for some application; based on double or extended precision. This generator is however used in ROOT used to instantiate the global pointer to; the ROOT generator, *gRandom*.; - ::TRandomRanluxpp : New implementation of the Ranlux generator algorithm based on a fast modular multiplication of; 576 bits. This new implementation is built on the idea and the original code of Alexei Sibidanov, described in his; <a href=""https://arxiv.org/abs/1705.03123"">paper </a>. It generates random numbers with 52 bit precision (double; precision) and it has an higher luxury level than the original Ranlux generator (`p = 2048` instead of `p=794`).; - ::TRandomMixMax: Generator based on the family of the MIXMAX matrix generators (see the; <a href=""https://mixmax.hepforge.org"">MIXMAX HEPFORGE Web page</a> and the documentation of the class; ROOT::Math::MixMaxEngine for more information), that are base on the Asanov dynamical C systems. This generator has a; state of N=240 64 bit integers",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:6863,Modifiability,flexible,flexible,6863,"); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions contained in TF1, TF2 or TF3 objects can also be; generated. For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; \endcode. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which contains various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. ~~~~; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 9",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:1264,Testability,test,tests,1264,"ng terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /**. \class TRandom. @ingroup Random. This is the base class for the ROOT Random number generators.; This class defines the ROOT Random number interface and it should not be instantiated directly but used via its derived; classes. The generator provided in TRandom itself is a LCG (Linear Congruential Generator), the <a; href=""https://www.gnu.org/software/gsl/manual/html_node/Unix-random-number-generators.html"">BSD `rand` generator</a>,; that it should not be used because its period is only 2**31, i.e. approximately 2 billion events, that can be generated; in just few seconds. To generate random numbers, one should use one of the derived classes, which are:; - TRandom3: it is based on the ""Mersenne Twister generator"",; it is fast and a very long period of about \f$10^{6000}\f$. However it fails some of the most stringent tests of the; <a href=""http://simul.iro.umontreal.ca/testu01/tu01.html"">TestU01 suite</a>.; In addition this generator provide only numbers with 32 random bits, which might be not sufficient for some application; based on double or extended precision. This generator is however used in ROOT used to instantiate the global pointer to; the ROOT generator, *gRandom*.; - ::TRandomRanluxpp : New implementation of the Ranlux generator algorithm based on a fast modular multiplication of; 576 bits. This new implementation is built on the idea and the original code of Alexei Sibidanov, described in his; <a href=""https://arxiv.org/abs/1705.03123"">paper </a>. It generates random numbers with 52 bit precision (double; precision) and it has an higher luxury level than the original Ranlux generator (`p = 2048` instead of `p=794`).; - ::TRandomMixMax: Generator based on the family of the MIXMAX matrix generators (see the; <a href=""https://mixmax.hepforge.org"">MIXMAX HEPFORGE Web page</a> and the do",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:5226,Testability,test,tests,5226,"by the standard library (<a; href=""http://www.cplusplus.com/reference/random/ranlux48/"">std::ranlux48</a>). The drawback of this generator is its; slow generation time.; - TRandom2 is based on the Tausworthe generator of L'Ecuyer, and it has the advantage; of being fast and using only 3 words (of 32 bits) for the state. The period however is not impressively long, it is; 10**26. Using the template TRandomGen class (template on the contained Engine type), it is possible to add any generator based; on the standard C++ random library (see the C++ <a href=""http://www.cplusplus.com/reference/random/"">random</a>; documentation.) or different variants of the MIXMAX generator using the ROOT::Math::MixMaxEngine. Some of the listed; generator above (e.g. TRandomMixMax256 or TRandomMT64) are convenient typedef's of generator built using the template; TRandomGen class. Please note also that this class (TRandom) implements also a very simple generator (linear congruential) with period =; \f$10^9\f$, known to have defects (the lower random bits are correlated) and it is failing the majority of the random; number generator tests. Therefore it should NOT be used in any statistical study. The following table shows some timings (in nanoseconds/call); for the random numbers obtained using a macbookpro 2.6 GHz Intel Core i7 CPU:. - TRandom 3 ns/call (but this is a very BAD Generator, not to be used); - TRandom2 5 ns/call; - TRandom3 5 ns/call; - ::TRandomMixMax 6 ns/call; - ::TRandomMixMax17 6 ns/call; - ::TRandomMT64 9 ns/call; - ::TRandomMixMax256 10 ns/call; - ::TRandomRanluxpp 14 ns/call; - ::TRandom1 80 ns/call; - ::TRandomRanlux48 250 ns/call. The following methods are provided to generate random numbers distributed according to some basic distributions:. - Exp(Double_t tau); - Integer(UInt_t imax); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random n",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:7278,Testability,test,testrandom,7278," be; generated. For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x) you can do : \code{.cpp} TF1; *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10); double r = f1->GetRandom(); \endcode or you can use the UNURAN; package. You need in this case to initialize UNURAN to the function you would like to generate. \code{.cpp} TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; \endcode. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which contains various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. ~~~~; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUN",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:5036,Usability,simpl,simple,5036,"by the standard library (<a; href=""http://www.cplusplus.com/reference/random/ranlux48/"">std::ranlux48</a>). The drawback of this generator is its; slow generation time.; - TRandom2 is based on the Tausworthe generator of L'Ecuyer, and it has the advantage; of being fast and using only 3 words (of 32 bits) for the state. The period however is not impressively long, it is; 10**26. Using the template TRandomGen class (template on the contained Engine type), it is possible to add any generator based; on the standard C++ random library (see the C++ <a href=""http://www.cplusplus.com/reference/random/"">random</a>; documentation.) or different variants of the MIXMAX generator using the ROOT::Math::MixMaxEngine. Some of the listed; generator above (e.g. TRandomMixMax256 or TRandomMT64) are convenient typedef's of generator built using the template; TRandomGen class. Please note also that this class (TRandom) implements also a very simple generator (linear congruential) with period =; \f$10^9\f$, known to have defects (the lower random bits are correlated) and it is failing the majority of the random; number generator tests. Therefore it should NOT be used in any statistical study. The following table shows some timings (in nanoseconds/call); for the random numbers obtained using a macbookpro 2.6 GHz Intel Core i7 CPU:. - TRandom 3 ns/call (but this is a very BAD Generator, not to be used); - TRandom2 5 ns/call; - TRandom3 5 ns/call; - ::TRandomMixMax 6 ns/call; - ::TRandomMixMax17 6 ns/call; - ::TRandomMT64 9 ns/call; - ::TRandomMixMax256 10 ns/call; - ::TRandomRanluxpp 14 ns/call; - ::TRandom1 80 ns/call; - ::TRandomRanlux48 250 ns/call. The following methods are provided to generate random numbers distributed according to some basic distributions:. - Exp(Double_t tau); - Integer(UInt_t imax); - Gaus(Double_t mean, Double_t sigma); - Rndm(); - Uniform(Double_t); - Landau(Double_t mean, Double_t sigma); - Poisson(Double_t mean); - Binomial(Int_t ntot, Double_t prob). Random n",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:9188,Usability,simpl,simple,9188,"5.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.000 109.000 125.000; Poisson(10)....... 138.000 1236.000 165.000 203.000; Poisson(70)....... 818.000 1195.000 835.000 844.000; Poisson(100)...... 837.000 1218.000 849.000 864.000; GausTF1........... 83.000 180.000 87.000 88.000; LandauTF1......... 80.000 180.000 83.000 86.000; GausUNURAN........ 40.000 139.000 41.000 44.000; PoissonUNURAN(10). 85.000 271.000 92.000 102.000; PoissonUNURAN(100) 62.000 256.000 69.000 78.000; ~~~~. Note that the time to generate a number from an arbitrary TF1 function; using TF1::GetRandom or using TUnuran is independent of the complexity of the function. TH1::FillRandom(TH1 *) or TH1::FillRandom(const char *tf1name); can be used to fill an histogram (1-d, 2-d, 3-d from an existing histogram; or from an existing function. Note this interesting feature when working with objects.; You can use several TRandom objects, each with their ""independent""; random sequence. For example, one can imagine; ~~~~; TRandom *eventGenerator = new TRandom();; TRandom *tracking = new TRandom();; ~~~~; `eventGenerator` can be used to generate the event kinematics.; tracking can be used to track the generated particles with random numbers; independent from eventGenerator.; This very interesting feature gives the possibility to work with simple; and very fast random number generators without worrying about; random number periodicity as it was the case with Fortran.; One can use TRandom::SetSeed to modify the seed of one generator. A TRandom object may be written to a Root file. - as part of another object; - or with its own key (example: `gRandom->Write(""Random"")` ) ;. */",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:582,Availability,avail,available,582,"////////////////////////////////////////////////////////////////////////////////; /// Samples a random number from the standard Normal (Gaussian) Distribution; /// with the given mean and sigma.; /// Uses the Acceptance-complement ratio from W. Hoermann and G. Derflinger; /// This is one of the fastest existing method for generating normal random variables.; /// It is a factor 2/3 faster than the polar (Box-Muller) method used in the previous; /// version of TRandom::Gaus. The speed is comparable to the Ziggurat method (from Marsaglia); /// implemented for example in GSL and available in the MathMore library.; ///; /// REFERENCE: - W. Hoermann and G. Derflinger (1990):; /// The ACR Method for generating normal random variables,; /// OR Spektrum 12 (1990), 181-185.; ///; /// Implementation taken from; /// UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:349,Modifiability,variab,variables,349,"////////////////////////////////////////////////////////////////////////////////; /// Samples a random number from the standard Normal (Gaussian) Distribution; /// with the given mean and sigma.; /// Uses the Acceptance-complement ratio from W. Hoermann and G. Derflinger; /// This is one of the fastest existing method for generating normal random variables.; /// It is a factor 2/3 faster than the polar (Box-Muller) method used in the previous; /// version of TRandom::Gaus. The speed is comparable to the Ziggurat method (from Marsaglia); /// implemented for example in GSL and available in the MathMore library.; ///; /// REFERENCE: - W. Hoermann and G. Derflinger (1990):; /// The ACR Method for generating normal random variables,; /// OR Spektrum 12 (1990), 181-185.; ///; /// Implementation taken from; /// UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:727,Modifiability,variab,variables,727,"////////////////////////////////////////////////////////////////////////////////; /// Samples a random number from the standard Normal (Gaussian) Distribution; /// with the given mean and sigma.; /// Uses the Acceptance-complement ratio from W. Hoermann and G. Derflinger; /// This is one of the fastest existing method for generating normal random variables.; /// It is a factor 2/3 faster than the polar (Box-Muller) method used in the previous; /// version of TRandom::Gaus. The speed is comparable to the Ziggurat method (from Marsaglia); /// implemented for example in GSL and available in the MathMore library.; ///; /// REFERENCE: - W. Hoermann and G. Derflinger (1990):; /// The ACR Method for generating normal random variables,; /// OR Spektrum 12 (1990), 181-185.; ///; /// Implementation taken from; /// UNURAN (c) 2000 W. Hoermann & J. Leydold, Institut f. Statistik, WU Wien",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:629,Availability,error,error,629,"////////////////////////////////////////////////////////////////////////////////; /// Generates a random integer N according to a Poisson law.; /// Prob(N) = exp(-mean)*mean^N/Factorial(N); ///; /// Use a different procedure according to the mean value.; /// The algorithm is the same used by CLHEP.; /// For lower value (mean < 25) use the rejection method based on; /// the exponential.; /// For higher values use a rejection method comparing with a Lorentzian; /// distribution, as suggested by several authors.; /// This routine returns now an unsigned 64 bit integer; /// For large values, larger than 1.84e+19, we print an error message; /// advising to use the Trandom::PoissonD for such large values,; /// and return the max value UINT64_MAX",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:525,Integrability,rout,routine,525,"////////////////////////////////////////////////////////////////////////////////; /// Generates a random integer N according to a Poisson law.; /// Prob(N) = exp(-mean)*mean^N/Factorial(N); ///; /// Use a different procedure according to the mean value.; /// The algorithm is the same used by CLHEP.; /// For lower value (mean < 25) use the rejection method based on; /// the exponential.; /// For higher values use a rejection method comparing with a Lorentzian; /// distribution, as suggested by several authors.; /// This routine returns now an unsigned 64 bit integer; /// For large values, larger than 1.84e+19, we print an error message; /// advising to use the Trandom::PoissonD for such large values,; /// and return the max value UINT64_MAX",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:635,Integrability,message,message,635,"////////////////////////////////////////////////////////////////////////////////; /// Generates a random integer N according to a Poisson law.; /// Prob(N) = exp(-mean)*mean^N/Factorial(N); ///; /// Use a different procedure according to the mean value.; /// The algorithm is the same used by CLHEP.; /// For lower value (mean < 25) use the rejection method based on; /// the exponential.; /// For higher values use a rejection method comparing with a Lorentzian; /// distribution, as suggested by several authors.; /// This routine returns now an unsigned 64 bit integer; /// For large values, larger than 1.84e+19, we print an error message; /// advising to use the Trandom::PoissonD for such large values,; /// and return the max value UINT64_MAX",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx:320,Integrability,depend,depends,320,"////////////////////////////////////////////////////////////////////////////////; /// Set the random generator seed. Note that default value is zero, which is; /// different than the default value used when constructing the class.; /// If the seed is zero the seed is set to a random value; /// which in case of TRandom depends on the lowest 4 bytes of TUUID; /// The UUID will be identical if SetSeed(0) is called with time smaller than 100 ns; /// Instead if a different generator implementation is used (TRandom1, 2 or 3); /// the seed is generated using a 128 bit UUID. This results in different seeds; /// and then random sequence for every SetSeed(0) call.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:153,Integrability,rout,routine,153,"////////////////////////////////////////////////////////////////////////////////; /// \brief Luxury level is set in the same way as the original FORTRAN routine.; ///; /// - level 0 (p=24): equivalent to the original RCARRY of Marsaglia; /// and Zaman, very long period, but fails many tests.; /// - level 1 (p=48): considerable improvement in quality over level 0,; /// now passes the gap test, but still fails spectral test.; /// - level 2 (p=97): passes all known tests, but theoretically still; /// defective.; /// - level 3 (p=223): DEFAULT VALUE. Any theoretically possible; /// correlations have very small chance of being observed.; /// - level 4 (p=389): highest possible luxury, all 24 bits chaotic.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:286,Testability,test,tests,286,"////////////////////////////////////////////////////////////////////////////////; /// \brief Luxury level is set in the same way as the original FORTRAN routine.; ///; /// - level 0 (p=24): equivalent to the original RCARRY of Marsaglia; /// and Zaman, very long period, but fails many tests.; /// - level 1 (p=48): considerable improvement in quality over level 0,; /// now passes the gap test, but still fails spectral test.; /// - level 2 (p=97): passes all known tests, but theoretically still; /// defective.; /// - level 3 (p=223): DEFAULT VALUE. Any theoretically possible; /// correlations have very small chance of being observed.; /// - level 4 (p=389): highest possible luxury, all 24 bits chaotic.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:390,Testability,test,test,390,"////////////////////////////////////////////////////////////////////////////////; /// \brief Luxury level is set in the same way as the original FORTRAN routine.; ///; /// - level 0 (p=24): equivalent to the original RCARRY of Marsaglia; /// and Zaman, very long period, but fails many tests.; /// - level 1 (p=48): considerable improvement in quality over level 0,; /// now passes the gap test, but still fails spectral test.; /// - level 2 (p=97): passes all known tests, but theoretically still; /// defective.; /// - level 3 (p=223): DEFAULT VALUE. Any theoretically possible; /// correlations have very small chance of being observed.; /// - level 4 (p=389): highest possible luxury, all 24 bits chaotic.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:421,Testability,test,test,421,"////////////////////////////////////////////////////////////////////////////////; /// \brief Luxury level is set in the same way as the original FORTRAN routine.; ///; /// - level 0 (p=24): equivalent to the original RCARRY of Marsaglia; /// and Zaman, very long period, but fails many tests.; /// - level 1 (p=48): considerable improvement in quality over level 0,; /// now passes the gap test, but still fails spectral test.; /// - level 2 (p=97): passes all known tests, but theoretically still; /// defective.; /// - level 3 (p=223): DEFAULT VALUE. Any theoretically possible; /// correlations have very small chance of being observed.; /// - level 4 (p=389): highest possible luxury, all 24 bits chaotic.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:467,Testability,test,tests,467,"////////////////////////////////////////////////////////////////////////////////; /// \brief Luxury level is set in the same way as the original FORTRAN routine.; ///; /// - level 0 (p=24): equivalent to the original RCARRY of Marsaglia; /// and Zaman, very long period, but fails many tests.; /// - level 1 (p=48): considerable improvement in quality over level 0,; /// now passes the gap test, but still fails spectral test.; /// - level 2 (p=97): passes all known tests, but theoretically still; /// defective.; /// - level 3 (p=223): DEFAULT VALUE. Any theoretically possible; /// correlations have very small chance of being observed.; /// - level 4 (p=389): highest possible luxury, all 24 bits chaotic.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:85,Integrability,depend,depending,85,"// every 24th number generation, several random numbers are generated; // and wasted depending upon the fLuxury level.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:85,Integrability,depend,depending,85,"// every 24th number generation, several random numbers are generated; // and wasted depending upon the fLuxury level.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx:117,Modifiability,variab,variable,117,"// number of additional random numbers that need to be 'thrown away'; // every 24 numbers is set using fLuxury level variable.",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx:465,Availability,avail,available,465,"// @(#)root/mathcore:$Id$; // Author: Rene Brun, Lorenzo Moneta 17/05/2006; /**. \class TRandom2. Random number generator class based on the maximally quidistributed combined; Tausworthe generator by L'Ecuyer. The period of the generator is 2**88 (about 10**26) and it uses only 3 words; for the state. For more information see:; P. L'Ecuyer, Mathematics of Computation, 65, 213 (1996); P. L'Ecuyer, Mathematics of Computation, 68, 225 (1999). The publications are available online at; [http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme.ps]; [http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme2.ps]. @ingroup Random. */",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx:163,Availability,mask,mask,163,"////////////////////////////////////////////////////////////////////////////////; /// TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers; /// Use a mask of 0xffffffffUL to make in work on 64 bit machines; /// Periodicity of about 10**26; /// Generate number in interval (0,1) : 0 and 1 are not included in the interval",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx:343,Security,expose,exposes,343,"////////////////////////////////////////////////////////////////////////////////; /// \brief Returns one of the seeds of the generator.; ///; /// \warning This is not the initial seed!; ///; /// The internal state of the generator is described by three `UInt_t` numbers,; /// called seed numbers, but they are not initial seeds. This function exposes; /// one of them and can't provide full description of the generator state.; ///",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom2.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom2.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:707,Testability,test,tests,707,"// @(#)root/mathcore:$Id$; // Author: Peter Malzacher 31/08/99; /**. \class TRandom3. Random number generator class based on; M. Matsumoto and T. Nishimura,; Mersenne Twister: A 623-diminsionally equidistributed; uniform pseudorandom number generator; ACM Transactions on Modeling and Computer Simulation,; Vol. 8, No. 1, January 1998, pp 3--30. For more information see the Mersenne Twister homepage; [http://www.math.keio.ac.jp/~matumoto/emt.html]. Advantage:. - large period 2**19937 -1; - relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; - a relative large internal state of 624 integers ; - generate only 32 random bits ; - not passing all the random generator tests. It fails some tests in TestU01; (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and ; fast as Mersenne and Twister is MIXMAX (TRandomMixMax). . @ingroup Random. */; //////////////////////////////////////////////////////////////////////; // Aug.99 ROOT implementation based on CLHEP by P.Malzacher; //; // the original code contains the following copyright notice:; /* This library is free software; you can redistribute it and/or */; /* modify it under the terms of the GNU Library General Public */; /* License as published by the Free Software Foundation; either */; /* version 2 of the License, or (at your option) any later */; /* version. */; /* This library is distributed in the hope that it will be useful, */; /* but WITHOUT ANY WARRANTY; without even the implied warranty of */; /* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */; /* See the GNU Library General Public License for more details. */; /* You should have received a copy of the GNU Library General */; /* Public License along with this library; if not, write to the */; /* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA */; /* 02111-1307 USA */; /* Copyright (C) 1997 Makoto Matsumoto and Takuji",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:728,Testability,test,tests,728,"// @(#)root/mathcore:$Id$; // Author: Peter Malzacher 31/08/99; /**. \class TRandom3. Random number generator class based on; M. Matsumoto and T. Nishimura,; Mersenne Twister: A 623-diminsionally equidistributed; uniform pseudorandom number generator; ACM Transactions on Modeling and Computer Simulation,; Vol. 8, No. 1, January 1998, pp 3--30. For more information see the Mersenne Twister homepage; [http://www.math.keio.ac.jp/~matumoto/emt.html]. Advantage:. - large period 2**19937 -1; - relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; - a relative large internal state of 624 integers ; - generate only 32 random bits ; - not passing all the random generator tests. It fails some tests in TestU01; (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and ; fast as Mersenne and Twister is MIXMAX (TRandomMixMax). . @ingroup Random. */; //////////////////////////////////////////////////////////////////////; // Aug.99 ROOT implementation based on CLHEP by P.Malzacher; //; // the original code contains the following copyright notice:; /* This library is free software; you can redistribute it and/or */; /* modify it under the terms of the GNU Library General Public */; /* License as published by the Free Software Foundation; either */; /* version 2 of the License, or (at your option) any later */; /* version. */; /* This library is distributed in the hope that it will be useful, */; /* but WITHOUT ANY WARRANTY; without even the implied warranty of */; /* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */; /* See the GNU Library General Public License for more details. */; /* You should have received a copy of the GNU Library General */; /* Public License along with this library; if not, write to the */; /* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA */; /* 02111-1307 USA */; /* Copyright (C) 1997 Makoto Matsumoto and Takuji",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:850,Testability,test,tests,850,"// @(#)root/mathcore:$Id$; // Author: Peter Malzacher 31/08/99; /**. \class TRandom3. Random number generator class based on; M. Matsumoto and T. Nishimura,; Mersenne Twister: A 623-diminsionally equidistributed; uniform pseudorandom number generator; ACM Transactions on Modeling and Computer Simulation,; Vol. 8, No. 1, January 1998, pp 3--30. For more information see the Mersenne Twister homepage; [http://www.math.keio.ac.jp/~matumoto/emt.html]. Advantage:. - large period 2**19937 -1; - relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; - a relative large internal state of 624 integers ; - generate only 32 random bits ; - not passing all the random generator tests. It fails some tests in TestU01; (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and ; fast as Mersenne and Twister is MIXMAX (TRandomMixMax). . @ingroup Random. */; //////////////////////////////////////////////////////////////////////; // Aug.99 ROOT implementation based on CLHEP by P.Malzacher; //; // the original code contains the following copyright notice:; /* This library is free software; you can redistribute it and/or */; /* modify it under the terms of the GNU Library General Public */; /* License as published by the Free Software Foundation; either */; /* version 2 of the License, or (at your option) any later */; /* version. */; /* This library is distributed in the hope that it will be useful, */; /* but WITHOUT ANY WARRANTY; without even the implied warranty of */; /* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. */; /* See the GNU Library General Public License for more details. */; /* You should have received a copy of the GNU Library General */; /* Public License along with this library; if not, write to the */; /* Free Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA */; /* 02111-1307 USA */; /* Copyright (C) 1997 Makoto Matsumoto and Takuji",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:5,Energy Efficiency,Power,Power,5,"// * Power(2,-32)",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:5,Energy Efficiency,Power,Power,5,"// * Power(2,-32)",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:319,Deployability,upgrade,upgraded,319,"////////////////////////////////////////////////////////////////////////////////; /// Set the random generator sequence; /// if seed is 0 (default value) a TUUID is generated and used to fill; /// the first 8 integers of the seed array.; /// In this case the seed is guaranteed to be unique in space and time.; /// Use upgraded seeding procedure to fix a known problem when seeding with values; /// with many zero in the bit pattern (like 2**28).; /// see http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx:106,Testability,test,tested,106,"// use TRandom2 (which is based on TUUId to generate the seed; // TRandom2 works fairly well and has been tested against example; // layout in https://savannah.cern.ch/bugs/?99516",MatchSource.CODE_COMMENT,math/mathcore/src/TRandom3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TRandom3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:89,Modifiability,variab,variable,89,"// clang-format off; /**; * \class TStatistic; * \ingroup MathCore; * \brief Statistical variable, defined by its mean and variance (RMS). Named, streamable, storable and mergeable.; */; // clang-format on",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:39,Security,Hash,Hash,39,"// Required since we overload TObject::Hash.",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:266,Deployability,update,updates,266,"////////////////////////////////////////////////////////////////////////////////; /// \brief Increment the entries in the object by one value-weight pair.; /// \param[in] val Value to fill the Tstatistic with; /// \param[in] w The weight of the value; ///; /// Also updates statistics in the object. For number of entries, sum of weights,; /// sum of squared weights and sum of (value*weight), one extra value is added to the; /// statistic. For the sum of squared (value*weight) pairs, the function uses formula 1.4; /// in Chan-Golub, LeVeque : Algorithms for computing the Sample Variance (1983),; /// generalized by LM for the case of weights:; /// \f[; /// \frac{w_j}{\sum_{i=0}^{j} w_i \cdot \sum_{i=0}^{j-1} w_i} \cdot; /// \left(; /// \sum_{i=0}^{j} w_i \cdot val_i -; /// \sum_{i=0}^{j} \left(w_i \cdot val_i\right); /// \right); /// \f]; ///; /// The minimum(maximum) is computed by checking that the fill value; /// is either less(greater) than the current minimum(maximum)",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:3,Deployability,update,update,3,"// update sum of weights",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:3,Deployability,update,update,3,"// update sum of (value * weight) pairs",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:3,Deployability,update,update,3,"// update minimum and maximum values",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:223,Availability,error,error,223,"////////////////////////////////////////////////////////////////////////////////; /// \brief Print the content of the object; ///; /// Prints the statistics held by the object in one line. These include the mean,; /// mean error, RMS, the total number of values, the minimum and the maximum.",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:569,Deployability,update,updated,569,"////////////////////////////////////////////////////////////////////////////////; /// \brief Merge implementation of TStatistic; /// \param[in] in Other TStatistic objects to be added to the current one; ///; /// The function merges the statistics of all objects together to form a new one.; /// Merging quantities is done via simple addition for the following class data members:; /// - number of entries fN; /// - the sum of weights fW; /// - the sum of squared weights fW2; /// - the sum of (value*weight) fM; ///; /// The sum of squared (value*weight) pairs fM2 is updated using the same formula as in; /// TStatistic::Fill() function.; ///; /// The minimum(maximum) is updated by checking that the minimum(maximum) of; /// the next TStatistic object in the queue is either less(greater) than the current minimum(maximum).",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:674,Deployability,update,updated,674,"////////////////////////////////////////////////////////////////////////////////; /// \brief Merge implementation of TStatistic; /// \param[in] in Other TStatistic objects to be added to the current one; ///; /// The function merges the statistics of all objects together to form a new one.; /// Merging quantities is done via simple addition for the following class data members:; /// - number of entries fN; /// - the sum of weights fW; /// - the sum of squared weights fW2; /// - the sum of (value*weight) fM; ///; /// The sum of squared (value*weight) pairs fM2 is updated using the same formula as in; /// TStatistic::Fill() function.; ///; /// The minimum(maximum) is updated by checking that the minimum(maximum) of; /// the next TStatistic object in the queue is either less(greater) than the current minimum(maximum).",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:762,Performance,queue,queue,762,"////////////////////////////////////////////////////////////////////////////////; /// \brief Merge implementation of TStatistic; /// \param[in] in Other TStatistic objects to be added to the current one; ///; /// The function merges the statistics of all objects together to form a new one.; /// Merging quantities is done via simple addition for the following class data members:; /// - number of entries fN; /// - the sum of weights fW; /// - the sum of squared weights fW2; /// - the sum of (value*weight) fM; ///; /// The sum of squared (value*weight) pairs fM2 is updated using the same formula as in; /// TStatistic::Fill() function.; ///; /// The minimum(maximum) is updated by checking that the minimum(maximum) of; /// the next TStatistic object in the queue is either less(greater) than the current minimum(maximum).",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:327,Usability,simpl,simple,327,"////////////////////////////////////////////////////////////////////////////////; /// \brief Merge implementation of TStatistic; /// \param[in] in Other TStatistic objects to be added to the current one; ///; /// The function merges the statistics of all objects together to form a new one.; /// Merging quantities is done via simple addition for the following class data members:; /// - number of entries fN; /// - the sum of weights fW; /// - the sum of squared weights fW2; /// - the sum of (value*weight) fM; ///; /// The sum of squared (value*weight) pairs fM2 is updated using the same formula as in; /// TStatistic::Fill() function.; ///; /// The minimum(maximum) is updated by checking that the minimum(maximum) of; /// the next TStatistic object in the queue is either less(greater) than the current minimum(maximum).",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:67,Deployability,update,update,67,"// Merge the statistic quantities into local variables to then; // update the data members of this object",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:45,Modifiability,variab,variables,45,"// Merge the statistic quantities into local variables to then; // update the data members of this object",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx:7,Deployability,update,update,7,"// Now update the data members of this object",MatchSource.CODE_COMMENT,math/mathcore/src/TStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/TStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDT.h:209,Modifiability,layers,layers,209,"/** @defgroup API Public API; * Contains API for constrained and conforming Delaunay triangulations; */; /// @{; /**; * Type used for storing layer depths for triangles; * @note LayerDepth should support 60K+ layers, which could be to much or; * too little for some use cases. Feel free to re-define this typedef.; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDT.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDT.h:256,Energy Efficiency,allocate,allocate,256,/** @defgroup helpers Helpers; * Helpers for working with CDT::Triangulation.; */; /// @{; /**; * Calculate triangles adjacent to vertices (triangles by vertex index); * @param triangles triangulation; * @param verticesSize total number of vertices to pre-allocate the output; * @return triangles by vertex index; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDT.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDT.h:228,Security,hash,hash,228,"// namespace CDT; //*****************************************************************************; // Implementations of template functionlity; //*****************************************************************************; // hash for CDT::V2d<T>",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDT.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:5,Availability,Error,Error,5,"///< Error: couldn't parse standard",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:73,Modifiability,config,configured,73,"// Functions defined outside the class need to be 'inline'; // if CDT is configured to be used as header-only library:; // single-definition rule is violated otherwise",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:107,Availability,error,errors,107,/**; * Macro for inlining non-template functions when in header-only mode to; * avoid multiple declaration errors.; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:80,Safety,avoid,avoid,80,/**; * Macro for inlining non-template functions when in header-only mode to; * avoid multiple declaration errors.; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:88,Security,hash,hash,88,"/// Edge connecting two vertices: vertex with smaller index is always first; /// \note: hash Edge is specialized at the bottom",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:5,Security,Hash,Hash,5,"///< Hash table of edges",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:5,Security,Hash,Hash,5,"///< Hash table of triangles",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:14,Security,hash,hash,14,///< Triangle hash map; /// Triangulation triangle (counter-clockwise winding); /*; * v3; * /\; * n3/ \n2; * /____\; * v1 n1 v2; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:125,Availability,avail,available,125,///< triangle's three neighbors; /**; * Factory method; * @note needed for c++03 compatibility (no uniform initialization; * available); */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:36,Availability,robust,robust,36,"/// Orient p against line v1-v2 2D: robust geometric predicate",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Testability,Test,Test,4,"/// Test if point lies in a circumscribed circle of a triangle",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Testability,Test,Test,4,"/// Test if two vertices share at least one common triangle",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:95,Security,hash,hash,95,"//*****************************************************************************; // Specialize hash functions; //*****************************************************************************",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:17,Security,hash,hasher,17,"/// Vertex index hasher",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Security,Hash,Hash,4,"/// Hash operator",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:19,Security,hash,hasher,19,"/// Triangle index hasher",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Security,Hash,Hash,4,"/// Hash operator",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:35,Security,hash,hasher,35,"// CDT_USE_STRONG_TYPING; /// Edge hasher",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h:4,Security,Hash,Hash,4,"/// Hash operator",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/CDTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/CDTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Usability,Simpl,Simple,4,"/// Simple tree structure with alternating half splitting nodes; /// @details Simple tree structure; /// - Tree to incrementally add points to the structure.; /// - Get the nearest point to a given input.; /// - Does not check for duplicates, expect unique points.; /// @tparam TCoordType type used for storing point coordinate.; /// @tparam NumVerticesInLeaf The number of points per leaf.; /// @tparam InitialStackDepth initial size of stack depth for nearest query.; /// Should be at least 1.; /// @tparam StackDepthIncrement increment of stack depth for nearest query when; /// stack depth is reached.",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:78,Usability,Simpl,Simple,78,"/// Simple tree structure with alternating half splitting nodes; /// @details Simple tree structure; /// - Tree to incrementally add points to the structure.; /// - Get the nearest point to a given input.; /// - Does not check for duplicates, expect unique points.; /// @tparam TCoordType type used for storing point coordinate.; /// @tparam NumVerticesInLeaf The number of points per leaf.; /// @tparam InitialStackDepth initial size of stack depth for nearest query.; /// Should be at least 1.; /// @tparam StackDepthIncrement increment of stack depth for nearest query when; /// stack depth is reached.",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:76,Energy Efficiency,reduce,reduce,76,"/// Insert a point into kd-tree; /// @note external point-buffer is used to reduce kd-tree's memory footprint; /// @param iPoint index of point in external point-buffer; /// @param points external point-buffer",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:29,Modifiability,extend,extend,29,"// if point is outside root, extend tree by adding new roots",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:91,Energy Efficiency,reduce,reduce,91,"/// Query kd-tree for a nearest neighbor point; /// @note external point-buffer is used to reduce kd-tree's memory footprint; /// @param point query point position; /// @param points external point-buffer",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Testability,Test,Test,4,"/// Test which child point belongs to after the split; /// @returns 0 if first child, 1 if second child",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Testability,Test,Test,4,"/// Test if point is inside a box",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:4,Modifiability,Extend,Extend,4,"/// Extend a tree by creating new root with old root and a new node as; /// children",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:108,Modifiability,extend,extended,108,"// Make sure bounding box does not have a zero size by adding padding:; // zero-size bounding box cannot be extended properly",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:3,Energy Efficiency,allocate,allocated,3,"// allocated in class (not in the 'nearest' method) for better performance",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h:63,Performance,perform,performance,63,"// allocated in class (not in the 'nearest' method) for better performance",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/KDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/KDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/LocatorKDTree.h:223,Energy Efficiency,Adapt,Adapter,223,"/* This Source Code Form is subject to the terms of the Mozilla Public; * License, v. 2.0. If a copy of the MPL was not distributed with this; * file, You can obtain one at https://mozilla.org/MPL/2.0/. */; /**; * @file; * Adapter between for KDTree and CDT; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/LocatorKDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/LocatorKDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/LocatorKDTree.h:223,Integrability,Adapter,Adapter,223,"/* This Source Code Form is subject to the terms of the Mozilla Public; * License, v. 2.0. If a copy of the MPL was not distributed with this; * file, You can obtain one at https://mozilla.org/MPL/2.0/. */; /**; * @file; * Adapter between for KDTree and CDT; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/LocatorKDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/LocatorKDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/LocatorKDTree.h:223,Modifiability,Adapt,Adapter,223,"/* This Source Code Form is subject to the terms of the Mozilla Public; * License, v. 2.0. If a copy of the MPL was not distributed with this; * file, You can obtain one at https://mozilla.org/MPL/2.0/. */; /**; * @file; * Adapter between for KDTree and CDT; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/LocatorKDTree.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/LocatorKDTree.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:1521,Integrability,CONTRACT,CONTRACT,1521,"/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *; * *; * Copyright (c) 2019, William C. Lenthe *; * All rights reserved. *; * *; * Redistribution and use in source and binary forms, with or without *; * modification, are permitted provided that the following conditions are met: *; * *; * 1. Redistributions of source code must retain the above copyright notice, this *; * list of conditions and the following disclaimer. *; * *; * 2. Redistributions in binary form must reproduce the above copyright notice, *; * this list of conditions and the following disclaimer in the documentation *; * and/or other materials provided with the distribution. *; * *; * 3. Neither the name of the copyright holder nor the names of its *; * contributors may be used to endorse or promote products derived from *; * this software without specific prior written permission. *; * *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" *; * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE *; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE *; * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE *; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL *; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR *; * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER *; * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, *; * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE *; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *; * *; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:139,Energy Efficiency,adapt,adaptive,139,"//@brief: geometric predicates using arbitrary precision arithmetic ; //@note : these are provided primarily for illustrative purposes and adaptive routines should be preferred",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:148,Integrability,rout,routines,148,"//@brief: geometric predicates using arbitrary precision arithmetic ; //@note : these are provided primarily for illustrative purposes and adaptive routines should be preferred",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:139,Modifiability,adapt,adaptive,139,"//@brief: geometric predicates using arbitrary precision arithmetic ; //@note : these are provided primarily for illustrative purposes and adaptive routines should be preferred",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:2,Security,access,access,2,"//access for base class",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:2,Security,access,access,2,"//access for expansions of different size",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:28,Availability,error,error,28,"//combine result + roundoff error into expansion",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:11,Availability,error,error,11,"//roundoff error of x = a + b",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:11,Availability,error,error,11,"//roundoff error of x = a + b if |a| > |b|",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:11,Availability,error,error,11,"//roundoff error of x = a - b",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:11,Availability,error,error,11,"//roundoff error of x = a * b via dekkers product",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:11,Availability,error,error,11,"//roundoff error of x = a * b",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h:35,Safety,avoid,avoid,35,"//TwoTwoDiff checking for zeros to avoid extra splitting",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/predicates.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/predicates.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:33,Performance,optimiz,optimized,33,"/**; * Automatic insertion order optimized for better performance; * @details breadth-first traversal of a Kd-tree for initial bulk-load,; * randomized for subsequent insertions; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:54,Performance,perform,performance,54,"/**; * Automatic insertion order optimized for better performance; * @details breadth-first traversal of a Kd-tree for initial bulk-load,; * randomized for subsequent insertions; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:132,Performance,load,load,132,"/**; * Automatic insertion order optimized for better performance; * @details breadth-first traversal of a Kd-tree for initial bulk-load,; * randomized for subsequent insertions; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:98,Safety,safe,safe,98,///< attempt to resolve constraint edge intersections; /**; * No checks: slightly faster but less safe.; * User must provide a valid input without intersecting constraints.; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:96,Modifiability,layers,layers,96,"/**; * Type used for storing layer depths for triangles; * @note LayerDepth should support 60K+ layers, which could be to much or; * too little for some use cases. Feel free to re-define this typedef.; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:22,Availability,error,errors,22,"/**; * Base class for errors. Contains error description and source location: file,; * function, line; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:39,Availability,error,error,39,"/**; * Base class for errors. Contains error description and source location: file,; * function, line; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:8,Availability,error,error,8,"/// Get error description",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:39,Availability,error,error,39,"/// Get source location from where the error was thrown",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:7,Availability,Error,Error,7,/**; * Error thrown when triangulation modification is attempted after it was; * finalized; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:7,Availability,Error,Error,7,/**; * Error thrown when duplicate vertex is detected during vertex insertion; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:45,Safety,detect,detected,45,/**; * Error thrown when duplicate vertex is detected during vertex insertion; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:7,Availability,Error,Error,7,"/**; * Error thrown when intersecting constraint edges are detected, but; * triangulation is not configured to attempt to resolve them; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:97,Modifiability,config,configured,97,"/**; * Error thrown when intersecting constraint edges are detected, but; * triangulation is not configured to attempt to resolve them; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:59,Safety,detect,detected,59,"/**; * Error thrown when intersecting constraint edges are detected, but; * triangulation is not configured to attempt to resolve them; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:309,Energy Efficiency,efficient,efficiently,309,"/**; * @defgroup Triangulation Triangulation Class; * Class performing triangulations.; */; /// @{; /**; * Data structure representing a 2D constrained Delaunay triangulation; *; * @tparam T type of vertex coordinates (e.g., float, double); * @tparam TNearPointLocator class providing locating near point for efficiently; * inserting new points. Provides methods: 'addPoint(vPos, iV)' and; * 'nearPoint(vPos) -> iV'; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:60,Performance,perform,performing,60,"/**; * @defgroup Triangulation Triangulation Class; * Class performing triangulations.; */; /// @{; /**; * Data structure representing a 2D constrained Delaunay triangulation; *; * @tparam T type of vertex coordinates (e.g., float, double); * @tparam TNearPointLocator class providing locating near point for efficiently; * inserting new points. Provides methods: 'addPoint(vPos, iV)' and; * 'nearPoint(vPos) -> iV'; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:159,Energy Efficiency,efficient,efficiently,159,/**; * Constructor; * @param vertexInsertionOrder strategy used for ordering vertex insertions; * @param nearPtLocator class providing locating near point for efficiently; * inserting new points; * @param intersectingEdgesStrategy strategy for treating intersecting; * constraint edges; * @param minDistToConstraintEdge distance within which point is considered; * to be lying on a constraint edge. Used when adding constraints to the; * triangulation.; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:400,Safety,detect,detection,400,"/**; * Insert constraints (custom-type fixed edges) into triangulation; * @note Each fixed edge is inserted by deleting the triangles it crosses,; * followed by the triangulation of the polygons on each side of the edge.; * <b> No new vertices are inserted.</b>; * @note If some edge appears more than once in the input this means that; * multiple boundaries overlap at the edge and impacts how hole detection; * algorithm of Triangulation::eraseOuterTrianglesAndHoles works.; * <b>Make sure there are no erroneous duplicates.</b>; * @tparam TEdgeIter iterator that dereferences to custom edge type; * @tparam TGetEdgeVertexStart function object getting start vertex index; * from an edge.; * Getter signature: const TEdgeIter::value_type& -> CDT::VertInd; * @tparam TGetEdgeVertexEnd function object getting end vertex index from; * an edge. Getter signature: const TEdgeIter::value_type& -> CDT::VertInd; * @param first beginning of the range of edges to add; * @param last end of the range of edges to add; * @param getStart getter of edge start vertex index; * @param getEnd getter of edge end vertex index; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:379,Safety,detect,detection,379,"/**; * Insert constraint edges into triangulation; * @note Each fixed edge is inserted by deleting the triangles it crosses,; * followed by the triangulation of the polygons on each side of the edge.; * <b> No new vertices are inserted.</b>; * @note If some edge appears more than once in the input this means that; * multiple boundaries overlap at the edge and impacts how hole detection; * algorithm of Triangulation::eraseOuterTrianglesAndHoles works.; * <b>Make sure there are no erroneous duplicates.</b>; * @tparam edges constraint edges; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:422,Safety,detect,detection,422,/**; * Ensure that triangulation conforms to constraints (fixed edges); * @note For each fixed edge that is not present in the triangulation its; * midpoint is recursively added until the original edge is represented by a; * sequence of its pieces. <b> New vertices are inserted.</b>; * @note If some edge appears more than once the input this; * means that multiple boundaries overlap at the edge and impacts how hole; * detection algorithm of Triangulation::eraseOuterTrianglesAndHoles works.; * <b>Make sure there are no erroneous duplicates.</b>; * @tparam TEdgeIter iterator that dereferences to custom edge type; * @tparam TGetEdgeVertexStart function object getting start vertex index; * from an edge.; * Getter signature: const TEdgeIter::value_type& -> CDT::VertInd; * @tparam TGetEdgeVertexEnd function object getting end vertex index from; * an edge. Getter signature: const TEdgeIter::value_type& -> CDT::VertInd; * @param first beginning of the range of edges to add; * @param last end of the range of edges to add; * @param getStart getter of edge start vertex index; * @param getEnd getter of edge end vertex index; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:422,Safety,detect,detection,422,/**; * Ensure that triangulation conforms to constraints (fixed edges); * @note For each fixed edge that is not present in the triangulation its; * midpoint is recursively added until the original edge is represented by a; * sequence of its pieces. <b> New vertices are inserted.</b>; * @note If some edge appears more than once the input this; * means that multiple boundaries overlap at the edge and impacts how hole; * detection algorithm of Triangulation::eraseOuterTrianglesAndHoles works.; * <b>Make sure there are no erroneous duplicates.</b>; * @tparam edges edges to conform to; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:64,Safety,detect,detected,64,/**; * Erase triangles outside of constrained boundary and auto-detected holes; *; * @note detecting holes relies on layer peeling based on layer depth; * @note supports overlapping or touching boundaries; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:91,Safety,detect,detecting,91,/**; * Erase triangles outside of constrained boundary and auto-detected holes; *; * @note detecting holes relies on layer peeling based on layer depth; * @note supports overlapping or touching boundaries; */,MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:111,Performance,Perform,Perform,111,"/**; * Calculate depth of each triangle in constraint triangulation. Supports; * overlapping boundaries.; *; * Perform depth peeling from super triangle to outermost boundary,; * then to next boundary and so on until all triangles are traversed.@n; * For example depth is:; * - 0 for triangles outside outermost boundary; * - 1 for triangles inside boundary but outside hole; * - 2 for triangles in hole; * - 3 for triangles in island and so on...; * @return vector where element at index i stores depth of i-th triangle; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:4,Security,Access,Access,4,"/// Access internal vertex adjacent triangles",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:4,Security,Access,Access,4,"/// Access internal vertex adjacent triangles",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:442,Performance,perform,performance,442,"/**; * Insert an edge into constraint Delaunay triangulation; * @param edge edge to insert; * @param originalEdge original edge inserted edge is part of; * @param[in,out] remaining parts of the edge that still need to; * be inserted; * @param[in,out] tppIterations stack to be used for storing iterations of; * triangulating pseudo-polygon; * @note in-out state (@param remaining @param tppIterations) is shared; * between different runs for performance gains (reducing memory; * allocations); */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:459,Performance,perform,performance,459,"/**; * Insert an edge or its part into constraint Delaunay triangulation; * @param edge edge to insert; * @param originalEdge original edge inserted edge is part of; * @param[in,out] remainingStack parts of the edge that still need to; * be inserted; * @param[in,out] tppIterations stack to be used for storing iterations of; * triangulating pseudo-polygon; * @note in-out state (@param remaining @param tppIterations) is shared; * between different runs for performance gains (reducing memory; * allocations); */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:527,Performance,perform,performance,527,"/**; * Conform Delaunay triangulation to a fixed edge by recursively inserting; * mid point of the edge and then conforming to its halves; * @param edge fixed edge to conform to; * @param originals original edges that new edge is piece of; * @param overlaps count of overlapping boundaries at the edge. Only used; * when re-introducing edge with overlaps > 0; * @param[in,out] remaining remaining edge parts to be conformed to; * @note in-out state (@param remaining @param reintroduce) is shared; * between different runs for performance gains (reducing memory; * allocations); */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:413,Performance,perform,performance,413,"/**; * Iteration of conform to fixed edge.; * @param edge fixed edge to conform to; * @param originals original edges that new edge is piece of; * @param overlaps count of overlapping boundaries at the edge. Only used; * when re-introducing edge with overlaps > 0; * @param[in,out] remaining remaining edge parts; * @note in-out state (@param remaining @param reintroduce) is shared; * between different runs for performance gains (reducing memory; * allocations); */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:564,Modifiability,layers,layers,564,"/**; * Depth-peel a layer in triangulation, used when calculating triangle; * depths; *; * It takes starting seed triangles, traverses neighboring triangles, and; * assigns given layer depth to the traversed triangles. Traversal is; * blocked by constraint edges. Triangles behind constraint edges are; * recorded as seeds of next layer and returned from the function.; *; * @param seeds indices of seed triangles; * @param layerDepth current layer's depth to mark triangles with; * @param[in, out] triDepths depths of triangles; * @return triangles of the deeper layers that are adjacent to the peeled; * layer. To be used as seeds when peeling deeper layers.; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:653,Modifiability,layers,layers,653,"/**; * Depth-peel a layer in triangulation, used when calculating triangle; * depths; *; * It takes starting seed triangles, traverses neighboring triangles, and; * assigns given layer depth to the traversed triangles. Traversal is; * blocked by constraint edges. Triangles behind constraint edges are; * recorded as seeds of next layer and returned from the function.; *; * @param seeds indices of seed triangles; * @param layerDepth current layer's depth to mark triangles with; * @param[in, out] triDepths depths of triangles; * @return triangles of the deeper layers that are adjacent to the peeled; * layer. To be used as seeds when peeling deeper layers.; */",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:4,Performance,Perform,Perform,4,"/// Perform lazy initialization of nearest-point locator after the Kd-tree; /// BFS bulk load if necessary",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:89,Performance,load,load,89,"/// Perform lazy initialization of nearest-point locator after the Kd-tree; /// BFS bulk load if necessary",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:28,Energy Efficiency,allocate,allocate,28,"// optimization, try to pre-allocate tris",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:3,Performance,optimiz,optimization,3,"// optimization, try to pre-allocate tris",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h:43,Performance,perform,performance,43,"// state shared between different runs for performance gains",MatchSource.CODE_COMMENT,math/mathcore/src/CDT/Triangulation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/CDT/Triangulation.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h:32,Safety,avoid,avoid,32,"// Do NOT branch on overflow to avoid jumping code, just add 0 if there was; // no overflow.",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/helpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h:32,Safety,avoid,avoid,32,"// Do NOT branch on overflow to avoid jumping code, just add 0 if there was; // no overflow.",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/helpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h:4,Deployability,Update,Update,4,"/// Update r = r - (t1 + t2) + (t3 + t2) * b ** 10; ///; /// This function also yields cbar = floor(r / m) as its return value (int64_t; /// because the value can be -1). With an initial value of r = t0, this can; /// be used for computing the remainder after division by m (see the function; /// mod_m in mulmod.h). The function to_ranlux passes r = 0 and uses only the; /// return value to obtain the decimal expansion after division by m.",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/helpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h:42,Modifiability,extend,extend,42,"// Subtract t2 (only 240 bits, so need to extend)",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/helpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/helpers.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:141,Performance,optimiz,optimize,141,"// Handling the overflow by a multiplication with 0 or 1 is cheaper; // than branching with an if statement, which the compiler does not; // optimize to this equivalent code. Note that we could do entirely; // without this overflow handling when summing up the intermediate; // products differently as described in the following SO answer:; // https://stackoverflow.com/a/51587262; // However, this approach takes at least the same amount of thinking; // why a) the code gives the same results without b) overflowing due; // to the mixture of 32 bit arithmetic. Moreover, my tests show that; // the scheme implemented here is actually slightly more performant.",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:649,Performance,perform,performant,649,"// Handling the overflow by a multiplication with 0 or 1 is cheaper; // than branching with an if statement, which the compiler does not; // optimize to this equivalent code. Note that we could do entirely; // without this overflow handling when summing up the intermediate; // products differently as described in the following SO answer:; // https://stackoverflow.com/a/51587262; // However, this approach takes at least the same amount of thinking; // why a) the code gives the same results without b) overflowing due; // to the mixture of 32 bit arithmetic. Moreover, my tests show that; // the scheme implemented here is actually slightly more performant.",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:575,Testability,test,tests,575,"// Handling the overflow by a multiplication with 0 or 1 is cheaper; // than branching with an if statement, which the compiler does not; // optimize to this equivalent code. Note that we could do entirely; // without this overflow handling when summing up the intermediate; // products differently as described in the following SO answer:; // https://stackoverflow.com/a/51587262; // However, this approach takes at least the same amount of thinking; // why a) the code gives the same results without b) overflowing due; // to the mixture of 32 bit arithmetic. Moreover, my tests show that; // the scheme implemented here is actually slightly more performant.",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:6,Deployability,update,update,6,"// To update r = r - c * m, it suffices to know c * (-2 ** 240 + 1); // because the 2 ** 576 will cancel out. Also note that c may be zero, but; // the operation is still performed to avoid branching.; // c * (-2 ** 240 + 1) in 576 bits looks as follows, depending on c:; // - if c = 0, the number is zero.; // - if c = 1: bits 576 to 240 are set,; // bits 239 to 1 are zero, and; // the last one is set; // - if c = -1, which corresponds to all bits set (signed int64_t):; // bits 576 to 240 are zero and the rest is set.; // Note that all bits except the last are exactly complimentary (unless c = 0); // and the last byte is conveniently represented by c already.; // Now construct the three bit patterns from c, their names correspond to the; // assembly implementation by Alexei Sibidanov.; // c = 0 -> t0 = 0; c = 1 -> t0 = 0; c = -1 -> all bits set (sign extension); // (The assembly implementation shifts by 63, which gives the same result.)",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:255,Integrability,depend,depending,255,"// To update r = r - c * m, it suffices to know c * (-2 ** 240 + 1); // because the 2 ** 576 will cancel out. Also note that c may be zero, but; // the operation is still performed to avoid branching.; // c * (-2 ** 240 + 1) in 576 bits looks as follows, depending on c:; // - if c = 0, the number is zero.; // - if c = 1: bits 576 to 240 are set,; // bits 239 to 1 are zero, and; // the last one is set; // - if c = -1, which corresponds to all bits set (signed int64_t):; // bits 576 to 240 are zero and the rest is set.; // Note that all bits except the last are exactly complimentary (unless c = 0); // and the last byte is conveniently represented by c already.; // Now construct the three bit patterns from c, their names correspond to the; // assembly implementation by Alexei Sibidanov.; // c = 0 -> t0 = 0; c = 1 -> t0 = 0; c = -1 -> all bits set (sign extension); // (The assembly implementation shifts by 63, which gives the same result.)",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:171,Performance,perform,performed,171,"// To update r = r - c * m, it suffices to know c * (-2 ** 240 + 1); // because the 2 ** 576 will cancel out. Also note that c may be zero, but; // the operation is still performed to avoid branching.; // c * (-2 ** 240 + 1) in 576 bits looks as follows, depending on c:; // - if c = 0, the number is zero.; // - if c = 1: bits 576 to 240 are set,; // bits 239 to 1 are zero, and; // the last one is set; // - if c = -1, which corresponds to all bits set (signed int64_t):; // bits 576 to 240 are zero and the rest is set.; // Note that all bits except the last are exactly complimentary (unless c = 0); // and the last byte is conveniently represented by c already.; // Now construct the three bit patterns from c, their names correspond to the; // assembly implementation by Alexei Sibidanov.; // c = 0 -> t0 = 0; c = 1 -> t0 = 0; c = -1 -> all bits set (sign extension); // (The assembly implementation shifts by 63, which gives the same result.)",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h:184,Safety,avoid,avoid,184,"// To update r = r - c * m, it suffices to know c * (-2 ** 240 + 1); // because the 2 ** 576 will cancel out. Also note that c may be zero, but; // the operation is still performed to avoid branching.; // c * (-2 ** 240 + 1) in 576 bits looks as follows, depending on c:; // - if c = 0, the number is zero.; // - if c = 1: bits 576 to 240 are set,; // bits 239 to 1 are zero, and; // the last one is set; // - if c = -1, which corresponds to all bits set (signed int64_t):; // bits 576 to 240 are zero and the rest is set.; // Note that all bits except the last are exactly complimentary (unless c = 0); // and the last byte is conveniently represented by c already.; // Now construct the three bit patterns from c, their names correspond to the; // assembly implementation by Alexei Sibidanov.; // c = 0 -> t0 = 0; c = 1 -> t0 = 0; c = -1 -> all bits set (sign extension); // (The assembly implementation shifts by 63, which gives the same result.)",MatchSource.CODE_COMMENT,math/mathcore/src/ranluxpp/mulmod.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/src/ranluxpp/mulmod.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:72,Testability,test,tests,72,"/// \file CladDerivatorTests.cxx; ///; /// \brief The file contain unit tests which test the CladDerivator facility.; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date July, 2018; ///; /*************************************************************************; * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:84,Testability,test,test,84,"/// \file CladDerivatorTests.cxx; ///; /// \brief The file contain unit tests which test the CladDerivator facility.; ///; /// \author Vassil Vassilev <vvasilev@cern.ch>; ///; /// \date July, 2018; ///; /*************************************************************************; * Copyright (C) 1995-2018, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:98,Energy Efficiency,Power,Power,98,"R""cpp(; #include <Math/CladDerivator.h>; #include ""TMath.h""; double cube(double x){ return TMath::Power(x,3);})cpp""",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:99,Energy Efficiency,Power,Power,99,"R""cpp(; #include <Math/CladDerivator.h>; #include ""TMath.h""; double cube2(double x){ return TMath::Power(x,3);})cpp""",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:95,Testability,Log,Log,95,"R""cpp(; #include <Math/CladDerivator.h>; #include ""TMath.h""; double l(double x){ return TMath::Log(2*x);})cpp""",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:96,Testability,Log,Log,96,"R""cpp(; #include <Math/CladDerivator.h>; #include ""TMath.h""; double l2(double x){ return TMath::Log(2*x);})cpp""",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:109,Energy Efficiency,Power,Power,109,"R""cpp(; #include <Math/CladDerivator.h>; #include ""TMath.h""; double powneg(double x,double y){ return TMath::Power(x,y);})cpp""",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx:110,Energy Efficiency,Power,Power,110,"R""cpp(; #include <Math/CladDerivator.h>; #include ""TMath.h""; double powneg2(double x,double y){ return TMath::Power(x,y);})cpp""",MatchSource.CODE_COMMENT,math/mathcore/test/CladDerivatorTests.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/CladDerivatorTests.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:121,Energy Efficiency,consumption,consumption,121,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:4,Testability,Test,Test,4,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:28,Testability,Test,TestBuild,28,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:44,Testability,test,test,44,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:92,Testability,Test,TestSpeed,92,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:108,Testability,test,test,108,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:150,Testability,Test,TestkdtreeIF,150,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:169,Testability,test,test,169,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:203,Testability,Test,TestSizeIF,203,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:220,Testability,test,test,220,"/*; Test macro for TKDTree. TestBuild(); // test build function of kdTree for memory leaks; TestSpeed(); // test the CPU consumption to build kdTree; TestkdtreeIF(); // test functionality of the kdTree; TestSizeIF(); // test the size of kdtree - search application - Alice TPC tracker situation; //; */; //#include <malloc.h>",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:7,Testability,Test,TestkdtreeIF,7,"//void TestkdtreeIF(Int_t npoints=1000, Int_t bsize=9, Int_t nloop=1000, Int_t mode = 2);; //void TestSizeIF(Int_t nsec=36, Int_t nrows=159, Int_t npoints=1000, Int_t bsize=10, Int_t mode=1);",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:98,Testability,Test,TestSizeIF,98,"//void TestkdtreeIF(Int_t npoints=1000, Int_t bsize=9, Int_t nloop=1000, Int_t mode = 2);; //void TestSizeIF(Int_t nsec=36, Int_t nrows=159, Int_t npoints=1000, Int_t bsize=10, Int_t mode=1);",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:91,Testability,Test,Test,91,"////////////////////////////////////////////////////////////////////////////////; ///; /// Test kdTree for memory leaks; ///",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:106,Testability,test,test,106,"////////////////////////////////////////////////////////////////////////////////; ///This is not really a test, it's a function that illustrates the internal; ///behaviour of the kd-tree.; ///; ///Print out the internal kd-tree data-members, like fCrossNode, for; ///better understading",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:91,Testability,Test,Test,91,"////////////////////////////////////////////////////////////////////////////////; ///; /// Test of building time of kdTree; ///",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:703,Performance,perform,performed,703,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:95,Testability,Test,Test,95,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:132,Testability,Test,TestSizeIF,132,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:313,Testability,Test,TestkdtreeIF,313,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:522,Testability,Test,Test,522,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:772,Testability,Test,TestkdtreeIF,772,"/*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test size to build kdtree; ///. void TestSizeIF(Int_t nsec, Int_t nrows, Int_t npoints, Int_t bsize, Int_t mode); {; Float_t before =Mem();; for (Int_t isec=0; isec<nsec;isec++); for (Int_t irow=0;irow<nrows;irow++){; TestkdtreeIF(npoints,1,mode,bsize);; }; Float_t after = Mem();; printf(""Memory usage %f\n"",after-before);; }; */; /*; ////////////////////////////////////////////////////////////////////////////////; ///; /// Test speed and functionality of 2D kdtree.; /// Input parameters:; /// npoints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; ",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:2550,Testability,Test,Test,2550,"ints - number of data points; /// bsize - bucket size; /// nloop - number of loops; /// mode - tasks to be performed by the kdTree; /// - 0 : time building the tree; ///. void TestkdtreeIF(Int_t npoints, Int_t bsize, Int_t nloop, Int_t mode); {. Float_t rangey = 100;; Float_t rangez = 100;; Float_t drangey = 0.1;; Float_t drangez = 0.1;. //; Float_t *data0 = new Float_t[npoints*2];; Float_t *data[2];; data[0] = &data0[0];; data[1] = &data0[npoints];; //Int_t i;; for (Int_t i=0; i<npoints; i++){; data[0][i] = gRandom->Uniform(-rangey, rangey);; data[1][i] = gRandom->Uniform(-rangez, rangez);; }; TStopwatch timer;. // check time build; printf(""building kdTree ...\n"");; timer.Start(kTRUE);; TKDTreeIF *kdtree = new TKDTreeIF(npoints, 2, bsize, data);; kdtree->Build();; timer.Stop();; timer.Print();; if(mode == 0) return;. Float_t countern=0;; Float_t counteriter = 0;; Float_t counterfound = 0;. if (mode ==2){; if (nloop) timer.Start(kTRUE);; Int_t *res = new Int_t[npoints];; Int_t nfound = 0;; for (Int_t kloop = 0;kloop<nloop;kloop++){; if (kloop==0){; counteriter = 0;; counterfound= 0;; countern = 0;; }; for (Int_t i=0;i<npoints;i++){; Float_t point[2]={data[0][i],data[1][i]};; Float_t delta[2]={drangey,drangez};; Int_t iter =0;; nfound =0;; Int_t bnode =0;; //kdtree->FindBNode(point,delta, bnode);; //continue;; kdtree->FindInRangeA(point,delta,res,nfound,iter,bnode);; if (kloop==0){; //Bool_t isOK = kTRUE;; Bool_t isOK = kFALSE;; for (Int_t ipoint=0;ipoint<nfound;ipoint++); if (res[ipoint]==i) isOK =kTRUE;; counteriter+=iter;; counterfound+=nfound;; if (isOK) {; countern++;; }else{; printf(""Bug\n"");; }; }; }; }. if (nloop){; timer.Stop();; timer.Print();; }. delete [] res;; }; delete [] data0;. counteriter/=npoints;; counterfound/=npoints;; if (nloop) printf(""Find nearest point:\t%f\t%f\t%f\n"",countern, counteriter, counterfound);; }; */; ////////////////////////////////////////////////////////////////////////////////; ///Test TKDTree::FindNearestNeighbors() function",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx:2,Testability,Test,Test,2,"//Test TKDTree::FindInRange() function",MatchSource.CODE_COMMENT,math/mathcore/test/kDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/kDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx:72,Testability,test,test,72,"// @(#)root/mathcore:$Id$; // Author: C. Gumpert 09/2011; // program to test new KDTree class",MatchSource.CODE_COMMENT,math/mathcore/test/newKDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx:17,Testability,test,test,17,"// check whether test point is actually inside the bin boundaries; // is not necessarily the case if the point as the range of the bin which is NOT determined by a splitting but by the minimum coordinate of points inside the bin",MatchSource.CODE_COMMENT,math/mathcore/test/newKDTreeTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/newKDTreeTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/RanluxppEngine.cxx:428,Testability,test,test,428,"// @(#)root/mathcore:$Id$; // Author: Jonas Hahnfeld 11/2020; /*************************************************************************; * Copyright (C) 1995-2021, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; // This test uses EXPECT_EQ also for floating point numbers - the expected; // values are entered with enough digits to ensure binary equality.",MatchSource.CODE_COMMENT,math/mathcore/test/RanluxppEngine.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/RanluxppEngine.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx:3,Testability,test,test,3,"// test results",MatchSource.CODE_COMMENT,math/mathcore/test/stdsort.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx:66,Testability,test,test-stdsort,66,"// plotFile = std::string(gSystem->TempDirectory())+std::string(""/test-stdsort.pdf"");",MatchSource.CODE_COMMENT,math/mathcore/test/stdsort.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stdsort.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:12,Testability,test,tests,12,/*N.B.: The tests' expected values (expectedDn and expectedA2) were computed on Pcphsft54.cern.ch i386 GNU/Linux computer (slc4_ia32_gcc34). LM. (16/9/14) Expected values for AD2 test have been computed with R kSamples package; */,MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:179,Testability,test,test,179,/*N.B.: The tests' expected values (expectedDn and expectedA2) were computed on Pcphsft54.cern.ch i386 GNU/Linux computer (slc4_ia32_gcc34). LM. (16/9/14) Expected values for AD2 test have been computed with R kSamples package; */,MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:6,Testability,test,test,6,"// no test results printing",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:32,Testability,test,test,32,"// prints either ""OK"" or ""FAIL"" test results",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:21,Testability,test,test,21,"// prints summarized test results",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:56,Testability,test,tests,56,"// slc4rabacal compiled (CPU time taken to run complete tests)",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:85,Deployability,continuous,continuous,85,"/*; Data set adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; values of expected A2 taken by running R kSamples code; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:13,Energy Efficiency,adapt,adapted,13,"/*; Data set adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; values of expected A2 taken by running R kSamples code; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:13,Modifiability,adapt,adapted,13,"/*; Data set adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; values of expected A2 taken by running R kSamples code; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:68,Testability,Test,Tests,68,"/*; Data set adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; values of expected A2 taken by running R kSamples code; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:86,Deployability,continuous,continuous,86,"/*; Data sets adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:14,Energy Efficiency,adapt,adapted,14,"/*; Data sets adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:14,Modifiability,adapt,adapted,14,"/*; Data sets adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:69,Testability,Test,Tests,69,"/*; Data sets adapted from the paper (1); ""K-Sample Anderson-Darling Tests of Fit for continuous and discrete cases"" by Scholz and Stephens; */",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:14,Availability,toler,tolerance,14,"// use larger tolerance due to truncation error of Landau",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:42,Availability,error,error,42,"// use larger tolerance due to truncation error of Landau",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:28,Integrability,interface,interface,28,"// function to test using R interface",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx:15,Testability,test,test,15,"// function to test using R interface",MatchSource.CODE_COMMENT,math/mathcore/test/stressGoFTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressGoFTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTF1.cxx:17,Safety,avoid,avoid,17,"// add an eps to avoid failing the search",MatchSource.CODE_COMMENT,math/mathcore/test/stressTF1.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTF1.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTMath.cxx:36,Modifiability,variab,variables,36,"// to avoid the warning for un-used variables",MatchSource.CODE_COMMENT,math/mathcore/test/stressTMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTMath.cxx:6,Safety,avoid,avoid,6,"// to avoid the warning for un-used variables",MatchSource.CODE_COMMENT,math/mathcore/test/stressTMath.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stressTMath.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx:7,Testability,Test,TestAnalyticalIntegrals,7,"//; // TestAnalyticalIntegrals; //; //; // Created by Aurélie Flandi on 10.09.14.; //; //",MatchSource.CODE_COMMENT,math/mathcore/test/testAnalyticalIntegrals.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx:21,Deployability,integrat,integration,21,"//compare analytical integration with numerical one",MatchSource.CODE_COMMENT,math/mathcore/test/testAnalyticalIntegrals.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx:21,Integrability,integrat,integration,21,"//compare analytical integration with numerical one",MatchSource.CODE_COMMENT,math/mathcore/test/testAnalyticalIntegrals.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testAnalyticalIntegrals.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:3,Testability,test,test,3,"// test Delauney interpolation on edges of a triangle; // some of these tests failed when using the older version; // see issue #",MatchSource.CODE_COMMENT,math/mathcore/test/testDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:72,Testability,test,tests,72,"// test Delauney interpolation on edges of a triangle; // some of these tests failed when using the older version; // see issue #",MatchSource.CODE_COMMENT,math/mathcore/test/testDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:58,Availability,error,error,58,"// need to provide some min/max value to have a numerical error in; // computation of barycentric coordinates",MatchSource.CODE_COMMENT,math/mathcore/test/testDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx:89,Availability,error,error,89,"// interpolate on horizontal edge between tr2 and tr3 (line P2-P4); //This was giving an error; // result should be linear interp between P4(x=750,z=250) and P2(x=1000,z=500)",MatchSource.CODE_COMMENT,math/mathcore/test/testDelaunay2D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDelaunay2D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:14,Testability,test,test,14,"// program to test distribution sampling",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:3,Testability,test,test,3,"// test gaussian",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:50,Integrability,message,messages,50,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:13,Testability,test,test,13,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:69,Testability,test,test,69,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:3,Testability,test,test,3,"// test a discrete distribution",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:50,Integrability,message,messages,50,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:13,Testability,test,test,13,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx:69,Testability,test,test,69,"// do a Chi2 test; // switch off printing of info messages from chi2 test",MatchSource.CODE_COMMENT,math/mathcore/test/testDistSampler.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testDistSampler.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Alejandro García Montoro 07/2017",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:75,Performance,perform,performed,75,"// Class to encapsulate the types that define how the gradient test is; // performed; it also stores information strings about the types.; // DataType defines how to instantiate the gradient evaluation: Double_t,; // Double_v.; // ExecutionPolicyType defines the execution policy: kSerial, kMultithread...; // DataInfoStr points to a human-readable string describing DataType (e.g.,; // ""Scalar"", ""Vectorial""); // PolicyInfoStr points to a human-readable string describing; // ExecutionPolicyType (e.g., ""Serial"", ""Multithread"")",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:63,Testability,test,test,63,"// Class to encapsulate the types that define how the gradient test is; // performed; it also stores information strings about the types.; // DataType defines how to instantiate the gradient evaluation: Double_t,; // Double_v.; // ExecutionPolicyType defines the execution policy: kSerial, kMultithread...; // DataInfoStr points to a human-readable string describing DataType (e.g.,; // ""Scalar"", ""Vectorial""); // PolicyInfoStr points to a human-readable string describing; // ExecutionPolicyType (e.g., ""Serial"", ""Multithread"")",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Integrability,Interface,Interface,3,"// Interface abstracting the model function and its related data (number of parameters, parameters, the model function; // itself...)",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:72,Availability,mask,mask,72,"// Compute the function only when the arg meets the criteria, using the mask computed before",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:62,Integrability,interface,interfaces,62,"// Helper class used to encapsulate the calls to the gradient interfaces,; // templated with a GradientTestTraits type",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:55,Integrability,interface,interface,55,"// Types to instantiate Chi2FCN: the gradient function interface handles the; // parameters, so its base typedef; // has to be always a double; the parametric function interface is templated; // to test both serial and vectorial; // cases.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:168,Integrability,interface,interface,168,"// Types to instantiate Chi2FCN: the gradient function interface handles the; // parameters, so its base typedef; // has to be always a double; the parametric function interface is templated; // to test both serial and vectorial; // cases.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:198,Testability,test,test,198,"// Types to instantiate Chi2FCN: the gradient function interface handles the; // parameters, so its base typedef; // has to be always a double; the parametric function interface is templated; // to test both serial and vectorial; // cases.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:150,Performance,perform,performance,150,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Testability,Test,Test,3,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:49,Testability,benchmark,benchmark,49,"// Set up the scalar serial reference fitter, to benchmark times.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:150,Performance,perform,performance,150,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Testability,Test,Test,3,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:49,Testability,benchmark,benchmark,49,"// Set up the scalar serial reference fitter, to benchmark times.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:150,Performance,perform,performance,150,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Testability,Test,Test,3,"// Test class: creates a reference solution (computing the gradient with scalar; // values in a serial scenario), and; // compares its values and its performance against the evaluation of the; // gradient specified by the GradientTestTraits; // type.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:49,Testability,benchmark,benchmark,49,"// Set up the scalar serial reference fitter, to benchmark times.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:24,Testability,Test,Test,24,"// Types used by Google Test to instantiate the tests.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:48,Testability,test,tests,48,"// Types used by Google Test to instantiate the tests.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Testability,Test,Test,3,"// Test EvalChi2Gradient and outputs its speedup against the scalar serial case.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Testability,Test,Test,3,"// Test EvalChi2Gradient and outputs its speedup against the scalar serial case.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:3,Testability,Test,Test,3,"// Test EvalChi2Gradient and outputs its speedup against the scalar serial case.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:33,Availability,error,error,33,"// add main() to avoid a linking error",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx:17,Safety,avoid,avoid,17,"// add main() to avoid a linking error",MatchSource.CODE_COMMENT,math/mathcore/test/testGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Alejandro García Montoro 08/2017",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:3,Performance,Perform,Perform,3,"// Perform the Fit",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:14,Modifiability,extend,extended,14,"// the fit is extended in case of bin data types",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:33,Testability,test,test,33,"// function actually running the test.; // We define here the condition to say that the test is valid",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:88,Testability,test,test,88,"// function actually running the test.; // We define here the condition to say that the test is valid",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:24,Testability,Test,Test,24,"// Types used by Google Test to instantiate the tests.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:48,Testability,test,tests,48,"// Types used by Google Test to instantiate the tests.",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:12,Testability,test,testing,12,"//typedef ::testing::Types<ScalarBinned,VectorialBinned> TestTypes;",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:57,Testability,Test,TestTypes,57,"//typedef ::testing::Types<ScalarBinned,VectorialBinned> TestTypes;",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:95,Testability,Test,TestTypes,95,"// Declare that the GradientFittingTest class should be instantiated with the types defined by TestTypes",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:3,Testability,Test,Test,3,"// Test the fitting using the gradient is successful",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx:42,Testability,test,testing,42,"// Disables elapsed time by default.; //::testing::GTEST_FLAG(print_time) = false;; // Parse command line arguments",MatchSource.CODE_COMMENT,math/mathcore/test/testGradientFitting.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testGradientFitting.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:15,Energy Efficiency,Adapt,AdaptiveIntegratorMultiDim,15,"// Compare the AdaptiveIntegratorMultiDim and; // TF1::IntegralMultiple performance and results; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: David Gonzalez Maline; //",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:15,Modifiability,Adapt,AdaptiveIntegratorMultiDim,15,"// Compare the AdaptiveIntegratorMultiDim and; // TF1::IntegralMultiple performance and results; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: David Gonzalez Maline; //",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:72,Performance,perform,performance,72,"// Compare the AdaptiveIntegratorMultiDim and; // TF1::IntegralMultiple performance and results; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: David Gonzalez Maline; //",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:114,Performance,perform,performance,114,"// Compare the AdaptiveIntegratorMultiDim and; // TF1::IntegralMultiple performance and results; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: David Gonzalez Maline; //",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:31,Performance,perform,performance,31,"// for graphical comparison of performance",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:23,Deployability,integrat,integrate,23,"//multidim function to integrate",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:23,Integrability,integrat,integrate,23,"//multidim function to integrate",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:84,Deployability,Integrat,IntegratorMultiDim,84,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:84,Integrability,Integrat,IntegratorMultiDim,84,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:76,Testability,test,testing,76,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:26,Integrability,rout,routine,26,"// apply cut off to avoid routine to explode",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:20,Safety,avoid,avoid,20,"// apply cut off to avoid routine to explode",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:76,Testability,test,testing,76,"// ################################################################; //; // testing TF1::IntegralMultiple class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:32,Integrability,Wrap,WrappedParamFunction,32,"//timer.Start();; //ROOT::Math::WrappedParamFunction<> funptr(&SimpleFun, dim, p, p+1);",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:63,Usability,Simpl,SimpleFun,63,"//timer.Start();; //ROOT::Math::WrappedParamFunction<> funptr(&SimpleFun, dim, p, p+1);",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:72,Availability,error,error,72,"// std::cout << ""result: \t"";; // std::cout << ig1.Result() << ""\t"" << ""error: \t"" << ig1.Error() << std::endl;; // std::cout << ""sigma: \t"" << ig1.Sigma();; // std::cout << ""\t"" << ""chi2: \t"" << ig1.ChiSqr() << std::endl;; // std::cout << ""\nTime using TF1::IntegralMultiple :\t"" << timer.RealTime() << std::endl;; // std::cout << ""\n------------------------------------"" << std::endl;; // std::cout << ""\t MISER.. \n"" << std::endl;",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:90,Availability,Error,Error,90,"// std::cout << ""result: \t"";; // std::cout << ig1.Result() << ""\t"" << ""error: \t"" << ig1.Error() << std::endl;; // std::cout << ""sigma: \t"" << ig1.Sigma();; // std::cout << ""\t"" << ""chi2: \t"" << ig1.ChiSqr() << std::endl;; // std::cout << ""\nTime using TF1::IntegralMultiple :\t"" << timer.RealTime() << std::endl;; // std::cout << ""\n------------------------------------"" << std::endl;; // std::cout << ""\t MISER.. \n"" << std::endl;",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:2,Deployability,integrat,integration,2,"//integration limits",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx:2,Integrability,integrat,integration,2,"//integration limits",MatchSource.CODE_COMMENT,math/mathcore/test/testIntegrationMultiDim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testIntegrationMultiDim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:97,Testability,test,test,97,"///This is ROOT's old implementation before the vectorised version appeared; ///It's here now to test that the new one yields the same results.",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test that normal summation has catastrophic cancellation, we are actually testing something here:",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:77,Testability,test,testing,77,"// Test that normal summation has catastrophic cancellation, we are actually testing something here:",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test that legacy implementation does better",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test that vectorisable Kahan yields identical results when used with 1 accumulator",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test with 4 accumulators",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test with 2 accumulators",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test with 8 accumulators",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test different filling methods",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:3,Testability,Test,Test,3,"// Test adding an offset",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:40,Testability,test,tests,40,"// The KahanAddSubtractAssignTest suite tests some edge cases of operator+= and operator-= with another KahanSum as parameter",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:149,Testability,test,test,149,"// Check if the smallest large enough carry is added to the number instead of kept in the; // carry when it could have been added to the sum. Unlike test LargestLargeEnoughCarry, in this; // case there will also be a non-zero carry.",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:233,Availability,down,downwards,233,"// This time, the stored carry in sum is again negative because it still has to be added. This is; // in contrast to the case above where the floating point sum already yielded a higher Sum value,; // but in fact should be corrected downwards by the Carry term (which was hence positive in; // SmallestLargeEnoughCarry).",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:133,Performance,perform,performance,133,"// Adding and subtracting also works for multiple accumulators, even mixing different N.; // It doesn't vectorize, but that's only a performance issue, not a precision issue.",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx:110,Testability,test,test,110,"// note that with different numbers of accumulators we expect floating-point equality,; // like in the legacy test above, not exact equality",MatchSource.CODE_COMMENT,math/mathcore/test/testKahan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testKahan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testkdTreeBinning.cxx:185,Integrability,wrap,wrapper,185,"// ------------------------------------------------------------------------; //; // kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree; //; // Using TKDTree wrapper class as a data binning structure; // Plot the 2D data using the TH2Poly class; //; //; // Author: Bartolomeu Rabacal 11/2010; //; // ------------------------------------------------------------------------",MatchSource.CODE_COMMENT,math/mathcore/test/testkdTreeBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testkdTreeBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testkdTreeBinning.cxx:3,Testability,test,test,3,"// test find bin",MatchSource.CODE_COMMENT,math/mathcore/test/testkdTreeBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testkdTreeBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testMathRandom.cxx:20,Testability,test,test,20,"// do a chi2 binned test",MatchSource.CODE_COMMENT,math/mathcore/test/testMathRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testMathRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:5,Testability,Test,Test,5,/**; Test of ROOT finder for various function. case = 0 simple function (polynomial); case = 1 function which fails for a bug in BrentMethod::MinimBrent fixed with r = 32544 (5.27.01); */,MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:56,Usability,simpl,simple,56,/**; Test of ROOT finder for various function. case = 0 simple function (polynomial); case = 1 function which fails for a bug in BrentMethod::MinimBrent fixed with r = 32544 (5.27.01); */,MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:10,Testability,test,test,10,"// Y0 for test 1 (parabola); // these are value which gave problems in 5.26 for gamma_cdf",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:10,Testability,test,test,10,"// Y0 for test 2 (gamma cdf)",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:19,Testability,log,logx,19,"// use function in logx",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:16,Availability,ERROR,ERRORLIMIT,16,"// difference > ERRORLIMIT;",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:20,Testability,test,test,20,"// for the parabola test cases find also second root",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:8,Testability,test,testRootFinder,8,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:70,Testability,test,test,70,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:115,Testability,Test,Test,115,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:181,Testability,test,test,181,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:223,Testability,Test,Test,223,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:563,Testability,test,tests,563,"/*; int testRootFinder() {. int status = 0;; status |= runTest(0); // test pol function; if (status) std::cerr << ""Test pol function FAILED"" << std::endl;. status |= runTest(1); // test gamma_cdf; if (status) std::cerr << ""Test gamma function FAILED"" << std::endl;. std::cerr << ""*************************************************************\n"";; std::cerr << ""\nTest RootFinder :\t"";; if (status == 0); std::cerr << ""OK "" << std::endl;; else; std::cerr << ""Failed !"" << std::endl;. return status;; }; */; //_________________________________________; // Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:2,Testability,test,test,2,"//test parabola using TF1 ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test parabola using Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:2,Testability,test,test,2,"//test parabola using GSL Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:2,Testability,test,test,2,"//test parabola using GSL Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:2,Testability,test,test,2,"//test parabola using GSL Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:15,Testability,test,test,15,"// need to add test for GSL algorithms with derivatives",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:48,Testability,Log,Log-Parabola,48,"//_________________________________________; // Log-Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:61,Testability,test,tests,61,"//_________________________________________; // Log-Parabola tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test log-parabola using TF1",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:8,Testability,log,log-parabola,8,"// test log-parabola using TF1",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test parabola using Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test gamma cdf using GSL Brent",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:57,Testability,test,tests,57,"//_________________________________________; // GammaCDF tests",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test gamma cdf using TF1 ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test gamma cdf using Brent",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:3,Testability,test,test,3,"// test gamma cdf using GSL Brent",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:2,Testability,test,test,2,"//test parabola using GSL Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx:2,Testability,test,test,2,"//test parabola using GSL Brent Root Finder ",MatchSource.CODE_COMMENT,math/mathcore/test/testRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx:3,Testability,test,test,3,"// test sample quantiles; // function TMath::Quantiles and indirectly also TMath::kOrdStat; // compare with results from R (hardcoded in the test); // L.M 9/11/2011",MatchSource.CODE_COMMENT,math/mathcore/test/testSampleQuantiles.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx:141,Testability,test,test,141,"// test sample quantiles; // function TMath::Quantiles and indirectly also TMath::kOrdStat; // compare with results from R (hardcoded in the test); // L.M 9/11/2011",MatchSource.CODE_COMMENT,math/mathcore/test/testSampleQuantiles.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx:3,Testability,test,test,3,"// test if result is OK",MatchSource.CODE_COMMENT,math/mathcore/test/testSampleQuantiles.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSampleQuantiles.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSpecFuncGamma.cxx:39,Availability,error,error,39,"// take the infinity values out of the error checking!",MatchSource.CODE_COMMENT,math/mathcore/test/testSpecFuncGamma.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testSpecFuncGamma.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTemplatedGradient.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Alejandro García Montoro 07/2017",MatchSource.CODE_COMMENT,math/mathcore/test/testTemplatedGradient.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTemplatedGradient.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:11,Availability,error,error,11,"// 5 times error on the mean",MatchSource.CODE_COMMENT,math/mathcore/test/testTStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:11,Availability,error,error,11,"// 5 times error on the RMS; // Gaussian first",MatchSource.CODE_COMMENT,math/mathcore/test/testTStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:3,Testability,test,test,3,"// test with TMath",MatchSource.CODE_COMMENT,math/mathcore/test/testTStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:15,Testability,test,test,15,"// Incremental test",MatchSource.CODE_COMMENT,math/mathcore/test/testTStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:3,Testability,test,test,3,"// test merge",MatchSource.CODE_COMMENT,math/mathcore/test/testTStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx:3,Testability,test,test,3,"// test with TMath",MatchSource.CODE_COMMENT,math/mathcore/test/testTStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/testTStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:9,Modifiability,Config,Config,9,"//fitter.Config().MinimizerOptions().SetPrintLevel(3);; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/mathcore/test/fit/SparseFit3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:9,Modifiability,Config,Config,9,"//fitter.Config().MinimizerOptions().SetPrintLevel(3);; /////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/mathcore/test/fit/SparseFit3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:806,Availability,error,error,806,"// void fit1DHist(); // {; // vector<double> min(1);; // min[0] = 0.;; // vector<double> max(1);; // max[0] = 10.;; // vector<int> nbins(1);; // nbins[0] = 10;; // TH1D* h1 = new TH1D(""1D Original Hist Fit"", ""h1-Original"", nbins[0], min[0], max[0]);; // TH1D* h2 = new TH1D(""1D Blanked Hist Fit"", ""h1-Blanked"", nbins[0], min[0], max[0]);; // TF1* f1 = new TF1(""MyGaus"", ""[0]*TMath::Gaus([1],[2])"", min[0], max[0]);; // f1->SetParameters(10., 5., 2.);; // h1->FillRandom(""MyGaus"",1000);; // cout << ""Retrieving the Sparse Data Structure"" << endl;; // ROOT::Fit::SparseData d(h1);; // ROOT::Fit::FillData(d, h1, 0);; // ROOT::Fit::BinData* bd = d.GetBinData();; // cout << ""Filling second histogram"" << endl;; // for ( unsigned int i = 0; i < bd->NPoints(); ++i); // {; // const double* x;; // double value, error;; // x = bd->GetPoint(i, value, error);; // value = (value)?value:-10;; // h2->Fill(x[0], value);; // }; // TCanvas* c = new TCanvas(""Histogram 2D"");; // c->Divide(1,2);; // c->cd(1);; // h1->Draw(""lego2Z"");; // c->cd(2);; // h2->Draw(""lego2Z"");; // // Fit preparation; // bool ret;; // ROOT::Fit::Fitter fitter;; // ROOT::Math::WrappedMultiTF1 wf1(*f1);; // fitter.Config().SetMinimizer(""TMinuit"");; // cout << ""\n ******* Chi2Fit with Original BinData *******"" << endl;; // ROOT::Fit::BinData bdOriginal;; // ROOT::Fit::FillData(bdOriginal, h1, 0);; // ret = fitter.Fit(bdOriginal, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // cout << ""\n ******* Chi2Fit with BinData and NoCeros *******"" << endl;; // ROOT::Fit::BinData* bdNoCeros = d.GetBinDataNoCeros();; // cout << ""bdOriginal:\n"" << bdOriginal << endl;; // cout << ""bdNoCeros:\n"" << *bdNoCeros << endl;; // cout << ""Equals: "" << (bdOriginal == *bdNoCeros) << endl;; // ret = fitter.Fit(*bdNoCeros, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // delete bd;; // }",MatchSource.CODE_COMMENT,math/mathcore/test/fit/SparseFit3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:844,Availability,error,error,844,"// void fit1DHist(); // {; // vector<double> min(1);; // min[0] = 0.;; // vector<double> max(1);; // max[0] = 10.;; // vector<int> nbins(1);; // nbins[0] = 10;; // TH1D* h1 = new TH1D(""1D Original Hist Fit"", ""h1-Original"", nbins[0], min[0], max[0]);; // TH1D* h2 = new TH1D(""1D Blanked Hist Fit"", ""h1-Blanked"", nbins[0], min[0], max[0]);; // TF1* f1 = new TF1(""MyGaus"", ""[0]*TMath::Gaus([1],[2])"", min[0], max[0]);; // f1->SetParameters(10., 5., 2.);; // h1->FillRandom(""MyGaus"",1000);; // cout << ""Retrieving the Sparse Data Structure"" << endl;; // ROOT::Fit::SparseData d(h1);; // ROOT::Fit::FillData(d, h1, 0);; // ROOT::Fit::BinData* bd = d.GetBinData();; // cout << ""Filling second histogram"" << endl;; // for ( unsigned int i = 0; i < bd->NPoints(); ++i); // {; // const double* x;; // double value, error;; // x = bd->GetPoint(i, value, error);; // value = (value)?value:-10;; // h2->Fill(x[0], value);; // }; // TCanvas* c = new TCanvas(""Histogram 2D"");; // c->Divide(1,2);; // c->cd(1);; // h1->Draw(""lego2Z"");; // c->cd(2);; // h2->Draw(""lego2Z"");; // // Fit preparation; // bool ret;; // ROOT::Fit::Fitter fitter;; // ROOT::Math::WrappedMultiTF1 wf1(*f1);; // fitter.Config().SetMinimizer(""TMinuit"");; // cout << ""\n ******* Chi2Fit with Original BinData *******"" << endl;; // ROOT::Fit::BinData bdOriginal;; // ROOT::Fit::FillData(bdOriginal, h1, 0);; // ret = fitter.Fit(bdOriginal, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // cout << ""\n ******* Chi2Fit with BinData and NoCeros *******"" << endl;; // ROOT::Fit::BinData* bdNoCeros = d.GetBinDataNoCeros();; // cout << ""bdOriginal:\n"" << bdOriginal << endl;; // cout << ""bdNoCeros:\n"" << *bdNoCeros << endl;; // cout << ""Equals: "" << (bdOriginal == *bdNoCeros) << endl;; // ret = fitter.Fit(*bdNoCeros, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // delete bd;; // }",MatchSource.CODE_COMMENT,math/mathcore/test/fit/SparseFit3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx:1178,Modifiability,Config,Config,1178,"// void fit1DHist(); // {; // vector<double> min(1);; // min[0] = 0.;; // vector<double> max(1);; // max[0] = 10.;; // vector<int> nbins(1);; // nbins[0] = 10;; // TH1D* h1 = new TH1D(""1D Original Hist Fit"", ""h1-Original"", nbins[0], min[0], max[0]);; // TH1D* h2 = new TH1D(""1D Blanked Hist Fit"", ""h1-Blanked"", nbins[0], min[0], max[0]);; // TF1* f1 = new TF1(""MyGaus"", ""[0]*TMath::Gaus([1],[2])"", min[0], max[0]);; // f1->SetParameters(10., 5., 2.);; // h1->FillRandom(""MyGaus"",1000);; // cout << ""Retrieving the Sparse Data Structure"" << endl;; // ROOT::Fit::SparseData d(h1);; // ROOT::Fit::FillData(d, h1, 0);; // ROOT::Fit::BinData* bd = d.GetBinData();; // cout << ""Filling second histogram"" << endl;; // for ( unsigned int i = 0; i < bd->NPoints(); ++i); // {; // const double* x;; // double value, error;; // x = bd->GetPoint(i, value, error);; // value = (value)?value:-10;; // h2->Fill(x[0], value);; // }; // TCanvas* c = new TCanvas(""Histogram 2D"");; // c->Divide(1,2);; // c->cd(1);; // h1->Draw(""lego2Z"");; // c->cd(2);; // h2->Draw(""lego2Z"");; // // Fit preparation; // bool ret;; // ROOT::Fit::Fitter fitter;; // ROOT::Math::WrappedMultiTF1 wf1(*f1);; // fitter.Config().SetMinimizer(""TMinuit"");; // cout << ""\n ******* Chi2Fit with Original BinData *******"" << endl;; // ROOT::Fit::BinData bdOriginal;; // ROOT::Fit::FillData(bdOriginal, h1, 0);; // ret = fitter.Fit(bdOriginal, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // cout << ""\n ******* Chi2Fit with BinData and NoCeros *******"" << endl;; // ROOT::Fit::BinData* bdNoCeros = d.GetBinDataNoCeros();; // cout << ""bdOriginal:\n"" << bdOriginal << endl;; // cout << ""bdNoCeros:\n"" << *bdNoCeros << endl;; // cout << ""Equals: "" << (bdOriginal == *bdNoCeros) << endl;; // ret = fitter.Fit(*bdNoCeros, wf1);; // fitter.Result().Print(std::cout);; // if (!ret); // std::cout << ""Fit Failed "" << std::endl;; // delete bd;; // }",MatchSource.CODE_COMMENT,math/mathcore/test/fit/SparseFit3.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/SparseFit3.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx:39,Availability,toler,tolerance,39,"// Check if numerical result is within tolerance",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx:43,Testability,test,testing,43,"// NBins not multiple of SIMD vector size, testing padding",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx:9,Testability,test,testing,9,"// Start testing",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testBinnedFitExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testBinnedFitExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:44,Availability,toler,tolerance,44,"// compare v1 with reference v2; // give 1% tolerance",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:27,Performance,Load,Load,27,"//h1->Draw();; // gSystem->Load(""libMinuit2"");; // gSystem->Load(""libFit"");; // ROOT::Fit::DataVector<ROOT::Fit::BinPoint> dv;",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:60,Performance,Load,Load,60,"//h1->Draw();; // gSystem->Load(""libMinuit2"");; // gSystem->Load(""libFit"");; // ROOT::Fit::DataVector<ROOT::Fit::BinPoint> dv;",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:22,Safety,avoid,avoid,22,"// need to do that to avoid gradient calculation",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test using binned likelihood",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test integral likelihood",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test grapherrors fit",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:25,Availability,error,errors,25,"// do not use coordinate errors (default is using )",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:13,Availability,error,error,13,"// fit using error on X",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:98,Availability,error,errors,98,"// not needed since they are used by default; //dger.Opt().fCoordErrors = true; // use coordinate errors",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:17,Availability,error,error,17,"// this will set error 1 for the empty bins",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:7,Availability,error,error,7,"// set error = 1 for empty bins",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:19,Availability,error,errors,19,"// test graph fit (errors are 1) do a re-normalization",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test graph fit (errors are 1) do a re-normalization",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:72,Availability,error,errors,72,"//iret |= compareResult(fitter.Result().Chi2(), chi2ref,""TGraph fit (no errors) "",0.3);; // compare with TGraph::Fit (no errors)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:121,Availability,error,errors,121,"//iret |= compareResult(fitter.Result().Chi2(), chi2ref,""TGraph fit (no errors) "",0.3);; // compare with TGraph::Fit (no errors)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test using GSL multi fit (L.M. method)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test using GSL multi min method",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:77,Testability,assert,assert,77,"// double DoDerivative(const double *x, unsigned int icoord = 0) const {; // assert(icoord <= 1);; // if (icoord == 0); // return 2. * fp[0] * x[0] + fp[1];; // else; // return 2. * fp[2] * x[1] + fp[3];; // }",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:28,Testability,test,test,28,"// fit using a 2d parabola (test also gradient)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:9,Modifiability,Config,Config,9,"//fitter.Config().MinimizerOptions().SetPrintLevel(3);",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test without gradient",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test Poisson bin likelihood fit (no gradient)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:9,Modifiability,Config,Config,9,"//fitter.Config().MinimizerOptions().SetPrintLevel(3);",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test binned likelihood gradient",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:9,Modifiability,Config,Config,9,"//fitter.Config().MinimizerOptions().SetPrintLevel(3);",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test with linear fitter",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:59,Availability,error,errors,59,"// test fitting using TGraph2D ( chi2 will be larger since errors are 1); // should test with a TGraph2DErrors",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Testability,test,test,3,"// test fitting using TGraph2D ( chi2 will be larger since errors are 1); // should test with a TGraph2DErrors",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:84,Testability,test,test,84,"// test fitting using TGraph2D ( chi2 will be larger since errors are 1); // should test with a TGraph2DErrors",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:15,Availability,error,error,15,"// need to set error by hand since constructor from TH2 does not exist",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:22,Safety,avoid,avoid,22,"// need to do that to avoid gradient calculation",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:142,Modifiability,Config,Config,142,"// double x[1]; x[0] = 0.;; // std::cout << ""fval "" << f(x) << std::endl;; // x[0] = 1.; std::cout << ""fval "" << f(x) << std::endl;; //fitter.Config().SetMinimizer(""Minuit2"");; // fails with minuit (t.b. investigate)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:10,Modifiability,Config,Config,10,"// fitter.Config().MinimizerOptions().SetPrintLevel(3);; // need to set function first (need to change this)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:10,Testability,test,test,10,"// simple test of fitting a Tgraph",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:3,Usability,simpl,simple,3,"// simple test of fitting a Tgraph",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:22,Safety,avoid,avoid,22,"// need to do that to avoid gradient calculation",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx:10,Availability,error,error,10,"// option error on coordinate and asymmetric on values",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx:39,Integrability,interface,interface,39,"// should change test to use Minimizer interface",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testGraphFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx:17,Testability,test,test,17,"// should change test to use Minimizer interface",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testGraphFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx:2,Security,Access,Access,2,"//Access the fit results",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testGraphFit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testGraphFit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:47,Availability,toler,tolerance,47,"// compare v1 with reference v2; // // give 1% tolerance",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:107,Deployability,update,update,107,"// std::copy(p, p+paramSize, params.begin() );; // // different parameters; // // compute the integral and update the cached param vector; // // this needs to be locked because is a non-const part; // ComputeIntegrals(p);; // }",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:118,Performance,cache,cached,118,"// std::copy(p, p+paramSize, params.begin() );; // // different parameters; // // compute the integral and update the cached param vector; // // this needs to be locked because is a non-const part; // ComputeIntegrals(p);; // }",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:7,Performance,cache,cached,7,"// use cached integral values",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:2,Testability,Test,Test,2,"//Test class with functions for each of the cases",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:26,Testability,test,test,26,"// not needed but just to test vectorized ctor of TF1",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx:9,Modifiability,Config,Config,9,"//fitter.Config().MinimizerOptions().SetTolerance(10);",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testLogLExecPolicy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testLogLExecPolicy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,Testability,test,test,3,"// test of minimization usingnew minimizer classes",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:62,Testability,assert,assert,62,"// std::cerr <<""cannot clone this function"" << std::endl;; // assert(0);",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,Testability,test,test,3,"// test Minos (use the default up of 1)",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,Availability,toler,tolerance,3,"// tolerance; //min->ExecuteCommand(""MIGRAD"",arglist,0);",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:10,Testability,test,testNewMinimizer,10,"//iret |= testNewMinimizer(fRB,xRB,s0,""Genetic"","""");",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,Testability,test,test,3,"// test with fletcher trigonometric function",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:3,Testability,test,test,3,"// test with ChebyQuad function",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:11,Testability,test,testChebyQuad,11,"// iret |= testChebyQuad();; // iret |= testTrigoFletcher();",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx:40,Testability,test,testTrigoFletcher,40,"// iret |= testChebyQuad();; // iret |= testTrigoFletcher();",MatchSource.CODE_COMMENT,math/mathcore/test/fit/testMinim.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/fit/testMinim.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:17,Testability,test,test,17,"// scale for cdf test (integral)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:22,Testability,test,test,22,"// scale for quantile test",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:3,Testability,test,test,3,"// test cumulative function; // test cdf at value f",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:32,Testability,test,test,32,"// test cumulative function; // test cdf at value f",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:3,Testability,test,test,3,"// test the quantile",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h:30,Performance,cache,cached,30,"// implement explicitly using cached parameter values",MatchSource.CODE_COMMENT,math/mathcore/test/stress/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testGenVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:3,Testability,Test,Test,3,"// Test of Physics Vector (GenVector package)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testGenVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:3,Testability,test,test,3,"// test io vector 2",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testGenVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:23,Availability,error,error,23,"// gcc 4.3.2 gives and error for RhoEtaPhiVector for 32 bits",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testGenVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx:3,Testability,test,test,3,"// test io of double 32 for vector 1",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testGenVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testGenVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx:58,Availability,error,error,58,"// add also case when delta is small by default (relative error + absolute error)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/TestHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx:75,Availability,error,error,75,"// add also case when delta is small by default (relative error + absolute error)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/TestHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx:79,Availability,error,error,79,"// Compared to ASSERT_NEAR, this function takes into account also the relative error",MatchSource.CODE_COMMENT,math/mathcore/test/stress/TestHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.h:79,Availability,error,error,79,"// Compared to ASSERT_NEAR, this function takes into account also the relative error",MatchSource.CODE_COMMENT,math/mathcore/test/stress/TestHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TestHelper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:3,Testability,test,test,3,"// test of generic SMatrix",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:3,Testability,test,test,3,"// test the io",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:3,Testability,test,test,3,"// test storing as Double32_t; // dictionary exist only for square matrices between 3 and 6",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx:29,Availability,error,errors,29,"// we read back float (scale errors then)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSMatrix.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSMatrix.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx:3,Testability,test,test,3,"// test statistical functions",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx:20,Testability,test,test,20,"// if enlarge scale test fails",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx:20,Testability,test,test,20,"// if enlarge scale test fails",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testStat.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testStat.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx:93,Testability,test,test,93,"//--------------------------------------------------------------------------------------; // test of generic Svector; //--------------------------------------------------------------------------------------",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx:3,Testability,test,test,3,"// test the matrix if D2 is not equal to 1",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx:3,Testability,test,test,3,"// test the io",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testSVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testSVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector.cxx:3,Testability,Test,Test,3,"// Test of a Composite Object (containing Vector's and Matrices)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testVector.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testVector34.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx:3,Testability,test,test,3,"// test of Svector of dim 3 or 4",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testVector34.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx:3,Testability,test,test,3,"// test the io",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testVector34.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx:3,Testability,test,test,3,"// test Double32",MatchSource.CODE_COMMENT,math/mathcore/test/stress/testVector34.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/testVector34.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TrackMathCore.h:25,Testability,test,testing,25,"// dummy track class for testing I/o of matrix",MatchSource.CODE_COMMENT,math/mathcore/test/stress/TrackMathCore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/TrackMathCore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:132,Testability,test,tests,132,"//*******************************************************************************************************************; // GenVector tests; //*******************************************************************************************************************; // trait for getting vector name",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:15,Modifiability,variab,variables,15,"// global data variables",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:29,Testability,test,testing,29,"// total sum of x,y,z,t (for testing first addition)",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:44,Testability,test,tests,44,"// use a fixed seed to be able to reproduce tests",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:44,Testability,test,tests,44,"// use a fixed seed to be able to reproduce tests",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:3,Testability,test,test,3,"// test methods",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:21,Safety,avoid,avoid,21,"// cast to void * to avoid a warning",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h:3,Testability,test,test,3,"// test of SVEctor's or SMatrix",MatchSource.CODE_COMMENT,math/mathcore/test/stress/VectorTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/test/stress/VectorTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathcore/v7/inc/ROOT/RFit.hxx:229,Usability,Feedback,Feedback,229,"/// \file ROOT/RFit.hxx; /// \ingroup MathCore ROOT7; /// \author Axel Naumann <axel@cern.ch>; /// \date 2015-09-06; /// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; /// is welcome!; /*************************************************************************; * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/",MatchSource.CODE_COMMENT,math/mathcore/v7/inc/ROOT/RFit.hxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/v7/inc/ROOT/RFit.hxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:1175,Deployability,update,update,1175,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class ChebyshevApprox; //; // Created by: moneta at Thu Dec 2 14:51:15 2004; //; // Last update: Thu Dec 2 14:51:15 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:95,Availability,error,error,95,/**; Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:107,Availability,error,error,107,/**; Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:205,Availability,error,error,205,/**; Evaluate the series at a given point x estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:118,Availability,error,error,118,"/**; evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:130,Availability,error,error,130,"/**; evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:228,Availability,error,error,228,"/**; evaluate the series at a given point x to the given order n,; estimating both the series result and its absolute error.; The error estimate is made from the first neglected term in the series.; A pair containing result and error is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:143,Deployability,integrat,integration,143,"/**; Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user; */; //TO DO: implement copying to return by value",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h:143,Integrability,integrat,integration,143,"/**; Compute the integral of the series and return a pointer to a new Chebyshev series with the; integral coefficients. The lower limit of the integration is the left range value a.; The returned pointer must be managed by the user; */; //TO DO: implement copying to return by value",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ChebyshevApprox.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ChebyshevApprox.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:1224,Deployability,update,update,1224,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class Derivator; //; // class for calculating Derivative of functions; //; // Created by: moneta at Sat Nov 13 14:46:00 2004; //; // Last update: Sat Nov 13 14:46:00 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:48,Integrability,interface,interface,48,/**; Construct using a ROOT::Math::IGenFunction interface; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:137,Energy Efficiency,adapt,adaptive,137,/**; Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:137,Modifiability,adapt,adaptive,137,/**; Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:61,Energy Efficiency,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h.; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:61,Modifiability,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h.; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:61,Energy Efficiency,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:61,Modifiability,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:61,Energy Efficiency,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:61,Modifiability,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:138,Availability,Error,Error,138,"/** @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case; */; /**; Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:335,Energy Efficiency,adapt,adaptive,335,"/** @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case; */; /**; Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:335,Modifiability,adapt,adaptive,335,"/** @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case; */; /**; Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:77,Energy Efficiency,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:77,Modifiability,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:77,Energy Efficiency,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:77,Modifiability,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:77,Energy Efficiency,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:77,Modifiability,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:16,Availability,error,error,16,/**; return the error status of the last derivative calculation; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h:41,Availability,error,error,41,/**; return the estimate of the absolute error of the last derivative calculation; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Derivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Derivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:1293,Deployability,update,update,1293,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLFunctionAdapter; //; // Generic adapter for gsl_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:1127,Energy Efficiency,adapt,adapter,1127,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLFunctionAdapter; //; // Generic adapter for gsl_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:1127,Integrability,adapter,adapter,1127,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLFunctionAdapter; //; // Generic adapter for gsl_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:1127,Modifiability,adapt,adapter,1127,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLFunctionAdapter; //; // Generic adapter for gsl_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:1166,Usability,usab,usable,1166,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLFunctionAdapter; //; // Generic adapter for gsl_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:15,Energy Efficiency,adapt,adapting,15,"/**; Class for adapting any C++ functor class to C function pointers used by GSL.; The templated C++ function class must implement:. <em> double operator( double x)</em>; and if the derivatives are required:; <em> double Gradient( double x)</em>. This class defines static methods with will be used to fill the; \a gsl_function and \a gsl_function_fdf structs used by GSL.; See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h:15,Modifiability,adapt,adapting,15,"/**; Class for adapting any C++ functor class to C function pointers used by GSL.; The templated C++ function class must implement:. <em> double operator( double x)</em>; and if the derivatives are required:; <em> double Gradient( double x)</em>. This class defines static methods with will be used to fill the; \a gsl_function and \a gsl_function_fdf structs used by GSL.; See for examples the <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_32.html#SEC432"">GSL online manual</A>; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1182,Deployability,update,update,1182,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLIntegrator; //; // Created by: Lorenzo Moneta at Thu Nov 11 14:22:32 2004; //; // Last update: Thu Nov 11 14:22:32 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:113,Deployability,integrat,integration,113,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:180,Deployability,integrat,integration,180,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:280,Deployability,integrat,integration,280,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:363,Deployability,integrat,integration,363,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:405,Deployability,integrat,integration,405,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:484,Deployability,integrat,integration,484,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:523,Deployability,Integrat,Integration,523,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:610,Deployability,integrat,integration,610,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:728,Deployability,integrat,integration,728,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:781,Deployability,integrat,integration,781,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:829,Deployability,Integrat,Integration,829,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:896,Deployability,integrat,integration,896,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1304,Deployability,integrat,integration,1304,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1404,Deployability,Integrat,Integration,1404,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1447,Deployability,Integrat,Integration,1447,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:337,Energy Efficiency,adapt,adaptive,337,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:354,Energy Efficiency,adapt,adaptive,354,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:601,Energy Efficiency,adapt,adaptive,601,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:641,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,641,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:762,Energy Efficiency,ADAPT,ADAPTIVE,762,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:973,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,973,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1059,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,1059,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1230,Energy Efficiency,ADAPT,ADAPTIVE,1230,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:113,Integrability,integrat,integration,113,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:180,Integrability,integrat,integration,180,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:280,Integrability,integrat,integration,280,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:363,Integrability,integrat,integration,363,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:405,Integrability,integrat,integration,405,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:484,Integrability,integrat,integration,484,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:523,Integrability,Integrat,Integration,523,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:610,Integrability,integrat,integration,610,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:728,Integrability,integrat,integration,728,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:781,Integrability,integrat,integration,781,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:829,Integrability,Integrat,Integration,829,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:896,Integrability,integrat,integration,896,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1304,Integrability,integrat,integration,1304,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1404,Integrability,Integrat,Integration,1404,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1447,Integrability,Integrat,Integration,1447,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:337,Modifiability,adapt,adaptive,337,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:354,Modifiability,adapt,adaptive,354,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:601,Modifiability,adapt,adaptive,601,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:641,Modifiability,ADAPT,ADAPTIVESINGULAR,641,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:762,Modifiability,ADAPT,ADAPTIVE,762,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:973,Modifiability,ADAPT,ADAPTIVESINGULAR,973,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1059,Modifiability,ADAPT,ADAPTIVESINGULAR,1059,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1230,Modifiability,ADAPT,ADAPTIVE,1230,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:92,Performance,perform,performing,92,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:1118,Performance,perform,performances,1118,"//_________________________________________________________________________; /**. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:125,Availability,Error,Error,125,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:163,Availability,Error,Error,163,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:48,Deployability,Integrat,Integrator,48,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:81,Deployability,integrat,integration,81,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:63,Energy Efficiency,Adapt,Adaptive,63,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:48,Integrability,Integrat,Integrator,48,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:81,Integrability,integrat,integration,81,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:63,Modifiability,Adapt,Adaptive,63,// constructors; /** Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:247,Availability,Error,Error,247,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:285,Availability,Error,Error,285,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:23,Deployability,Integrat,Integrator,23,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:59,Deployability,integrat,integration,59,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:134,Deployability,integrat,integration,134,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:185,Deployability,Integrat,Integration,185,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:50,Energy Efficiency,Adapt,Adaptive,50,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:23,Integrability,Integrat,Integrator,23,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:59,Integrability,integrat,integration,59,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:134,Integrability,integrat,integration,134,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:185,Integrability,Integrat,Integration,185,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:50,Modifiability,Adapt,Adaptive,50,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:330,Availability,Error,Error,330,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:368,Availability,Error,Error,368,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:33,Deployability,Integrat,Integrator,33,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:65,Deployability,integrat,integration,65,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:116,Deployability,Integrat,Integration,116,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:209,Deployability,Integrat,Integration,209,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:266,Deployability,Integrat,Integration,266,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:199,Energy Efficiency,ADAPT,ADAPTIVE,199,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:33,Integrability,Integrat,Integrator,33,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:65,Integrability,integrat,integration,65,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:116,Integrability,Integrat,Integration,116,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:209,Integrability,Integrat,Integration,209,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:266,Integrability,Integrat,Integration,266,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:199,Modifiability,ADAPT,ADAPTIVE,199,/**; generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:370,Availability,Error,Error,370,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:408,Availability,Error,Error,408,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:23,Deployability,Integrat,Integrator,23,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:59,Deployability,integrat,integration,59,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:211,Deployability,integrat,integration,211,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:262,Deployability,Integrat,Integration,262,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:50,Energy Efficiency,Adapt,Adaptive,50,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:23,Integrability,Integrat,Integrator,23,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:59,Integrability,integrat,integration,59,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:211,Integrability,integrat,integration,211,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:262,Integrability,Integrat,Integration,262,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:50,Modifiability,Adapt,Adaptive,50,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:134,Modifiability,plug-in,plug-in,134,/** constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:75,Deployability,integrat,integration,75,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:106,Deployability,integrat,integration,106,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:75,Integrability,integrat,integration,75,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:106,Integrability,integrat,integration,106,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:116,Deployability,integrat,integration,116,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:236,Deployability,integrat,integration,236,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:286,Deployability,integrat,integration,286,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:116,Integrability,integrat,integration,116,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:197,Integrability,interface,interface,197,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:236,Integrability,integrat,integration,236,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:286,Integrability,integrat,integration,286,"// methods using IGenFunction; /**; evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:92,Deployability,integrat,integration,92,"/**; evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:92,Integrability,integrat,integration,92,"/**; evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:173,Integrability,interface,interface,173,"/**; evaluate the Integral of a function f over the infinite interval (-inf,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:140,Deployability,integrat,integration,140,"/**; evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:140,Integrability,integrat,integration,140,"/**; evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:221,Integrability,interface,interface,221,"/**; evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b); with a singularity at c; @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower interval value; @param b lower interval value; @param c singular value of f; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:94,Deployability,integrat,integration,94,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:214,Deployability,integrat,integration,214,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:94,Integrability,integrat,integration,94,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:175,Integrability,interface,interface,175,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:214,Integrability,integrat,integration,214,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:103,Deployability,integrat,integration,103,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:223,Deployability,integrat,integration,223,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:103,Integrability,integrat,integration,103,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:184,Integrability,interface,interface,184,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:223,Integrability,integrat,integration,223,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:112,Deployability,integrat,integration,112,"/**; evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:370,Deployability,integrat,integration,370,"/**; evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:112,Integrability,integrat,integration,112,"/**; evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:193,Integrability,interface,interface,193,"/**; evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:370,Integrability,integrat,integration,370,"/**; evaluate the Integral of a function f with known singular points over the defined Integral (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:196,Deployability,integrat,integration,196,"// evaluate using cached function; /**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:246,Deployability,integrat,integration,246,"// evaluate using cached function; /**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:196,Integrability,integrat,integration,196,"// evaluate using cached function; /**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:246,Integrability,integrat,integration,246,"// evaluate using cached function; /**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:18,Performance,cache,cached,18,"// evaluate using cached function; /**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method; @param a lower value of the integration interval; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:187,Deployability,integrat,integration,187,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:187,Integrability,integrat,integration,187,"/**; evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method.; @param a lower value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:196,Deployability,integrat,integration,196,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:196,Integrability,integrat,integration,196,"/**; evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method.; @param b upper value of the integration interval; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:340,Deployability,integrat,integration,340,"/**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:340,Integrability,integrat,integration,340,"/**; evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. The function has known singular points.; @param pts vector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( \a a) and last element the upper value. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:290,Deployability,integrat,integration,290,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:565,Deployability,integrat,integration,565,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:667,Deployability,integrat,integration,667,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:717,Deployability,integrat,integration,717,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:476,Energy Efficiency,efficient,efficient,476,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:504,Energy Efficiency,adapt,adapter,504,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:290,Integrability,integrat,integration,290,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:504,Integrability,adapter,adapter,504,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:565,Integrability,integrat,integration,565,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:667,Integrability,integrat,integration,667,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:717,Integrability,integrat,integration,717,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:504,Modifiability,adapt,adapter,504,"// evaluate using free function pointer (same GSL signature); /**; signature for function pointers used by GSL; */; //typedef double ( * GSLFuncPointer ) ( double, void * );; /**; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer; The integration function must be a free function and have a signature consistent with GSL functions:. <em>double my_function ( double x, void * p ) { ...... } </em>. This method is the most efficient since no internal adapter to GSL function is created.; @param f pointer to the integration function; @param p pointer to the Parameters of the function; @param a lower value of the integration interval; @param b upper value of the integration interval. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:41,Availability,Error,Error,41,/**; return the estimate of the absolute Error of the last Integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:16,Availability,Error,Error,16,/**; return the Error Status of the last Integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:97,Availability,Error,Error,97,// setter for control Parameters (getters are not needed so far ); /**; set the desired relative Error; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:30,Availability,Error,Error,30,/**; set the desired absolute Error; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:13,Deployability,integrat,integration,13,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:91,Deployability,Integrat,Integration,91,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:129,Deployability,integrat,integration,129,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:185,Deployability,integrat,integrations,185,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:171,Energy Efficiency,ADAPT,ADAPTIVE,171,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:13,Integrability,integrat,integration,13,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:91,Integrability,Integrat,Integration,91,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:129,Integrability,integrat,integration,129,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:185,Integrability,integrat,integrations,185,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:171,Modifiability,ADAPT,ADAPTIVE,171,/**; set the integration rule (Gauss-Kronrod rule).; The possible rules are defined in the Integration::GKRule enumeration.; The integration rule can be modified only for ADAPTIVE type integrations; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:32,Deployability,integrat,integration,32,"/// get the option used for the integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:32,Integrability,integrat,integration,32,"/// get the option used for the integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:9,Availability,Error,Error,9,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:37,Deployability,integrat,integration,37,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:37,Integrability,integrat,integration,37,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h:3,Performance,cache,cache,3,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:51,Deployability,Integrat,Integration,51,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:116,Deployability,Integrat,Integration,116,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:139,Deployability,Integrat,Integration,139,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:183,Deployability,integrat,integration,183,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:250,Deployability,integrat,integration,250,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:350,Deployability,integrat,integration,350,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:416,Deployability,integrat,integration,416,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:457,Deployability,integrat,integration,457,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:51,Integrability,Integrat,Integration,51,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:116,Integrability,Integrat,Integration,116,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:139,Integrability,Integrat,Integration,139,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:183,Integrability,integrat,integration,183,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:250,Integrability,integrat,integration,250,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:350,Integrability,integrat,integration,350,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:416,Integrability,integrat,integration,416,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:457,Integrability,integrat,integration,457,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:613,Integrability,interface,interface,613,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:697,Modifiability,plugin,plugin,697,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:713,Modifiability,plugin,plugin,713,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:162,Performance,perform,performing,162,"/**; @defgroup MCIntegration Numerical Monte Carlo Integration Classes; Classes implementing method for Monte Carlo Integration.; @ingroup Integration. Class for performing numerical integration of a multidimensional function.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges. <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be; instantiate using the plugin manager (plugin name is ""GSLMCIntegrator""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:357,Availability,Error,Error,357,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:427,Availability,toler,tolerance,427,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:508,Availability,Error,Error,508,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:578,Availability,toler,tolerance,578,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:186,Deployability,integrat,integration,186,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:224,Deployability,integrat,integration,224,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:776,Deployability,Integrat,IntegratorMultiDimOptions,776,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:186,Integrability,integrat,integration,186,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:224,Integrability,integrat,integration,224,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:776,Integrability,Integrat,IntegratorMultiDimOptions,776,"// constructors; // /**; // constructor of GSL MCIntegrator using all the default options; // */; // GSLMCIntegrator( );; /** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration. The possible types are defined in the MCIntegration::Type enumeration; Default is VEGAS; @param absTol desired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param relTol desired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls); @param calls maximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:191,Availability,Error,Error,191,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:229,Availability,Error,Error,229,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:64,Deployability,integrat,integration,64,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:102,Deployability,integrat,integration,102,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:64,Integrability,integrat,integration,64,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:102,Integrability,integrat,integration,102,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:142,Modifiability,plug-in,plug-in,142,/** constructor of GSL MCIntegrator. VEGAS MC is set as default integration type. @param type type of integration using a char * (required by plug-in manager); @param absTol desired absolute Error; @param relTol desired relative Error; @param calls maximum number of function calls; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:75,Deployability,integrat,integration,75,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:106,Deployability,integrat,integration,106,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:75,Integrability,integrat,integration,75,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:106,Integrability,integrat,integration,106,"// template methods for generic functors; /**; method to set the a generic integration function. @param f integration function. The function type must implement the assignment operator, <em> double operator() ( double x ) </em>. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:124,Deployability,integrat,integration,124,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:270,Deployability,integrat,integration,270,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:320,Deployability,integrat,integration,320,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:124,Integrability,integrat,integration,124,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:205,Integrability,interface,interface,205,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:270,Integrability,integrat,integration,270,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:320,Integrability,integrat,integration,320,"// methods using GSLMonteFuncPointer; /**; evaluate the Integral of a function f over the defined hypercube (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param dim the dimension; @param a lower value of the integration interval; @param b upper value of the integration interval; @param p pointer to parameter array; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:176,Deployability,integrat,integration,176,"// to be added later; //double Integral(const GSLMonteFuncPointer & f);; //double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);; /**; return the type of the integration used; */; //MCIntegration::Type MCType() const;; /**; return the Result of the last Integral calculation; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:176,Integrability,integrat,integration,176,"// to be added later; //double Integral(const GSLMonteFuncPointer & f);; //double Integral(GSLMonteFuncPointer f, void * p, double* a, double* b);; /**; return the type of the integration used; */; //MCIntegration::Type MCType() const;; /**; return the Result of the last Integral calculation; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:41,Availability,Error,Error,41,/**; return the estimate of the absolute Error of the last Integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:16,Availability,Error,Error,16,/**; return the Error Status of the last Integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:97,Availability,Error,Error,97,// setter for control Parameters (getters are not needed so far ); /**; set the desired relative Error; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:30,Availability,Error,Error,30,/**; set the desired absolute Error; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:13,Deployability,integrat,integration,13,/**; set the integration options; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:13,Integrability,integrat,integration,13,/**; set the integration options; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Deployability,integrat,integration,9,/**; set integration method; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Integrability,integrat,integration,9,/**; set integration method; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Deployability,integrat,integration,9,/**; set integration method using a name instead of an enumeration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Integrability,integrat,integration,9,/**; set integration method using a name instead of an enumeration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Deployability,integrat,integration,9,/**; set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Integrability,integrat,integration,9,/**; set integration mode for VEGAS method; The possible MODE are :; MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling; MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied; MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:108,Availability,error,error,108,/**; set parameters for PLAIN method; */; //void SetParameters(const PlainParameters &p);; /**; returns the error sigma from the last iteration of the Vegas algorithm; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:52,Safety,avoid,avoid,52,/**; return the type; (need to be called GetType to avoid a conflict with typedef); */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:33,Deployability,integrat,integration,33,/**; get the option used for the integration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:33,Integrability,integrat,integration,33,/**; get the option used for the integration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:30,Deployability,integrat,integration,30,"// set internally the type of integration method",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:30,Integrability,integrat,integration,30,"// set internally the type of integration method",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:10,Deployability,integrat,integration,10,"//type of integration method",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:10,Integrability,integrat,integration,10,"//type of integration method",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:9,Availability,Error,Error,9,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:37,Deployability,integrat,integration,37,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:37,Integrability,integrat,integration,37,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h:3,Performance,cache,cache,3,"// cache Error, Result and Status of integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMCIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMCIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:159,Integrability,interface,interface,159,"//_____________________________________________________________________________________; /**; GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:436,Integrability,interface,interface,436,"//_____________________________________________________________________________________; /**; GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:486,Modifiability,plugin,plugin,486,"//_____________________________________________________________________________________; /**; GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:502,Modifiability,plugin,plugin,502,"//_____________________________________________________________________________________; /**; GSLMinimizer class.; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional; minimization algorithms. See <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Minimization.html"">GSL doc</A>; from more info on the GSL minimization algorithms. The class implements the ROOT::Math::Minimizer interface and can be instantiated using the; ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms; (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string.; The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:14,Performance,perform,perform,14,"/// method to perform the minimization",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:23,Availability,error,error,23,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:33,Availability,error,error,33,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:11,Availability,error,errors,11,"/// return errors at the minimum",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:134,Availability,error,errors,134,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:48,Modifiability,variab,variable,48,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:106,Modifiability,variab,variables,106,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h:15,Availability,Toler,Tolerance,15,"// Line Search Tolerance",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:1164,Deployability,update,update,1164,"// @(#)root/mathmore:$Id$; // Author: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 moneta, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMinimizer1D; //; // Created by: moneta at Wed Dec 1 15:04:51 2004; //; // Last update: Wed Dec 1 15:04:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:215,Availability,avail,available,215,"/**; Enumeration with One Dimensional Minimizer Algorithms.; The algorithms are implemented using GSL, see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_33.html#SEC447"">GSL manual</A>. The algorithms available are:; <ul>; <li><em>Golden Section Algorithm</em>, simplest method of bracketing the minimum of a function; <li><em>Brent Algorithm</em>, which combines a parabolic interpolation with the golden section algorithm; </ul>; @ingroup Min1D; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:276,Usability,simpl,simplest,276,"/**; Enumeration with One Dimensional Minimizer Algorithms.; The algorithms are implemented using GSL, see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_33.html#SEC447"">GSL manual</A>. The algorithms available are:; <ul>; <li><em>Golden Section Algorithm</em>, simplest method of bracketing the minimum of a function; <li><em>Brent Algorithm</em>, which combines a parabolic interpolation with the golden section algorithm; </ul>; @ingroup Min1D; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:499,Usability,simpl,simplest,499,"//______________________________________________________________________________________; /**. Minimizer for arbitrary one dimensional functions. Implemented using GSL, for detailed description see:; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/One-dimensional-Minimization.html"">GSL online doc</A>. The algorithms uspported are only bracketing algorithm which do not use derivatives information.; The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method; but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation. This class does not support copying; @ingroup Min1D; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:22,Energy Efficiency,allocate,allocated,22,/**; Destructor: free allocated resources; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:80,Availability,error,error,80,/**; Perform a minimizer iteration and; if an unexpected problem occurs then an error code will be returned; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:5,Performance,Perform,Perform,5,/**; Perform a minimizer iteration and; if an unexpected problem occurs then an error code will be returned; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:94,Availability,toler,tolerance,94,/**; Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successful; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:266,Availability,error,error,266,/**; Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successful; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:329,Availability,error,error,329,/**; Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successful; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:5,Testability,Test,Test,5,/**; Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h:44,Testability,test,test,44,/**; Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMinimizer1D.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMinimizer1D.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:542,Availability,avail,available,542,"/** @defgroup MultiRoot Multidimensional ROOT finding; Classes for finding the roots of a multi-dimensional system.; @ingroup NumAlgo; */; /**; Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridS</tt> with name <i>""HybridS""</i>: same as HybridSJ but using; finate difference approximation for the",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:947,Availability,avail,available,947,"/** @defgroup MultiRoot Multidimensional ROOT finding; Classes for finding the roots of a multi-dimensional system.; @ingroup NumAlgo; */; /**; Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridS</tt> with name <i>""HybridS""</i>: same as HybridSJ but using; finate difference approximation for the",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:772,Integrability,interface,interface,772,"/** @defgroup MultiRoot Multidimensional ROOT finding; Classes for finding the roots of a multi-dimensional system.; @ingroup NumAlgo; */; /**; Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridS</tt> with name <i>""HybridS""</i>: same as HybridSJ but using; finate difference approximation for the",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:931,Integrability,interface,interface,931,"/** @defgroup MultiRoot Multidimensional ROOT finding; Classes for finding the roots of a multi-dimensional system.; @ingroup NumAlgo; */; /**; Class for Multidimensional root finding algorithms bassed on GSL. This class is used to solve a; non-linear system of equations:. f1(x1,....xn) = 0; f2(x1,....xn) = 0; ..................; fn(x1,....xn) = 0. See the GSL <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Multidimensional-Root_002dFinding.html""> online manual</A> for; information on the GSL MultiRoot finding algorithms. The available GSL algorithms require the derivatives of the supplied functions or not (they are; computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the; gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of; functions impelmenting the ROOT::Math::IMultiGenFunction interface.; The available algorithms requiring derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-using-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridSJ</tt> with name <i>""HybridSJ""</i>: modified Powell's hybrid; method as implemented in HYBRJ in MINPACK; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridJ</tt> with name <i>""HybridJ""</i>: unscaled version of the; previous algorithm</li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kNewton</tt> with name <i>""Newton""</i>: Newton method </li>; <li><tt>ROOT::Math::GSLMultiRootFinder::kGNewton</tt> with name <i>""GNewton""</i>: modified Newton method </li>; </ul>; The algorithms without derivatives (see also the GSL; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Algorithms-without-Derivatives.html"">documentation</A> ); are the followings:; <ul>; <li><tt>ROOT::Math::GSLMultiRootFinder::kHybridS</tt> with name <i>""HybridS""</i>: same as HybridSJ but using; finate difference approximation for the",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:429,Integrability,interface,interface,429,"/*; add the list of functions f1(x1,..xn),...fn(x1,...xn). The list must contain pointers of; ROOT::Math::IMultiGenFunctions. The method requires the; the begin and end of the list iterator.; The list can be any stl container or a simple array of ROOT::Math::IMultiGenFunctions* or; whatever implementing an iterator.; If using a derivative type algorithm the function pointers must implement the; ROOT::Math::IMultiGradFunction interface; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:231,Usability,simpl,simple,231,"/*; add the list of functions f1(x1,..xn),...fn(x1,...xn). The list must contain pointers of; ROOT::Math::IMultiGenFunctions. The method requires the; the begin and end of the list iterator.; The list can be any stl container or a simple array of ROOT::Math::IMultiGenFunctions* or; whatever implementing an iterator.; If using a derivative type algorithm the function pointers must implement the; ROOT::Math::IMultiGradFunction interface; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:225,Integrability,interface,interface,225,"/*; add (set) a single function fi(x1,...xn) which is part of the system of; specifying the begin and end of the iterator.; If using a derivative type algorithm the function must implement the; ROOT::Math::IMultiGradFunction interface; Return the current number of function in the list and 0 if failed to add the function; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:93,Integrability,wrap,wrapped,93,"/// same method as before but using any function implementing; /// the operator(), so can be wrapped in a IMultiGenFunction interface",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:124,Integrability,interface,interface,124,"/// same method as before but using any function implementing; /// the operator(), so can be wrapped in a IMultiGenFunction interface",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:4,Usability,clear,clear,4,"/// clear list of functions",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:79,Availability,toler,tolerance,79,/**; Find the root starting from the point X;; Use the number of iteration and tolerance if given otherwise use; default parameter values which can be defined by; the static method SetDefault...; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:69,Availability,avail,available,69,"/// Return the algorithm name used for solving; /// Note the name is available only after having called solved; /// Otherwise an empyty string is returned",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:41,Integrability,message,messages,41,/*; set print level; level = 0 quiet (no messages print); = 1 print only the result; = 3 max debug. Print result at each iteration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:51,Availability,toler,tolerance,51,"//-- static methods to set configurations; /// set tolerance (absolute and relative); /// relative tolerance is only use to verify the convergence; /// do it is a minor parameter",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:99,Availability,toler,tolerance,99,"//-- static methods to set configurations; /// set tolerance (absolute and relative); /// relative tolerance is only use to verify the convergence; /// do it is a minor parameter",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:27,Deployability,configurat,configurations,27,"//-- static methods to set configurations; /// set tolerance (absolute and relative); /// relative tolerance is only use to verify the convergence; /// do it is a minor parameter",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:27,Modifiability,config,configurations,27,"//-- static methods to set configurations; /// set tolerance (absolute and relative); /// relative tolerance is only use to verify the convergence; /// do it is a minor parameter",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:3,Usability,clear,clear,3,"// clear list of functions",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:99,Availability,toler,tolerance,99,"// print level; // int fMaxIter; // max number of iterations; // double fAbsTolerance; // absolute tolerance; // double fRelTolerance; // relative tolerance",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h:147,Availability,toler,tolerance,147,"// print level; // int fMaxIter; // max number of iterations; // double fAbsTolerance; // absolute tolerance; // double fRelTolerance; // relative tolerance",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLMultiRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLMultiRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:14,Performance,perform,perform,14,"/// method to perform the minimization",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:196,Availability,error,error,196,"/// number of free variables (real dimension of the problem); /// this is <= Function().NDim() which is the total; // virtual unsigned int NFree() const { return fNFree; }; /// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:206,Availability,error,error,206,"/// number of free variables (real dimension of the problem); /// this is <= Function().NDim() which is the total; // virtual unsigned int NFree() const { return fNFree; }; /// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:19,Modifiability,variab,variables,19,"/// number of free variables (real dimension of the problem); /// this is <= Function().NDim() which is the total; // virtual unsigned int NFree() const { return fNFree; }; /// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:11,Availability,error,errors,11,"/// return errors at the minimum",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:229,Availability,error,errors,229,// {; // static std::vector<double> err;; // err.resize(fDim);; // return &err.front();; // }; /** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:143,Modifiability,variab,variable,143,// {; // static std::vector<double> err;; // err.resize(fDim);; // return &err.front();; // }; /** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:201,Modifiability,variab,variables,201,// {; // static std::vector<double> err;; // err.resize(fDim);; // return &err.front();; // }; /** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:23,Performance,perform,perform,23,"/// Internal method to perform minimization; /// template on the type of method function",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h:15,Availability,Toler,Tolerance,15,"// Line Search Tolerance",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLNLSMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLNLSMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLQuasiRandom.h:1174,Deployability,update,update,1174,"// @(#)root/mathmore:$Id$; // Author: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLQuasiRandom; //; // Created by: moneta at Sun Nov 21 16:26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLQuasiRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLQuasiRandom.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLQuasiRandom.h:28,Integrability,wrap,wrapper,28,"// pointer to GSL generator wrapper (managed by the class)",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLQuasiRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLQuasiRandom.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h:5,Testability,Log,Log,5,/**; Log Normal distribution; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRandomFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h:5,Testability,Log,Logistic,5,/**; Logistic distribution; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRandomFunctions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRandomFunctions.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:1169,Deployability,update,update,1169,"// @(#)root/mathmore:$Id$; // Author: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRandom; //; // Created by: moneta at Sun Nov 21 16:26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:363,Availability,avail,available,363,"//_________________________________________________________________; /**; GSLRandomEngine; Base class for all GSL random engines,; normally user instantiate the derived classes; which creates internally the generator. The main GSL generators (see; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-number-generator-algorithms.html"">; here</A>) are available as derived classes; In addition to generate uniform numbers it provides method for; generating numbers according to pre-defined distributions; using the GSL functions from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">; GSL random number distributions</A>. @ingroup Random; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:97,Availability,avail,available,97,"/**; Generate an integer number between [0,max-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:130,Availability,error,error,130,"/**; Generate an integer number between [0,max-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:136,Integrability,message,message,136,"/**; Generate an integer number between [0,max-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:107,Availability,avail,available,107,"/**; Generate an integer number between [0,max_generator-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:140,Availability,error,error,140,"/**; Generate an integer number between [0,max_generator-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:146,Integrability,message,message,146,"/**; Generate an integer number between [0,max_generator-1] (including 0 and max-1); if max is larger than available range of algorithm; an error message is printed and zero is returned; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:5,Testability,Log,Log,5,/**; Log Normal distribution; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:5,Testability,Log,Logistic,5,/**; Logistic distribution; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h:28,Integrability,wrap,wrapper,28,"// pointer to GSL generator wrapper (managed by the class)",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRndmEngines.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRndmEngines.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinder.h:1173,Deployability,update,update,1173,"// @(#)root/mathmore:$Id$; // Author: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRootFinder; //; // Created by: moneta at Sun Nov 14 11:27:11 2004; //; // Last update: Sun Nov 14 11:27:11 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinder.h:84,Availability,error,error,84,"// iterate to find ROOTS return GSL_CONTINUE if iteration was successful or another error",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinderDeriv.h:1179,Deployability,update,update,1179,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRootFinderDeriv; //; // Created by: moneta at Sun Nov 21 16:26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRootFinderDeriv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootFinderDeriv.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootHelper.h:1174,Deployability,update,update,1174,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRootHelper; //; // Created by: moneta at Sun Nov 14 21:34:15 2004; //; // Last update: Sun Nov 14 21:34:15 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRootHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootHelper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootHelper.h:25,Testability,test,test,25,/**; Helper functions to test convergence of Root-Finding algorithms.; Used by ROOT::Math::RootFinder class (see there for the doc); */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLRootHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLRootHelper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h:419,Deployability,Configurat,Configuration,419,"//_____________________________________________________________________________________; /**; GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager; Configuration (Setting/getting) the options is done through the methods defined in the; ROOT::Math::Minimizer class.; The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the; corresponding options.; Here is some code example for increasing n_tries from 200 (default) to 1000; ```; ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ```. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h:318,Integrability,interface,interface,318,"//_____________________________________________________________________________________; /**; GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager; Configuration (Setting/getting) the options is done through the methods defined in the; ROOT::Math::Minimizer class.; The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the; corresponding options.; Here is some code example for increasing n_tries from 200 (default) to 1000; ```; ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ```. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h:335,Modifiability,plug-in,plug-in,335,"//_____________________________________________________________________________________; /**; GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager; Configuration (Setting/getting) the options is done through the methods defined in the; ROOT::Math::Minimizer class.; The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the; corresponding options.; Here is some code example for increasing n_tries from 200 (default) to 1000; ```; ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ```. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h:402,Modifiability,plug-in,plug-in,402,"//_____________________________________________________________________________________; /**; GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager; Configuration (Setting/getting) the options is done through the methods defined in the; ROOT::Math::Minimizer class.; The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the; corresponding options.; Here is some code example for increasing n_tries from 200 (default) to 1000; ```; ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ```. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h:419,Modifiability,Config,Configuration,419,"//_____________________________________________________________________________________; /**; GSLSimAnMinimizer class for minimization using simulated annealing; using the algorithm from; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Simulated-Annealing.html"">; GSL</A>.; It implements the ROOT::Minimizer interface and; a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager; Configuration (Setting/getting) the options is done through the methods defined in the; ROOT::Math::Minimizer class.; The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the; corresponding options.; Here is some code example for increasing n_tries from 200 (default) to 1000; ```; ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ```. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h:14,Performance,perform,perform,14,"/// method to perform the minimization",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:119,Integrability,Interface,Interface,119,//_____________________________________________________________________________; /**; GSLSimAnFunc class description.; Interface class for the objetive function to be used in simulated annealing; If user wants to re-implement some of the methods (like the one defining the metric) which are used by the; the simulated annealing algorithm must build a user derived class.; NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class. @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:23,Integrability,interface,interface,23,/**; construct from an interface of a multi-dimensional function; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:23,Integrability,interface,interface,23,/**; construct from an interface of a multi-dimensional function; Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes; (this is used for example by the minimization algorithm); */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:18,Energy Efficiency,energy,energy,18,/**; evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:66,Deployability,configurat,configuration,66,/**; calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:66,Modifiability,config,configuration,66,/**; calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:131,Energy Efficiency,energy,energy,131,"/**; print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h:110,Performance,perform,performing,110,//___________________________________________________________________________; /**; GSLSimAnnealing class for performing a simulated annealing search of; a multidimensional function. @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/GSLSimAnnealing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/GSLSimAnnealing.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:1092,Deployability,Integrat,IntegrationTypes,1092,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class IntegrationTypes; //; // Created by: moneta at Fri Nov 26 15:40:58 2004; //; // Last update: Fri Nov 26 15:40:58 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:1177,Deployability,update,update,1177,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class IntegrationTypes; //; // Created by: moneta at Fri Nov 26 15:40:58 2004; //; // Last update: Fri Nov 26 15:40:58 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:1092,Integrability,Integrat,IntegrationTypes,1092,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class IntegrationTypes; //; // Created by: moneta at Fri Nov 26 15:40:58 2004; //; // Last update: Fri Nov 26 15:40:58 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:14,Deployability,integrat,integration,14,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:133,Deployability,integrat,integration,133,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:163,Deployability,integrat,integration,163,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:190,Deployability,Integrat,Integration,190,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:55,Energy Efficiency,ADAPT,ADAPTIVE,55,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:65,Energy Efficiency,ADAPT,ADAPTIVESINGULAR,65,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:154,Energy Efficiency,ADAPT,ADAPTIVE,154,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:224,Energy Efficiency,Adapt,Adaptive,224,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:14,Integrability,integrat,integration,14,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:133,Integrability,integrat,integration,133,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:163,Integrability,integrat,integration,163,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:190,Integrability,Integrat,Integration,190,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:55,Modifiability,ADAPT,ADAPTIVE,55,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:65,Modifiability,ADAPT,ADAPTIVESINGULAR,65,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:154,Modifiability,ADAPT,ADAPTIVE,154,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:224,Modifiability,Adapt,Adaptive,224,"// // type of integration; // enum Type { NONADAPTIVE, ADAPTIVE, ADAPTIVESINGULAR } ;; /**; enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type; @ingroup Integration; */; // Gauss KronRod Adaptive rule",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:17,Deployability,Integrat,Integration,17,"// end namespace Integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h:17,Integrability,Integrat,Integration,17,"// end namespace Integration",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/IntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/IntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h:1179,Deployability,update,update,1179,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class InterpolationTypes; //; // Created by: moneta at Fri Nov 26 15:40:58 2004; //; // Last update: Fri Nov 26 15:40:58 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/InterpolationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h:61,Availability,avail,availables,61,"/**; Enumeration defining the types of interpolation methods availables.; Passed as argument to instantiate mathlib::Interpolator objects.; The types available are (more information is available in the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Interpolation-Types.html"">GSL manual</A>):; <ul>; <li>LINEAR interpolation;; <li>POLYNOMIAL interpolation, to be used for small number of points since introduces large oscillations;; <li>CSPLINE cubic spline with natural boundary conditions;; <li>CSPLINE_PERIODIC cubic spline with periodic boundary conditions;; <li>AKIMA, Akima spline with natural boundary conditions ( requires a minimum of 5 points);; <li>AKIMA_PERIODIC, Akima spline with periodic boundaries ( requires a minimum of 5 points);; </ul>. @ingroup Interpolation; */; // enumerations for the type of interpolations",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/InterpolationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h:150,Availability,avail,available,150,"/**; Enumeration defining the types of interpolation methods availables.; Passed as argument to instantiate mathlib::Interpolator objects.; The types available are (more information is available in the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Interpolation-Types.html"">GSL manual</A>):; <ul>; <li>LINEAR interpolation;; <li>POLYNOMIAL interpolation, to be used for small number of points since introduces large oscillations;; <li>CSPLINE cubic spline with natural boundary conditions;; <li>CSPLINE_PERIODIC cubic spline with periodic boundary conditions;; <li>AKIMA, Akima spline with natural boundary conditions ( requires a minimum of 5 points);; <li>AKIMA_PERIODIC, Akima spline with periodic boundaries ( requires a minimum of 5 points);; </ul>. @ingroup Interpolation; */; // enumerations for the type of interpolations",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/InterpolationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h:185,Availability,avail,available,185,"/**; Enumeration defining the types of interpolation methods availables.; Passed as argument to instantiate mathlib::Interpolator objects.; The types available are (more information is available in the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Interpolation-Types.html"">GSL manual</A>):; <ul>; <li>LINEAR interpolation;; <li>POLYNOMIAL interpolation, to be used for small number of points since introduces large oscillations;; <li>CSPLINE cubic spline with natural boundary conditions;; <li>CSPLINE_PERIODIC cubic spline with periodic boundary conditions;; <li>AKIMA, Akima spline with natural boundary conditions ( requires a minimum of 5 points);; <li>AKIMA_PERIODIC, Akima spline with periodic boundaries ( requires a minimum of 5 points);; </ul>. @ingroup Interpolation; */; // enumerations for the type of interpolations",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/InterpolationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/InterpolationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:1173,Deployability,update,update,1173,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class Interpolator; //; // Created by: moneta at Fri Nov 26 15:00:25 2004; //; // Last update: Fri Nov 26 15:00:25 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:285,Availability,avail,available,285,"//_____________________________________________________________________________________; /**; Class for performing function interpolation of points.; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor.; See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL.; See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual</A> for more information.; The class provides additional methods for computing derivatives and integrals of interpolating functions. This class does not support copying.; @ingroup Interpolation; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:104,Performance,perform,performing,104,"//_____________________________________________________________________________________; /**; Class for performing function interpolation of points.; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor.; See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL.; See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual</A> for more information.; The class provides additional methods for computing derivatives and integrals of interpolating functions. This class does not support copying.; @ingroup Interpolation; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:146,Deployability,continuous,continuous,146,"/**; Constructs an interpolator class from vector of data points \f$ (x_i, y_i )\f$ and with Interpolation::Type type.; The method will compute a continuous interpolating function \f$ y(x) \f$ such that \f$ y_i = y ( x_i )\f$.; The default interpolation type is Cubic spline; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:48,Energy Efficiency,efficient,efficient,48,"/**; Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:194,Performance,perform,performed,194,"/**; Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used in the constructor (ndata); If this is not the case a new re-initialization is performed with the new data size; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:48,Energy Efficiency,efficient,efficient,48,"/**; Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size.; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h:203,Performance,perform,performed,203,"/**; Set the data vector ( x[] and y[] ); To be efficient, the size of the data must be the same of the value used when constructing the class (ndata); If this is not the case a new re-initialization is performed with the new data size.; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Interpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Interpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/LinkDef.h:11,Modifiability,inherit,inheritance,11,"// virtual inheritance gives problem when making dictionary on Windows",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/LinkDef.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/LinkDef.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/LinkDef_Func.h:12,Performance,load,loading,12,"// for auto-loading of mathmore; // one can do it by doing using namespace ROOT::Math::MathMore",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/LinkDef_Func.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/LinkDef_Func.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCIntegrationTypes.h:11,Deployability,integrat,integration,11,"// type of integration; //enum Type { PLAIN, MISER, VEGAS};",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MCIntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCIntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCIntegrationTypes.h:11,Integrability,integrat,integration,11,"// type of integration; //enum Type { PLAIN, MISER, VEGAS};",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MCIntegrationTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCIntegrationTypes.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h:66,Deployability,integrat,integration,66,/**; Structures collecting parameters; for VEGAS multidimensional integration; For implementation of default parameters see file; mathmore/src/GSLMCIntegrationWorkspace.h. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MCParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h:66,Integrability,integrat,integration,66,/**; Structures collecting parameters; for VEGAS multidimensional integration; For implementation of default parameters see file; mathmore/src/GSLMCIntegrationWorkspace.h. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MCParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h:65,Deployability,integrat,integration,65,/**; Structure collecting parameters; for MISER multidimensional integration. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MCParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h:65,Integrability,integrat,integration,65,/**; Structure collecting parameters; for MISER multidimensional integration. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MCParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MCParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:35,Integrability,wrap,wrap,35,/**; MultiNumGradFunction class to wrap a normal function in a; gradient function using numerical gradient calculation; provided by the class Derivator (based on GSL numerical derivation). @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MultiNumGradFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:42,Integrability,interface,interface,42,/**; Constructor from a IMultiGenFunction interface; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MultiNumGradFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:12,Integrability,wrap,wrapped,12,"// create a wrapped function",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MultiNumGradFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:36,Integrability,interface,interface,36,"// method inheritaed from IFunction interface",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MultiNumGradFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:10,Modifiability,inherit,inheritaed,10,"// method inheritaed from IFunction interface",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MultiNumGradFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h:38,Integrability,wrap,wrapped,38,"// we need to copy the pointer to the wrapped function",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/MultiNumGradFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/MultiNumGradFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h:1226,Deployability,update,update,1226,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class ParamFunction; //; // Base class for Parametric functions; //; // Created by: Lorenzo Moneta at Wed Nov 10 16:38:34 2004; //; // Last update: Wed Nov 10 16:38:34 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h:203,Integrability,interface,interface,203,"//_____________________________________________________________________________________; /**; Base template class for all Parametric Functions.; The template argument is the type of parameteric function interface is implementing like; Parameteric 1D, Multi-Dim or gradient parametric. A parameteric function is a Generic Function with parameters, so; it is a function object which carries a state, the parameters.; The parameters are described with a standard vector of doubles. This class contains the default implementations for the methods defined in the; IParamFunction interface for dealing with parameters; Specific parameteric function classes should derive from this class if they want to profit from; default implementations for the abstract methods.; The derived classes need to implement only the DoEvalPar( x, p) and Clone() methods for non-gradient; parameteric functions or DoParameterDerivative(x,p,ipar) for gradient par functions. @ingroup ParamFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h:574,Integrability,interface,interface,574,"//_____________________________________________________________________________________; /**; Base template class for all Parametric Functions.; The template argument is the type of parameteric function interface is implementing like; Parameteric 1D, Multi-Dim or gradient parametric. A parameteric function is a Generic Function with parameters, so; it is a function object which carries a state, the parameters.; The parameters are described with a standard vector of doubles. This class contains the default implementations for the methods defined in the; IParamFunction interface for dealing with parameters; Specific parameteric function classes should derive from this class if they want to profit from; default implementations for the abstract methods.; The derived classes need to implement only the DoEvalPar( x, p) and Clone() methods for non-gradient; parameteric functions or DoParameterDerivative(x,p,ipar) for gradient par functions. @ingroup ParamFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h:53,Security,Access,Access,53,// copying constructors (can use default ones); /**; Access the parameter values; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h:3,Performance,cache,cache,3,"// cache number of Parameters for speed efficiency",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h:36,Security,access,accessible,36,"// Parameters (make protected to be accessible directly by derived classes)",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/ParamFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/ParamFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/PdfFuncMathMore.h:52,Performance,load,load,52,"// end namespace ROOT; // make a fake class to auto-load functions from MathMore",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/PdfFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/PdfFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/PdfFuncMathMore.h:42,Performance,load,loading,42,"// adding this method with force the auto-loading of the library",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/PdfFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/PdfFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:1179,Deployability,update,update,1179,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class Polynomial; //; // Created by: Lorenzo Moneta at Wed Nov 10 17:46:19 2004; //; // Last update: Wed Nov 10 17:46:19 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:467,Integrability,interface,interface,467,"//_____________________________________________________________________________________; /**; Parametric Function class describing polynomials of order n. <em>P(x) = p[0] + p[1]*x + p[2]*x**2 + ....... + p[n]*x**n</em>. The class implements also the derivatives, \a dP(x)/dx and the \a dP(x)/dp[i]. The class provides also the method to find the roots of the polynomial.; It uses analytical methods up to quartic polynomials. Implements both the Parameteric function interface and the gradient interface; since it provides the analytical gradient with respect to x. @ingroup ParamFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:494,Integrability,interface,interface,494,"//_____________________________________________________________________________________; /**; Parametric Function class describing polynomials of order n. <em>P(x) = p[0] + p[1]*x + p[2]*x**2 + ....... + p[n]*x**n</em>. The class implements also the derivatives, \a dP(x)/dx and the \a dP(x)/dp[i]. The class provides also the method to find the roots of the polynomial.; It uses analytical methods up to quartic polynomials. Implements both the Parameteric function interface and the gradient interface; since it provides the analytical gradient with respect to x. @ingroup ParamFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:791,Availability,robust,robust,791,"// use default copy-ctor and assignment operators; // using ParamFunction::operator();; /**; Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""https://www.gnu.org/software/gsl/doc/html/poly.html"">documentation</A> ); For the case of n = 4 by default an analytical algorithm is used from an implementation by; Andrew W. Steiner and Andy Buckley which is a translation from the original Cenrlib routine; (< HREF=""https://cds.cern.ch/record/2050876/files/c208.html"">RRTEQ4</A> ).; Note that depending on the coefficients the result could be not very accurate if the discriminant of the resolvent cubic; equation is very small. In that case it might be more robust to use the numerical method, by calling directly FindNumRoots(). */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:530,Integrability,rout,routine,530,"// use default copy-ctor and assignment operators; // using ParamFunction::operator();; /**; Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""https://www.gnu.org/software/gsl/doc/html/poly.html"">documentation</A> ); For the case of n = 4 by default an analytical algorithm is used from an implementation by; Andrew W. Steiner and Andy Buckley which is a translation from the original Cenrlib routine; (< HREF=""https://cds.cern.ch/record/2050876/files/c208.html"">RRTEQ4</A> ).; Note that depending on the coefficients the result could be not very accurate if the discriminant of the resolvent cubic; equation is very small. In that case it might be more robust to use the numerical method, by calling directly FindNumRoots(). */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:625,Integrability,depend,depending,625,"// use default copy-ctor and assignment operators; // using ParamFunction::operator();; /**; Find the polynomial roots.; For n <= 4, the roots are found analytically while for larger order an iterative numerical method is used; The numerical method used is from GSL (see <A HREF=""https://www.gnu.org/software/gsl/doc/html/poly.html"">documentation</A> ); For the case of n = 4 by default an analytical algorithm is used from an implementation by; Andrew W. Steiner and Andy Buckley which is a translation from the original Cenrlib routine; (< HREF=""https://cds.cern.ch/record/2050876/files/c208.html"">RRTEQ4</A> ).; Note that depending on the coefficients the result could be not very accurate if the discriminant of the resolvent cubic; equation is very small. In that case it might be more robust to use the numerical method, by calling directly FindNumRoots(). */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:114,Integrability,interface,interface,114,/**; Optimized method to evaluate at the same time the function value and derivative at a point x.; Implement the interface specified by ROOT::Math::IGradientOneDim.; In the case of polynomial there is no advantage to compute both at the same time; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:5,Performance,Optimiz,Optimized,5,/**; Optimized method to evaluate at the same time the function value and derivative at a point x.; Implement the interface specified by ROOT::Math::IGradientOneDim.; In the case of polynomial there is no advantage to compute both at the same time; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:3,Performance,cache,cache,3,"// cache order = number of params - 1)",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h:3,Performance,cache,cache,3,"// cache Parameters for Gradient",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Polynomial.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Polynomial.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuantFuncMathMore.h:924,Deployability,release,releases,924,"/** @defgroup QuantFunc Quantile Functions; * @ingroup StatFunc; *; * Inverse functions of the cumulative distribution functions; * and the inverse of the complement of the cumulative distribution functions; * for various distributions.; * The functions with the extension <em>_quantile</em> calculate the; * inverse of the <em>_cdf</em> function, the; * lower tail integral of the probability density function; * \f$D^{-1}(z)\f$ where; *; * \f[ D(x) = \int_{-\infty}^{x} p(x') dx' \f]; *; * while those with the <em>_quantile_c</em> extension calculate the; * inverse of the <em>_cdf_c</em> functions, the upper tail integral of the probability; * density function \f$D^{-1}(z) \f$ where; *; * \f[ D(x) = \int_{x}^{+\infty} p(x') dx' \f]; *; * The implementation used is that of; * <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">GSL</A>.; *; * <strong>NOTE:</strong> In the old releases (< 5.14) the <em>_quantile</em> functions were called; * <em>_quant_inv</em> and the <em>_quantile_c</em> functions were called; * <em>_prob_inv</em>.; * These names are currently kept for backward compatibility, but; * their usage is deprecated.; */; /** @name Quantile Functions from MathMore; * The implementation used is that of; * <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html"">GSL</A>.; */; //@{; /**. Inverse (\f$D^{-1}(z)\f$) of the cumulative distribution; function of the upper tail of Student's t-distribution; (#tdistribution_cdf_c). For detailed description see; <A HREF=""http://mathworld.wolfram.com/Studentst-Distribution.html"">; Mathworld</A>. The implementation used is that of; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_19.html#SEC305"">GSL</A>. @ingroup QuantFunc. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/QuantFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuantFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h:1169,Deployability,update,update,1169,"// @(#)root/mathmore:$Id$; // Author: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRandom; //; // Created by: moneta at Sun Nov 21 16:26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/QuasiRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h:136,Energy Efficiency,allocate,allocate,136,/**; Create a QuasiRandom generator. Use default engine constructor.; Engine will be initialized via Initialize() function in order to; allocate resources; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/QuasiRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h:139,Energy Efficiency,allocate,allocate,139,/**; Create a QuasiRandom generator based on a provided generic engine.; Engine will be initialized via Initialize() function in order to; allocate resources; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/QuasiRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h:66,Energy Efficiency,allocate,allocated,66,/**; Destructor: call Terminate() function of engine to free any; allocated resource; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/QuasiRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/QuasiRandom.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h:1180,Deployability,update,update,1180,"// @(#)root/mathmore:$Id$; // Author: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for GSL ROOT Finder Algorithms; //; // Created by: moneta at Sun Nov 14 14:07:50 2004; //; // Last update: Sun Nov 14 14:07:50 2004; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/RootFinderAlgorithms.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h:152,Usability,simpl,simplest,152,"//________________________________________________________________________________________________________; /**; Roots::Bisection; Bisection algorithm, simplest algorithm for bracketing the roots of a function, but slowest one.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Bracketing-Algorithms.html"">GSL manual</A> for more information; @ingroup RootFinders; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/RootFinderAlgorithms.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h:134,Usability,simpl,simplified,134,"//________________________________________________________________________________________________________; /**; \a Secant algorithm, simplified version of Newton method, which does not require the derivative at every step.; See the <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Root-Finding-Algorithms-using-Derivatives.html"">; GSL manual</A> for more information; @ingroup RootFinders; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/RootFinderAlgorithms.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/RootFinderAlgorithms.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h:115,Integrability,depend,dependence,115,"/**. Computes the spherical (normalized) associated Legendre polynomials,; or spherical harmonic without azimuthal dependence (\f$e^(im\phi)\f$). \f[ Y_l^m(theta,0) = \sqrt{(2l+1)/(4\pi)} \sqrt{(l-m)!/(l+m)!} P_l^m(cos \theta) \f]. for \f$m \geq 0, l \geq m\f$,; where the Condon-Shortley phase \f$(-1)^m\f$ is included in P_l^m(x); This function is consistent with both C++0x and GSL,; even though there is a discrepancy in where to include the phase.; There is no reference in Abramowitz and Stegun. @ingroup SpecFunc. */; // [5.2.1.22] spherical associated Legendre functions",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/SpecFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h:30,Modifiability,coupling,coupling,30,"/**. Calculates the Wigner 3j coupling coefficients. (ja jb jc; ma mb mc). where ja,ma,...etc are integers or half integers.; The function takes as input arguments only integers which corresponds; to half integer units, e.g two_ja = 2 * ja. For detailed description see; <A HREF=""http://mathworld.wolfram.com/Wigner3j-Symbol.html.html"">; Mathworld</A>.; The implementation used is that of; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/3_002dj-Symbols.html#g_t3_002dj-Symbols"">GSL</A>. @ingroup SpecFunc. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/SpecFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h:30,Modifiability,coupling,coupling,30,"/**. Calculates the Wigner 6j coupling coefficients. (ja jb jc; jd je jf). where ja,jb,...etc are integers or half integers.; The function takes as input arguments only integers which corresponds; to half integer units, e.g two_ja = 2 * ja. For detailed description see; <A HREF=""http://mathworld.wolfram.com/Wigner6j-Symbol.html"">; Mathworld</A>.; The implementation used is that of; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/6_002dj-Symbols.html#g_t6_002dj-Symbols"">GSL</A>. @ingroup SpecFunc. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/SpecFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h:30,Modifiability,coupling,coupling,30,"/**. Calculates the Wigner 9j coupling coefficients. (ja jb jc; jd je jf; jg jh ji). where ja,jb...etc are integers or half integers.; The function takes as input arguments only integers which corresponds; to half integer units, e.g two_ja = 2 * ja. For detailed description see; <A HREF=""http://mathworld.wolfram.com/Wigner9j-Symbol.html"">; Mathworld</A>.; The implementation used is that of; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/9_002dj-Symbols.html#g_t9_002dj-Symbols"">GSL</A>. @ingroup SpecFunc. */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/SpecFuncMathMore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/SpecFuncMathMore.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:1156,Deployability,update,update,1156,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class Vavilov; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:1442,Availability,Avail,Available,1442," \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. - VavilovAccurate uses the algorithm by; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.d",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:211,Energy Efficiency,energy,energy,211,"//____________________________________________________________________________; /**; Base class describing a Vavilov distribution. The Vavilov distribution is defined in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi ",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:1106,Energy Efficiency,Energy,Energy,1106,"in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; w",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:1299,Energy Efficiency,charge,charged,1299," 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g115/top.html"">; CERNLIB (G1",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:1044,Integrability,rout,routines,1044,"//____________________________________________________________________________; /**; Base class describing a Vavilov distribution. The Vavilov distribution is defined in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi ",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h:1904,Testability,log,log,1904,"stribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. - VavilovAccurate uses the algorithm by; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. Both subclasses store coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. VavilovFast is about 5 times faster for",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/Vavilov.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/Vavilov.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:1164,Deployability,update,update,1164,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class VavilovAccurate; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:1273,Availability,Avail,Available,1273,"int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computatio",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:937,Energy Efficiency,Energy,Energy,937,"//____________________________________________________________________________; /**; Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has be",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:1130,Energy Efficiency,charge,charged,1130,"ibution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>.",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:875,Integrability,rout,routines,875,"//____________________________________________________________________________; /**; Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has be",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:3839,Integrability,depend,depending,3839,"; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ should be in the range \f$0.01 \le \kappa \le 10\f$.; In contrast to the CERNLIB implementation, all values of \f$\kappa \ge 0.001\f$ may be used,; but may result in slower running and/or inaccurate results. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Two parameters which are fixed in the CERNLIB implementation may be set by the user:; - epsilonPM corresponds to \f$\epsilon^+ = \epsilon^-\f$ in Eqs. (2.1) and (2.2) of Schorr's paper.; epsilonPM gives an estimate on the integral of the cumulative distribution function; outside the range \f$\lambda_{min} \le \lambda \le \lambda_{max}\f$; where the approximation is valid.; Thus, it determines the support of the approximation used here (called $T_0 - T_1$ in the paper).; Schorr recommends \f$\epsilon^+ = \epsilon^- = 5\cdot 10^{-4}\f$.; The code from CERNLIB has been extended such that also smaller values are possible. - epsilon corresponds to \f$\epsilon\f$ in Eq. (4.10) of Schorr's paper.; It determines the accuracy of the series expansion.; Schorr recommends \f$\epsilon = 10^{-5}\f$. For the quantile calculation, the algorithm given by Schorr is not used,; because it turns out to be very slow and still inaccurate.; Instead, an initial estimate is calculated based on a pre-calculated table,; which is subsequently improved by Newton iterations. While the CERNLIB implementation calculates at most 156 terms in the series expansion; for the pdf and cdf calculation, this class calculates up to 500 terms, depending; on the values of epsilonPM and epsilon. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 38us per call to SetKappaBeta2 or constructor; - 0.49us per call to Pdf, Cdf; - 8.2us per first call to Quantile after SetKappaBeta2 or constructor; - 0.83us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:3192,Modifiability,extend,extended,3192,"; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ should be in the range \f$0.01 \le \kappa \le 10\f$.; In contrast to the CERNLIB implementation, all values of \f$\kappa \ge 0.001\f$ may be used,; but may result in slower running and/or inaccurate results. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Two parameters which are fixed in the CERNLIB implementation may be set by the user:; - epsilonPM corresponds to \f$\epsilon^+ = \epsilon^-\f$ in Eqs. (2.1) and (2.2) of Schorr's paper.; epsilonPM gives an estimate on the integral of the cumulative distribution function; outside the range \f$\lambda_{min} \le \lambda \le \lambda_{max}\f$; where the approximation is valid.; Thus, it determines the support of the approximation used here (called $T_0 - T_1$ in the paper).; Schorr recommends \f$\epsilon^+ = \epsilon^- = 5\cdot 10^{-4}\f$.; The code from CERNLIB has been extended such that also smaller values are possible. - epsilon corresponds to \f$\epsilon\f$ in Eq. (4.10) of Schorr's paper.; It determines the accuracy of the series expansion.; Schorr recommends \f$\epsilon = 10^{-5}\f$. For the quantile calculation, the algorithm given by Schorr is not used,; because it turns out to be very slow and still inaccurate.; Instead, an initial estimate is calculated based on a pre-calculated table,; which is subsequently improved by Newton iterations. While the CERNLIB implementation calculates at most 156 terms in the series expansion; for the pdf and cdf calculation, this class calculates up to 500 terms, depending; on the values of epsilonPM and epsilon. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 38us per call to SetKappaBeta2 or constructor; - 0.49us per call to Pdf, Cdf; - 8.2us per first call to Quantile after SetKappaBeta2 or constructor; - 0.83us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:1735,Testability,log,log,1735,"stribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ should be in the range \f$0.01 \le \kappa \le 10\f$.; In contrast to the CERNLIB implementation, all values of \f$\kappa \ge 0.001\f$ may be used,; but may result in slower running and/or inaccurate results. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Two parameters which are fixed in the CERNLIB implementation may be set by the user:; - epsilonPM corresponds to \f$",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h:14,Testability,log,log,14,"// Calculates log(|x|)+E_1(x)",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurate.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurate.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateCdf.h:1167,Deployability,update,update,1167,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class VavilovAccurateCdf; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurateCdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateCdf.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateCdf.h:5,Security,Access,Access,5,/**; Access the parameter values; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurateCdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateCdf.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateCdf.h:86,Safety,avoid,avoid,86,"/**; Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""); */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurateCdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateCdf.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccuratePdf.h:1167,Deployability,update,update,1167,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class VavilovAccuratePdf; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccuratePdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccuratePdf.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccuratePdf.h:5,Security,Access,Access,5,/**; Access the parameter values; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccuratePdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccuratePdf.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateQuantile.h:1172,Deployability,update,update,1172,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class VavilovAccurateQuantile; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurateQuantile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateQuantile.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateQuantile.h:5,Security,Access,Access,5,/**; Access the parameter values; */,MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovAccurateQuantile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovAccurateQuantile.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:1160,Deployability,update,update,1160,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class VavilovFast; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovFast.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:1269,Availability,Avail,Available,1269," i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. The class stores coe",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovFast.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:933,Energy Efficiency,Energy,Energy,933,"//____________________________________________________________________________; /**; Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calcul",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovFast.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:1126,Energy Efficiency,charge,charged,1126,"istribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. ",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovFast.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:871,Integrability,rout,routines,871,"//____________________________________________________________________________; /**; Class describing a Vavilov distribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calcul",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovFast.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h:1913,Testability,log,log,1913,".M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; which has been implemented in; <A HREF=""https://cern-tex.web.cern.ch/cern-tex/shortwrupsdir/g115/top.html"">; CERNLIB (G115)</A>. The class stores coefficients needed to calculate \f$p(\lambda; \kappa, \beta^2)\f$; for fixed values of \f$\kappa\f$ and \f$\beta^2\f$.; Changing these values is computationally expensive. The parameter \f$\kappa\f$ must be in the range \f$0.01 \le \kappa \le 12\f$. The parameter \f$\beta^2\f$ must be in the range \f$0 \le \beta^2 \le 1\f$. Average times on a Pentium Core2 Duo P8400 2.26GHz:; - 9.9us per call to SetKappaBeta2 or constructor; - 0.095us per call to Pdf, Cdf; - 3.7us per first call to Quantile after SetKappaBeta2 or constructor; - 0.137us per subsequent call to Quantile. Benno List, June 2010. @ingroup StatFunc; */",MatchSource.CODE_COMMENT,math/mathmore/inc/Math/VavilovFast.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/inc/Math/VavilovFast.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:1183,Deployability,update,update,1183,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class ChebyshevApprox; //; // Created by: moneta at Thu Dec 2 14:51:15 2004; //; // Last update: Thu Dec 2 14:51:15 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/ChebyshevApprox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:13,Availability,error,errors,13,"// check for errors here ???",MatchSource.CODE_COMMENT,math/mathmore/src/ChebyshevApprox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:33,Availability,error,error,33,"// evaluate returning result and error",MatchSource.CODE_COMMENT,math/mathmore/src/ChebyshevApprox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:70,Availability,error,error,70,"// evaluate at most order n ( truncate the series) returning result + error",MatchSource.CODE_COMMENT,math/mathmore/src/ChebyshevApprox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:13,Availability,error,errors,13,"// check for errors ?",MatchSource.CODE_COMMENT,math/mathmore/src/ChebyshevApprox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx:13,Availability,error,errors,13,"// check for errors ?",MatchSource.CODE_COMMENT,math/mathmore/src/ChebyshevApprox.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/ChebyshevApprox.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h:12,Availability,toler,tolerance,12,/* Relative tolerance below which disc is treated as zero. */,MatchSource.CODE_COMMENT,math/mathmore/src/complex_quartic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h:431,Modifiability,variab,variable,431,"/* This code solves the resolvent cubic in a convenient fashion; * for this implementation of the quartic. If there are three real; * roots, then they are placed directly into u[]. If two are; * complex, then the real root is put into u[0] and the real; * and imaginary part of the complex roots are placed into; * u[1] and u[2], respectively. Additionally, this; * calculates the discriminant of the cubic and puts it into the; * variable disc. */",MatchSource.CODE_COMMENT,math/mathmore/src/complex_quartic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h:29,Availability,error,error,29,"// protect against numerical error can make this larger than one",MatchSource.CODE_COMMENT,math/mathmore/src/complex_quartic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h:30,Modifiability,variab,variables,30,"/* Arrange the roots into the variables z0, z1, z2, z3 */",MatchSource.CODE_COMMENT,math/mathmore/src/complex_quartic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/complex_quartic.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx:1181,Deployability,update,update,1181,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLDerivator; //; // Created by: moneta at Sat Nov 13 14:46:00 2004; //; // Last update: Sat Nov 13 14:46:00 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/Derivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate a GSLDerivator",MatchSource.CODE_COMMENT,math/mathmore/src/Derivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate a GSLDerivator",MatchSource.CODE_COMMENT,math/mathmore/src/Derivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx:20,Testability,test,test,20,"// time saving self-test",MatchSource.CODE_COMMENT,math/mathmore/src/Derivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Derivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSL1DMinimizerWrapper.h:1172,Deployability,update,update,1172,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 moneta, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSL1DMinimizerWrapper; //; // Created by: moneta at Wed Dec 1 17:25:44 2004; //; // Last update: Wed Dec 1 17:25:44 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSL1DMinimizerWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSL1DMinimizerWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSL1DMinimizerWrapper.h:5,Integrability,wrap,wrapper,5,/**; wrapper class for gsl_min_fminimizer structure; @ingroup Min1D; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSL1DMinimizerWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSL1DMinimizerWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLChebSeries.h:1173,Deployability,update,update,1173,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLChebSeries; //; // Created by: moneta at Thu Dec 2 16:50:07 2004; //; // Last update: Thu Dec 2 16:50:07 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLChebSeries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLChebSeries.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLChebSeries.h:5,Integrability,wrap,wrapper,5,/**; wrapper class for C struct gsl_cheb_series; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLChebSeries.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLChebSeries.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.cxx:1181,Deployability,update,update,1181,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLDerivator; //; // Created by: moneta at Sat Nov 13 14:46:00 2004; //; // Last update: Sat Nov 13 14:46:00 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:1224,Deployability,update,update,1224,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class Derivator; //; // class for calculating Derivative of functions; //; // Created by: moneta at Sat Nov 13 14:46:00 2004; //; // Last update: Sat Nov 13 14:46:00 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:61,Energy Efficiency,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h.; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:61,Modifiability,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h.; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:61,Energy Efficiency,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:61,Modifiability,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:61,Energy Efficiency,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:61,Modifiability,adapt,adaptive,61,/**; Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself.; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:115,Energy Efficiency,adapt,adaptive,115,/** @name --- Static methods --- **/; /**; Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:115,Modifiability,adapt,adaptive,115,/** @name --- Static methods --- **/; /**; Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:77,Energy Efficiency,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:77,Modifiability,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:77,Energy Efficiency,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:77,Modifiability,adapt,adaptive,77,/**; Computes the numerical derivative of a function f at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:16,Availability,error,error,16,/**; return the error status of the last integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h:41,Availability,error,error,41,/**; return the estimate of the absolute error of the last derivative calculation; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLDerivator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLDerivator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx:25,Availability,Error,Error,25,/**; class to change GSL Error handler to use ROOT one.; It is used only when building the dictionary (G__DICTIONARY is defined); and not in the stand-alone version of the library.; In that case the default GSL error handler is used; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx:211,Availability,error,error,211,/**; class to change GSL Error handler to use ROOT one.; It is used only when building the dictionary (G__DICTIONARY is defined); and not in the stand-alone version of the library.; In that case the default GSL error handler is used; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx:25,Availability,error,error,25,"// re-define the default error handler when loading the library",MatchSource.CODE_COMMENT,math/mathmore/src/GSLError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx:44,Performance,load,loading,44,"// re-define the default error handler when loading the library",MatchSource.CODE_COMMENT,math/mathmore/src/GSLError.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLError.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h:1179,Deployability,update,update,1179,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLFunctionWrapper; //; // Created by: moneta at Sat Nov 13 14:54:41 2004; //; // Last update: Sat Nov 13 14:54:41 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h:185,Energy Efficiency,adapt,adapt,185,/**; Wrapper class to the gsl_function C structure.; This class to fill the GSL C structure gsl_function with; the C++ function objcet.; Use the class ROOT::Math::GSLFunctionAdapter to adapt the; C++ function object to the right signature (function pointer type); requested by GSL; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h:5,Integrability,Wrap,Wrapper,5,/**; Wrapper class to the gsl_function C structure.; This class to fill the GSL C structure gsl_function with; the C++ function objcet.; Use the class ROOT::Math::GSLFunctionAdapter to adapt the; C++ function object to the right signature (function pointer type); requested by GSL; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h:185,Modifiability,adapt,adapt,185,/**; Wrapper class to the gsl_function C structure.; This class to fill the GSL C structure gsl_function with; the C++ function objcet.; Use the class ROOT::Math::GSLFunctionAdapter to adapt the; C++ function object to the right signature (function pointer type); requested by GSL; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h:14,Integrability,wrap,wrap,14,/**; class to wrap a gsl_function_fdf (with derivatives); */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrationWorkspace.h:1183,Deployability,update,update,1183,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLIntegratorWorkspace; //; // Created by: moneta at Sat Nov 13 14:55:27 2004; //; // Last update: Sat Nov 13 14:55:27 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrationWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrationWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:1190,Deployability,update,update,1190,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLIntegrator; //; // Created by: Lorenzo Moneta at Thu Nov 11 14:22:32 2004; //; // Last update: Thu Nov 11 14:22:32 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:32,Deployability,integrat,integrations,32,"// constructor for all types of integrations; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:49,Energy Efficiency,allocate,allocate,49,"// constructor for all types of integrations; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:81,Energy Efficiency,adapt,adaptive,81,"// constructor for all types of integrations; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:32,Integrability,integrat,integrations,32,"// constructor for all types of integrations; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:81,Modifiability,adapt,adaptive,81,"// constructor for all types of integrations; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:34,Energy Efficiency,ADapt,ADaptiveSingular,34,"// constructor with default type (ADaptiveSingular) , rule is not needed",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:34,Modifiability,ADapt,ADaptiveSingular,34,"// constructor with default type (ADaptiveSingular) , rule is not needed",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:64,Energy Efficiency,allocate,allocate,64,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:96,Energy Efficiency,adapt,adaptive,96,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:96,Modifiability,adapt,adaptive,96,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:64,Energy Efficiency,allocate,allocate,64,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:96,Energy Efficiency,adapt,adaptive,96,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:96,Modifiability,adapt,adaptive,96,"// constructor with default rule (gauss31) passing the type; // allocate workspace (only if not adaptive algorithm)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:20,Testability,test,test,20,"// time saving self-test",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:12,Deployability,integrat,integration,12,"// singular integration - look if we know about singular points",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:12,Integrability,integrat,integration,12,"// singular integration - look if we know about singular points",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:11,Deployability,integrat,integration,11,"//""Unknown integration type"");",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:11,Integrability,integrat,integration,11,"//""Unknown integration type"");",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:24,Integrability,interface,interface,24,"// use generic function interface",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:24,Integrability,interface,interface,24,"// use generic function interface",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:24,Integrability,interface,interface,24,"// use generic function interface",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:24,Integrability,interface,interface,24,"// use generic function interface",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:24,Integrability,interface,interface,24,"// use generic function interface",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:7,Deployability,integrat,integration,7,"// set integration options",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:7,Integrability,integrat,integration,7,"// set integration options",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:18,Energy Efficiency,adapt,adaptive,18,"// fixed rule for adaptive singular",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:18,Modifiability,adapt,adaptive,18,"// fixed rule for adaptive singular",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx:7,Availability,avail,available,7,"// not available for the rest",MatchSource.CODE_COMMENT,math/mathmore/src/GSLIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx:1184,Deployability,update,update,1184,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLInterpolator; //; // Created by: moneta at Sun Nov 28 08:54:48 2004; //; // Last update: Sun Nov 28 08:54:48 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx:3,Integrability,depend,depend,3,"// depend on GSL linear algebra",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate objects",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx:21,Availability,error,error,21,"// reset counter for error messages",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx:27,Integrability,message,messages,27,"// reset counter for error messages",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h:1176,Deployability,update,update,1176,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLInterpolator; //; // Created by: moneta at Fri Nov 26 15:31:41 2004; //; // Last update: Fri Nov 26 15:31:41 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h:22,Availability,error,error,22,"// gsl will report an error in this case",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h:29,Availability,error,error,29,"// flag to reset counter for error messages",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h:35,Integrability,message,messages,35,"// flag to reset counter for error messages",MatchSource.CODE_COMMENT,math/mathmore/src/GSLInterpolator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLInterpolator.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:202,Deployability,integrat,integration,202,"// constructors; // GSLMCIntegrator::GSLMCIntegrator():; // fResult(0),fError(0),fStatus(-1),; // fWorkspace(0),; // fFunction(0); // {; // // constructor of GSL MCIntegrator.Vegas MC is set as default integration type; // //set random number generator; // fRng = new GSLRngWrapper();; // fRng->Allocate();; // // use the default options; // ROOT::Math::IntegratorMultiDimOptions opts; // this create the default options; // SetOptions(opts);; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:354,Deployability,Integrat,IntegratorMultiDimOptions,354,"// constructors; // GSLMCIntegrator::GSLMCIntegrator():; // fResult(0),fError(0),fStatus(-1),; // fWorkspace(0),; // fFunction(0); // {; // // constructor of GSL MCIntegrator.Vegas MC is set as default integration type; // //set random number generator; // fRng = new GSLRngWrapper();; // fRng->Allocate();; // // use the default options; // ROOT::Math::IntegratorMultiDimOptions opts; // this create the default options; // SetOptions(opts);; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:295,Energy Efficiency,Allocate,Allocate,295,"// constructors; // GSLMCIntegrator::GSLMCIntegrator():; // fResult(0),fError(0),fStatus(-1),; // fWorkspace(0),; // fFunction(0); // {; // // constructor of GSL MCIntegrator.Vegas MC is set as default integration type; // //set random number generator; // fRng = new GSLRngWrapper();; // fRng->Allocate();; // // use the default options; // ROOT::Math::IntegratorMultiDimOptions opts; // this create the default options; // SetOptions(opts);; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:202,Integrability,integrat,integration,202,"// constructors; // GSLMCIntegrator::GSLMCIntegrator():; // fResult(0),fError(0),fStatus(-1),; // fWorkspace(0),; // fFunction(0); // {; // // constructor of GSL MCIntegrator.Vegas MC is set as default integration type; // //set random number generator; // fRng = new GSLRngWrapper();; // fRng->Allocate();; // // use the default options; // ROOT::Math::IntegratorMultiDimOptions opts; // this create the default options; // SetOptions(opts);; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:354,Integrability,Integrat,IntegratorMultiDimOptions,354,"// constructors; // GSLMCIntegrator::GSLMCIntegrator():; // fResult(0),fError(0),fStatus(-1),; // fWorkspace(0),; // fFunction(0); // {; // // constructor of GSL MCIntegrator.Vegas MC is set as default integration type; // //set random number generator; // fRng = new GSLRngWrapper();; // fRng->Allocate();; // // use the default options; // ROOT::Math::IntegratorMultiDimOptions opts; // this create the default options; // SetOptions(opts);; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:63,Deployability,integrat,integration,63,"// constructor of GSL MCIntegrator. Vegas MC is set as default integration type if type == 0",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:63,Integrability,integrat,integration,63,"// constructor of GSL MCIntegrator. Vegas MC is set as default integration type if type == 0",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:31,Deployability,integrat,integration,31,"// method to set the a generic integration function",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:31,Integrability,integrat,integration,31,"// method to set the a generic integration function",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:31,Deployability,integrat,integration,31,"// method to set the a generic integration function",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:31,Integrability,integrat,integration,31,"// method to set the a generic integration function",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:41,Availability,Error,Error,41,/**; return the estimate of the absolute Error of the last Integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:16,Availability,Error,Error,16,/**; return the Error Status of the last Integral calculation; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:97,Availability,Error,Error,97,// setter for control Parameters (getters are not needed so far ); /**; set the desired relative Error; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:30,Availability,Error,Error,30,/**; set the desired absolute Error; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:11,Deployability,integrat,integration,11,"// set the integration type using a string",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:11,Integrability,integrat,integration,11,"// set the integration type using a string",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:7,Deployability,integrat,integration,7,"// set integration mode for VEGAS method",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:7,Integrability,integrat,integration,7,"// set integration mode for VEGAS method",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:7,Deployability,integrat,integration,7,"// set integration options",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:7,Integrability,integrat,integration,7,"// set integration options",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:25,Deployability,integrat,integration,25,"// initialize by setting integration type",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:25,Integrability,integrat,integration,25,"// initialize by setting integration type",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:48,Usability,clear,clear,48,"// can use previously existing ws; // otherwise clear workspace (if existing)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx:15,Availability,error,error,15,"// returns the error sigma from the last iteration of the VEGAS algorithm",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMCIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMCIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:51,Integrability,wrap,wrapper,51,"// Constructor implementation : create GSLMultiMin wrapper object; //std::cout << ""create GSL Minimizer of type "" << type << std::endl;",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:15,Availability,toler,tolerance,15,"// line search tolerance (use fixed)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:147,Availability,avail,available,147,"// return number of function calls; // if original function does not support gradient it is wrapped in MultiNumGradFunction; // and we have NCalls available",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:92,Integrability,wrap,wrapped,92,"// return number of function calls; // if original function does not support gradient it is wrapped in MultiNumGradFunction; // and we have NCalls available",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx:3,Safety,avoid,avoid,3,"// avoid nan; // if (std::isnan(xtmp[i])) status = -11;",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:1173,Deployability,update,update,1173,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 moneta, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLMinimizer1D; //; // Created by: moneta at Wed Dec 1 15:04:51 2004; //; // Last update: Wed Dec 1 15:04:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:28,Deployability,update,update,28,"// perform an iteration and update values",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:3,Performance,perform,perform,3,"// perform an iteration and update values",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:3,Deployability,update,update,3,"// update values",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:3,Deployability,update,update,3,"// update interval values",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx:22,Testability,test,test,22,"// static function to test interval",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMinimizer1D.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMinimizer1D.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:1300,Deployability,update,update,1300,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 08/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:1125,Energy Efficiency,adapt,adapter,1125,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 08/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:1125,Integrability,adapter,adapter,1125,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 08/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:1125,Modifiability,adapt,adapter,1125,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 08/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:1173,Usability,usab,usable,1173,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 08/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:109,Deployability,integrat,integration,109,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MonteCarlo integration algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>. This class defines static methods with will be used to fill the; \a gsl_monte_function used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Monte-Carlo-Interface.html"">GSL online manual</A>. @ingroup MCIntegration; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:15,Energy Efficiency,adapt,adapting,15,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MonteCarlo integration algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>. This class defines static methods with will be used to fill the; \a gsl_monte_function used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Monte-Carlo-Interface.html"">GSL online manual</A>. @ingroup MCIntegration; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:109,Integrability,integrat,integration,109,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MonteCarlo integration algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>. This class defines static methods with will be used to fill the; \a gsl_monte_function used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Monte-Carlo-Interface.html"">GSL online manual</A>. @ingroup MCIntegration; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:423,Integrability,Interface,Interface,423,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MonteCarlo integration algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>. This class defines static methods with will be used to fill the; \a gsl_monte_function used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Monte-Carlo-Interface.html"">GSL online manual</A>. @ingroup MCIntegration; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h:15,Modifiability,adapt,adapting,15,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MonteCarlo integration algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>. This class defines static methods with will be used to fill the; \a gsl_monte_function used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Monte-Carlo-Interface.html"">GSL online manual</A>. @ingroup MCIntegration; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h:1174,Deployability,update,update,1174,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 08/2007; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMonteFunctionWrapper; //; // Created by: moneta at Sat Nov 13 14:54:41 2004; //; // Last update: Sat Nov 13 14:54:41 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h:93,Deployability,integrat,integration,93,/**; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional; integration algorithm. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h:5,Integrability,wrap,wrapper,5,/**; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional; integration algorithm. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h:93,Integrability,integrat,integration,93,/**; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional; integration algorithm. @ingroup MCIntegration; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMonteFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMonteFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:64,Integrability,wrap,wrapper,64,"// create a vector of the fit contributions; // create function wrapper from an iterator of functions",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:4,Testability,test,test,4,"/// test gradient (ask from solver gradient vector)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:32,Availability,toler,tolerance,32,"/// test using abs and relative tolerance; /// |dx| < absTol + relTol*|x| for every component",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:4,Testability,test,test,4,"/// test using abs and relative tolerance; /// |dx| < absTol + relTol*|x| for every component",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:3,Performance,cache,cached,3,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h:20,Safety,avoid,avoid,20,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFit.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:1301,Deployability,update,update,1301,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:1126,Energy Efficiency,adapt,adapter,1126,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:1126,Integrability,adapter,adapter,1126,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:1126,Modifiability,adapt,adapter,1126,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:1174,Usability,usab,usable,1174,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:15,Energy Efficiency,adapt,adapting,15,"/**; Class for adapting a C++ functor class to C function pointers used by GSL MultiFit; Algorithm; The templated C++ function class must implement:. <em> double operator( const double * x)</em>; and if the derivatives are required:; <em> void Gradient( const double * x, double * g)</em>; and; <em> void FdF( const double * x, double &f, double * g)</em>. This class defines static methods with will be used to fill the; \a gsl_multimin_function and; \a gsl_multimin_function_fdf structs used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Providing-a-function-to-minimize.html#Providing-a-function-to-minimize"">GSL online manual</A>. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h:15,Modifiability,adapt,adapting,15,"/**; Class for adapting a C++ functor class to C function pointers used by GSL MultiFit; Algorithm; The templated C++ function class must implement:. <em> double operator( const double * x)</em>; and if the derivatives are required:; <em> void Gradient( const double * x, double * g)</em>; and; <em> void FdF( const double * x, double &f, double * g)</em>. This class defines static methods with will be used to fill the; \a gsl_multimin_function and; \a gsl_multimin_function_fdf structs used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Providing-a-function-to-minimize.html#Providing-a-function-to-minimize"">GSL online manual</A>. @ingroup MultiMin; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionWrapper.h:1177,Deployability,update,update,1177,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionWrapper; //; // Created by: moneta at Sat Nov 13 14:54:41 2004; //; // Last update: Sat Nov 13 14:54:41 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionWrapper.h:5,Integrability,wrap,wrapper,5,/**; wrapper to a multi-dim function withtout derivatives for multi-dimensional; minimization algorithm. @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiFitFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiFitFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:1300,Deployability,update,update,1300,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 12/2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:1125,Energy Efficiency,adapt,adapter,1125,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 12/2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:1125,Integrability,adapter,adapter,1125,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 12/2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:1125,Modifiability,adapt,adapter,1125,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 12/2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:1173,Usability,usab,usable,1173,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 12/2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multimin_function signature; // usable for any c++ class which defines operator( ); //; // Created by: Lorenzo Moneta at Fri Nov 12 16:58:51 2004; //; // Last update: Fri Nov 12 16:58:51 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:15,Energy Efficiency,adapt,adapting,15,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MultiMin algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>; and if the derivatives are required:; <em> void Gradient( const double * x, double * g)</em>. This class defines static methods with will be used to fill the; \a gsl_multimin_function and; \a gsl_multimin_function_fdf structs used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Providing-a-function-to-minimize.html#Providing-a-function-to-minimize"">GSL online manual</A>. @ingroup MultiMin. */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h:15,Modifiability,adapt,adapting,15,"/**; Class for adapting any multi-dimension C++ functor class to C function pointers used by; GSL MultiMin algorithms.; The templated C++ function class must implement:. <em> double operator( const double * x)</em>; and if the derivatives are required:; <em> void Gradient( const double * x, double * g)</em>. This class defines static methods with will be used to fill the; \a gsl_multimin_function and; \a gsl_multimin_function_fdf structs used by GSL.; See for examples the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Providing-a-function-to-minimize.html#Providing-a-function-to-minimize"">GSL online manual</A>. @ingroup MultiMin. */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionWrapper.h:1177,Deployability,update,update,1177,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, 12/2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionWrapper; //; // Created by: moneta at Sat Nov 13 14:54:41 2004; //; // Last update: Sat Nov 13 14:54:41 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionWrapper.h:5,Integrability,wrap,wrapper,5,/**; wrapper to a multi-dim function withtout derivatives for multi-dimensional; minimization algorithm. @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionWrapper.h:5,Integrability,Wrap,Wrapper,5,/**; Wrapper for a multi-dimensional function with derivatives used in GSL multidim; minimization algorithm. @ingroup MultiMin. */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:12,Availability,avail,available,12,"// bfgs2 is available only for v>= 1.9",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:86,Availability,toler,tolerance,86,"/**; set the function to be minimize the initial minimizer parameters,; step size and tolerance in the line search; */",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:19,Integrability,wrap,wrapper,19,"// create function wrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:4,Testability,test,test,4,"/// test gradient (ask from minimizer gradient vector)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:4,Testability,test,test,4,"/// test gradient (require a vector gradient)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:3,Performance,cache,cached,3,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h:20,Safety,avoid,avoid,20,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:1187,Deployability,update,update,1187,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLMultiRootFinder; //; // Created by: moneta at Sun Nov 14 11:27:11 2004; //; // Last update: Sun Nov 14 11:27:11 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:15,Availability,toler,tolerance,15,"// set default tolerance",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:19,Integrability,wrap,wrapper,19,"// delete function wrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:3,Usability,clear,clear,3,"// clear the function list",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:3,Usability,clear,clear,3,"// clear the function list and the solver",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:229,Integrability,interface,interface,229,"// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; // // clone and add function to the list; // // If using a derivative algorithm the function is checked if it implements; // // the gradient interface. If this is not the case the type is set to non-derivatibe algo; // ROOT::Math::IGenMultiFunction * f = func.Clone();; // if (f != 0) return false;; // if (fUseDerivAlgo) {; // bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; // if (!gradFunc) {; // MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; // MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; // ClearFunctions();; // return false;; // }; // }; // fFunctions.push_back(f);; // return true;; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:602,Integrability,interface,interface,602,"// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; // // clone and add function to the list; // // If using a derivative algorithm the function is checked if it implements; // // the gradient interface. If this is not the case the type is set to non-derivatibe algo; // ROOT::Math::IGenMultiFunction * f = func.Clone();; // if (f != 0) return false;; // if (fUseDerivAlgo) {; // bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; // if (!gradFunc) {; // MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; // MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; // ClearFunctions();; // return false;; // }; // }; // fFunctions.push_back(f);; // return true;; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:668,Usability,clear,clear,668,"// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; // // clone and add function to the list; // // If using a derivative algorithm the function is checked if it implements; // // the gradient interface. If this is not the case the type is set to non-derivatibe algo; // ROOT::Math::IGenMultiFunction * f = func.Clone();; // if (f != 0) return false;; // if (fUseDerivAlgo) {; // bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; // if (!gradFunc) {; // MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; // MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; // ClearFunctions();; // return false;; // }; // }; // fFunctions.push_back(f);; // return true;; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:699,Usability,Clear,ClearFunctions,699,"// bool GSLMultiRootFinder::AddFunction( const ROOT::Math::IMultiGenFunction & func) {; // // clone and add function to the list; // // If using a derivative algorithm the function is checked if it implements; // // the gradient interface. If this is not the case the type is set to non-derivatibe algo; // ROOT::Math::IGenMultiFunction * f = func.Clone();; // if (f != 0) return false;; // if (fUseDerivAlgo) {; // bool gradFunc = (dynamic_cast<ROOT::Math::IMultiGradFunction *> (f) != 0 );; // if (!gradFunc) {; // MATH_ERROR_MSG(""GSLMultiRootFinder::AddFunction"",""Function does not provide gradient interface"");; // MATH_WARN_MSG(""GSLMultiRootFinder::AddFunction"",""clear the function list"");; // ClearFunctions();; // return false;; // }; // }; // fFunctions.push_back(f);; // return true;; // }",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:18,Availability,error,error,18,"// act in case of error",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:3,Testability,test,test,3,"// test also residual",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx:10,Testability,test,test,10,"// should test also the Delta ??",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h:1126,Energy Efficiency,adapt,adapter,1126,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Mar 2011; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multiroot_function signature type; // usable for any array of function pointers; // implementing operator()(const double *x) and (if needed); // Gradient(const double *x, double * g); //; // The class is very similar to GSLMultiFitFunctionAdapter,; // but in that case the array is for function references (or value); //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h:1126,Integrability,adapter,adapter,1126,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Mar 2011; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multiroot_function signature type; // usable for any array of function pointers; // implementing operator()(const double *x) and (if needed); // Gradient(const double *x, double * g); //; // The class is very similar to GSLMultiFitFunctionAdapter,; // but in that case the array is for function references (or value); //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h:1126,Modifiability,adapt,adapter,1126,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Mar 2011; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multiroot_function signature type; // usable for any array of function pointers; // implementing operator()(const double *x) and (if needed); // Gradient(const double *x, double * g); //; // The class is very similar to GSLMultiFitFunctionAdapter,; // but in that case the array is for function references (or value); //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h:1180,Usability,usab,usable,1180,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, Mar 2011; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiMinFunctionAdapter; //; // Generic adapter for gsl_multiroot_function signature type; // usable for any array of function pointers; // implementing operator()(const double *x) and (if needed); // Gradient(const double *x, double * g); //; // The class is very similar to GSLMultiFitFunctionAdapter,; // but in that case the array is for function references (or value); //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h:15,Energy Efficiency,adapt,adapting,15,"/**; Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot; Algorithm; The templated C++ function class must implement:. <em> double operator( const double * x)</em>; and if the derivatives are required:; <em> void Gradient( const double * x, double * g)</em>; and; <em> void FdF( const double * x, double &f, double * g)</em>. @ingroup MultiRoot; */; // FuncVector must contain a vector of pointers to functions; // this same as MultiFit but here need to use pointers where there we used class elements",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h:15,Modifiability,adapt,adapting,15,"/**; Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot; Algorithm; The templated C++ function class must implement:. <em> double operator( const double * x)</em>; and if the derivatives are required:; <em> void Gradient( const double * x, double * g)</em>; and; <em> void FdF( const double * x, double &f, double * g)</em>. @ingroup MultiRoot; */; // FuncVector must contain a vector of pointers to functions; // this same as MultiFit but here need to use pointers where there we used class elements",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionWrapper.h:1178,Deployability,update,update,1178,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta Dec 2006; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLMultiRootFunctionWrapper; //; // Created by: moneta at Sat Nov 13 14:54:41 2004; //; // Last update: Sat Nov 13 14:54:41 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionWrapper.h:5,Integrability,wrap,wrapper,5,/**; wrapper to a multi-dim function without derivatives for multi roots; algorithm; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionWrapper.h:5,Integrability,wrap,wrapper,5,/**; wrapper to a multi-dim function with derivatives for multi roots; algorithm. @ingroup MultiRoot; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootFunctionWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootFunctionWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:64,Integrability,wrap,wrapper,64,"// create a vector of the fit contributions; // create function wrapper from an iterator of functions",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:4,Performance,perform,perform,4,"/// perform an iteration",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:32,Availability,toler,tolerance,32,"/// test using abs and relative tolerance; /// |dx| < absTol + relTol*|x| for every component",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:4,Testability,test,test,4,"/// test using abs and relative tolerance; /// |dx| < absTol + relTol*|x| for every component",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:19,Availability,toler,tolerance,19,"/// test using abs tolerance; /// Sum |f|_i < absTol",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:4,Testability,test,test,4,"/// test using abs tolerance; /// Sum |f|_i < absTol",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:3,Security,access,accessor,3,"// accessor to be implemented by the derived classes",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:64,Integrability,wrap,wrapper,64,"// create a vector of the fit contributions; // create function wrapper from an iterator of functions",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:33,Performance,cache,cached,33,"// set initial values and create cached vector",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:3,Performance,cache,cached,3,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:20,Safety,avoid,avoid,20,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:3,Performance,cache,cached,3,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h:20,Safety,avoid,avoid,20,"// cached vector to avoid re-allocating every time a new one",MatchSource.CODE_COMMENT,math/mathmore/src/GSLMultiRootSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLMultiRootSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:3,Performance,cache,cached,3,"// cached vector of gradient values",MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:392,Integrability,wrap,wraps,392,//________________________________________________________________________________; /**; LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivatives which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:434,Integrability,interface,interface,434,//________________________________________________________________________________; /**; LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivatives which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:148,Security,access,accessing,148,//________________________________________________________________________________; /**; LSResidualFunc class description.; Internal class used for accessing the residuals of the Least Square function; and their derivatives which are estimated numerically using GSL numerical derivation.; The class contains a pointer to the fit method function and an index specifying; the i-th residual and wraps it in a multi-dim gradient function interface; ROOT::Math::IGradientFunctionMultiDim.; The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter). @ingroup MultiMin; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:51,Integrability,wrap,wrapper,51,"// Constructor implementation : create GSLMultiFit wrapper object",MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:11,Availability,toler,tolerance,11,"// default tolerance and max iterations",MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx:7,Availability,error,errors,7,"// get errors from cov matrix",MatchSource.CODE_COMMENT,math/mathmore/src/GSLNLSMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLNLSMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQRngWrapper.h:29,Integrability,wrap,wrap,29,/**; GSLQRngWrapper class to wrap gsl_qrng structure; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLQRngWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQRngWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQRngWrapper.h:20,Testability,test,test,20,"// time saving self-test",MatchSource.CODE_COMMENT,math/mathmore/src/GSLQRngWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQRngWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQRngWrapper.h:17,Energy Efficiency,allocate,allocate,17,"//std::cout << "" allocate "" << fRng << std::endl;",MatchSource.CODE_COMMENT,math/mathmore/src/GSLQRngWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQRngWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQuasiRandom.cxx:1136,Deployability,update,update,1136,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; //; //; // Created by: moneta at Sun Nov 21 :26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //; // need to be included later",MatchSource.CODE_COMMENT,math/mathmore/src/GSLQuasiRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQuasiRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQuasiRandom.cxx:79,Integrability,depend,depending,79,"// constructor from external rng; // internal generator will be managed or not depending on; // how the GSLQRngWrapper is created",MatchSource.CODE_COMMENT,math/mathmore/src/GSLQuasiRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLQuasiRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:1170,Deployability,update,update,1170,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRandom; //; // Created by: moneta at Sun Nov 21 16:26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //; // need to be included later",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:7,Integrability,wrap,wrapping,7,"// for wrapping in GSL ROOT engines",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:218,Deployability,release,release-,218,"// gsl_multivarate_gaussian was added in GSL 2.2; // For older GSL versions (e.g. Ubuntu 16.04 comes with GSL 2.1) we can add it here by hand; // from: http://git.savannah.gnu.org/cgit/gsl.git/tree/randist/mvgauss.c?h=release-2-6&id=8f0165f5cb2ae02e386cd33ff10e47ffb46ea7da",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:79,Integrability,depend,depending,79,"// constructor from external rng; // internal generator will be managed or not depending on; // how the GSLRngWrapper is created",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:143,Energy Efficiency,allocate,allocate,143,"// Gaussian Multivariate distribution; // assume passed arrays are of correct dimensions; // use gsl_matrix_view to avoid copying the data and allocate the arrays; // covmat will return",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:116,Safety,avoid,avoid,116,"// Gaussian Multivariate distribution; // assume passed arrays are of correct dimensions; // use gsl_matrix_view to avoid copying the data and allocate the arrays; // covmat will return",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:3,Testability,Log,Log,3,"// Log normal distribution",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:3,Testability,Log,Logistic,3,"// Logistic distribution",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:213,Energy Efficiency,allocate,allocated,213,"// this creates the gsl_rng structure; // no real need to call CreateEngine since the underlined MIXMAX engine is created; // by calling GSLMixMaxWrapper::Seed(gsl_default_seed) that is called; // when gsl_rng is allocated (in Initialize)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx:41,Integrability,wrap,wrapper,41,"// we need to explicitly delete the ROOT wrapper class",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRndmEngines.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRndmEngines.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h:3,Integrability,wrap,wrapper,3,"// wrapper class used to wrap ROOT random number engines with GSL interface; // @(#)root/mathmore:$Id$; // Author: L. Moneta Fri Aug 24 17:20:45 2007; /**********************************************************************; * *; * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // Header file for class GSLRngWrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngROOTWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h:25,Integrability,wrap,wrap,25,"// wrapper class used to wrap ROOT random number engines with GSL interface; // @(#)root/mathmore:$Id$; // Author: L. Moneta Fri Aug 24 17:20:45 2007; /**********************************************************************; * *; * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // Header file for class GSLRngWrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngROOTWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h:66,Integrability,interface,interface,66,"// wrapper class used to wrap ROOT random number engines with GSL interface; // @(#)root/mathmore:$Id$; // Author: L. Moneta Fri Aug 24 17:20:45 2007; /**********************************************************************; * *; * Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; * *; * *; **********************************************************************/; // Header file for class GSLRngWrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngROOTWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h:353,Energy Efficiency,allocate,allocated,353,"/**; * class for wrapping ROOT Engines in gsl_rng types which can be used as extra; * GSL random number generators; * For this we need to implement functions which will be called by gsl_rng.; * The functions (Seed, Rndm, IntRndm) are passed in the gsl_rng_type and used to build a gsl_rng object.; * When gsl_rng is alloacated, only the memory state is allocated using calloc(1,size), which gives a memory ; * block of the given bytes and it initializes to zero. Therefore no constructor of GSLRngROOTWrapper can be called ; * and also we cannot call non-static member function of the class. ; * The underlined ROOT engine is then built and deleted using the functions CreateEngine() and FreeEngine(), ; * called by the specific GSLRandomEngine class that instantiates for the the generator (e.g. GSLRngMixMax); *; **/",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngROOTWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h:17,Integrability,wrap,wrapping,17,"/**; * class for wrapping ROOT Engines in gsl_rng types which can be used as extra; * GSL random number generators; * For this we need to implement functions which will be called by gsl_rng.; * The functions (Seed, Rndm, IntRndm) are passed in the gsl_rng_type and used to build a gsl_rng object.; * When gsl_rng is alloacated, only the memory state is allocated using calloc(1,size), which gives a memory ; * block of the given bytes and it initializes to zero. Therefore no constructor of GSLRngROOTWrapper can be called ; * and also we cannot call non-static member function of the class. ; * The underlined ROOT engine is then built and deleted using the functions CreateEngine() and FreeEngine(), ; * called by the specific GSLRandomEngine class that instantiates for the the generator (e.g. GSLRngMixMax); *; **/",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngROOTWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h:3,Safety,avoid,avoid,3,"// avoid using 0 that for ROOT means a specific seed",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngROOTWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngROOTWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngWrapper.h:28,Integrability,wrap,wrap,28,/**; GSLRngWrapper class to wrap gsl_rng structure; */,MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngWrapper.h:20,Testability,test,test,20,"// time saving self-test",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRngWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRngWrapper.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFdFSolver.h:1177,Deployability,update,update,1177,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRootFdFSolver; //; // Created by: moneta at Sun Nov 14 17:23:06 2004; //; // Last update: Sun Nov 14 17:23:06 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFdFSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFdFSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx:1182,Deployability,update,update,1182,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLRootFinder; //; // Created by: moneta at Sun Nov 14 11:27:11 2004; //; // Last update: Sun Nov 14 11:27:11 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx:19,Integrability,wrap,wrapper,19,"// create function wrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx:19,Integrability,wrap,wrapper,19,"// delete function wrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx:3,Deployability,update,update,3,"// update Root",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx:3,Deployability,update,update,3,"// update interval",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx:10,Performance,cache,cached,10,"// return cached value",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx:1187,Deployability,update,update,1187,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLRootFinderDeriv; //; // Created by: moneta at Sun Nov 21 16:26:03 2004; //; // Last update: Sun Nov 21 16:26:03 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinderDeriv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx:19,Integrability,wrap,wrapper,19,"// create function wrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinderDeriv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx:19,Integrability,wrap,wrapper,19,"// delete function wrapper",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinderDeriv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx:3,Deployability,update,update,3,"// update Root",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinderDeriv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx:10,Performance,cache,cached,10,"// return cached value",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFinderDeriv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFinderDeriv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFSolver.h:1175,Deployability,update,update,1175,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class GSLRootFSolver; //; // Created by: moneta at Sun Nov 14 17:23:06 2004; //; // Last update: Sun Nov 14 17:23:06 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootFSolver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootFSolver.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootHelper.cxx:1182,Deployability,update,update,1182,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLRootHelper; //; // Created by: moneta at Sun Nov 14 21:34:15 2004; //; // Last update: Sun Nov 14 21:34:15 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/GSLRootHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLRootHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnMinimizer.cxx:51,Integrability,wrap,wrapper,51,"// Constructor implementation : create GSLMultiFit wrapper object",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:16,Energy Efficiency,energy,energy,16,"// evaluate the energy",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:50,Deployability,configurat,configuration,50,"// calculate the distance with respect to another configuration",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:50,Modifiability,config,configuration,50,"// calculate the distance with respect to another configuration",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:3,Safety,avoid,avoid,3,"// avoid doing a sqrt for 1 dim",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:111,Energy Efficiency,energy,energy,111,"// print the position x in standard std::ostream; // GSL prints also niter- ntrials - temperature and then the energy and energy min value (from 1.10)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:122,Energy Efficiency,energy,energy,122,"// print the position x in standard std::ostream; // GSL prints also niter- ntrials - temperature and then the energy and energy min value (from 1.10)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:3,Energy Efficiency,energy,energy,3,"// energy us printed by GSL (and also end-line)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:16,Energy Efficiency,energy,energy,16,"// evaluate the energy given a state xp",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:3,Integrability,wrap,wrapper,3,"// wrapper classes random and rng must exist during call to Step()",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:38,Deployability,configurat,configuration,38,"// calculate the distance between two configuration",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:38,Modifiability,config,configuration,38,"// calculate the distance between two configuration",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:93,Energy Efficiency,energy,energy,93,"// print the position xp; // GSL prints also first niter- ntrials - temperature and then the energy",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:44,Integrability,interface,interface,44,"// function for solving (from a Genfunction interface)",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx:85,Integrability,interface,interface,85,"// solve the simulated annealing problem given starting point and objective function interface; // initial conditions",MatchSource.CODE_COMMENT,math/mathmore/src/GSLSimAnnealing.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/GSLSimAnnealing.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Interpolator.cxx:1191,Deployability,update,update,1191,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class Interpolator using GSL; //; // Created by: moneta at Fri Nov 26 15:00:25 2004; //; // Last update: Fri Nov 26 15:00:25 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/Interpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Interpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Interpolator.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate GSL interpolation object",MatchSource.CODE_COMMENT,math/mathmore/src/Interpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Interpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Interpolator.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate and initialize GSL interpolation object with data",MatchSource.CODE_COMMENT,math/mathmore/src/Interpolator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Interpolator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/PdfFuncMathMore.cxx:37,Performance,load,loading,37,"// dummy method called to force auto-loading of MathMore Library; //; // note: a typedef MathMoreLIb to MathMoreLibrary has been introduced because for unknown reasons; // loading on the MathMoreLibrary does not work while it works for the class name MathMoreLib; // see ROOT-8455",MatchSource.CODE_COMMENT,math/mathmore/src/PdfFuncMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/PdfFuncMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/PdfFuncMathMore.cxx:172,Performance,load,loading,172,"// dummy method called to force auto-loading of MathMore Library; //; // note: a typedef MathMoreLIb to MathMoreLibrary has been introduced because for unknown reasons; // loading on the MathMoreLibrary does not work while it works for the class name MathMoreLib; // see ROOT-8455",MatchSource.CODE_COMMENT,math/mathmore/src/PdfFuncMathMore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/PdfFuncMathMore.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Polynomial.cxx:1187,Deployability,update,update,1187,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class Polynomial; //; // Created by: Lorenzo Moneta at Wed Nov 10 17:46:19 2004; //; // Last update: Wed Nov 10 17:46:19 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/Polynomial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Polynomial.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Polynomial.cxx:184,Testability,test,test,184,"// Polynomial::Polynomial(const Polynomial &); // {; // }; // Polynomial & Polynomial::operator = (const Polynomial &rhs); // {; // if (this == &rhs) return *this; // time saving self-test; // return *this;; // }",MatchSource.CODE_COMMENT,math/mathmore/src/Polynomial.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Polynomial.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/RootFinderAlgorithms.cxx:1192,Deployability,update,update,1192,"// @(#)root/mathmore:$Id$; // Authors: L. Moneta, A. Zsenei 08/2005; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class GSLRootFinderAlgorithms; //; // Created by: moneta at Sun Nov 14 14:07:50 2004; //; // Last update: Sun Nov 14 14:07:50 2004; //",MatchSource.CODE_COMMENT,math/mathmore/src/RootFinderAlgorithms.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/RootFinderAlgorithms.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Vavilov.cxx:1164,Deployability,update,update,1164,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class Vavilov; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/src/Vavilov.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/Vavilov.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:1172,Deployability,update,update,1172,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class VavilovAccurate; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:138,Testability,log,logKappa,138,"// Calculate T0 from Eq. (3.6), using x_- = fH[5]; // double e1h5 = (fH[5] > 40 ) ? 0 : -ROOT::Math::expint (-fH[5]);; // fT0 = (h4-fH[5]*logKappa-(fH[5]+beta2)*(std::log(fH[5])+e1h5)+std::exp(-fH[5]))/fH[5];",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:167,Testability,log,log,167,"// Calculate T0 from Eq. (3.6), using x_- = fH[5]; // double e1h5 = (fH[5] > 40 ) ? 0 : -ROOT::Math::expint (-fH[5]);; // fT0 = (h4-fH[5]*logKappa-(fH[5]+beta2)*(std::log(fH[5])+e1h5)+std::exp(-fH[5]))/fH[5];",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:114,Testability,log,logKappa,114,"// Calculate T1 from Eq. (3.6); // double e1h0 = (fH[0] > 40 ) ? 0 : -ROOT::Math::expint (-fH[0]);; // fT1 = h4*q-logKappa-(1+beta2*q)*(std::log(std::fabs(fH[0]))+e1h0)+std::exp(-fH[0])*q;",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:141,Testability,log,log,141,"// Calculate T1 from Eq. (3.6); // double e1h0 = (fH[0] > 40 ) ? 0 : -ROOT::Math::expint (-fH[0]);; // fT1 = h4*q-logKappa-(1+beta2*q)*(std::log(std::fabs(fH[0]))+e1h0)+std::exp(-fH[0])*q;",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:3,Energy Efficiency,reduce,reduce,3,"// reduce fEpsilon by a factor .001 for large kappa",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:9,Testability,log,log,9,"// Solve log(eq. (4.10)) to get fX0 = N",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:3,Testability,log,logKappa,3,"// logKappa=log(kappa)",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:12,Testability,log,log,12,"// logKappa=log(kappa)",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:14,Testability,test,test,14,"// distribute test values evenly below and above the median",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:152,Testability,assert,assert,152,"// int i0=0, i1=fNQuant, i;; // for (int it = 0; it < LOG2fNQuant; ++it) {; // i = (i0+i1)/2;; // if (z > fQuant[i]) i0 = i;; // else i1 = i;; // }; // assert (i1-i0 == 1);",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:135,Testability,log,log,135,"// fH[1] = kappa*(2+beta2*eu) -ln(fEpsilon) + ln(2/pi**2); // fH[2] = beta2*kappa; // fH[3] = omwga/kappa; // fH[4] = pi/2 *fOmega; // log of Eq. (4.10)",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:26,Testability,log,logEpsilonPM,26,"// fH[5] = 1-beta2*(1-eu)-logEpsilonPM/kappa; // eq. 3.9; // fH[6] = beta2;; // fH[7] = 1-beta2;; // Eq. 3.7 of Schorr; // return fH[5]-x+fH[6]*(std::log(std::fabs(x))-ROOT::Math::expint (-x))-fH[7]*std::exp(-x);",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:150,Testability,log,log,150,"// fH[5] = 1-beta2*(1-eu)-logEpsilonPM/kappa; // eq. 3.9; // fH[6] = beta2;; // fH[7] = 1-beta2;; // Eq. 3.7 of Schorr; // return fH[5]-x+fH[6]*(std::log(std::fabs(x))-ROOT::Math::expint (-x))-fH[7]*std::exp(-x);",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx:14,Testability,log,log,14,"// Calculates log(|x|)+E_1(x)",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurate.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurate.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurateCdf.cxx:1175,Deployability,update,update,1175,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class VavilovAccurateCdf; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurateCdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurateCdf.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccuratePdf.cxx:1175,Deployability,update,update,1175,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class VavilovAccuratePdf; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccuratePdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccuratePdf.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurateQuantile.cxx:1180,Deployability,update,update,1180,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class VavilovAccurateQuantile; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovAccurateQuantile.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovAccurateQuantile.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovFast.cxx:1168,Deployability,update,update,1168,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class VavilovFast; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovFast.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovFast.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovFast.cxx:27,Integrability,rout,routine,27,"// translated from CERNLIB routine VAVRAN by B. List 14.5.2010",MatchSource.CODE_COMMENT,math/mathmore/src/VavilovFast.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/VavilovFast.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/zsolve_cubic.cxx:904,Modifiability,config,config,904,"/* poly/zsolve_cubic.c; *; * Copyright (C) 1996, 1997, 1998, 1999, 2000, 2007 Brian Gough; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 3 of the License, or (at; * your option) any later version.; *; * This program is distributed in the hope that it will be useful, but; * WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; * General Public License for more details.; *; * You should have received a copy of the GNU General Public License; * along with this program; if not, write to the Free Software; * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.; */; /* zsolve_cubic.c - finds the complex roots of x^3 + a x^2 + b x + c = 0 */; //#include <config.h>",MatchSource.CODE_COMMENT,math/mathmore/src/zsolve_cubic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/zsolve_cubic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/zsolve_cubic.cxx:8,Testability,test,test,8,"/* this test is actually R2 == Q3, written in a form suitable; for exact computation with integers */; /* Due to finite precision some double roots may be missed, and; will be considered to be a pair of complex roots z = x +/-; epsilon i close to the real axis. */",MatchSource.CODE_COMMENT,math/mathmore/src/zsolve_cubic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/src/zsolve_cubic.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:11,Integrability,rout,route,11,"// initial route is just the sequential order",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:17,Energy Efficiency,energy,energy,17,"// calculate the energy",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:75,Energy Efficiency,allocate,allocated,75,/* use the distance_matrix to optimize this calculation; it had; better be allocated!! */,MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:30,Performance,optimiz,optimize,30,/* use the distance_matrix to optimize this calculation; it had; better be allocated!! */,MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:16,Energy Efficiency,energy,energy,16,"//std::cout << ""energy is "" << enrg << std::endl;",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:13,Integrability,rout,route,13,"// set a new route (used by exh. search)",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:3,Modifiability,variab,variable,3,"// variable of the system - order how cities are visited",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:13,Integrability,rout,route,13,"// print the route and distance",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:8,Deployability,configurat,configurations,8,"// plot configurations",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:8,Modifiability,config,configurations,8,"// plot configurations",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:36,Integrability,rout,routes,36,/* now save the best 3 energies and routes */,MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:58,Integrability,rout,routes,58,"/* James Theiler's recursive algorithm for generating all routes */; // version used in GSL",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:24,Energy Efficiency,energy,energy,24,/* do it! calculate the energy/cost for that route */,MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:45,Integrability,rout,route,45,/* do it! calculate the energy/cost for that route */,MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:36,Integrability,rout,routes,36,/* now save the best 3 energies and routes */,MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:34,Integrability,rout,route,34,"// search by brute force the best route; // the full permutations will be Factorial (N_CITIES-1); // which is approx 4 E+7 for 12 cities",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:37,Integrability,rout,routes,37,"// use still MySimAnFunc for initial routes and distance",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx:11,Modifiability,config,config,11,"// initial config",MatchSource.CODE_COMMENT,math/mathmore/test/simanTSP.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/simanTSP.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:10,Deployability,Integrat,Integrator,10,"// create Integrator",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:10,Integrability,Integrat,Integrator,10,"// create Integrator",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:39,Availability,error,error,39,"// Gauss integral sometimes returns an error of 0",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,Testability,test,test,3,"// test integral",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:40,Safety,avoid,avoid,40,"// scan all values from 0.05 to 0.95 to avoid problem at the border of definitions",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,Testability,test,test,3,"// test ROOT finder algorithm function without derivative",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,Testability,test,test,3,"// test that quantile value correspond:",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:13,Availability,toler,tolerance,13,"// put lower tolerance",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:40,Safety,avoid,avoid,40,"// scan all values from 0.05 to 0.95 to avoid problem at the border of definitions",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:42,Safety,avoid,avoid,42,"// starting root is always on the left to avoid to go negative; // it is very sensible at the starting point",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,Integrability,depend,depends,3,"// depends on function shape; // test ROOT finder algorithm function with derivative",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:33,Testability,test,test,33,"// depends on function shape; // test ROOT finder algorithm function with derivative",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx:3,Testability,test,test,3,"// test that quantile value correspond:",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:18,Performance,cache,cached,18,"// use explicitly cached param values",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:22,Testability,test,test,22,"// scale for integral test",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:17,Testability,test,test,17,"// scale for der test",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:21,Testability,test,test,21,"// scale for inverse test",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,Testability,test,test,3,"// test integral with cdf function",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,Testability,test,test,3,"// test derivative from cdf to pdf function",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,Testability,test,test,3,"// test root finding algorithm for finding inverse of cdf",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h:3,Testability,test,test,3,"// test root finding algorithm for finding inverse of cdf using derivatives",MatchSource.CODE_COMMENT,math/mathmore/test/StatFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/StatFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testChebyshev.cxx:3,Testability,test,test,3,"// test with cos(x) + 1.0",MatchSource.CODE_COMMENT,math/mathmore/test/testChebyshev.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testChebyshev.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx:33,Integrability,wrap,wrapped,33,"// Derivative of a free function wrapped in an IGenFunction; // Works when compiled c++, compiled ACLiC, does not work when interpreted by CINT",MatchSource.CODE_COMMENT,math/mathmore/test/testDerivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx:367,Integrability,Wrap,WrappedFunc,367,"// Derivative of a multidim TF1 function; // #ifdef LATER; // TF2 * f2d = new TF2(""f2d"",""x*x + y*y"",-10,10,-10,10);; // // find gradient at x={1,1}; // double vx[2] = {1.,2.};; // ROOT::Math::WrappedTF1 fx(*f2d);; // std::cout << ""Derivative of a f(x,y) = x^2 + y^2 at x = 1,y=2"" << std::endl;; // std::cout << ""df/dx = "" << der->EvalCentral(fx,1.) << std::endl;; // WrappedFunc fy(*f2d,0,vx);; // std::cout << ""df/dy = "" << der->EvalCentral(fy,2.) << std::endl;; // #endif",MatchSource.CODE_COMMENT,math/mathmore/test/testDerivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx:3,Testability,test,test,3,"// test that func parameters have not been changed",MatchSource.CODE_COMMENT,math/mathmore/test/testDerivation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testDerivation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:45,Safety,avoid,avoid,45,"//double x[Ntimes];; // use std::vector's to avoid crashes on Windows",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:45,Safety,avoid,avoid,45,"//double x[Ntimes];; // use std::vector's to avoid crashes on Windows",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:192,Testability,assert,assert,192,"// RooArgSet * varSet = f.getVariables();; // RooArgList varList(*varSet);; // delete varSet;; // RooAbsArg & arg = varList[0];; // RooRealVar * vars = dynamic_cast<RooRealVar * > (&arg);; // assert(x != 0);",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test all functor constructs",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:13,Testability,test,test,13,"// multi-dim test",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test directly calling the function object",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from a free function pointer",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from function object",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from a member function",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test grad functor from an object providing eval and deriv.",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test grad functor from object and member functions",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from 2 function objects",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test all functor constructs",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test 1D functors",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test dircectly calling function object",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:4,Testability,test,test,4,"/// test free function",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from function object",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from member function",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,testgrad,3,"// testgrad functor; // from function object implementing both",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test grad functor from object and member functions",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test from 2 function objects",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:3,Testability,test,test,3,"// test of virtuality two times",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:200,Testability,Test,TestTime,200,"// this does not compile oin Windows, since it does not understand the default arguments; // It does not work for gcc 4.3 either.; // #ifndef _WIN32; // ROOT::Math::Functor1D f9(&tf1,&TF1::Eval);; // TestTime(f9);; // ROOT::Math::Functor f10(&tf1,&TF1::EvalPar,tf1.GetNdim());; // TestTime(f10);; // #endif; // test with rootit",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:281,Testability,Test,TestTime,281,"// this does not compile oin Windows, since it does not understand the default arguments; // It does not work for gcc 4.3 either.; // #ifndef _WIN32; // ROOT::Math::Functor1D f9(&tf1,&TF1::Eval);; // TestTime(f9);; // ROOT::Math::Functor f10(&tf1,&TF1::EvalPar,tf1.GetNdim());; // TestTime(f10);; // #endif; // test with rootit",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx:311,Testability,test,test,311,"// this does not compile oin Windows, since it does not understand the default arguments; // It does not work for gcc 4.3 either.; // #ifndef _WIN32; // ROOT::Math::Functor1D f9(&tf1,&TF1::Eval);; // TestTime(f9);; // ROOT::Math::Functor f10(&tf1,&TF1::EvalPar,tf1.GetNdim());; // TestTime(f10);; // #endif; // test with rootit",MatchSource.CODE_COMMENT,math/mathmore/test/testFunctor.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testFunctor.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:26,Deployability,Integrat,Integrator,26,"// temp before having new Integrator class",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:26,Integrability,Integrat,Integrator,26,"// temp before having new Integrator class",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:14,Deployability,Integrat,Integrator,14,"//ROOT::Math::Integrator ig(func, 0.001, 0.01, 100 );",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:14,Integrability,Integrat,Integrator,14,"//ROOT::Math::Integrator ig(func, 0.001, 0.01, 100 );",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:3,Deployability,integrat,integrate,3,"// integrate again ADAPTIve, with different rule",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:19,Energy Efficiency,ADAPT,ADAPTIve,19,"// integrate again ADAPTIve, with different rule",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:3,Integrability,integrat,integrate,3,"// integrate again ADAPTIve, with different rule",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:19,Modifiability,ADAPT,ADAPTIve,19,"// integrate again ADAPTIve, with different rule",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:8,Availability,error,error,8,"// test error; //typedef double ( * FreeFunc ) ( double);",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:3,Testability,test,test,3,"// test error; //typedef double ( * FreeFunc ) ( double);",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx:14,Integrability,Wrap,WrappedFunction,14,"//ROOT::Math::WrappedFunction<FreeFunc> wf(&singularFunction);",MatchSource.CODE_COMMENT,math/mathmore/test/testGSLIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testGSLIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testInterpolation.cxx:168,Testability,test,testInterpolation,168,"//Example of the various methods of interpolation provided by the; // ROOT::Math::Interpolator class; //; //Example can also be run in ROOT by doing :; //; // root> .x testInterpolation.cxx; //",MatchSource.CODE_COMMENT,math/mathmore/test/testInterpolation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testInterpolation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:28,Deployability,Integrat,Integration,28,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:233,Deployability,Integrat,IntegratorMultiDim,233,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:123,Energy Efficiency,adapt,adaptive,123,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:28,Integrability,Integrat,Integration,28,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:233,Integrability,Integrat,IntegratorMultiDim,233,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:123,Modifiability,adapt,adaptive,123,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:310,Performance,perform,performance,310,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:3,Testability,test,test,3,"// test of multidimentional Integration; // Calculates an integral of a function; // in 2,3,..., 8 dimensions; // by using adaptive Genz Malik cubature; // and MonteCarlo methods:; // --PLAIN; // --VEGAS; // --MISER; //; // from; // IntegratorMultiDim class; // and GSLMCIntegrator class; //; // Compares time performance; // for different dimensions; // draws a graph; //; // Author: Magdalena Slawinska; //",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:31,Performance,perform,performance,31,"// for graphical comparison of performance",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:23,Deployability,integrat,integrate,23,"//multidim function to integrate",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:23,Integrability,integrat,integrate,23,"//multidim function to integrate",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:84,Deployability,Integrat,IntegratorMultiDim,84,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:84,Integrability,Integrat,IntegratorMultiDim,84,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:76,Testability,test,testing,76,"// ################################################################; //; // testing IntegratorMultiDim class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:26,Integrability,rout,routine,26,"// apply cut off to avoid routine to explode; //unsigned int size = (unsigned int) 1.E8; // apply cut off to avoid routine to explode",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:115,Integrability,rout,routine,115,"// apply cut off to avoid routine to explode; //unsigned int size = (unsigned int) 1.E8; // apply cut off to avoid routine to explode",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:20,Safety,avoid,avoid,20,"// apply cut off to avoid routine to explode; //unsigned int size = (unsigned int) 1.E8; // apply cut off to avoid routine to explode",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:109,Safety,avoid,avoid,109,"// apply cut off to avoid routine to explode; //unsigned int size = (unsigned int) 1.E8; // apply cut off to avoid routine to explode",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:76,Testability,test,testing,76,"// ################################################################; //; // testing MCIntegrator class; //; // ################################################################",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:3,Testability,test,test,3,"// test using a different generator",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:2,Deployability,integrat,integration,2,"//integration limits",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:2,Integrability,integrat,integration,2,"//integration limits",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx:3,Testability,test,test,3,"// test the values",MatchSource.CODE_COMMENT,math/mathmore/test/testMCIntegration.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testMCIntegration.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,Testability,test,test,3,"// test finding Roots of polynomials",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:24,Testability,test,test,24,"// unrolll loop to have test printing component when failed",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:33,Availability,toler,tolerance,33,"// check within a given absolute tolerance",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,Testability,test,test,3,"// test x^4 - 16 = 0",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,Testability,test,test,3,"// test (x+1)^4 = 0",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:7,Availability,toler,tolerance,7,"// bad tolerance for this test",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:26,Testability,test,test,26,"// bad tolerance for this test",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:32,Availability,error,error,32,"// numerical method has a large error for this case",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,Testability,test,test,3,"// test x4 + 5x^2 + 4 = 0; //4 imaginary roots (x-i)(x+i)(x-2i)(x+2i)=0",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,Testability,test,test,3,"// test x^4-8x^3+12x^2+16x+4=0; // 4 real roots where 2 are degeenrates",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx:3,Testability,test,test,3,"// test 5x^4 + 4x^3 + 3x^2 + 2x + 1",MatchSource.CODE_COMMENT,math/mathmore/test/testPolynomialRoots.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testPolynomialRoots.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx:3,Testability,test,test,3,"// test program for quasi random numbers",MatchSource.CODE_COMMENT,math/mathmore/test/testQuasiRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx:3,Testability,test,test,3,"// test number of empty bins",MatchSource.CODE_COMMENT,math/mathmore/test/testQuasiRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testQuasiRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testRandom.cxx:3,Integrability,wrap,wrapper,3,"// wrapper for stdrand",MatchSource.CODE_COMMENT,math/mathmore/test/testRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testRandom.cxx:3,Integrability,wrap,wrapper,3,"// wrapper for clhep",MatchSource.CODE_COMMENT,math/mathmore/test/testRandom.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testRandom.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testRandomDist.cxx:30,Testability,test,test,30,"//testPoisson2(tr,mu,h2);; // test differences",MatchSource.CODE_COMMENT,math/mathmore/test/testRandomDist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testRandomDist.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:12,Testability,test,tests,12,"/* MathCore/tests/test_SpecFunc.cpp; *; * Copyright (C) 2004 Andras Zsenei; *; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program; if not, write to the Free Software; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. */; /**. Test file for the special functions implemented in MathMore. For; the moment nothing exceptional. Evaluates the functions and checks; if the value is right against values copied from the GSL tests. */",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:768,Testability,Test,Test,768,"/* MathCore/tests/test_SpecFunc.cpp; *; * Copyright (C) 2004 Andras Zsenei; *; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program; if not, write to the Free Software; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. */; /**. Test file for the special functions implemented in MathMore. For; the moment nothing exceptional. Evaluates the functions and checks; if the value is right against values copied from the GSL tests. */",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:959,Testability,test,tests,959,"/* MathCore/tests/test_SpecFunc.cpp; *; * Copyright (C) 2004 Andras Zsenei; *; This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License; along with this program; if not, write to the Free Software; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. */; /**. Test file for the special functions implemented in MathMore. For; the moment nothing exceptional. Evaluates the functions and checks; if the value is right against values copied from the GSL tests. */",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:12,Availability,toler,tolerance,12,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:134,Energy Efficiency,Adapt,Adapt,134,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:134,Modifiability,Adapt,Adapt,134,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx:41,Testability,test,test,41,"// increase tolerance when using Cephes (test values are correctly checked with Mathematica; // GSL was more precise in this case; // Adapt also to 32 bits architectures",MatchSource.CODE_COMMENT,math/mathmore/test/testSpecFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testSpecFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:4,Testability,test,test,4,"/// test of the statistical functions cdf and quantiles; //#define NO_MATHCORE",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:25,Deployability,integrat,integrated,25,"// wrappers to pdf to be integrated",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:3,Integrability,wrap,wrappers,3,"// wrappers to pdf to be integrated",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:25,Integrability,integrat,integrated,25,"// wrappers to pdf to be integrated",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:12,Testability,test,test,12,"// skip cdf test when Mathcore is missing",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:12,Testability,test,test,12,"// skip cdf test when Mathcore is missing",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:18,Testability,test,testing,18,"// value used for testing",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:32,Availability,error,error,32,"// use a larger scale (integral error is 10-9)",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:48,Testability,test,test,48,"// without mathcore pdf are missing so skip cdf test",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx:3,Integrability,wrap,wrapper,3,"// wrapper for the beta",MatchSource.CODE_COMMENT,math/mathmore/test/testStatFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStatFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:292,Deployability,integrat,integration,292,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:292,Integrability,integrat,integration,292,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:259,Performance,perform,performs,259,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:12,Testability,test,test,12,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:192,Testability,test,test,192,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:268,Testability,test,tests,268,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:688,Testability,test,test-stressMathMoreUnit,688,"// @(#)root/test:$Id$; // Author: Lorenzo Moneta 06/2005; // Martin Storø Nyfløtt 05/2017; ///////////////////////////////////////////////////////////////////////////////////; //; // MathMore test suite; // ==============================; //; // This program performs tests :; // - numerical integration, derivation and root finders; // - it compares for various values of the gamma and beta distribution); // - the numerical calculated integral of pdf with cdf function,; // - the calculated derivative of cdf with pdf; // - the inverse (using root finder) of cdf with quantile; //; // to run the program outside ROOT do:; // > make stressMathMoreUnit; // > ctest -R gtest-math-mathmore-test-stressMathMoreUnit; //",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:7,Testability,test,tests,7,"// few tests fail here",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx:3,Safety,avoid,avoid,3,"// avoid the case where alpha or beta = 1",MatchSource.CODE_COMMENT,math/mathmore/test/testStress.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/testStress.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h:12,Testability,test,test,12,"// class to test unuran dist",MatchSource.CODE_COMMENT,math/mathmore/test/UnuRanDist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h:151,Testability,assert,assert,151,"// std::string smu = ROOT::Math::Util::ToString(mu);; // std::string dist = ""poisson("" + smu + "")"";; // if (!fUnuran.Init(dist, ""method=dstd"") ) {; // assert(0);; // }",MatchSource.CODE_COMMENT,math/mathmore/test/UnuRanDist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/UnuRanDist.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.cxx:1168,Deployability,update,update,1168,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Implementation file for class VavilovTest; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.cxx:23,Testability,test,test,23,"//os << ""agreefraction test failed.\n"";",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.cxx
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:1160,Deployability,update,update,1160,"// @(#)root/mathmore:$Id$; // Authors: B. List 29.4.2010; /**********************************************************************; * *; * Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; * *; * This library is free software; you can redistribute it and/or *; * modify it under the terms of the GNU General Public License *; * as published by the Free Software Foundation; either version 2 *; * of the License, or (at your option) any later version. *; * *; * This library is distributed in the hope that it will be useful, *; * but WITHOUT ANY WARRANTY; without even the implied warranty of *; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU *; * General Public License for more details. *; * *; * You should have received a copy of the GNU General Public License *; * along with this library (see file COPYING); if not, write *; * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; * 330, Boston, MA 02111-1307 USA, or contact the author. *; * *; **********************************************************************/; // Header file for class VavilovTest; //; // Created by: blist at Thu Apr 29 11:19:00 2010; //; // Last update: Thu Apr 29 11:19:00 2010; //",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:630,Availability,Avail,Available,630,"//____________________________________________________________________________; /**; Test class for class Vavilov and its subclasses. For test purposes,; the class contains a number of static function that return the tabulated; values of the Vavilov pdf given by; S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. B. List 24.6.2010. */",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:294,Energy Efficiency,Energy,Energy,294,"//____________________________________________________________________________; /**; Test class for class Vavilov and its subclasses. For test purposes,; the class contains a number of static function that return the tabulated; values of the Vavilov pdf given by; S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. B. List 24.6.2010. */",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:487,Energy Efficiency,charge,charged,487,"//____________________________________________________________________________; /**; Test class for class Vavilov and its subclasses. For test purposes,; the class contains a number of static function that return the tabulated; values of the Vavilov pdf given by; S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. B. List 24.6.2010. */",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:85,Testability,Test,Test,85,"//____________________________________________________________________________; /**; Test class for class Vavilov and its subclasses. For test purposes,; the class contains a number of static function that return the tabulated; values of the Vavilov pdf given by; S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. B. List 24.6.2010. */",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:138,Testability,test,test,138,"//____________________________________________________________________________; /**; Test class for class Vavilov and its subclasses. For test purposes,; the class contains a number of static function that return the tabulated; values of the Vavilov pdf given by; S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. B. List 24.6.2010. */",MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Testability,Test,Test,5,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:85,Testability,test,test,85,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:122,Testability,test,test,122,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Testability,Test,Test,5,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:85,Testability,test,test,85,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:122,Testability,test,test,122,/**; Test the pdf values against the tables of Seltzer and Berger.; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Testability,Test,Test,5,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; @param maxabsdiff max abs difference; @param maxcdfdiff max cdf difference; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:75,Testability,test,test,75,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; @param maxabsdiff max abs difference; @param maxcdfdiff max cdf difference; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:112,Testability,test,test,112,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; @param maxabsdiff max abs difference; @param maxcdfdiff max cdf difference; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Testability,Test,Test,5,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:75,Testability,test,test,75,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:112,Testability,test,test,112,/**; Test the cdf values against the integral of the pdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Testability,Test,Test,5,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:64,Testability,test,test,64,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:101,Testability,test,test,101,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:5,Testability,Test,Test,5,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:64,Testability,test,test,64,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h:101,Testability,test,test,101,/**; Test the quantile values against the cdf; Returns 0 if the test is passed. @param v The Vavilov test object; @param os Output stream; */,MatchSource.CODE_COMMENT,math/mathmore/test/VavilovTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathmore/test/VavilovTest.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompBase.h:28,Energy Efficiency,power,powers,28,"// determinant exponent for powers of 2",MatchSource.CODE_COMMENT,math/matrix/inc/TDecompBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompBase.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompBase.h:35,Integrability,rout,routines,35,"// size of work array's in several routines",MatchSource.CODE_COMMENT,math/matrix/inc/TDecompBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompBase.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h:213,Availability,toler,tolerate,213,"// the Threshold Pivoting parameter may need to be increased during; // the algorithm if poor precision is obtained from the linear; // solves. kThresholdPivoting indicates the largest value we are; // willing to tolerate.",MatchSource.CODE_COMMENT,math/matrix/inc/TDecompSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h:144,Modifiability,refactor,refactorization,144,"// precision we demand from the linear system solver. If it isn't; // attained on the first solve, we use iterative refinement and; // possibly refactorization with a higher value of kThresholdPivoting.",MatchSource.CODE_COMMENT,math/matrix/inc/TDecompSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h:32,Energy Efficiency,allocate,allocated,32,"// amounts by which to increase allocated factorization space when",MatchSource.CODE_COMMENT,math/matrix/inc/TDecompSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h:23,Safety,detect,detected,23,"// inadequate space is detected. fIPessimism is for array ""fIw"",; // fRPessimism is for the array ""fact"".",MatchSource.CODE_COMMENT,math/matrix/inc/TDecompSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TDecompSparse.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixT.h:10,Security,access,access,10,"// Either access a_ij as a(i,j)",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixT.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixT.h:86,Energy Efficiency,Efficient,Efficiently,86,"////////////////////////////////////////////////////////////////////////////////; /// Efficiently sets element (rown,coln) equal to val; /// Index bound checks can be deactivated by defining NDEBUG",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixT.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h:1128,Modifiability,inherit,inheritance,1128,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTBase //; // //; // Template of base class in the linear algebra package //; // //; // matrix properties are stored here, however the data storage is part //; // of the derived classes //; // //; //////////////////////////////////////////////////////////////////////////; //======================================================================//; // Summary of the streamer version history //; //======================================================================//; // 3.10/02 4.00/a 4.00/b 4.00/c 4.00-08 5.05-1 //; // TMatrixFBase - 2 2 2 4 5 //; // TMatrix 2 3 3 3 3 4 //; // TMatrixF - 3 3 3 3 4 //; // TMatrixFSym - 1 1 1 1 2 //; // TMatrixDSparse - - - - - 2 //; // //; // TMatrixDBase - 2 3 3 4 5 //; // TMatrixD 2 3 3 3 3 4 //; // TMatrixDSym - 1 1 1 1 2 //; // TMatrixDSparse - - 1 1 1 2 //; // //; // TVector 2 3 3 3 3 4 //; // TVectorF - 2 2 2 3 4 //; // //; // TVectorD 2 2 2 2 3 4 //; //======================================================================//; // //; // 4.00/a : (Jan 25 2004) introduced new classes/inheritance scheme, //; // TMatrix now inherits from TMatrixF //; // //; // TMatrixF::TMatrixFBase //; // TMatrixFSym::TMatrixFBase //; // TMatrixD::TMatrixDBase //; // TMatrixDSym::TMatrixDBase //; // //; // 4.00/b : (May 12 2004) introduced TMatrixDSparse and added new //; // element fNRowIndex to TMatrixFBase and TMatrixDBase //; // TMatrixDSparse::TMatrixDBase //; // //; // 4.00/c : (May 27 2004) Used the TObject::fBits to store validity //; // state for vectors and matrices //; // //; // 5.05-1 : templates TMatrixTBase,TMatrixT,TMatrixTSym and //; // TMatrixTSparse were introduced, all versions were //; // increased by 1 . //; // //; //======================================================================//",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h:1167,Modifiability,inherit,inherits,1167,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTBase //; // //; // Template of base class in the linear algebra package //; // //; // matrix properties are stored here, however the data storage is part //; // of the derived classes //; // //; //////////////////////////////////////////////////////////////////////////; //======================================================================//; // Summary of the streamer version history //; //======================================================================//; // 3.10/02 4.00/a 4.00/b 4.00/c 4.00-08 5.05-1 //; // TMatrixFBase - 2 2 2 4 5 //; // TMatrix 2 3 3 3 3 4 //; // TMatrixF - 3 3 3 3 4 //; // TMatrixFSym - 1 1 1 1 2 //; // TMatrixDSparse - - - - - 2 //; // //; // TMatrixDBase - 2 3 3 4 5 //; // TMatrixD 2 3 3 3 3 4 //; // TMatrixDSym - 1 1 1 1 2 //; // TMatrixDSparse - - 1 1 1 2 //; // //; // TVector 2 3 3 3 3 4 //; // TVectorF - 2 2 2 3 4 //; // //; // TVectorD 2 2 2 2 3 4 //; //======================================================================//; // //; // 4.00/a : (Jan 25 2004) introduced new classes/inheritance scheme, //; // TMatrix now inherits from TMatrixF //; // //; // TMatrixF::TMatrixFBase //; // TMatrixFSym::TMatrixFBase //; // TMatrixD::TMatrixDBase //; // TMatrixDSym::TMatrixDBase //; // //; // 4.00/b : (May 12 2004) introduced TMatrixDSparse and added new //; // element fNRowIndex to TMatrixFBase and TMatrixDBase //; // TMatrixDSparse::TMatrixDBase //; // //; // 4.00/c : (May 27 2004) Used the TObject::fBits to store validity //; // state for vectors and matrices //; // //; // 5.05-1 : templates TMatrixTBase,TMatrixT,TMatrixTSym and //; // TMatrixTSparse were introduced, all versions were //; // increased by 1 . //; // //; //======================================================================//",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h:35,Integrability,rout,routines,35,"// size of work array's in several routines",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h:95,Security,validat,validation,95,"// Service functions (useful in the verification code).; // They print some detail info if the validation condition fails",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTBase.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h:209,Energy Efficiency,adapt,adapted,209,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h:160,Integrability,rout,routines,160,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h:222,Integrability,rout,routines,222,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h:209,Modifiability,adapt,adapted,209,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h:211,Security,access,accessed,211,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTLazy //; // //; // Class used to make a lazy copy of a matrix, i.e. only copy matrix //; // when really needed (when accessed). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTLazy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h:214,Security,access,accessed,214,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSymLazy //; // //; // Class used to make a lazy copy of a matrix, i.e. only copy matrix //; // when really needed (when accessed). //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTLazy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTLazy.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSparse.h:10,Security,access,access,10,"// Either access a_ij as a(i,j)",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSparse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSparse.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:277,Deployability,update,updated,277,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSym //; // //; // Implementation of a symmetric matrix in the linear algebra package //; // //; // Note that in this implementation both matrix element m[i][j] and //; // m[j][i] are updated and stored in memory. However, when making the //; // object persistent only the upper right triangle is stored. //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSym.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:10,Security,access,access,10,"// Either access a_ij as a(i,j)",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSym.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:5,Security,Access,Access,5,"///< Access element a_ij where i=rown and j=coln. \warning Modifying this element by the caller breaks the symmetry of the matrix if a_ji is not modified accordingly.; // or as a[i][j]",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSym.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:5,Security,Access,Access,5,"///< Access row a_i where i=rown. \note A concatenated call to [coln] allows to access element a_ij where i=rown and j=coln \warning Modifying this row by the caller breaks the symmetry of the matrix if a_j is not modified accordingly.",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSym.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:80,Security,access,access,80,"///< Access row a_i where i=rown. \note A concatenated call to [coln] allows to access element a_ij where i=rown and j=coln \warning Modifying this row by the caller breaks the symmetry of the matrix if a_j is not modified accordingly.",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSym.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h:86,Energy Efficiency,Efficient,Efficiently,86,"////////////////////////////////////////////////////////////////////////////////; /// Efficiently sets element (rown,coln) equal to val; /// Index bound checks can be deactivated by defining NDEBUG",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSym.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSym.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h:212,Energy Efficiency,adapt,adapted,212,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSymCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSymCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h:163,Integrability,rout,routines,163,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSymCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSymCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h:225,Integrability,rout,routines,225,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSymCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSymCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h:212,Modifiability,adapt,adapted,212,"//////////////////////////////////////////////////////////////////////////; // //; // TMatrixTSymCramerInv //; // //; // Encapsulate templates of Cramer Inversion routines. //; // //; // The 4x4, 5x5 and 6x6 are adapted from routines written by //; // Mark Fischler and Steven Haywood as part of the CLHEP package //; // //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTSymCramerInv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTSymCramerInv.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:34,Security,Access,Access,34,"// Template of General Matrix Row Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:34,Security,Access,Access,34,"// Template of General Matrix Row Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:37,Security,Access,Access,37,"// Template of General Matrix Column Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:37,Security,Access,Access,37,"// Template of General Matrix Column Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:39,Security,Access,Access,39,"// Template of General Matrix Diagonal Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:39,Security,Access,Access,39,"// Template of General Matrix Diagonal Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:26,Security,Access,Access,26,"// Template of Sub Matrix Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:26,Security,Access,Access,26,"// Template of Sub Matrix Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:33,Security,Access,Access,33,"// Template of Sparse Matrix Row Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:33,Security,Access,Access,33,"// Template of Sparse Matrix Row Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:38,Security,Access,Access,38,"// Template of Sparse Matrix Diagonal Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h:38,Security,Access,Access,38,"// Template of Sparse Matrix Diagonal Access class",MatchSource.CODE_COMMENT,math/matrix/inc/TMatrixTUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TMatrixTUtils.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h:35,Integrability,rout,routines,35,"// size of work array's in several routines",MatchSource.CODE_COMMENT,math/matrix/inc/TVectorT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h:3,Security,Access,Access,3,"// Access a vector element.",MatchSource.CODE_COMMENT,math/matrix/inc/TVectorT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h:3,Security,Access,Access,3,"// Access a vector element.",MatchSource.CODE_COMMENT,math/matrix/inc/TVectorT.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/inc/TVectorT.h
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:799,Availability,avail,available,799,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Dec 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDecompBase; \ingroup Matrix. Decomposition Base class. This class forms the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor h",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:2627,Availability,Toler,Tolerances,2627,"tored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indicati",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:2655,Availability,toler,tolerance,2655,"## Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, o",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3038,Availability,toler,tolerance,3038,"as been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the ",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3096,Availability,toler,tolerance,3096,"## TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3534,Availability,toler,tolerance,3534,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3590,Availability,toler,tolerance,3590,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:4002,Availability,toler,tolerance,4002,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:630,Deployability,install,installed,630,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Dec 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDecompBase; \ingroup Matrix. Decomposition Base class. This class forms the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor h",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:721,Energy Efficiency,monitor,monitoring,721,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Dec 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDecompBase; \ingroup Matrix. Decomposition Base class. This class forms the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor h",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:1781,Energy Efficiency,Power,Power,1781," derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operation",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:2806,Energy Efficiency,power,powerful,2806,"flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice t",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:2823,Energy Efficiency,monitor,monitor,2823,"flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice t",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3991,Energy Efficiency,reduce,reduce,3991,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:1923,Performance,perform,performed,1923,"alculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+ep",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3928,Safety,detect,detect,3928,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:4310,Testability,test,test,4310,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:1078,Usability,simpl,simple,1078,"hors: Fons Rademakers, Eddy Offermann Dec 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDecompBase; \ingroup Matrix. Decomposition Base class. This class forms the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effect",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:1501,Usability,simpl,simple,1501,"the base for all the decompositions methods in the; linear algebra package .; It or its derived classes have installed the methods to solve; equations,invert matrices and calculate determinants while monitoring; the accuracy. Each derived class has always the following methods available:. #### Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; ~~~; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); ~~~; gives,. ~~~; {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}; ~~~. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . #### Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . #### Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. #### Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . #### TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . #### MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input ar",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:3622,Usability,clear,clear,3622,"here X and are now matrices . X is supplied through; the argument and replaced with the solution . #### Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . ### Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes . It; gives the user a powerful tool to monitor and steer the operations; Its default value is sqrt(epsilon) where 1+epsilon = 1. If you do not want to be bothered by the following considerations,; like in most other linear algebra packages, just set the tolerance; with SetTol to an arbitrary small number . The tolerance number is used by each decomposition method to decide; whether the matrix is near singular, except of course SVD which can; handle singular matrices .; For each decomposition this will be checked in a different way; in LU; the matrix is considered singular when, at some point in the; decomposition, a diagonal element < fTol . Therefore, we had to set in; the example above of the (10x10) Hilbert, which is near singular, the; tolerance on 10e-12 . (The fact that we have to set the tolerance <; sqrt(epsilon) is a clear indication that we are losing precision .). If the matrix is flagged as being singular, operations with the; decomposition will fail and will return matrices/vectors that are; invalid . The observant reader will notice that by scaling the complete matrix; by some small number the decomposition will detect a singular matrix .; In this case the user will have to reduce the tolerance number by this; factor . (For CPU time saving we decided not to make this an automatic; procedure) . Code for this could look as follows:; ~~~; const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; ~~~. For usage examples see $ROOTSYS/test/stressLinear.cxx; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:292,Integrability,rout,routine,292,"// Estimates lower bound for norm1 of inverse of A. Returns norm; // estimate in est. iter sets the maximum number of iterations to be used.; // The return value indicates the number of iterations remaining on exit from; // loop, hence if this is non-zero the processed ""converged"".; // This routine uses Hager's Convex Optimisation Algorithm.; // See Applied Numerical Linear Algebra, p139 & SIAM J Sci Stat Comp 1984 pp 311-16",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:105,Energy Efficiency,power,powers,105,"// Returns product of matrix diagonal elements in d1 and d2. d1 is a mantissa and d2; // an exponent for powers of 2. If matrix is in diagonal or triangular-matrix form this; // will be the determinant.; // Based on Bowler, Martin, Peters and Wilkinson in HACLA",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx:121,Energy Efficiency,Power,Power,121,"////////////////////////////////////////////////////////////////////////////////; /// Matrix determinant det = d1*TMath::Power(2.,d2)",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:3,Deployability,Update,Update,3,"// Update the leading submatrix",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:124,Deployability,update,update,124,"// 1-by-1 pivot block d(k): column k now holds w(k) = u(k)*d(k); // where u(k) is the k-th column of u; // perform a rank-1 update of a(0:k-1,0:k-1) as; // a := a - u(k)*d(k)*u(k)' = a - w(k)*1/d(k)*w(k)'",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:107,Performance,perform,perform,107,"// 1-by-1 pivot block d(k): column k now holds w(k) = u(k)*d(k); // where u(k) is the k-th column of u; // perform a rank-1 update of a(0:k-1,0:k-1) as; // a := a - u(k)*d(k)*u(k)' = a - w(k)*1/d(k)*w(k)'",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:184,Deployability,update,update,184,"// 2-by-2 pivot block d(k): columns k and k-1 now hold; // ( w(k-1) w(k) ) = ( u(k-1) u(k) )*d(k); // where u(k) and u(k-1) are the k-th and (k-1)-th columns of u; // perform a rank-2 update of a(0:k-2,0:k-2) as; // a := a - ( u(k-1) u(k) )*d(k)*( u(k-1) u(k) )'; // = a - ( w(k-1) w(k) )*inv(d(k))*( w(k-1) w(k) )'",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:167,Performance,perform,perform,167,"// 2-by-2 pivot block d(k): columns k and k-1 now hold; // ( w(k-1) w(k) ) = ( u(k-1) u(k) )*d(k); // where u(k) and u(k-1) are the k-th and (k-1)-th columns of u; // perform a rank-2 update of a(0:k-2,0:k-2) as; // a := a - ( u(k-1) u(k) )*d(k)*( u(k-1) u(k) )'; // = a - ( w(k-1) w(k) )*inv(d(k))*( w(k-1) w(k) )'",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:160,Integrability,depend,depending,160,"// solve a*x = b, where a = u*d*u'. First solve u*d*x = b, overwriting b with x.; // k is the main loop index, decreasing from n-1 to 0 in steps of 1 or 2,; // depending on the size of the diagonal blocks.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:129,Integrability,depend,depending,129,"// Next solve u'*x = b, overwriting b with x.; //; // k is the main loop index, increasing from 0 to n-1 in steps of; // 1 or 2, depending on the size of the diagonal blocks.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:160,Integrability,depend,depending,160,"// solve a*x = b, where a = u*d*u'. First solve u*d*x = b, overwriting b with x.; // k is the main loop index, decreasing from n-1 to 0 in steps of 1 or 2,; // depending on the size of the diagonal blocks.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx:129,Integrability,depend,depending,129,"// Next solve u'*x = b, overwriting b with x.; //; // k is the main loop index, increasing from 0 to n-1 in steps of; // 1 or 2, depending on the size of the diagonal blocks.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompBK.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompBK.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompChol.cxx:22,Testability,test,test,22,"//Compute fU(j,j) and test for non-positive-definiteness.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompChol.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompChol.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompChol.cxx:121,Energy Efficiency,Power,Power,121,"////////////////////////////////////////////////////////////////////////////////; /// Matrix determinant det = d1*TMath::Power(2.,d2) is square of diagProd; /// of cholesky factor",MatchSource.CODE_COMMENT,math/matrix/src/TDecompChol.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompChol.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompLU.cxx:124,Energy Efficiency,Power,Power,124,"////////////////////////////////////////////////////////////////////////////////; /// Calculate determinant det = d1*TMath::Power(2.,d2)",MatchSource.CODE_COMMENT,math/matrix/src/TDecompLU.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompLU.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompLU.cxx:7,Availability,down,down,7,"// Run down jth column from top to diag, to form the elements of U.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompLU.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompLU.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompLU.cxx:7,Availability,down,down,7,"// Run down jth subdiag to form the residuals after the elimination of; // the first j-1 subdiags. These residuals divided by the appropriate; // diagonal term will become the multipliers in the elimination of the jth.; // subdiag. Find fIndex of largest scaled term in imax.",MatchSource.CODE_COMMENT,math/matrix/src/TDecompLU.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompLU.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompQRH.cxx:1303,Availability,Error,Errors,1303,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Dec 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TDecompQRH; \ingroup Matrix. QR Decomposition class. Decompose a general (m x n) matrix A into A = fQ' fR H where. ~~~; fQ : (m x n) - internal Q' matrix (not orthoginal); fR : (n x n) - upper triangular matrix; H : HouseHolder matrix which is stored through; fUp: (n) - vector with Householder up's; fW : (n) - vector with Householder beta's; ~~~. If row/column index of A starts at (rowLwb,colLwb) then; the decomposed matrices start from :; ~~~; fQ' : (rowLwb,0); fR : (0,colLwb); and the decomposed vectors start from :; fUp : (0); fW : (0); ~~~. In order to get the QR dcomposition of A (i.e. A = QR ); The orthoginal matrix Q needs to be computed from the internal Q' and; the up's and beta's vector defining the Householder transformation. The orthogonal Q matrix is returned to the user by calling the; function TDecompQRH::GetOrthogonalMatrix(). Errors arise from formation of reflectors i.e. singularity .; Note it attempts to handle the cases where the nRow <= nCol .; */",MatchSource.CODE_COMMENT,math/matrix/src/TDecompQRH.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompQRH.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompQRH.cxx:175,Energy Efficiency,Power,Power,175,"////////////////////////////////////////////////////////////////////////////////; /// This routine calculates the absolute (!) value of the determinant; /// |det| = d1*TMath::Power(2.,d2)",MatchSource.CODE_COMMENT,math/matrix/src/TDecompQRH.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompQRH.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompQRH.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// This routine calculates the absolute (!) value of the determinant; /// |det| = d1*TMath::Power(2.,d2)",MatchSource.CODE_COMMENT,math/matrix/src/TDecompQRH.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompQRH.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:184,Energy Efficiency,allocate,allocate,184,"////////////////////////////////////////////////////////////////////////////////; /// Static function, copying the non-zero entries in the upper triangle to; /// array b . User should allocate enough memory for array b .",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:3,Modifiability,refactor,refactor,3,"// refactor with a higher Threshold Pivoting parameter",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:101,Modifiability,variab,variables,101,"////////////////////////////////////////////////////////////////////////////////; /// Setup Pivoting variables",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:100,Integrability,rout,routine,100,"////////////////////////////////////////////////////////////////////////////////; /// Factorization routine, the workhorse for the decomposition step",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Main routine for solving Ax=b",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for pivoting setup",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for factorization",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for factorization",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for factorization",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for solving",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// Help routine for solving",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:37,Performance,perform,perform,37,"// step 3: order singular values and perform permutations",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:530,Testability,Test,Test,530,"////////////////////////////////////////////////////////////////////////////////; /// Bidiagonalize the (m x n) - matrix a (stored in v) through a series of Householder; /// transformations applied to the left (Q^T) and to the right (H) of a ,; /// so that A = Q . C . H^T with matrix C bidiagonal. Q and H are orthogonal matrices .; ///; /// Output:; /// v - (n x n) - matrix H in the (n x n) part of v; /// u - (m x m) - matrix Q^T; /// sDiag - diagonal of the (m x n) C; /// oDiag - off-diagonal elements of matrix C; ///; /// Test code for the output:; /// ~~~; /// const Int_t nRow = v.GetNrows();; /// const Int_t nCol = v.GetNcols();; /// TMatrixD H(v); H.ResizeTo(nCol,nCol);; /// TMatrixD E1(nCol,nCol); E1.UnitMatrix();; /// TMatrixD Ht(TMatrixDBase::kTransposed,H);; /// Bool_t ok = kTRUE;; /// ok &= VerifyMatrixIdentity(Ht * H,E1,kTRUE,1.0e-13);; /// ok &= VerifyMatrixIdentity(H * Ht,E1,kTRUE,1.0e-13);; /// TMatrixD E2(nRow,nRow); E2.UnitMatrix();; /// TMatrixD Qt(u);; /// TMatrixD Q(TMatrixDBase::kTransposed,Qt);; /// ok &= VerifyMatrixIdentity(Q * Qt,E2,kTRUE,1.0e-13);; /// TMatrixD C(nRow,nCol);; /// TMatrixDDiag(C) = sDiag;; /// for (Int_t i = 0; i < nCol-1; i++); /// C(i,i+1) = oDiag(i+1);; /// TMatrixD A = Q*C*Ht;; /// ok &= VerifyMatrixIdentity(A,a,kTRUE,1.0e-13);; /// ~~~",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:517,Testability,Test,Test,517,"////////////////////////////////////////////////////////////////////////////////; /// Diagonalizes in an iterative fashion the bidiagonal matrix C as described through; /// sDiag and oDiag, so that S' = U'^T . C . V' is diagonal. U' and V' are orthogonal; /// matrices .; ///; /// Output:; /// - v - (n x n) - matrix H . V' in the (n x n) part of v; /// - u - (m x m) - matrix U'^T . Q^T; /// - sDiag - diagonal of the (m x n) S'; ///; /// return convergence flag: 0 -> no convergence; /// 1 -> convergence; ///; /// Test code for the output:; /// ~~~; /// const Int_t nRow = v.GetNrows();; /// const Int_t nCol = v.GetNcols();; /// TMatrixD tmp = v; tmp.ResizeTo(nCol,nCol);; /// TMatrixD Vprime = Ht*tmp;; /// TMatrixD Vprimet(TMatrixDBase::kTransposed,Vprime);; /// TMatrixD Uprimet = u*Q;; /// TMatrixD Uprime(TMatrixDBase::kTransposed,Uprimet);; /// TMatrixD Sprime(nRow,nCol);; /// TMatrixDDiag(Sprime) = sDiag;; /// ok &= VerifyMatrixIdentity(Uprimet * C * Vprime,Sprime,kTRUE,1.0e-13);; /// ok &= VerifyMatrixIdentity(Q*Uprime * Sprime * Vprimet * Ht,a,kTRUE,1.0e-13);; /// ~~~",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:23,Performance,perform,perform,23,"// since sDiag(k) == 0 perform Givens transform with result oDiag[k] = 0",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:32,Performance,perform,perform,32,"// for negative singular values perform change of sign",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a permutation transformation on the diagonal matrix S', so that; /// matrix S'' = U''^T . S' . V'' has diagonal elements ordered such that they; /// do not increase.; ///; /// Output:; /// - v - (n x n) - matrix H . V' . V'' in the (n x n) part of v; /// - u - (m x m) - matrix U''^T . U'^T . Q^T; /// - sDiag - diagonal of the (m x n) S''",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:3,Performance,perform,perform,3,"// perform permutation on singular values",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:3,Performance,perform,perform,3,"// perform permutation on matrix v",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:3,Performance,perform,perform,3,"// perform permutation on vector u",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx:121,Energy Efficiency,Power,Power,121,"////////////////////////////////////////////////////////////////////////////////; /// Matrix determinant det = d1*TMath::Power(2.,d2)",MatchSource.CODE_COMMENT,math/matrix/src/TDecompSVD.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TDecompSVD.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDEigen.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce to Hessenberg form.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixDEigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDEigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDEigen.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce Hessenberg to real Schur form.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixDEigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDEigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDEigen.cxx:19,Safety,avoid,avoids,19,"// Double division avoids possible underflow",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixDEigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDEigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDSymEigen.cxx:12,Safety,avoid,avoid,12,"// Scale to avoid under/overflow.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixDSymEigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixDSymEigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:38,Availability,toler,tolerance,38,"// Since the user can not control the tolerance of this newly created matrix; // we put it to the smallest possible number",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:422,Energy Efficiency,allocate,allocated,422,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of matrix applying a specific operation to two prototypes.; /// Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b);; /// Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b);; /// Whenever kInvMult is invoked and b is not squared, additional memory is allocated for a^(-1)",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:26,Performance,perform,perform,26,"// if size(a) == size(b), perform in place computation",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:421,Energy Efficiency,allocate,allocated,421,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of matrix applying a specific operation to two prototypes.; /// Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b);; /// Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b); /// Whenever kInvMult is invoked and b is not squared, additional memory is allocated for a^(-1)",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:26,Performance,perform,perform,26,"// if size(a) == size(b), perform in place computation",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate new matrix. Arguments are number of rows, columns, row; /// lowerbound (0 default) and column lowerbound (0 default).",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:180,Integrability,rout,routine,180,"////////////////////////////////////////////////////////////////////////////////; /// Matrix multiplication, with A symmetric and B symmetric.; /// (Actually copied for the moment routine for B general); /// Replace this matrix with C such that C = A * B.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:188,Integrability,depend,depends,188,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb] x [col_lwb..col_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb][0..col_upb-col_lwb] (default); /// else : return [row_lwb..row_upb][col_lwb..col_upb]",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:147,Energy Efficiency,Power,Power,147,"////////////////////////////////////////////////////////////////////////////////; /// Return the matrix determinant as d1,d2 where det = d1*TMath::Power(2.0,d2)",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a rank 1 operation on matrix A:; /// A += alpha * v * v^T",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a rank 1 operation on matrix A:; /// A += alpha * v1 * v2^T",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical AND",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical AND",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical AND",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical OR",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical OR",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical OR",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 > source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 > source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 > source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 >= source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 >= source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 >= source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 <= source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 <= source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 <= source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 < source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 < source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 < source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:86,Testability,log,logical,86,"////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != source2",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:90,Testability,log,logical,90,"/*; ////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != val. template<class Element>; TMatrixT<Element> operator!=(const TMatrixT<Element> &source1,Element val); {; TMatrixT<Element> target; target.ResizeTo(source1);. const Element *sp = source1.GetMatrixArray();; Element *tp = target.GetMatrixArray();; const Element * const tp_last = tp+target.GetNoElements();; while (tp != tp_last) {; *tp++ = (*sp != val); sp++;; }. return target;; }. ////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != val. template<class Element>; TMatrixT<Element> operator!=(Element val,const TMatrixT<Element> &source1); {; return operator!=(source1,val);; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Modify addition: target += scalar * source.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:590,Testability,log,logical,590,"/*; ////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != val. template<class Element>; TMatrixT<Element> operator!=(const TMatrixT<Element> &source1,Element val); {; TMatrixT<Element> target; target.ResizeTo(source1);. const Element *sp = source1.GetMatrixArray();; Element *tp = target.GetMatrixArray();; const Element * const tp_last = tp+target.GetNoElements();; while (tp != tp_last) {; *tp++ = (*sp != val); sp++;; }. return target;; }. ////////////////////////////////////////////////////////////////////////////////; /// logical operation source1 != val. template<class Element>; TMatrixT<Element> operator!=(Element val,const TMatrixT<Element> &source1); {; return operator!=(source1,val);; }; */; ////////////////////////////////////////////////////////////////////////////////; /// Modify addition: target += scalar * source.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:97,Integrability,rout,routine,97,"////////////////////////////////////////////////////////////////////////////////; /// Elementary routine to calculate matrix multiplication A*B",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:97,Integrability,rout,routine,97,"////////////////////////////////////////////////////////////////////////////////; /// Elementary routine to calculate matrix multiplication A^T*B",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx:97,Integrability,rout,routine,97,"////////////////////////////////////////////////////////////////////////////////; /// Elementary routine to calculate matrix multiplication A*B^T",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTBase.cxx:89,Safety,avoid,avoid,89,"// Swap elements j and j - inc, implicitly use the fact; // that ktemp hold element j to avoid having to assign to; // element j-inc",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTBase.cxx:86,Security,Validat,Validate,86,"////////////////////////////////////////////////////////////////////////////////; /// Validate that all elements of matrix have value val within maxDevAllow.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTBase.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTBase.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx:578,Energy Efficiency,adapt,adapted,578,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Jan 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTCramerInv; \ingroup Matrix. TMatrixTCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx:543,Integrability,rout,routines,543,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Jan 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTCramerInv; \ingroup Matrix. TMatrixTCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx:591,Integrability,rout,routines,591,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Jan 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTCramerInv; \ingroup Matrix. TMatrixTCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx:578,Modifiability,adapt,adapted,578,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Jan 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTCramerInv; \ingroup Matrix. TMatrixTCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:2613,Integrability,rout,routine,2613,"thods exist to fill a sparse matrix with data entries.; Most are the same like for dense matrices but some care has to be; taken with regard to performance. In the constructor, always the; shape of the matrix has to be specified in some form . Data can be; entered through the following methods :; 1. constructor from COO matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_t nr_nonzeros,; Int_t *row, Int_t *col,Element *data);; ~~~; It uses SetMatrixArray(..), see below; 2. constructor from Harwell-Boeing (CSR) matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,; Int_t *rowptr, Int_t *col,Element *data);; ~~~; It copies input arrays into matrix .; 3. copy constructors; 4. SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data); where it is expected that the irow,icol and data array contain; nr entries . Only the entries with non-zero data[i] value are; inserted. Be aware that the input data array will be modified; inside the routine for doing the necessary sorting of indices !; 5. SetMatrixArray(Int_t nr,Int_t nrows,Int_t ncols,Int_t *irow,; Int_t *icol,Element *data) where it is expected that the irow,; icol and data array contain nr entries . It allows to reshape; the matrix according to nrows and ncols. Only the entries with; non-zero data[i] value are inserted. Be aware that the input; data array will be modified inside the routine for doing the; necessary sorting of indices !; 6. TMatrixTSparse a(n,m); for(....) { a(i,j) = ....; This is a very flexible method but expensive :; - if no entry for slot (i,j) is found in the sparse index table; it will be entered, which involves some memory management !; - before invoking this method in a loop it is smart to first; set the index table through a call to SetSparseIndex(..); 7. SetSub(Int_t row_lwb,Int_t col_lwb,const TMatrixTBase &source); the matrix to be inserted at position (row_lwb,col_lwb) can be; both dense or sparse . */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:3024,Integrability,rout,routine,3024,"thods exist to fill a sparse matrix with data entries.; Most are the same like for dense matrices but some care has to be; taken with regard to performance. In the constructor, always the; shape of the matrix has to be specified in some form . Data can be; entered through the following methods :; 1. constructor from COO matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_t nr_nonzeros,; Int_t *row, Int_t *col,Element *data);; ~~~; It uses SetMatrixArray(..), see below; 2. constructor from Harwell-Boeing (CSR) matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,; Int_t *rowptr, Int_t *col,Element *data);; ~~~; It copies input arrays into matrix .; 3. copy constructors; 4. SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data); where it is expected that the irow,icol and data array contain; nr entries . Only the entries with non-zero data[i] value are; inserted. Be aware that the input data array will be modified; inside the routine for doing the necessary sorting of indices !; 5. SetMatrixArray(Int_t nr,Int_t nrows,Int_t ncols,Int_t *irow,; Int_t *icol,Element *data) where it is expected that the irow,; icol and data array contain nr entries . It allows to reshape; the matrix according to nrows and ncols. Only the entries with; non-zero data[i] value are inserted. Be aware that the input; data array will be modified inside the routine for doing the; necessary sorting of indices !; 6. TMatrixTSparse a(n,m); for(....) { a(i,j) = ....; This is a very flexible method but expensive :; - if no entry for slot (i,j) is found in the sparse index table; it will be entered, which involves some memory management !; - before invoking this method in a loop it is smart to first; set the index table through a call to SetSparseIndex(..); 7. SetSub(Int_t row_lwb,Int_t col_lwb,const TMatrixTBase &source); the matrix to be inserted at position (row_lwb,col_lwb) can be; both dense or sparse . */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:3147,Modifiability,flexible,flexible,3147,"thods exist to fill a sparse matrix with data entries.; Most are the same like for dense matrices but some care has to be; taken with regard to performance. In the constructor, always the; shape of the matrix has to be specified in some form . Data can be; entered through the following methods :; 1. constructor from COO matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_t nr_nonzeros,; Int_t *row, Int_t *col,Element *data);; ~~~; It uses SetMatrixArray(..), see below; 2. constructor from Harwell-Boeing (CSR) matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,; Int_t *rowptr, Int_t *col,Element *data);; ~~~; It copies input arrays into matrix .; 3. copy constructors; 4. SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data); where it is expected that the irow,icol and data array contain; nr entries . Only the entries with non-zero data[i] value are; inserted. Be aware that the input data array will be modified; inside the routine for doing the necessary sorting of indices !; 5. SetMatrixArray(Int_t nr,Int_t nrows,Int_t ncols,Int_t *irow,; Int_t *icol,Element *data) where it is expected that the irow,; icol and data array contain nr entries . It allows to reshape; the matrix according to nrows and ncols. Only the entries with; non-zero data[i] value are inserted. Be aware that the input; data array will be modified inside the routine for doing the; necessary sorting of indices !; 6. TMatrixTSparse a(n,m); for(....) { a(i,j) = ....; This is a very flexible method but expensive :; - if no entry for slot (i,j) is found in the sparse index table; it will be entered, which involves some memory management !; - before invoking this method in a loop it is smart to first; set the index table through a call to SetSparseIndex(..); 7. SetSub(Int_t row_lwb,Int_t col_lwb,const TMatrixTBase &source); the matrix to be inserted at position (row_lwb,col_lwb) can be; both dense or sparse . */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:1726,Performance,perform,performance,1726,"dex, fRowIndex and; column index, fColIndex only for those elements unequal zero:. ~~~; fRowIndex[0,..,fNrows]: Stores for each row the index range of; the elements in the data and column array; fColIndex[0,..,fNelems-1]: Stores the column number for each data; element != 0; ~~~. As an example how to access all sparse data elements:. ~~~; for (Int_t irow = 0; irow < this->fNrows; irow++) {; const Int_t sIndex = fRowIndex[irow];; const Int_t eIndex = fRowIndex[irow+1];; for (Int_t index = sIndex; index < eIndex; index++) {; const Int_t icol = fColIndex[index];; const Element data = fElements[index];; printf(""data(%d,%d) = %.4e\n"",irow+this->fRowLwb,icol+; this->fColLwb,data);; }; }; ~~~. When checking whether sparse matrices are compatible (like in an; assignment !), not only the shape parameters are compared but also; the sparse structure through fRowIndex and fColIndex . Several methods exist to fill a sparse matrix with data entries.; Most are the same like for dense matrices but some care has to be; taken with regard to performance. In the constructor, always the; shape of the matrix has to be specified in some form . Data can be; entered through the following methods :; 1. constructor from COO matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_t nr_nonzeros,; Int_t *row, Int_t *col,Element *data);; ~~~; It uses SetMatrixArray(..), see below; 2. constructor from Harwell-Boeing (CSR) matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,; Int_t *rowptr, Int_t *col,Element *data);; ~~~; It copies input arrays into matrix .; 3. copy constructors; 4. SetMatrixArray(Int_t nr,Int_t *irow,Int_t *icol,Element *data); where it is expected that the irow,icol and data array contain; nr entries . Only the entries with non-zero data[i] value are; inserted. Be aware that the input data array will be modified; inside the routine for doing the necessary sorting of indices !; 5. SetMatrixArray(In",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:989,Security,access,access,989,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Feb 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSparse; \ingroup Matrix. TMatrixTSparse. Template class of a general sparse matrix in the Harwell-Boeing; format. Besides the usual shape/size descriptors of a matrix like fNrows,; fRowLwb,fNcols and fColLwb, we also store a row index, fRowIndex and; column index, fColIndex only for those elements unequal zero:. ~~~; fRowIndex[0,..,fNrows]: Stores for each row the index range of; the elements in the data and column array; fColIndex[0,..,fNelems-1]: Stores the column number for each data; element != 0; ~~~. As an example how to access all sparse data elements:. ~~~; for (Int_t irow = 0; irow < this->fNrows; irow++) {; const Int_t sIndex = fRowIndex[irow];; const Int_t eIndex = fRowIndex[irow+1];; for (Int_t index = sIndex; index < eIndex; index++) {; const Int_t icol = fColIndex[index];; const Element data = fElements[index];; printf(""data(%d,%d) = %.4e\n"",irow+this->fRowLwb,icol+; this->fColLwb,data);; }; }; ~~~. When checking whether sparse matrices are compatible (like in an; assignment !), not only the shape parameters are compared but also; the sparse structure through fRowIndex and fColIndex . Several methods exist to fill a sparse matrix with data entries.; Most are the same like for dense matrices but some care has to be; taken with regard to performance. In the constructor, always the; shape of the matrix has to be specified in some form . Data can be; entered through the following methods :; 1. constructor from COO matrix format; ~~~; TMatrixTSparse(Int_t row_lwb,Int_t row_upb,Int_t dol_lwb,; Int_t col_upb,Int_",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:95,Energy Efficiency,allocate,allocated,95,"////////////////////////////////////////////////////////////////////////////////; /// Space is allocated for row/column indices and data, but the sparse structure; /// information has still to be set !",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:95,Energy Efficiency,allocate,allocated,95,"////////////////////////////////////////////////////////////////////////////////; /// Space is allocated for row/column indices and data, but the sparse structure; /// information has still to be set !",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:95,Energy Efficiency,allocate,allocated,95,"////////////////////////////////////////////////////////////////////////////////; /// Space is allocated for row/column indices and data. Sparse row/column index; /// structure together with data is coming from the arrays, row, col and data, resp.; /// Here row, col and data are arrays of length nr (number of nonzero elements), i.e.; /// the matrix is stored in COO (coordinate) format. Note that the input arrays are; /// not passed as const since they will be modified !",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:95,Energy Efficiency,allocate,allocated,95,"////////////////////////////////////////////////////////////////////////////////; /// Space is allocated for row/column indices and data. Sparsity pattern is given by; /// column indices and row pointers from arrays col and rowptr, resp, while matrix; /// entries come from the array data. Arrays col and data are assumed to have length; /// nr (number of nonzero elements), while array rowptr has length (n+1), where; /// n=row_upb-row_lwb+1 is the number of rows.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate new matrix. Arguments are number of rows, columns, row lowerbound (0 default); /// and column lowerbound (0 default), 0 initialization flag and number of non-zero; /// elements (only relevant for sparse format).",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:34,Availability,avail,available,34,"// check first how many slots are available from [acoln,..,acoln+nr-1]; // also note lIndex and rIndex so that [sIndex..lIndex] and [rIndex..eIndex-1]; // contain the row entries except for the region to be inserted",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:147,Energy Efficiency,adapt,adaptation,147,"////////////////////////////////////////////////////////////////////////////////; /// General Sparse Matrix Multiplication (SpMM). This code is an adaptation of; /// Eigen SpMM implementation. This product is conservative, meaning that it; /// preserves the symbolic non zeros. Given lhs, rhs, it computes this = rhs * lhs.; /// Note, result matrix is only allocated when constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:357,Energy Efficiency,allocate,allocated,357,"////////////////////////////////////////////////////////////////////////////////; /// General Sparse Matrix Multiplication (SpMM). This code is an adaptation of; /// Eigen SpMM implementation. This product is conservative, meaning that it; /// preserves the symbolic non zeros. Given lhs, rhs, it computes this = rhs * lhs.; /// Note, result matrix is only allocated when constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:147,Modifiability,adapt,adaptation,147,"////////////////////////////////////////////////////////////////////////////////; /// General Sparse Matrix Multiplication (SpMM). This code is an adaptation of; /// Eigen SpMM implementation. This product is conservative, meaning that it; /// preserves the symbolic non zeros. Given lhs, rhs, it computes this = rhs * lhs.; /// Note, result matrix is only allocated when constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:189,Energy Efficiency,allocate,allocated,189,"////////////////////////////////////////////////////////////////////////////////; /// General matrix multiplication. Replace this matrix with C such that C = A * B'.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:75,Energy Efficiency,allocate,allocated,75,"// make a best guess of the sparse structure; it will guarantee; // enough allocated space !",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:189,Energy Efficiency,allocate,allocated,189,"////////////////////////////////////////////////////////////////////////////////; /// General matrix multiplication. Replace this matrix with C such that C = A * B'.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:75,Energy Efficiency,allocate,allocated,75,"// make a best guess of the sparse structure; it will guarantee; // enough allocated space !",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:182,Energy Efficiency,allocate,allocated,182,"////////////////////////////////////////////////////////////////////////////////; /// General matrix addition. Replace this matrix with C such that C = A + B.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:182,Energy Efficiency,allocate,allocated,182,"////////////////////////////////////////////////////////////////////////////////; /// General matrix addition. Replace this matrix with C such that C = A + B.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:185,Energy Efficiency,allocate,allocated,185,"////////////////////////////////////////////////////////////////////////////////; /// General matrix subtraction. Replace this matrix with C such that C = A - B.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:185,Energy Efficiency,allocate,allocated,185,"////////////////////////////////////////////////////////////////////////////////; /// General matrix subtraction. Replace this matrix with C such that C = A - B.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:185,Energy Efficiency,allocate,allocated,185,"////////////////////////////////////////////////////////////////////////////////; /// General matrix subtraction. Replace this matrix with C such that C = A - B.; /// Note, matrix C is allocated for constr=1.",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:157,Energy Efficiency,reduce,reduced,157,"////////////////////////////////////////////////////////////////////////////////; /// Sum matrix entries corresponding to the same matrix element (i,j). The reduced; /// extries remain dangling. It is assumed; /// that the arrays row, col and data are sorted with DoubleLexSort.; /// Note that the input arrays are not passed as const since they will be modified !",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:192,Energy Efficiency,allocate,allocated,192,"////////////////////////////////////////////////////////////////////////////////; /// Set the row/column indices to the ""sum"" of matrices a and b; /// It is checked that enough space has been allocated",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate the necessary space in fRowIndex and fColIndex",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:192,Energy Efficiency,allocate,allocated,192,"////////////////////////////////////////////////////////////////////////////////; /// Set the row/column indices to the ""sum"" of matrices a and b; /// It is checked that enough space has been allocated",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate the necessary space in fRowIndex and fColIndex",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:185,Integrability,depend,depends,185,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb][col_lwb..col_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1][0..col_upb-col_lwb+1] (default); /// else : return [row_lwb..row_upb][col_lwb..col_upb]",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx:45,Availability,avail,available,45,"// Determine how many non-zero's are already available in; // [row_lwb..row_lwb+nrows_source-1][col_lwb..col_lwb+ncols_source-1]",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSparse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSparse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:715,Deployability,update,updated,715,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Nov 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSym; \ingroup Matrix. TMatrixTSym. Template class of a symmetric matrix in the linear algebra package. See the \ref Matrix page for the documentation of the linear algebra package. Note that in this implementation both matrix element m[i][j] and; m[j][i] are updated and stored in memory. However, when making the; object persistent only the upper right triangle is stored. */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:38,Availability,toler,tolerance,38,"// Since the user can not control the tolerance of this newly created matrix; // we put it to the smallest possible number",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate new matrix. Arguments are number of rows, columns, row; /// lowerbound (0 default) and column lowerbound (0 default).",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:185,Integrability,depend,depends,185,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb][row_lwb..row_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1][0..row_upb-row_lwb+1] (default); /// else : return [row_lwb..row_upb][row_lwb..row_upb]",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:185,Integrability,depend,depends,185,"////////////////////////////////////////////////////////////////////////////////; /// Get submatrix [row_lwb..row_upb][col_lwb..col_upb]; The indexing range of the; /// returned matrix depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1][0..col_upb-col_lwb+1] (default); /// else : return [row_lwb..row_upb][col_lwb..col_upb]",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:305,Security,access,access,305,"////////////////////////////////////////////////////////////////////////////////; /// Invert the matrix and calculate its determinant; /// Notice that the LU decomposition is used instead of Bunch-Kaufman; /// Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; /// The user can access Bunch-Kaufman through the TDecompBK class .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a rank 1 operation on the matrix:; /// A += alpha * v * v^T",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:230,Energy Efficiency,efficient,efficient,230,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); /// This is a similarity transform when B is orthogonal . It is more; /// efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:298,Integrability,rout,routine,298,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); /// This is a similarity transform when B is orthogonal . It is more; /// efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:230,Energy Efficiency,efficient,efficient,230,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); /// This is a similarity transform when B is orthogonal . It is more; /// efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:298,Integrability,rout,routine,298,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); /// This is a similarity transform when B is orthogonal . It is more; /// efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:171,Energy Efficiency,efficient,efficient,171,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); /// It is more efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:239,Integrability,rout,routine,239,"////////////////////////////////////////////////////////////////////////////////; /// Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); /// It is more efficient than applying the actual multiplication because this; /// routine realizes that the final matrix is symmetric .",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical AND",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx:86,Testability,Log,Logical,86,"////////////////////////////////////////////////////////////////////////////////; /// Logical Or",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSym.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSym.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx:584,Energy Efficiency,adapt,adapted,584,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Oct 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSymCramerInv; \ingroup Matrix. TMatrixTSymCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSymCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx:549,Integrability,rout,routines,549,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Oct 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSymCramerInv; \ingroup Matrix. TMatrixTSymCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSymCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx:597,Integrability,rout,routines,597,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Oct 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSymCramerInv; \ingroup Matrix. TMatrixTSymCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSymCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx:584,Modifiability,adapt,adapted,584,"// @(#)root/base:$Id$; // Authors: Fons Rademakers, Eddy Offermann Oct 2004; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TMatrixTSymCramerInv; \ingroup Matrix. TMatrixTSymCramerInv. Encapsulate templates of Cramer Inversion routines. The 4x4, 5x5 and 6x6 are adapted from routines written by; Mark Fischler and Steven Haywood as part of the CLHEP package. Although for sizes <= 6x6 the Cramer Inversion has a gain in speed; compared to factorization schemes (like LU) , one pays a price in; accuracy . For Example:; ~~~; H * H^-1 = U, where H is a 5x5 Hilbert matrix; U is a 5x5 Unity matrix. LU : |U_jk| < 10e-13 for j!=k; Cramer: |U_jk| < 10e-7 for j!=k; ~~~. however Cramer algorithm is about 10 (!) times faster; */",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTSymCramerInv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTSymCramerInv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTUtils.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a rank 1 operation on the matrix:; /// A += alpha * v * v^T",MatchSource.CODE_COMMENT,math/matrix/src/TMatrixTUtils.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TMatrixTUtils.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:791,Availability,avail,available,791,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Nov 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVectorT; \ingroup Matrix. TVectorT. Template class of Vectors in the linear algebra package. See the \ref Matrix page for the documentation of the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see `$ROOTSYS/test/stressLinear.cxx`. */",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:820,Safety,avoid,avoiding,820,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Nov 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVectorT; \ingroup Matrix. TVectorT. Template class of Vectors in the linear algebra package. See the \ref Matrix page for the documentation of the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see `$ROOTSYS/test/stressLinear.cxx`. */",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:1249,Testability,test,test,1249,"// @(#)root/matrix:$Id$; // Authors: Fons Rademakers, Eddy Offermann Nov 2003; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /** \class TVectorT; \ingroup Matrix. TVectorT. Template class of Vectors in the linear algebra package. See the \ref Matrix page for the documentation of the linear algebra package. Unless otherwise specified, vector indices always start with 0,; spanning up to the specified limit-1. For (n) vectors where n <= kSizeMax (5 currently) storage space is; available on the stack, thus avoiding expensive allocation/; deallocation of heap space . However, this introduces of course; kSizeMax overhead for each vector object . If this is an issue; recompile with a new appropriate value (>=0) for kSizeMax. Another way to assign and store vector data is through Use; see for instance stressLinear.cxx file . Note that Constructors/assignments exists for all different matrix; views. For usage examples see `$ROOTSYS/test/stressLinear.cxx`. */",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:86,Energy Efficiency,Allocate,Allocate,86,"////////////////////////////////////////////////////////////////////////////////; /// Allocate new vector. Arguments are number of rows and row; /// lowerbound (0 default).",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:43,Modifiability,variab,variable,43,"// Init 'args' to the beginning of; // the variable length list of args",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:167,Integrability,depend,depends,167,"////////////////////////////////////////////////////////////////////////////////; /// Get subvector [row_lwb..row_upb]; The indexing range of the; /// returned vector depends on the argument option:; ///; /// option == ""S"" : return [0..row_upb-row_lwb+1] (default); /// else : return [row_lwb..row_upb]",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform v1 * M * v2, a scalar result",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx:86,Security,Validat,Validate,86,"////////////////////////////////////////////////////////////////////////////////; /// Validate that all elements of vector have value val within maxDevAllow .",MatchSource.CODE_COMMENT,math/matrix/src/TVectorT.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/src/TVectorT.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx:70,Testability,test,test,70,"// This is just so the can use the protected DiagProd funciton in the test.",MatchSource.CODE_COMMENT,math/matrix/test/testMatrixTDecomp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx:118,Energy Efficiency,power,powers,118,"// DiagProd returns the product of matrix diagonal elements in d1 and d2. d1; // is a mantissa and d2 an exponent for powers of 2. This is why we are; // using this specific formula to validate the method.",MatchSource.CODE_COMMENT,math/matrix/test/testMatrixTDecomp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx
https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx:185,Security,validat,validate,185,"// DiagProd returns the product of matrix diagonal elements in d1 and d2. d1; // is a mantissa and d2 an exponent for powers of 2. This is why we are; // using this specific formula to validate the method.",MatchSource.CODE_COMMENT,math/matrix/test/testMatrixTDecomp.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/test/testMatrixTDecomp.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TFitter.h:9,Testability,log,logs,9,"//Sum of logs (array of fNlog elements)",MatchSource.CODE_COMMENT,math/minuit/inc/TFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:325,Integrability,depend,dependency,325,"//////////////////////////////////////////////////////////////////////////; //; // The Linear Fitter - fitting functions that are LINEAR IN PARAMETERS; //; // Linear fitter is used to fit a set of data points with a linear; // combination of specified functions. Note, that ""linear"" in the name; // stands only for the model dependency on parameters, the specified; // functions can be nonlinear.; // The general form of this kind of model is; //; // y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); //; // Functions f are fixed functions of x. For example, fitting with a; // polynomial is linear fitting in this sense.; //; // The fitting method; //; // The fit is performed using the Normal Equations method with Cholesky; // decomposition.; //; // Why should it be used?; //; // The linear fitter is considerably faster than general non-linear; // fitters and doesn't require to set the initial values of parameters.; //; // Using the fitter:; //; // 1.Adding the data points:; // 1.1 To store or not to store the input data?; // - There are 2 options in the constructor - to store or not; // store the input data. The advantages of storing the data; // are that you'll be able to reset the fitting model without; // adding all the points again, and that for very large sets; // of points the chisquare is calculated more precisely.; // The obvious disadvantage is the amount of memory used to; // keep all the points.; // - Before you start adding the points, you can change the; // store/not store option by StoreData() method.; // 1.2 The data can be added:; // - simply point by point - AddPoint() method; // - an array of points at once:; // If the data is already stored in some arrays, this data; // can be assigned to the linear fitter without physically; // coping bytes, thanks to the Use() method of; // TVector and TMatrix classes - AssignData() method; //; // 2.Setting the formula; // 2.1 The linear formula syntax:; // -Additive parts are separated by 2 plus signs ""++""; // --for example",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:2564,Modifiability,variab,variables,2564,"simply point by point - AddPoint() method; // - an array of points at once:; // If the data is already stored in some arrays, this data; // can be assigned to the linear fitter without physically; // coping bytes, thanks to the Use() method of; // TVector and TMatrix classes - AssignData() method; //; // 2.Setting the formula; // 2.1 The linear formula syntax:; // -Additive parts are separated by 2 plus signs ""++""; // --for example ""1 ++ x"" - for fitting a straight line; // -All standard functions, undrestood by TFormula, can be used; // as additive parts; // --TMath functions can be used too; // -Functions, used as additive parts, shouldn't have any parameters,; // even if those parameters are set.; // --for example, if normalizing a sum of a gaus(0, 1) and a; // gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; // because it has parameters, take TMath::Gaus(x, 0, 1) instead.; // -Polynomials can be used like ""pol3"", ..""polN""; // -If fitting a more than 3-dimensional formula, variables should; // be numbered as follows:; // -- x0, x1, x2... For example, to fit ""1 ++ x0 ++ x1 ++ x2 ++ x3*x3""; // 2.2 Setting the formula:; // 2.2.1 If fitting a 1-2-3-dimensional formula, one can create a; // TF123 based on a linear expression and pass this function; // to the fitter:; // --Example:; // TLinearFitter *lf = new TLinearFitter();; // TF2 *f2 = new TF2(""f2"", ""x ++ y ++ x*x*y*y"", -2, 2, -2, 2);; // lf->SetFormula(f2);; // --The results of the fit are then stored in the function,; // just like when the TH1::Fit or TGraph::Fit is used; // --A linear function of this kind is by no means different; // from any other function, it can be drawn, evaluated, etc.; // 2.2.2 There is no need to create the function if you don't want to,; // the formula can be set by expression:; // --Example:; // // 2 is the number of dimensions; // TLinearFitter *lf = new TLinearFitter(2);; // lf->SetFormula(""x ++ y ++ x*x*y*y"");; // --That's the only way to go, if you want to fit in more; // tha",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:4326,Modifiability,variab,variables,4326,"eed to create the function if you don't want to,; // the formula can be set by expression:; // --Example:; // // 2 is the number of dimensions; // TLinearFitter *lf = new TLinearFitter(2);; // lf->SetFormula(""x ++ y ++ x*x*y*y"");; // --That's the only way to go, if you want to fit in more; // than 3 dimensions; // 2.2.3 The fastest functions to compute are polynomials and hyperplanes.; // --Polynomials are set the usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 Ther",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:662,Performance,perform,performed,662,"//////////////////////////////////////////////////////////////////////////; //; // The Linear Fitter - fitting functions that are LINEAR IN PARAMETERS; //; // Linear fitter is used to fit a set of data points with a linear; // combination of specified functions. Note, that ""linear"" in the name; // stands only for the model dependency on parameters, the specified; // functions can be nonlinear.; // The general form of this kind of model is; //; // y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); //; // Functions f are fixed functions of x. For example, fitting with a; // polynomial is linear fitting in this sense.; //; // The fitting method; //; // The fit is performed using the Normal Equations method with Cholesky; // decomposition.; //; // Why should it be used?; //; // The linear fitter is considerably faster than general non-linear; // fitters and doesn't require to set the initial values of parameters.; //; // Using the fitter:; //; // 1.Adding the data points:; // 1.1 To store or not to store the input data?; // - There are 2 options in the constructor - to store or not; // store the input data. The advantages of storing the data; // are that you'll be able to reset the fitting model without; // adding all the points again, and that for very large sets; // of points the chisquare is calculated more precisely.; // The obvious disadvantage is the amount of memory used to; // keep all the points.; // - Before you start adding the points, you can change the; // store/not store option by StoreData() method.; // 1.2 The data can be added:; // - simply point by point - AddPoint() method; // - an array of points at once:; // If the data is already stored in some arrays, this data; // can be assigned to the linear fitter without physically; // coping bytes, thanks to the Use() method of; // TVector and TMatrix classes - AssignData() method; //; // 2.Setting the formula; // 2.1 The linear formula syntax:; // -Additive parts are separated by 2 plus signs ""++""; // --for example",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:4224,Performance,perform,performance,4224,"eed to create the function if you don't want to,; // the formula can be set by expression:; // --Example:; // // 2 is the number of dimensions; // TLinearFitter *lf = new TLinearFitter(2);; // lf->SetFormula(""x ++ y ++ x*x*y*y"");; // --That's the only way to go, if you want to fit in more; // than 3 dimensions; // 2.2.3 The fastest functions to compute are polynomials and hyperplanes.; // --Polynomials are set the usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 Ther",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:5232,Security,Access,Accessing,5232,"usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 There are methods in the fitter to access all relevant information:; // --GetParameters, GetCovarianceMatrix, etc; // --the t-values of parameters and their significance can be reached by; // GetParTValue() and GetParSignificance() methods; // 3.2 If fitting with a pre-defined TF123, the fit results are also; // written into this function.; //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:5301,Security,access,access,5301,"usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 There are methods in the fitter to access all relevant information:; // --GetParameters, GetCovarianceMatrix, etc; // --the t-values of parameters and their significance can be reached by; // GetParTValue() and GetParSignificance() methods; // 3.2 If fitting with a pre-defined TF123, the fit results are also; // written into this function.; //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:1566,Usability,simpl,simply,1566,"d with Cholesky; // decomposition.; //; // Why should it be used?; //; // The linear fitter is considerably faster than general non-linear; // fitters and doesn't require to set the initial values of parameters.; //; // Using the fitter:; //; // 1.Adding the data points:; // 1.1 To store or not to store the input data?; // - There are 2 options in the constructor - to store or not; // store the input data. The advantages of storing the data; // are that you'll be able to reset the fitting model without; // adding all the points again, and that for very large sets; // of points the chisquare is calculated more precisely.; // The obvious disadvantage is the amount of memory used to; // keep all the points.; // - Before you start adding the points, you can change the; // store/not store option by StoreData() method.; // 1.2 The data can be added:; // - simply point by point - AddPoint() method; // - an array of points at once:; // If the data is already stored in some arrays, this data; // can be assigned to the linear fitter without physically; // coping bytes, thanks to the Use() method of; // TVector and TMatrix classes - AssignData() method; //; // 2.Setting the formula; // 2.1 The linear formula syntax:; // -Additive parts are separated by 2 plus signs ""++""; // --for example ""1 ++ x"" - for fitting a straight line; // -All standard functions, undrestood by TFormula, can be used; // as additive parts; // --TMath functions can be used too; // -Functions, used as additive parts, shouldn't have any parameters,; // even if those parameters are set.; // --for example, if normalizing a sum of a gaus(0, 1) and a; // gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; // because it has parameters, take TMath::Gaus(x, 0, 1) instead.; // -Polynomials can be used like ""pol3"", ..""polN""; // -If fitting a more than 3-dimensional formula, variables should; // be numbered as follows:; // -- x0, x1, x2... For example, to fit ""1 ++ x0 ++ x1 ++ x2 ++ x3*x3""; // 2.2 Setting the form",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:5141,Usability,clear,cleared,5141,"usual way: ""pol1"", ""pol2"",...; // --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; // ---The ""hypN"" expressions only work when the linear fitter; // is used directly, not through TH1::Fit or TGraph::Fit.; // To fit a graph or a histogram with a hyperplane, define; // the function as ""1++x++y"".; // ---A constant term is assumed for a hyperplane, when using; // the ""hypN"" expression, so ""hyp3"" is in fact fitting with; // ""1++x++y++z"" function.; // --Fitting hyperplanes is much faster than fitting other; // expressions so if performance is vital, calculate the; // function values beforehand and give them to the fitter; // as variables; // --Example:; // You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; // sin(x) and cos(2*x) beforehand and store them in array *data.; // Then:; // TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; // lf->AssignData(npoint, 2, data, y);; //; // 2.3 Resetting the formula; // 2.3.1 If the input data is stored (or added via AssignData() function),; // the fitting formula can be reset without re-adding all the points.; // --Example:; // TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; // lf->AssignData(n, 1, x, y, e);; // lf->Eval(); // //looking at the parameter significance, you see,; // // that maybe the fit will improve, if you take out; // // the constant term; // lf->SetFormula(""x++x*x"");; // lf->Eval();; // ...; // 2.3.2 If the input data is not stored, the fitter will have to be; // cleared and the data will have to be added again to try a; // different formula.; //; // 3.Accessing the fit results; // 3.1 There are methods in the fitter to access all relevant information:; // --GetParameters, GetCovarianceMatrix, etc; // --the t-values of parameters and their significance can be reached by; // GetParTValue() and GetParSignificance() methods; // 3.2 If fitting with a pre-defined TF123, the fit results are also; // written into this function.; //; //////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:14,Modifiability,variab,variable,14,"//! temporary variable used for num.stability",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:6,Availability,error,errors,6,"//the errors if they are known",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:27,Availability,robust,robust,27,"//number of good points in robust fit",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:25,Availability,robust,robust,25,"//true when performing a robust fit",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:12,Performance,perform,performing,12,"//true when performing a robust fit",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:33,Availability,robust,robust,33,"//indices of points, used in the robust fit",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:27,Deployability,release,released,27,"//[fNfixed] array of fixed/released params",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h:2,Availability,robust,robust,2,"//robust fitting functions:",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearFitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearFitter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:13,Modifiability,variab,variable,13,"/// set free variable (dummy impl. since there is no need to set variables in the Linear Fitter)",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:65,Modifiability,variab,variables,65,"/// set free variable (dummy impl. since there is no need to set variables in the Linear Fitter)",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:14,Modifiability,variab,variable,14,"/// set fixed variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:14,Performance,perform,perform,14,"/// method to perform the minimization",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:7,Availability,avail,available,7,"// not available in Minuit2; /// number of function calls to reach the minimum",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:67,Modifiability,variab,variables,67,"/// this is <= Function().NDim() which is the total; /// number of variables (free+ constrained ones)",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:19,Modifiability,variab,variables,19,"/// number of free variables (real dimension of the problem); /// this is <= Function().NDim() which is the total",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:23,Availability,error,error,23,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:33,Availability,error,error,33,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:11,Availability,error,errors,11,"/// return errors at the minimum",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:134,Availability,error,errors,134,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:48,Modifiability,variab,variable,48,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:106,Modifiability,variab,variables,106,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h:34,Integrability,interface,interface,34,"//Implementation of the Minimizer interface using TLinearFitter",MatchSource.CODE_COMMENT,math/minuit/inc/TLinearMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TLinearMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:13,Modifiability,variab,variable,13,"/// set free variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:28,Modifiability,variab,variable,28,"/// set upper/lower limited variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:20,Modifiability,variab,variable,20,"/// set lower limit variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:20,Modifiability,variab,variable,20,"/// set upper limit variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:14,Modifiability,variab,variable,14,"/// set fixed variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:33,Modifiability,variab,variable,33,"/// set the value of an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:37,Modifiability,variab,variable,37,"/// set the step size of an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:39,Modifiability,variab,variable,39,"/// set the lower-limit of an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:39,Modifiability,variab,variable,39,"/// set the upper-limit of an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:34,Modifiability,variab,variable,34,"/// set the limits of an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:20,Modifiability,variab,variable,20,"/// fix an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:4,Deployability,release,release,4,"/// release an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:24,Modifiability,variab,variable,24,"/// release an existing variable",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:25,Modifiability,variab,variable,25,"/// query if an existing variable is fixed (i.e. considered constant in the minimization); /// note that by default all variables are not fixed",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:120,Modifiability,variab,variables,120,"/// query if an existing variable is fixed (i.e. considered constant in the minimization); /// note that by default all variables are not fixed",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:8,Modifiability,variab,variable,8,"/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:31,Modifiability,variab,variable,31,"/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:14,Performance,perform,perform,14,"/// method to perform the minimization",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:7,Availability,avail,available,7,"// not available in Minuit2; /// number of function calls to reach the minimum",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:67,Modifiability,variab,variables,67,"/// this is <= Function().NDim() which is the total; /// number of variables (free+ constrained ones)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:19,Modifiability,variab,variables,19,"/// number of free variables (real dimension of the problem); /// this is <= Function().NDim() which is the total",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:23,Availability,error,error,23,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:33,Availability,error,error,33,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:11,Availability,error,errors,11,"/// return errors at the minimum",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:134,Availability,error,errors,134,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:48,Modifiability,variab,variable,48,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:106,Modifiability,variab,variables,106,/** return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:212,Availability,error,errors,212,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:275,Integrability,interface,interface,275,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:71,Modifiability,variab,variable,71,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:184,Modifiability,variab,variables,184,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:347,Modifiability,variab,variable,347,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:173,Modifiability,variab,variable,173,/**; Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:220,Modifiability,variab,variables,220,/**; Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:38,Modifiability,variab,variable,38,"///global correlation coefficient for variable i",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:10,Availability,error,error,10,"/// minos error for variable i, return false if Minos failed",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:20,Modifiability,variab,variable,20,"/// minos error for variable i, return false if Minos failed",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:58,Availability,error,error,58,/**; perform a full calculation of the Hessian matrix for error calculation; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:5,Performance,perform,perform,5,/**; perform a full calculation of the Hessian matrix for error calculation; */,MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:154,Availability,Error,ErrorUp,154,"/**; find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();; */",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:127,Modifiability,variab,variables,127,"/// return reference to the objective function; ///virtual const ROOT::Math::IGenFunction & Function() const;; /// get name of variables (override if minimizer support storing of variable names)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:179,Modifiability,variab,variable,179,"/// return reference to the objective function; ///virtual const ROOT::Math::IGenFunction & Function() const;; /// get name of variables (override if minimizer support storing of variable names)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:17,Modifiability,variab,variable,17,"/// get index of variable given a variable given a name; /// return always -1 . (It is Not implemented)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:34,Modifiability,variab,variable,34,"/// get index of variable given a variable given a name; /// return always -1 . (It is Not implemented)",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:3,Deployability,release,release,3,"///release a parameter that is fixed when it is redefined",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:36,Availability,error,errors,36,"/// retrieve minimum parameters and errors from TMinuit",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:13,Availability,error,error,13,"/// retrieve error matrix from TMinuit",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:20,Availability,error,errors,20,"// vector of output errors",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h:30,Integrability,interface,interface,30,"//Implementation of Minimizer interface using TMinuit",MatchSource.CODE_COMMENT,math/minuit/inc/TMinuitMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/inc/TMinuitMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:405,Availability,error,errors,405,"////////////////////////////////////////////////////////////////////////////////; /// Computes confidence intervals at level cl. Default is 0.95; ///; /// The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; /// For Graphs, confidence intervals are computed for each point,; /// the value of the graph at that point is set to the function value at that; /// point, and the graph y-errors (or z-errors) are set to the value of; /// the confidence interval at that point.; /// For Histograms, confidence intervals are computed for each bin center; /// The bin content of this bin is then set to the function value at the bin; /// center, and the bin error is set to the confidence interval value.; /// NOTE: confidence intervals are approximate for nonlinear models!; ///; /// Allowed combinations:; ///; /// - Fitted object Passed object; /// - TGraph TGraphErrors, TH1; /// - TGraphErrors, AsymmErrors TGraphErrors, TH1; /// - TH1 TGraphErrors, TH1; /// - TGraph2D TGraph2DErrors, TH2; /// - TGraph2DErrors TGraph2DErrors, TH2; /// - TH2 TGraph2DErrors, TH2; /// - TH3 TH3",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:418,Availability,error,errors,418,"////////////////////////////////////////////////////////////////////////////////; /// Computes confidence intervals at level cl. Default is 0.95; ///; /// The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; /// For Graphs, confidence intervals are computed for each point,; /// the value of the graph at that point is set to the function value at that; /// point, and the graph y-errors (or z-errors) are set to the value of; /// the confidence interval at that point.; /// For Histograms, confidence intervals are computed for each bin center; /// The bin content of this bin is then set to the function value at the bin; /// center, and the bin error is set to the confidence interval value.; /// NOTE: confidence intervals are approximate for nonlinear models!; ///; /// Allowed combinations:; ///; /// - Fitted object Passed object; /// - TGraph TGraphErrors, TH1; /// - TGraphErrors, AsymmErrors TGraphErrors, TH1; /// - TH1 TGraphErrors, TH1; /// - TGraph2D TGraph2DErrors, TH2; /// - TGraph2DErrors TGraph2DErrors, TH2; /// - TH2 TGraph2DErrors, TH2; /// - TH3 TH3",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:672,Availability,error,error,672,"////////////////////////////////////////////////////////////////////////////////; /// Computes confidence intervals at level cl. Default is 0.95; ///; /// The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH1,2,3.; /// For Graphs, confidence intervals are computed for each point,; /// the value of the graph at that point is set to the function value at that; /// point, and the graph y-errors (or z-errors) are set to the value of; /// the confidence interval at that point.; /// For Histograms, confidence intervals are computed for each bin center; /// The bin content of this bin is then set to the function value at the bin; /// center, and the bin error is set to the confidence interval value.; /// NOTE: confidence intervals are approximate for nonlinear models!; ///; /// Allowed combinations:; ///; /// - Fitted object Passed object; /// - TGraph TGraphErrors, TH1; /// - TGraphErrors, AsymmErrors TGraphErrors, TH1; /// - TH1 TGraphErrors, TH1; /// - TGraph2D TGraph2DErrors, TH2; /// - TGraph2DErrors TGraph2DErrors, TH2; /// - TH2 TGraph2DErrors, TH2; /// - TH3 TH3",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:101,Availability,error,errors,101,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// ipar : parameter number; /// eplus : upper error; /// eminus : lower error; /// eparab : parabolic error; /// globcc : global correlation coefficient",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:172,Availability,error,error,172,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// ipar : parameter number; /// eplus : upper error; /// eminus : lower error; /// eparab : parabolic error; /// globcc : global correlation coefficient",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:198,Availability,error,error,198,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// ipar : parameter number; /// eplus : upper error; /// eminus : lower error; /// eparab : parabolic error; /// globcc : global correlation coefficient",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:228,Availability,error,error,228,"////////////////////////////////////////////////////////////////////////////////; /// return current errors for a parameter; /// ipar : parameter number; /// eplus : upper error; /// eminus : lower error; /// eparab : parabolic error; /// globcc : global correlation coefficient",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:93,Availability,error,error,93,"////////////////////////////////////////////////////////////////////////////////; /// return error of parameter ipar",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:253,Availability,error,error,253,"////////////////////////////////////////////////////////////////////////////////; /// return current values for a parameter; ///; /// - ipar : parameter number; /// - parname : parameter name; /// - value : initial parameter value; /// - verr : initial error for this parameter; /// - vlow : lower value for the parameter; /// - vhigh : upper value for the parameter; ///; /// WARNING! parname must be suitably dimensioned in the calling function.",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:226,Modifiability,variab,variable,226,"////////////////////////////////////////////////////////////////////////////////; /// return global fit parameters; ///; /// - amin : chisquare; /// - edm : estimated distance to minimum; /// - errdef; /// - nvpar : number of variable parameters; /// - nparx : total number of parameters",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:97,Testability,log,log,97,"////////////////////////////////////////////////////////////////////////////////; /// return Sum(log(i) i=0,n; /// used by log likelihood fits",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:123,Testability,log,log,123,"////////////////////////////////////////////////////////////////////////////////; /// return Sum(log(i) i=0,n; /// used by log likelihood fits",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:86,Deployability,Release,Release,86,"////////////////////////////////////////////////////////////////////////////////; /// Release parameter ipar.",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:115,Testability,log,log-likelihood,115,"////////////////////////////////////////////////////////////////////////////////; /// ret fit method (chisquare or log-likelihood)",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx:250,Availability,error,error,250,"////////////////////////////////////////////////////////////////////////////////; /// set initial values for a parameter; ///; /// - ipar : parameter number; /// - parname : parameter name; /// - value : initial parameter value; /// - verr : initial error for this parameter; /// - vlow : lower value for the parameter; /// - vhigh : upper value for the parameter",MatchSource.CODE_COMMENT,math/minuit/src/TFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5492,Availability,Robust,Robust,5492," the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are ",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5816,Availability,error,errors,5816,"oking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are sure that the data contains less outliers it's better to change; h according to your data. To perform a robust fit, call EvalRobust() function instead of Eval() after; adding the points a",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:6022,Availability,robust,robust,6022,"input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are sure that the data contains less outliers it's better to change; h according to your data. To perform a robust fit, call EvalRobust() function instead of Eval() after; adding the points and setting the fitting function.; Note, that standard errors on parameters are not computed!. */; ////////////////////////////////////////////////////////////////////////////////; ///default c",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:6706,Availability,robust,robust,6706,"### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are sure that the data contains less outliers it's better to change; h according to your data. To perform a robust fit, call EvalRobust() function instead of Eval() after; adding the points and setting the fitting function.; Note, that standard errors on parameters are not computed!. */; ////////////////////////////////////////////////////////////////////////////////; ///default c-tor, input data is stored; ///If you don't want to store the input data,; ///run the function StoreData(kFALSE) after constructor",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:6843,Availability,error,errors,6843,"### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are sure that the data contains less outliers it's better to change; h according to your data. To perform a robust fit, call EvalRobust() function instead of Eval() after; adding the points and setting the fitting function.; Note, that standard errors on parameters are not computed!. */; ////////////////////////////////////////////////////////////////////////////////; ///default c-tor, input data is stored; ///If you don't want to store the input data,; ///run the function StoreData(kFALSE) after constructor",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:398,Integrability,depend,dependency,398,"/**. \class TLinearFitter. \note An alternative to this class is to use ROOT::Fit::Fitter, calling the LinearFit() method. \ingroup MinuitOld. The Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS. ## The Linear Fitter. Linear fitter is used to fit a set of data points with a linear; combination of specified functions. Note, that ""linear"" in the name; stands only for the model dependency on parameters, the specified; functions can be nonlinear.; The general form of this kind of model is; ~~~~; y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); ~~~~. Functions f are fixed functions of x. For example, fitting with a; polynomial is linear fitting in this sense. ### Introduction. #### The fitting method. The fit is performed using the Normal Equations method with Cholesky; decomposition. #### Why should it be used?. The linear fitter is considerably faster than general non-linear; fitters and doesn't require to set the initial values of parameters. ### Using the fitter:. ### 1.Adding the data points:. #### 1.1 To store or not to store the input data?; - There are 2 options in the constructor - to store or not; store the input data. The advantages of storing the data; are that you'll be able to reset the fitting model without; adding all the points again, and that for very large sets; of points the chisquare is calculated more precisely.; The obvious disadvantage is the amount of memory used to; keep all the points.; - Before you start adding the points, you can change the; store/not store option by StoreData() method. #### 1.2 The data can be added:; - simply point by point - AddPoint() method; - an array of points at once:; If the data is already stored in some arrays, this data; can be assigned to the linear fitter without physically; coping bytes, thanks to the Use() method of; TVector and TMatrix classes - AssignData() method. ### 2.Setting the formula. #### 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++""; --for example """,MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:2532,Modifiability,variab,variables,2532,"Data() method. #### 1.2 The data can be added:; - simply point by point - AddPoint() method; - an array of points at once:; If the data is already stored in some arrays, this data; can be assigned to the linear fitter without physically; coping bytes, thanks to the Use() method of; TVector and TMatrix classes - AssignData() method. ### 2.Setting the formula. #### 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++""; --for example ""1 ++ x"" - for fitting a straight line; -All standard functions, undrestood by TFormula, can be used; as additive parts; --TMath functions can be used too; -Functions, used as additive parts, shouldn't have any parameters,; even if those parameters are set.; --for example, if normalizing a sum of a gaus(0, 1) and a; gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; because it has parameters, take TMath::Gaus(x, 0, 1) instead.; -Polynomials can be used like ""pol3"", ..""polN""; -If fitting a more than 3-dimensional formula, variables should; be numbered as follows:; -- x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]"". #### 2.2 Setting the formula:. ##### 2.2.1 If fitting a 1-2-3-dimensional formula, one can create a; TF123 based on a linear expression and pass this function; to the fitter:; --Example:; ~~~~; TLinearFitter *lf = new TLinearFitter();; TF2 *f2 = new TF2(""f2"", ""x ++ y ++ x*x*y*y"", -2, 2, -2, 2);; lf->SetFormula(f2);; ~~~~; --The results of the fit are then stored in the function,; just like when the TH1::Fit or TGraph::Fit is used; --A linear function of this kind is by no means different; from any other function, it can be drawn, evaluated, etc. --For multidimensional fitting, TFormulas of the form:; x[0]++...++x[n] can be used; ##### 2.2.2 There is no need to create the function if you don't want to,; the formula can be set by expression:; --Example:; ~~~~; // 2 is the number of dimensions; TLinearFitter *lf = new TLinearFitter(2);; lf->SetFormula(""x ++ y ++ x*x*",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:4257,Modifiability,variab,variables,4257,"d, etc. --For multidimensional fitting, TFormulas of the form:; x[0]++...++x[n] can be used; ##### 2.2.2 There is no need to create the function if you don't want to,; the formula can be set by expression:; --Example:; ~~~~; // 2 is the number of dimensions; TLinearFitter *lf = new TLinearFitter(2);; lf->SetFormula(""x ++ y ++ x*x*y*y"");; ~~~~. ##### 2.2.3 The fastest functions to compute are polynomials and hyperplanes.; --Polynomials are set the usual way: ""pol1"", ""pol2"",...; --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; ---The ""hypN"" expressions only work when the linear fitter; is used directly, not through TH1::Fit or TGraph::Fit.; To fit a graph or a histogram with a hyperplane, define; the function as ""1++x++y"".; ---A constant term is assumed for a hyperplane, when using; the ""hypN"" expression, so ""hyp3"" is in fact fitting with; ""1++x++y++z"" function.; --Fitting hyperplanes is much faster than fitting other; expressions so if performance is vital, calculate the; function values beforehand and give them to the fitter; as variables; --Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all rele",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5780,Modifiability,variab,variable,5780,"oking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are sure that the data contains less outliers it's better to change; h according to your data. To perform a robust fit, call EvalRobust() function instead of Eval() after; adding the points a",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:732,Performance,perform,performed,732,"/**. \class TLinearFitter. \note An alternative to this class is to use ROOT::Fit::Fitter, calling the LinearFit() method. \ingroup MinuitOld. The Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS. ## The Linear Fitter. Linear fitter is used to fit a set of data points with a linear; combination of specified functions. Note, that ""linear"" in the name; stands only for the model dependency on parameters, the specified; functions can be nonlinear.; The general form of this kind of model is; ~~~~; y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); ~~~~. Functions f are fixed functions of x. For example, fitting with a; polynomial is linear fitting in this sense. ### Introduction. #### The fitting method. The fit is performed using the Normal Equations method with Cholesky; decomposition. #### Why should it be used?. The linear fitter is considerably faster than general non-linear; fitters and doesn't require to set the initial values of parameters. ### Using the fitter:. ### 1.Adding the data points:. #### 1.1 To store or not to store the input data?; - There are 2 options in the constructor - to store or not; store the input data. The advantages of storing the data; are that you'll be able to reset the fitting model without; adding all the points again, and that for very large sets; of points the chisquare is calculated more precisely.; The obvious disadvantage is the amount of memory used to; keep all the points.; - Before you start adding the points, you can change the; store/not store option by StoreData() method. #### 1.2 The data can be added:; - simply point by point - AddPoint() method; - an array of points at once:; If the data is already stored in some arrays, this data; can be assigned to the linear fitter without physically; coping bytes, thanks to the Use() method of; TVector and TMatrix classes - AssignData() method. ### 2.Setting the formula. #### 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++""; --for example """,MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:4161,Performance,perform,performance,4161,"d, etc. --For multidimensional fitting, TFormulas of the form:; x[0]++...++x[n] can be used; ##### 2.2.2 There is no need to create the function if you don't want to,; the formula can be set by expression:; --Example:; ~~~~; // 2 is the number of dimensions; TLinearFitter *lf = new TLinearFitter(2);; lf->SetFormula(""x ++ y ++ x*x*y*y"");; ~~~~. ##### 2.2.3 The fastest functions to compute are polynomials and hyperplanes.; --Polynomials are set the usual way: ""pol1"", ""pol2"",...; --Hyperplanes are set by expression ""hyp3"", ""hyp4"", ...; ---The ""hypN"" expressions only work when the linear fitter; is used directly, not through TH1::Fit or TGraph::Fit.; To fit a graph or a histogram with a hyperplane, define; the function as ""1++x++y"".; ---A constant term is assumed for a hyperplane, when using; the ""hypN"" expression, so ""hyp3"" is in fact fitting with; ""1++x++y++z"" function.; --Fitting hyperplanes is much faster than fitting other; expressions so if performance is vital, calculate the; function values beforehand and give them to the fitter; as variables; --Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all rele",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:6696,Performance,perform,perform,6696,"### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting coefficients for a subset; of h observations (out of n) with the smallest sum of squared residuals.; The size of the subset h should lie between (npoints + nparameters +1)/2; and n, and represents the minimal number of good points in the dataset.; The default value is set to (npoints + nparameters +1)/2, but of course; if you are sure that the data contains less outliers it's better to change; h according to your data. To perform a robust fit, call EvalRobust() function instead of Eval() after; adding the points and setting the fitting function.; Note, that standard errors on parameters are not computed!. */; ////////////////////////////////////////////////////////////////////////////////; ///default c-tor, input data is stored; ///If you don't want to store the input data,; ///run the function StoreData(kFALSE) after constructor",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5118,Security,Access,Accessing,5118,"ting other; expressions so if performance is vital, calculate the; function values beforehand and give them to the fitter; as variables; --Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5189,Security,access,access,5189,"--Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) methods; is recommended. The method implemented here is based on the article and algorithm:; ""Computing LTS Regression for Large Data Sets"" by; P.J.Rousseeuw and Katrien Van Driessen; The idea of the method is to find the fitting",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:1586,Usability,simpl,simply,1586,"method. The fit is performed using the Normal Equations method with Cholesky; decomposition. #### Why should it be used?. The linear fitter is considerably faster than general non-linear; fitters and doesn't require to set the initial values of parameters. ### Using the fitter:. ### 1.Adding the data points:. #### 1.1 To store or not to store the input data?; - There are 2 options in the constructor - to store or not; store the input data. The advantages of storing the data; are that you'll be able to reset the fitting model without; adding all the points again, and that for very large sets; of points the chisquare is calculated more precisely.; The obvious disadvantage is the amount of memory used to; keep all the points.; - Before you start adding the points, you can change the; store/not store option by StoreData() method. #### 1.2 The data can be added:; - simply point by point - AddPoint() method; - an array of points at once:; If the data is already stored in some arrays, this data; can be assigned to the linear fitter without physically; coping bytes, thanks to the Use() method of; TVector and TMatrix classes - AssignData() method. ### 2.Setting the formula. #### 2.1 The linear formula syntax:; -Additive parts are separated by 2 plus signs ""++""; --for example ""1 ++ x"" - for fitting a straight line; -All standard functions, undrestood by TFormula, can be used; as additive parts; --TMath functions can be used too; -Functions, used as additive parts, shouldn't have any parameters,; even if those parameters are set.; --for example, if normalizing a sum of a gaus(0, 1) and a; gaus(0, 2), don't use the built-in ""gaus"" of TFormula,; because it has parameters, take TMath::Gaus(x, 0, 1) instead.; -Polynomials can be used like ""pol3"", ..""polN""; -If fitting a more than 3-dimensional formula, variables should; be numbered as follows:; -- x[0], x[1], x[2]... For example, to fit ""1 ++ x[0] ++ x[1] ++ x[2] ++ x[3]*x[3]"". #### 2.2 Setting the formula:. ##### 2.2.1 If fitting ",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:5034,Usability,clear,cleared,5034,"n fact fitting with; ""1++x++y++z"" function.; --Fitting hyperplanes is much faster than fitting other; expressions so if performance is vital, calculate the; function values beforehand and give them to the fitter; as variables; --Example:; You want to fit ""sin(x)|cos(2*x)"" very fast. Calculate; sin(x) and cos(2*x) beforehand and store them in array *data.; Then:; TLinearFitter *lf=new TLinearFitter(2, ""hyp2"");; lf->AssignData(npoint, 2, data, y);. #### 2.3 Resetting the formula. ##### 2.3.1 If the input data is stored (or added via AssignData() function),; the fitting formula can be reset without re-adding all the points.; --Example:; ~~~~; TLinearFitter *lf=new TLinearFitter(""1++x++x*x"");; lf->AssignData(n, 1, x, y, e);; lf->Eval(); //looking at the parameter significance, you see,; // that maybe the fit will improve, if you take out; // the constant term; lf->SetFormula(""x++x*x"");; lf->Eval();; ...; ~~~~. ##### 2.3.2 If the input data is not stored, the fitter will have to be; cleared and the data will have to be added again to try a; different formula. ### 3.Accessing the fit results. #### 3.1 There are methods in the fitter to access all relevant information:; --GetParameters, GetCovarianceMatrix, etc; --the t-values of parameters and their significance can be reached by; GetParTValue() and GetParSignificance() methods. #### 3.2 If fitting with a pre-defined TF123, the fit results are also; written into this function. ### 4.Robust fitting - Least Trimmed Squares regression (LTS); Outliers are atypical(by definition), infrequant observations; data points; which do not appear to follow the characteristic distribution of the rest; of the data. These may reflect genuine properties of the underlying; phenomenon(variable), or be due to measurement errors or anomalies which; shouldn't be modelled. (StatSoft electronic textbook). Even a single gross outlier can greatly influence the results of least-; squares fitting procedure, and in this case use of robust(resistant) m",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:7,Usability,clear,clear,7,"// use clear instead of delete",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:292,Availability,error,error,292,"////////////////////////////////////////////////////////////////////////////////; ///Adds 1 point to the fitter.; ///First parameter stands for the coordinates of the point, where the function is measured; ///Second parameter - the value being fitted; ///Third parameter - weight(measurement error) of this point (=1 by default)",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:396,Modifiability,variab,variables,396,"////////////////////////////////////////////////////////////////////////////////; ///This function is to use when you already have all the data in arrays; ///and don't want to copy them into the fitter. In this function, the Use() method; ///of TVectorD and TMatrixD is used, so no bytes are physically moved around.; ///First parameter - number of points to fit; ///Second parameter - number of variables in the model; ///Third parameter - the variables of the model, stored in the following way:; ///(x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),...",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:445,Modifiability,variab,variables,445,"////////////////////////////////////////////////////////////////////////////////; ///This function is to use when you already have all the data in arrays; ///and don't want to copy them into the fitter. In this function, the Use() method; ///of TVectorD and TMatrixD is used, so no bytes are physically moved around.; ///First parameter - number of points to fit; ///Second parameter - number of variables in the model; ///Third parameter - the variables of the model, stored in the following way:; ///(x0(0), x1(0), x2(0), x3(0), x0(1), x1(1), x2(1), x3(1),...",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:37,Integrability,depend,depending,37,"// ffunctions can be TF1 or TFormula depending on how they are created",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:85,Usability,Clear,Clears,85,"////////////////////////////////////////////////////////////////////////////////; ///Clears everything. Used in TH1::Fit and TGraph::Fit().",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:178,Availability,error,errors,178,"////////////////////////////////////////////////////////////////////////////////; /// Perform the fit and evaluate the parameters; /// Returns 0 if the fit is ok, 1 if there are errors",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform the fit and evaluate the parameters; /// Returns 0 if the fit is ok, 1 if there are errors",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:85,Deployability,Release,Releases,85,"////////////////////////////////////////////////////////////////////////////////; ///Releases parameter `#ipar`.",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:514,Modifiability,inherit,inherits,514,"////////////////////////////////////////////////////////////////////////////////; ///Computes point-by-point confidence intervals for the fitted function; ///Parameters:; ///n - number of points; ///ndim - dimensions of points; ///x - points, at which to compute the intervals, for ndim > 1; /// should be in order: (x0,y0, x1, y1, ... xn, yn); ///ci - computed intervals are returned in this array; ///cl - confidence level, default=0.95; ///; ///NOTE, that this method can only be used when the fitting function inherits from a TF1,; ///so it's not possible when the fitting function was set as a string or as a pure TFormula",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:393,Availability,error,errors,393,"////////////////////////////////////////////////////////////////////////////////; ///Computes confidence intervals at level cl. Default is 0.95; ///The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH123.; ///For Graphs, confidence intervals are computed for each point,; ///the value of the graph at that point is set to the function value at that; ///point, and the graph y-errors (or z-errors) are set to the value of; ///the confidence interval at that point; ///For Histograms, confidence intervals are computed for each bin center; ///The bin content of this bin is then set to the function value at the bin; ///center, and the bin error is set to the confidence interval value.; ///Allowed combinations:; ///Fitted object Passed object; ///TGraph TGraphErrors, TH1; ///TGraphErrors, AsymmErrors TGraphErrors, TH1; ///TH1 TGraphErrors, TH1; ///TGraph2D TGraph2DErrors, TH2; ///TGraph2DErrors TGraph2DErrors, TH2; ///TH2 TGraph2DErrors, TH2; ///TH3 TH3",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:406,Availability,error,errors,406,"////////////////////////////////////////////////////////////////////////////////; ///Computes confidence intervals at level cl. Default is 0.95; ///The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH123.; ///For Graphs, confidence intervals are computed for each point,; ///the value of the graph at that point is set to the function value at that; ///point, and the graph y-errors (or z-errors) are set to the value of; ///the confidence interval at that point; ///For Histograms, confidence intervals are computed for each bin center; ///The bin content of this bin is then set to the function value at the bin; ///center, and the bin error is set to the confidence interval value.; ///Allowed combinations:; ///Fitted object Passed object; ///TGraph TGraphErrors, TH1; ///TGraphErrors, AsymmErrors TGraphErrors, TH1; ///TH1 TGraphErrors, TH1; ///TGraph2D TGraph2DErrors, TH2; ///TGraph2DErrors TGraph2DErrors, TH2; ///TH2 TGraph2DErrors, TH2; ///TH3 TH3",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:655,Availability,error,error,655,"////////////////////////////////////////////////////////////////////////////////; ///Computes confidence intervals at level cl. Default is 0.95; ///The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH123.; ///For Graphs, confidence intervals are computed for each point,; ///the value of the graph at that point is set to the function value at that; ///point, and the graph y-errors (or z-errors) are set to the value of; ///the confidence interval at that point; ///For Histograms, confidence intervals are computed for each bin center; ///The bin content of this bin is then set to the function value at the bin; ///center, and the bin error is set to the confidence interval value.; ///Allowed combinations:; ///Fitted object Passed object; ///TGraph TGraphErrors, TH1; ///TGraphErrors, AsymmErrors TGraphErrors, TH1; ///TH1 TGraphErrors, TH1; ///TGraph2D TGraph2DErrors, TH2; ///TGraph2DErrors TGraph2DErrors, TH2; ///TH2 TGraph2DErrors, TH2; ///TH3 TH3",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:103,Availability,error,errors,103,"////////////////////////////////////////////////////////////////////////////////; ///Returns parameter errors",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:97,Availability,error,error,97,"////////////////////////////////////////////////////////////////////////////////; ///Returns the error of parameter `#ipar`",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:89,Availability,robust,robust,89,"////////////////////////////////////////////////////////////////////////////////; ///For robust lts fitting, returns the sample, on which the best fit was based",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:41,Usability,clear,clear,41,"//change the size of functions array and clear it",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:85,Deployability,Update,Update,85,"////////////////////////////////////////////////////////////////////////////////; ///Update the design matrix after the formula has been changed.",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:164,Availability,error,errors,164,"////////////////////////////////////////////////////////////////////////////////; /// Level = 3 (to be consistent with minuit) prints parameters and parameter; /// errors.",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:9,Integrability,message,message,9,"// print message only when h is not zero",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx:30,Performance,perform,perform,30,"//for the nbest best results, perform CSteps until convergence",MatchSource.CODE_COMMENT,math/minuit/src/TLinearFitter.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearFitter.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:247,Integrability,interface,interface,247,"////////////////////////////////////////////////////////////////////////////////; /// \class TLinearMinimizer; /// \see Minuit2 for a newer version of this class; ///; /// TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer; /// interface usingTLinearFitter. This class uses TLinearFitter to find directly; /// (by solving a system of linear equations) the minimum of a least-square; /// function which has a linear dependence in the fit parameters. This class is; /// not used directly, but via the ROOT::Fitter class, when calling the; /// LinearFit method. It is instantiates using the plug-in manager; /// (plug-in name is ""Linear"").; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:434,Integrability,depend,dependence,434,"////////////////////////////////////////////////////////////////////////////////; /// \class TLinearMinimizer; /// \see Minuit2 for a newer version of this class; ///; /// TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer; /// interface usingTLinearFitter. This class uses TLinearFitter to find directly; /// (by solving a system of linear equations) the minimum of a least-square; /// function which has a linear dependence in the fit parameters. This class is; /// not used directly, but via the ROOT::Fitter class, when calling the; /// LinearFit method. It is instantiates using the plug-in manager; /// (plug-in name is ""Linear"").; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:607,Modifiability,plug-in,plug-in,607,"////////////////////////////////////////////////////////////////////////////////; /// \class TLinearMinimizer; /// \see Minuit2 for a newer version of this class; ///; /// TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer; /// interface usingTLinearFitter. This class uses TLinearFitter to find directly; /// (by solving a system of linear equations) the minimum of a least-square; /// function which has a linear dependence in the fit parameters. This class is; /// not used directly, but via the ROOT::Fitter class, when calling the; /// LinearFit method. It is instantiates using the plug-in manager; /// (plug-in name is ""Linear"").; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:629,Modifiability,plug-in,plug-in,629,"////////////////////////////////////////////////////////////////////////////////; /// \class TLinearMinimizer; /// \see Minuit2 for a newer version of this class; ///; /// TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer; /// interface usingTLinearFitter. This class uses TLinearFitter to find directly; /// (by solving a system of linear equations) the minimum of a least-square; /// function which has a linear dependence in the fit parameters. This class is; /// not used directly, but via the ROOT::Fitter class, when calling the; /// LinearFit method. It is instantiates using the plug-in manager; /// (plug-in name is ""Linear"").; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:190,Usability,simpl,simple,190,"////////////////////////////////////////////////////////////////////////////////; /// \class TLinearMinimizer; /// \see Minuit2 for a newer version of this class; ///; /// TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer; /// interface usingTLinearFitter. This class uses TLinearFitter to find directly; /// (by solving a system of linear equations) the minimum of a least-square; /// function which has a linear dependence in the fit parameters. This class is; /// not used directly, but via the ROOT::Fitter class, when calling the; /// LinearFit method. It is instantiates using the plug-in manager; /// (plug-in name is ""Linear"").; ////////////////////////////////////////////////////////////////////////////////",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:106,Modifiability,plug-in,plug-ins,106,"// Default constructor implementation.; // type is not used - needed for consistency with other minimizer plug-ins",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:59,Availability,robust,robust,59,"// constructor passing a type of algorithm, (supported now robust via LTS regression); // select type from the string",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:92,Performance,perform,performing,92,"// Set the function to be minimized. The function must be a Chi2 gradient function; // When performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function.",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:41,Availability,error,error,41,"// Set function to be minimized. Flag an error since only support Gradient objective functions",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:34,Availability,robust,robust,34,"// need a copy of data in case of robust fitting",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:15,Modifiability,variab,variable,15,"// set a fixed variable.",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:3,Availability,robust,robust,3,"// robust fitting - get h parameter using tolerance (t.b. improved)",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:42,Availability,toler,tolerance,42,"// robust fitting - get h parameter using tolerance (t.b. improved)",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:6,Availability,error,error,6,"// no error available for robust fitting",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:12,Availability,avail,available,12,"// no error available for robust fitting",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx:26,Availability,robust,robust,26,"// no error available for robust fitting",MatchSource.CODE_COMMENT,math/minuit/src/TLinearMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TLinearMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:1952,Availability,down,download,1952,"e can fit very large problems; by simply initialising the TMinuit constructor with the maximum; number of parameters. - The include file Minuit.h has been commented as much as possible; using existing comments in the code or the printed documentation. - The original Minuit subroutines are now member functions. - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3606,Availability,down,down,3606,"en values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values only between the lower; limit \f$a\f$ and the upper limit \f$b\f$.; Since the transformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}}",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:4296,Availability,error,error,4296,"ansformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:4361,Availability,error,error,4361,"ansformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:4408,Availability,error,errors,4408,"ansformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:5029,Availability,error,error,5029,"ce to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakness is that it depends heavily on; knowledge of the first derivatives, and fails miserably if they are very; inaccurate. If parameter limits are needed, in spite of the side effects, then the; user should be aware of the following techniques to alleviate problems; caused by limits:. #### Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, then the existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limi",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:6830,Availability,error,errors,6830," existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limit at the minimum, this may be because the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of; \f$\pm \frac{\pi}{2}\f$; that MINUIT prints a warning to this effect when it prints; the parameter values. The minimizer can become blocked at a limit, because at a limit; the derivative seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:6947,Availability,error,error,6947,"r its limit at the minimum, this may be because the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of; \f$\pm \frac{\pi}{2}\f$; that MINUIT prints a warning to this effect when it prints; the parameter values. The minimizer can become blocked at a limit, because at a limit; the derivative seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-0",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:6979,Availability,error,errors,6979,"r its limit at the minimum, this may be because the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of; \f$\pm \frac{\pi}{2}\f$; that MINUIT prints a warning to this effect when it prints; the parameter values. The minimizer can become blocked at a limit, because at a limit; the derivative seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-0",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7196,Availability,error,errors,7196," if the; parameter is so close to a limit (internal value at an odd multiple of; \f$\pm \frac{\pi}{2}\f$; that MINUIT prints a warning to this effect when it prints; the parameter values. The minimizer can become blocked at a limit, because at a limit; the derivative seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MIN",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7334,Availability,error,error,7334,"ect when it prints; the parameter values. The minimizer can become blocked at a limit, because at a limit; the derivative seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7373,Availability,error,error,7373,"e seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes a",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7419,Availability,error,errors,7419,"e seen by the minimizer; \f$\partial F / \partial P_{\mathrm{int}}\f$; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes a",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7498,Availability,Error,Errors,7498,"; is zero no matter what the real derivative; \f$\partial F / \partial P_{\mathrm{ext}}\f$ is. \f[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7559,Availability,reliab,reliability,7559,"frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also give",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7584,Availability,error,error,7584,"frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also give",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:7779,Availability,error,error,7779," P_{\mathrm{ext}}} = 0; \f]. #### Getting the right parameter errors with limits. In the best case, where the minimum is far from any limits, MINUIT will; correctly transform the error matrix, and the parameter errors it reports; should be accurate and very close to those you would have got without; limits. In other cases (which should be more common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR<",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8108,Availability,Reliab,Reliability,8108,"nce otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced d",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8130,Availability,error,error,8130,"nce otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced d",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8220,Availability,error,errors,8220,", since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. ### Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimat",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8467,Availability,error,errors,8467,"Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptional",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8563,Availability,error,error,8563,"or estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8612,Availability,reliab,reliable,8612,"or estimates, and their statistical interpretation, assuming; they are accurate. ### Statistical interpretation:. For discussion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8686,Availability,ERROR,ERROR,8686,"f the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8762,Availability,ERROR,ERROR,8762,"f the elements of; the error matrix, or setting of exact confidence levels see:. 1. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:8946,Availability,error,errors,8946,"port 81-03, CERN, 1981. 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. ### Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculat",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9151,Availability,error,error,9151,"rror estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-defin",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9170,Availability,Failure,Failure,9170," current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for a",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9573,Availability,error,errors,9573,"n it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9772,Availability,error,errors,9772," be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this m",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9847,Availability,error,errors,9847," to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9912,Availability,error,errors,9912," accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or a",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10005,Availability,error,errors,10005," accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or a",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10593,Availability,recover,recovers,10593,"badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:11019,Availability,error,error,11019,"ion. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especial",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:11331,Availability,error,errors,11331,"non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence o",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:11754,Availability,error,error,11754,"m, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hess",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12293,Availability,error,errors,12293,"umerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for t",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12393,Availability,error,errors,12393,"umerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for t",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12441,Availability,error,errors,12441,"likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12517,Availability,error,errors,12517," case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in extern",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12826,Availability,error,error,12826,"endence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12951,Availability,error,error,12951,"endence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13260,Availability,error,error,13260,"errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; e",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13324,Availability,error,error,13324,"errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; e",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13612,Availability,error,error,13612,"g that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13719,Availability,error,errors,13719,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13862,Availability,error,error,13862,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14117,Availability,error,errors,14117,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14209,Availability,error,error,14209,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14307,Availability,error,error,14307,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14606,Availability,error,errors,14606,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14643,Availability,error,errors,14643,"esse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearisation of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. */",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:844,Integrability,depend,depending,844,"// @(#)root/minuit:$Id$; // Author: Rene Brun, Frederick James 12/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*! \class TMinuit; \see Minuit2 for a newer version of this package; \ingroup MinuitOld. Implementation in C++ of the Minuit package written by Fred James.; This is a straightforward conversion of the original Fortran version. The main changes are:. - The variables in the various Minuit labelled common blocks; have been changed to the TMinuit class data members. - The internal arrays with a maximum dimension depending on the; maximum number of parameters are now data members arrays with; a dynamic dimension such that one can fit very large problems; by simply initialising the TMinuit constructor with the maximum; number of parameters. - The include file Minuit.h has been commented as much as possible; using existing comments in the code or the printed documentation. - The original Minuit subroutines are now member functions. - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multipara",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:2269,Integrability,depend,depend,2269," - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values o",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:2494,Integrability,depend,depending,2494," pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values only between the lower; limit \f$a\f$ and the upper limit \f$b\f$.; Since the transformation is necessarily non-linear, it would transform a; nice linea",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:5414,Integrability,depend,depends,5414,"sers should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakness is that it depends heavily on; knowledge of the first derivatives, and fails miserably if they are very; inaccurate. If parameter limits are needed, in spite of the side effects, then the; user should be aware of the following techniques to alleviate problems; caused by limits:. #### Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, then the existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limit at the minimum, this may be because the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of; \f$\pm \frac{\pi}{2}\f$; that MINUIT prints a warning to this effect when it prints; the parameter values. The minimizer can become blocked at a limit, because at a limit; the derivative seen by the minimizer; \f$\partial",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9106,Integrability,message,messages,9106,"rror estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked <TT>CURRENT GUESS ERROR</TT> are only working values; not to be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-defin",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9714,Integrability,message,message,9714," be believed, and <TT>APPROXIMATE ERROR</TT> means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. 1. Warning messages produced during the minimization or error analysis. 2. Failure to find new minimum. 3. Value of <TT>EDM</TT> too big (estimated Distance to Minimum). 4. Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others. 5. Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this m",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10906,Integrability,depend,dependence,10906,"e. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:11871,Integrability,depend,dependence,11871,"contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to ",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:688,Modifiability,variab,variables,688,"// @(#)root/minuit:$Id$; // Author: Rene Brun, Frederick James 12/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*! \class TMinuit; \see Minuit2 for a newer version of this package; \ingroup MinuitOld. Implementation in C++ of the Minuit package written by Fred James.; This is a straightforward conversion of the original Fortran version. The main changes are:. - The variables in the various Minuit labelled common blocks; have been changed to the TMinuit class data members. - The internal arrays with a maximum dimension depending on the; maximum number of parameters are now data members arrays with; a dynamic dimension such that one can fit very large problems; by simply initialising the TMinuit constructor with the maximum; number of parameters. - The include file Minuit.h has been commented as much as possible; using existing comments in the code or the printed documentation. - The original Minuit subroutines are now member functions. - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multipara",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:1497,Modifiability,flexible,flexible,1497,"; \ingroup MinuitOld. Implementation in C++ of the Minuit package written by Fred James.; This is a straightforward conversion of the original Fortran version. The main changes are:. - The variables in the various Minuit labelled common blocks; have been changed to the TMinuit class data members. - The internal arrays with a maximum dimension depending on the; maximum number of parameters are now data members arrays with; a dynamic dimension such that one can fit very large problems; by simply initialising the TMinuit constructor with the maximum; number of parameters. - The include file Minuit.h has been commented as much as possible; using existing comments in the code or the printed documentation. - The original Minuit subroutines are now member functions. - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depend",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:1881,Modifiability,variab,variables,1881,"al arrays with a maximum dimension depending on the; maximum number of parameters are now data members arrays with; a dynamic dimension such that one can fit very large problems; by simply initialising the TMinuit constructor with the maximum; number of parameters. - The include file Minuit.h has been commented as much as possible; using existing comments in the code or the printed documentation. - The original Minuit subroutines are now member functions. - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### B",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:2292,Modifiability,variab,variable,2292," - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values o",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:2876,Modifiability,variab,variable,2876,"f MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values only between the lower; limit \f$a\f$ and the upper limit \f$b\f$.; Since the transformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:4761,Modifiability,variab,variable,4761,"effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakness is that it depends heavily on; knowledge of the first derivatives, and fails miserably if they are very; inaccurate. If parameter limits are needed, in spite of the side effects, then the; user should be aware of the following techniques to alleviate problems; caused by limits:. #### Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, th",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:5263,Modifiability,variab,variable-metric,5263,",; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakness is that it depends heavily on; knowledge of the first derivatives, and fails miserably if they are very; inaccurate. If parameter limits are needed, in spite of the side effects, then the; user should be aware of the following techniques to alleviate problems; caused by limits:. #### Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, then the existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limit at the minimum, this may be because the true; minimum is indeed at a limit, or it may be because the minimizer has; become ``blocked'' at a limit. This may normally happen only if the; parameter is so close to a limit (internal value at an odd multiple of; \f$\pm \frac{\pi}{2}\f$; that MINUIT prints a warning to this effect when it prints; the",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12259,Modifiability,variab,variables,12259," It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. ##### An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. ##### Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. ##### Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables. ##### Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desi",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:5002,Performance,perform,perform,5002,"ce to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakness is that it depends heavily on; knowledge of the first derivatives, and fails miserably if they are very; inaccurate. If parameter limits are needed, in spite of the side effects, then the; user should be aware of the following techniques to alleviate problems; caused by limits:. #### Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, then the existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limi",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:5016,Performance,perform,perform,5016,"ce to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are parameter limits.; Users should however realize that the transformation is only a linear; approximation, and that it cannot give a meaningful result if one or more; parameters is very close to a limit, where; \f$\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\f$.; Therefore, it is recommended that:. 1. Limits on variable parameters should be used only when needed in order; to prevent the parameter from taking on unphysical values. 2. When a satisfactory minimum has been found using limits, the limits; should then be removed if possible, in order to perform or re-perform the; error analysis without limits. ### How to get the right answer from MINUIT. MINUIT offers the user a choice of several minimization algorithms. The; MIGRAD algorithm is in general the best minimizer for; nearly all functions. It is a variable-metric method with inexact line; search, a stable metric updating scheme, and checks for; positive-definiteness. Its main weakness is that it depends heavily on; knowledge of the first derivatives, and fails miserably if they are very; inaccurate. If parameter limits are needed, in spite of the side effects, then the; user should be aware of the following techniques to alleviate problems; caused by limits:. #### Getting the right minimum with limits. If MIGRAD converges normally to a point where no parameter is near one of; its limits, then the existence of limits has probably not prevented MINUIT; from finding the right minimum. On the other hand, if one or more; parameters is near its limi",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3501,Safety,avoid,avoided,3501,"it fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values only between the lower; limit \f$a\f$ and the upper limit \f$b\f$.; Since the transformation is necessarily non-linear, it would transform a; nice linear problem into a nasty non-linear one, which is the reason why; limits should be avoided if not necessary.; In addition, the transformation; does require some computer time, so it slows down the computation a little; bit, and more importantly, it introduces additional numerical inaccuracy into; the problem in addition to what is introduced in the numerical calculation; of the FCN value.; The effects of non-linearity and numerical roundoff both; become more important as the external value gets closer to one of the limits; (expressed as the distance to nearest limit divided by distance between limits).; The user must therefore be aware of the fact that, for example,; if he puts limits of \f$(0,10^{10})\f$ on a parameter, then the values \f$0.0\f$; and \f$1.0\f$ will be indistinguishable to the accuracy of most machines. The transformation also affects the parameter error matrix, of course,; so Minuit does a transformation of the error matrix (and the; ``parabolic'' parameter errors) when there are",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10593,Safety,recover,recovers,10593,"badly parameterised so that individual errors are not very meaningful; because they are so highly correlated. 6. Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. ##### A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. ##### An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterisation of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; under-determinedness by reformulating the parameterisation. MINUIT cannot; do this itself. ##### Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if. the parameters",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:991,Usability,simpl,simply,991,"// @(#)root/minuit:$Id$; // Author: Rene Brun, Frederick James 12/08/95; /*************************************************************************; * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; * All rights reserved. *; * *; * For the licensing terms see $ROOTSYS/LICENSE. *; * For the list of contributors see $ROOTSYS/README/CREDITS. *; *************************************************************************/; /*! \class TMinuit; \see Minuit2 for a newer version of this package; \ingroup MinuitOld. Implementation in C++ of the Minuit package written by Fred James.; This is a straightforward conversion of the original Fortran version. The main changes are:. - The variables in the various Minuit labelled common blocks; have been changed to the TMinuit class data members. - The internal arrays with a maximum dimension depending on the; maximum number of parameters are now data members arrays with; a dynamic dimension such that one can fit very large problems; by simply initialising the TMinuit constructor with the maximum; number of parameters. - The include file Minuit.h has been commented as much as possible; using existing comments in the code or the printed documentation. - The original Minuit subroutines are now member functions. - Constructors and destructor have been added. - Instead of passing the FCN function in the argument; list, the addresses of this function is stored as pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multipara",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:2323,Usability,simpl,simple,2323," pointer; in the data members of the class. This is by far more elegant; and flexible in an interactive environment.; The member function SetFCN can be used to define this pointer. - The ROOT static function Printf is provided to replace all; format statements and to print on currently defined output file.; - The functions SetObjectFit(TObject * obj)/GetObjectFit() can be; used inside the FCN function to set/get a referenced object; instead of using global variables. ## Basic concepts of MINUIT. The [MINUIT](https://root.cern/download/minuit.pdf); package acts on a multiparameter Fortran function to which one; must give the generic name <TT>FCN</TT>. In the ROOT implementation,; the function <TT>FCN</TT> is defined via the MINUIT SetFCN member function; when an Histogram.Fit command is invoked.; The value of <TT>FCN</TT> will in general depend on one; or more variable parameters. To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D); the Fit function defines the Minuit fitting function as being H1FitChisquare; or H1FitLikelihood depending on the options selected.; H1FitChisquare; calculates the chisquare between the user fitting function (gaussian, polynomial,; user defined,etc) and the data for given values of the parameters.; It is the task of MINUIT to find those values of the parameters; which give the lowest value of chisquare. ### Basic concepts - The transformation for parameters with limits. For variable parameters with limits, MINUIT uses the following; transformation:. \f[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \f]. so that the internal value \f$P_{\mathrm{int}}\f$ can take on any value, while; the external value \f$P_{\mathrm{ext}}\f$ can take on values only between the lower; limit \f$a\f$ and the upper limit \f$b\f$.; Since the transformation is necessarily non-linear, it would transform a; nice linea",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:244,Availability,avail,available,244,"////////////////////////////////////////////////////////////////////////////////; /// Execute a Minuit command; ///; /// Equivalent to MNEXCM except that the command is given as a character string.; /// See TMinuit::mnhelp for the full list of available commands; /// See also the; /// [complete documentation of all the available commands](https://root.cern/sites/d35c7d8c.web.cern.ch/files/minuit.pdf); ///; /// Returns the status of the execution:; /// - 0: command executed normally; /// - 1: command is blank, ignored; /// - 2: command line unreadable, ignored; /// - 3: unknown command, ignored; /// - 4: abnormal termination (e.g., MIGRAD not converged); /// - 5: command is a request to read PARAMETER definitions; /// - 6: 'SET INPUT' command; /// - 7: 'SET TITLE' command; /// - 8: 'SET COVAR' command; /// - 9: reserved; /// - 10: END command; /// - 11: EXIT or STOP command; /// - 12: RETURN command",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:321,Availability,avail,available,321,"////////////////////////////////////////////////////////////////////////////////; /// Execute a Minuit command; ///; /// Equivalent to MNEXCM except that the command is given as a character string.; /// See TMinuit::mnhelp for the full list of available commands; /// See also the; /// [complete documentation of all the available commands](https://root.cern/sites/d35c7d8c.web.cern.ch/files/minuit.pdf); ///; /// Returns the status of the execution:; /// - 0: command executed normally; /// - 1: command is blank, ignored; /// - 2: command line unreadable, ignored; /// - 3: unknown command, ignored; /// - 4: abnormal termination (e.g., MIGRAD not converged); /// - 5: command is a request to read PARAMETER definitions; /// - 6: 'SET INPUT' command; /// - 7: 'SET TITLE' command; /// - 8: 'SET COVAR' command; /// - 9: reserved; /// - 10: END command; /// - 11: EXIT or STOP command; /// - 12: RETURN command",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:317,Availability,error,errors,317,"////////////////////////////////////////////////////////////////////////////////; /// Creates a TGraph object describing the n-sigma contour of a; /// TMinuit fit. The contour of the parameters pa1 and pa2 is calculated; /// using npoints (>=4) points. The TMinuit status will be; /// - 0 on success and; /// - -1 if errors in the calling sequence (pa1, pa2 not variable); /// - 1 if less than four points can be found; /// - 2 if npoints<4; /// - n>3 if only n points can be found (n < npoints); /// The status can be obtained via TMinuit::GetStatus().; ///; /// To get the n-sigma contour the ERRDEF parameter in Minuit has to set; /// to n^2. The fcn function has to be set before the routine is called.; ///; /// The TGraph object is created via the interpreter. The user must cast it; /// to a TGraph*. Note that the TGraph is created with npoints+1 in order to; /// close the contour (setting last point equal to first point).; ///; /// You can find an example in $ROOTSYS/tutorials/fit/fitcont.C",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:688,Integrability,rout,routine,688,"////////////////////////////////////////////////////////////////////////////////; /// Creates a TGraph object describing the n-sigma contour of a; /// TMinuit fit. The contour of the parameters pa1 and pa2 is calculated; /// using npoints (>=4) points. The TMinuit status will be; /// - 0 on success and; /// - -1 if errors in the calling sequence (pa1, pa2 not variable); /// - 1 if less than four points can be found; /// - 2 if npoints<4; /// - n>3 if only n points can be found (n < npoints); /// The status can be obtained via TMinuit::GetStatus().; ///; /// To get the n-sigma contour the ERRDEF parameter in Minuit has to set; /// to n^2. The fcn function has to be set before the routine is called.; ///; /// The TGraph object is created via the interpreter. The user must cast it; /// to a TGraph*. Note that the TGraph is created with npoints+1 in order to; /// close the contour (setting last point equal to first point).; ///; /// You can find an example in $ROOTSYS/tutorials/fit/fitcont.C",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:362,Modifiability,variab,variable,362,"////////////////////////////////////////////////////////////////////////////////; /// Creates a TGraph object describing the n-sigma contour of a; /// TMinuit fit. The contour of the parameters pa1 and pa2 is calculated; /// using npoints (>=4) points. The TMinuit status will be; /// - 0 on success and; /// - -1 if errors in the calling sequence (pa1, pa2 not variable); /// - 1 if less than four points can be found; /// - 2 if npoints<4; /// - n>3 if only n points can be found (n < npoints); /// The status can be obtained via TMinuit::GetStatus().; ///; /// To get the n-sigma contour the ERRDEF parameter in Minuit has to set; /// to n^2. The fcn function has to be set before the routine is called.; ///; /// The TGraph object is created via the interpreter. The user must cast it; /// to a TGraph*. Note that the TGraph is created with npoints+1 in order to; /// close the contour (setting last point equal to first point).; ///; /// You can find an example in $ROOTSYS/tutorials/fit/fitcont.C",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:24,Modifiability,Plugin,PluginManager,24,"// create graph via the PluginManager",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:177,Modifiability,variab,variable,177,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the minimisation function; /// Input parameters:; /// - npar: number of currently variable parameters; /// - par: array of (constant and variable) parameters; /// - flag: Indicates what is to be calculated (see example below); /// - grad: array of gradients; /// Output parameters:; /// - fval: The calculated function value.; /// - grad: The (optional) vector of first derivatives).; ///; /// The meaning of the parameters par is of course defined by the user,; /// who uses the values of those parameters to calculate their function value.; /// The starting values must be specified by the user.; /// Later values are determined by Minuit as it searches for the minimum; /// or performs whatever analysis is requested by the user.; ///; /// Note that this virtual function may be redefined in a class derived from TMinuit.; /// The default function calls the function specified in SetFCN; ///; /// Example of Minimisation function:",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:232,Modifiability,variab,variable,232,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the minimisation function; /// Input parameters:; /// - npar: number of currently variable parameters; /// - par: array of (constant and variable) parameters; /// - flag: Indicates what is to be calculated (see example below); /// - grad: array of gradients; /// Output parameters:; /// - fval: The calculated function value.; /// - grad: The (optional) vector of first derivatives).; ///; /// The meaning of the parameters par is of course defined by the user,; /// who uses the values of those parameters to calculate their function value.; /// The starting values must be specified by the user.; /// Later values are determined by Minuit as it searches for the minimum; /// or performs whatever analysis is requested by the user.; ///; /// Note that this virtual function may be redefined in a class derived from TMinuit.; /// The default function calls the function specified in SetFCN; ///; /// Example of Minimisation function:",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:775,Performance,perform,performs,775,"////////////////////////////////////////////////////////////////////////////////; /// Evaluate the minimisation function; /// Input parameters:; /// - npar: number of currently variable parameters; /// - par: array of (constant and variable) parameters; /// - flag: Indicates what is to be calculated (see example below); /// - grad: array of gradients; /// Output parameters:; /// - fval: The calculated function value.; /// - grad: The (optional) vector of first derivatives).; ///; /// The meaning of the parameters par is of course defined by the user,; /// who uses the values of those parameters to calculate their function value.; /// The starting values must be specified by the user.; /// Later values are determined by Minuit as it searches for the minimum; /// or performs whatever analysis is requested by the user.; ///; /// Note that this virtual function may be redefined in a class derived from TMinuit.; /// The default function calls the function specified in SetFCN; ///; /// Example of Minimisation function:",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:339,Performance,Perform,Perform,339,"/*; if (flag == 1) {; read input data,; calculate any necessary constants, etc.; }; if (flag == 2) {; calculate GRAD, the first derivatives of FVAL; (this is optional); }; Always calculate the value of the function, FVAL,; which is usually a chisquare or log likelihood.; if (iflag == 3) {; will come here only after the fit is finished.; Perform any final calculations, output fitted data, etc.; }; */; // See concrete examples in TH1::H1FitChisquare, H1FitLikelihood",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:255,Testability,log,log,255,"/*; if (flag == 1) {; read input data,; calculate any necessary constants, etc.; }; if (flag == 2) {; calculate GRAD, the first derivatives of FVAL; (this is optional); }; Always calculate the value of the function, FVAL,; which is usually a chisquare or log likelihood.; if (iflag == 3) {; will come here only after the fit is finished.; Perform any final calculations, output fitted data, etc.; }; */; // See concrete examples in TH1::H1FitChisquare, H1FitLikelihood",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// return parameter value and error",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Deployability,release,release,86,"////////////////////////////////////////////////////////////////////////////////; /// release a parameter",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:117,Availability,error,error,117,"////////////////////////////////////////////////////////////////////////////////; /// To get the n-sigma contour the error def parameter ""up"" has to set to n^2.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:57,Integrability,ROUT,ROUTINE,57,"// IF NAA .EQ. -1 , PROGRAM USES BWID INPUT FROM CALLING ROUTINE",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:117,Modifiability,variab,variables,117,"////////////////////////////////////////////////////////////////////////////////; /// Print function contours in two variables, on line printer; ///; /// input arguments: parx, pary, devs, ngrid",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:494,Availability,error,errors,494,"////////////////////////////////////////////////////////////////////////////////; /// Find points along a contour where FCN is minimum; ///; /// Find NPTU points along a contour where the function; ///; /// FMIN (X(KE1),X(KE2)) = AMIN+UP; ///; /// where FMIN is the minimum of FCN with respect to all; /// the other NPAR-2 variable parameters (if any).; ///; /// IERRF on return will be equal to the number of points found:; /// - NPTU if normal termination with NPTU points found; /// - -1 if errors in the calling sequence (KE1, KE2 not variable); /// - 0 if less than four points can be found (using MNMNOT); /// - n>3 if only n points can be found (n < NPTU); ///; /// input arguments: parx, pary, devs, ngrid",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:323,Modifiability,variab,variable,323,"////////////////////////////////////////////////////////////////////////////////; /// Find points along a contour where FCN is minimum; ///; /// Find NPTU points along a contour where the function; ///; /// FMIN (X(KE1),X(KE2)) = AMIN+UP; ///; /// where FMIN is the minimum of FCN with respect to all; /// the other NPAR-2 variable parameters (if any).; ///; /// IERRF on return will be equal to the number of points found:; /// - NPTU if normal termination with NPTU points found; /// - -1 if errors in the calling sequence (KE1, KE2 not variable); /// - 0 if less than four points can be found (using MNMNOT); /// - n>3 if only n points can be found (n < NPTU); ///; /// input arguments: parx, pary, devs, ngrid",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:539,Modifiability,variab,variable,539,"////////////////////////////////////////////////////////////////////////////////; /// Find points along a contour where FCN is minimum; ///; /// Find NPTU points along a contour where the function; ///; /// FMIN (X(KE1),X(KE2)) = AMIN+UP; ///; /// where FMIN is the minimum of FCN with respect to all; /// the other NPAR-2 variable parameters (if any).; ///; /// IERRF on return will be equal to the number of points found:; /// - NPTU if normal termination with NPTU points found; /// - -1 if errors in the calling sequence (KE1, KE2 not variable); /// - 0 if less than four points can be found (using MNMNOT); /// - n>3 if only n points can be found (n < NPTU); ///; /// input arguments: parx, pary, devs, ngrid",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,Error,Error,3,"// Error returns",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:444,Availability,error,errors,444,"////////////////////////////////////////////////////////////////////////////////; /// Cracks the free-format input; ///; /// Cracks the free-format input, expecting zero or more; /// alphanumeric fields (which it joins into COMAND(1:LNC)); /// followed by one or more numeric fields separated by; /// blanks and/or one comma. The numeric fields are put into; /// the LLIST (but at most MXP) elements of PLIST.; ///; /// IERR :; /// - = 0 if no errors,; /// - = 1 if error(s).",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:466,Availability,error,error,466,"////////////////////////////////////////////////////////////////////////////////; /// Cracks the free-format input; ///; /// Cracks the free-format input, expecting zero or more; /// alphanumeric fields (which it joins into COMAND(1:LNC)); /// followed by one or more numeric fields separated by; /// blanks and/or one comma. The numeric fields are put into; /// the LLIST (but at most MXP) elements of PLIST.; ///; /// IERR :; /// - = 0 if no errors,; /// - = 1 if error(s).",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:52,Safety,predict,prediction,52,"// convergence when F is within TLF of AIM and next prediction; // of AOPT is within TLA of previous value of AOPT",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Safety,avoid,avoid,3,"// avoid keeping a very bad point next time around",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,error,error,3,"// error in the minimization",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:220,Availability,error,error,220,"////////////////////////////////////////////////////////////////////////////////; /// Makes sure that the current point is a local minimum; ///; /// Makes sure that the current point is a local; /// minimum and that the error matrix exists,; /// or at least something good enough for MINOS and MNCONT",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13,Modifiability,variab,variable,13,"// loop over variable parameters",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:94,Integrability,depend,depends,94,"// two-point derivatives always assumed necessary; // maximum number of cycles over step size depends on strategy",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:110,Availability,error,error,110,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the external error matrix from the internal matrix; ///; /// Note that if the matrix is declared like Double_t matrix[5][5]; /// in the calling program, one has to call mnemat with, eg; ///; /// gMinuit->mnemat(&matrix[0][0],5);",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:115,Availability,error,errors,115,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:257,Availability,error,errors,257,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:314,Availability,error,error,314,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:326,Availability,error,error,326,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:347,Availability,Error,Errors,347,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:432,Availability,error,error,432,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:94,Integrability,rout,routine,94,"////////////////////////////////////////////////////////////////////////////////; /// Utility routine to get MINOS errors; ///; /// Called by user.; ///; /// NUMBER is the parameter number; ///; /// values returned by MNERRS:; /// - EPLUS, EMINUS are MINOS errors of parameter NUMBER,; /// - EPARAB is 'parabolic' error (from error matrix).; /// (Errors not calculated are set = 0); /// - GCC is global correlation coefficient from error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,ERROR,ERROR,3,"// ERROR. parameter number not valid",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:271,Modifiability,variab,variable,271,"////////////////////////////////////////////////////////////////////////////////; /// Evaluates the function being analysed by MNCROS; ///; /// Evaluates the function being analysed by MNCROS, which is; /// generally the minimum of FCN with respect to all remaining; /// variable parameters. The class data members contains the; /// data necessary to know the values of U(KE1CR) and U(KE2CR); /// to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR; /// and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Usability,simpl,simplex,3,"// simplex",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Deployability,release,release,9,"// (also release)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Deployability,release,release,3,"// release",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Usability,clear,clear,3,"// clear",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,error,error,3,"// error def",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Energy Efficiency,reduce,reduce,3,"// reduce number of variable parameters by one",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:20,Modifiability,variab,variable,20,"// reduce number of variable parameters by one",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:129,Modifiability,variab,variable,129,"////////////////////////////////////////////////////////////////////////////////; /// Restores one or more fixed parameter(s) to variable status; ///; /// Restores one or more fixed parameter(s) to variable status; /// by inserting it into the internal parameter list at the; /// appropriate place.; ///; /// - K = 0 means restore all parameters; /// - K = 1 means restore the last parameter fixed; /// - K = -I means restore external parameter I (if possible); /// - IQ = fix-location where internal parameters were stored; /// - IR = external number of parameter being restored; /// - IS = internal number of parameter being restored",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:198,Modifiability,variab,variable,198,"////////////////////////////////////////////////////////////////////////////////; /// Restores one or more fixed parameter(s) to variable status; ///; /// Restores one or more fixed parameter(s) to variable status; /// by inserting it into the internal parameter list at the; /// appropriate place.; ///; /// - K = 0 means restore all parameters; /// - K = 1 means restore the last parameter fixed; /// - K = -I means restore external parameter I (if possible); /// - IQ = fix-location where internal parameters were stored; /// - IR = external number of parameter being restored; /// - IS = internal number of parameter being restored",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Deployability,release,release,3,"// release parameter with specified external number",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Integrability,interface,interface,86,"////////////////////////////////////////////////////////////////////////////////; /// interface to Minuit help",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:91,Integrability,rout,routine,91,"////////////////////////////////////////////////////////////////////////////////; /// HELP routine for MINUIT interactive commands; ///; /// - COMD ='*' or """" prints a global help for all commands; /// - COMD =Command_name: print detailed help for one command.; /// Note that at least 3 characters must be given for the command; /// name.; ///; /// Author: Rene Brun; /// comments extracted from the MINUIT documentation file.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:97,Usability,CLEAR,CLEAR,97,"//______________________________________________________________________________; //; // Command CLEAR; //",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:97,Deployability,RELEASE,RELEASE,97,"//______________________________________________________________________________; //; // Command RELEASE; //",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:97,Usability,SIMPL,SIMPLEX,97,"//______________________________________________________________________________; //; // Command SIMPLEX; //",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:13,Modifiability,variab,variable,13,"// Loop over variable parameters for second derivatives",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,failure,failure,3,"// failure to invert 2nd deriv matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:319,Usability,simpl,simplex,319,"////////////////////////////////////////////////////////////////////////////////; /// Attempts to improve on a good local minimum; ///; /// Attempts to improve on a good local minimum by finding a; /// better one. The quadratic part of FCN is removed by MNCALF; /// and this transformed function is minimised using the simplex; /// method from several random starting points.; ///; /// ref. -- Goldstein and Price, Math.Comp. 25, 569 (1971)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:17,Usability,simpl,simplex,17,"// set up random simplex",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:171,Integrability,rout,routines,171,"////////////////////////////////////////////////////////////////////////////////; /// Transforms from internal coordinates (PINT) to external (U); ///; /// The minimising routines which work in; /// internal coordinates call this routine before calling FCN.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:230,Integrability,rout,routine,230,"////////////////////////////////////////////////////////////////////////////////; /// Transforms from internal coordinates (PINT) to external (U); ///; /// The minimising routines which work in; /// internal coordinates call this routine before calling FCN.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:193,Testability,log,logical,193,"////////////////////////////////////////////////////////////////////////////////; /// Main initialization member function for MINUIT; ///; /// It initializes some constants; /// (including the logical I/O unit nos.),",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:79,Modifiability,variab,variables,79,"// the vlims are a non-negligible distance from pi/2; // used by MNPINT to set variables ""near"" the physical limits",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:19,Deployability,RELEASE,RELEASE,19,"// Printf("" MINUIT RELEASE %s INITIALIZED. DIMENSIONS 100/50 EPSMAC=%g"",(const char*)fCvrsn,fEpsmac);",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:344,Availability,TOLER,TOLER,344,"////////////////////////////////////////////////////////////////////////////////; /// Perform a line search from position START; ///; /// along direction STEP, where the length of vector STEP; /// gives the expected position of minimum.; /// - FSTART is value of function at START; /// - SLOPE (if non-zero) is df/dx along STEP at START; /// - TOLER is initial tolerance of minimum in direction STEP; ///; /// SLAMBG and ALPHA control the maximum individual steps allowed.; /// The first step is always =1. The max length of second step is SLAMBG.; /// The max size of subsequent steps is the maximum previous successful; /// step multiplied by ALPHA + the size of most recent successful step,; /// but cannot be smaller than SLAMBG.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:361,Availability,toler,tolerance,361,"////////////////////////////////////////////////////////////////////////////////; /// Perform a line search from position START; ///; /// along direction STEP, where the length of vector STEP; /// gives the expected position of minimum.; /// - FSTART is value of function at START; /// - SLOPE (if non-zero) is df/dx along STEP at START; /// - TOLER is initial tolerance of minimum in direction STEP; ///; /// SLAMBG and ALPHA control the maximum individual steps allowed.; /// The first step is always =1. The max length of second step is SLAMBG.; /// The max size of subsequent steps is the maximum previous successful; /// step multiplied by ALPHA + the size of most recent successful step,; /// but cannot be smaller than SLAMBG.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a line search from position START; ///; /// along direction STEP, where the length of vector STEP; /// gives the expected position of minimum.; /// - FSTART is value of function at START; /// - SLOPE (if non-zero) is df/dx along STEP at START; /// - TOLER is initial tolerance of minimum in direction STEP; ///; /// SLAMBG and ALPHA control the maximum individual steps allowed.; /// The first step is always =1. The max length of second step is SLAMBG.; /// The max size of subsequent steps is the maximum previous successful; /// step multiplied by ALPHA + the size of most recent successful step,; /// but cannot be smaller than SLAMBG.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:23,Availability,toler,tolerance,23,"// stop because within tolerance",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:12,Availability,error,error,12,"// external error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs a local function minimization; ///; /// Performs a local function minimization using basically the; /// method of Davidon-Fletcher-Powell as modified by Fletcher; ///; /// ref. -- Fletcher, Comp.J. 13,317 (1970) ""switching method""",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:135,Performance,Perform,Performs,135,"////////////////////////////////////////////////////////////////////////////////; /// Performs a local function minimization; ///; /// Performs a local function minimization using basically the; /// method of Davidon-Fletcher-Powell as modified by Fletcher; ///; /// ref. -- Fletcher, Comp.J. 13,317 (1970) ""switching method""",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:17,Availability,error,error,17,"// make diagonal error matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Deployability,update,update,3,"// update covariance matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:103,Availability,error,error,103,"////////////////////////////////////////////////////////////////////////////////; /// Performs a MINOS error analysis; ///; /// Performs a MINOS error analysis on those parameters for; /// which it is requested on the MINOS command by calling; /// MNMNOT for each parameter requested.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:145,Availability,error,error,145,"////////////////////////////////////////////////////////////////////////////////; /// Performs a MINOS error analysis; ///; /// Performs a MINOS error analysis on those parameters for; /// which it is requested on the MINOS command by calling; /// MNMNOT for each parameter requested.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs a MINOS error analysis; ///; /// Performs a MINOS error analysis on those parameters for; /// which it is requested on the MINOS command by calling; /// MNMNOT for each parameter requested.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:128,Performance,Perform,Performs,128,"////////////////////////////////////////////////////////////////////////////////; /// Performs a MINOS error analysis; ///; /// Performs a MINOS error analysis on those parameters for; /// which it is requested on the MINOS command by calling; /// MNMNOT for each parameter requested.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Deployability,update,update,3,"// update NGOOD and NBAD",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:103,Availability,error,error,103,"////////////////////////////////////////////////////////////////////////////////; /// Performs a MINOS error analysis on one parameter; ///; /// The parameter ILAX is varied, and the minimum of the; /// function with respect to the other parameters is followed; /// until it crosses the value FMIN+UP.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs a MINOS error analysis on one parameter; ///; /// The parameter ILAX is varied, and the minimum of the; /// function with respect to the other parameters is followed; /// until it crosses the value FMIN+UP.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:15,Availability,error,error,15,"// sig=sign of error being calcd",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,error,error,3,"// error successfully calculated",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,failure,failure,3,"// failure returns",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:426,Deployability,update,updates,426,"////////////////////////////////////////////////////////////////////////////////; /// Implements one parameter definition; ///; /// Called from MNPARS and user-callable; /// Implements one parameter definition, that is:; /// - K (external) parameter number; /// - CNAMK parameter name; /// - UK starting value; /// - WK starting step size or uncertainty; /// - A, B lower and upper physical parameter limits; /// and sets up (updates) the parameter lists.; /// Output:; /// - IERFLG=0 if no problems; /// - >0 if MNPARM unable to implement definition",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:28,Modifiability,variab,variable,28,"// if redefining previously variable parameter",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Modifiability,variab,variable,3,"// variable parameter without limits",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Modifiability,variab,variable,3,"// variable parameter with limits",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:23,Modifiability,variab,variable,23,"// request for another variable parameter",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:25,Modifiability,variab,variable,25,"// KINT is new number of variable params, NPAR is old",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14,Modifiability,variab,variable,14,"// insert new variable parameter in list",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:10,Modifiability,variab,variable,10,"// remove variable parameter from list",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,error,error,3,"// error on input, unable to implement request",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:339,Availability,error,error,339,"////////////////////////////////////////////////////////////////////////////////; /// Implements one parameter definition; ///; /// Called from MNREAD and user-callable; /// Implements one parameter definition, that is:; /// parses the string CRDBUF and calls MNPARM; ///; /// output conditions:; /// - ICONDN = 0 all OK; /// - ICONDN = 1 error, attempt to define parameter is ignored; /// - ICONDN = 2 end of parameter definitions",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:19,Availability,error,error,19,"// format or other error",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:481,Modifiability,Plug-in,Plug-in,481,"////////////////////////////////////////////////////////////////////////////////; /// Plots points in array xypt onto one page with labelled axes; ///; /// - NXYPT is the number of points to be plotted; /// - XPT(I) = x-coord. of ith point; /// - YPT(I) = y-coord. of ith point; /// - CHPT(I) = character to be plotted at this position; /// the input point arrays XPT, YPT, CHPT are destroyed.; ///; /// If fGraphicsmode is true (default), a TGraph object is produced; /// via the Plug-in handler. To get the plot, you can do:; /// ~~~ {.cpp}; /// TGraph *gr = (TGraph*)gMinuit->GetPlot();; /// gr->Draw(""al"");; /// ~~~",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:23,Safety,avoid,avoid,23,"// not needed - but to avoid a wrongly reported compiler warning (see ROOT-6496)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:536,Modifiability,variab,variable,536,"////////////////////////////////////////////////////////////////////////////////; /// Provides the user with information concerning the current status; ///; /// of parameter number IUEXT. Namely, it returns:; /// - CHNAM: the name of the parameter; /// - VAL: the current (external) value of the parameter; /// - ERR: the current estimate of the parameter uncertainty; /// - XLOLIM: the lower bound (or zero if no limits); /// - XUPLIM: the upper bound (or zero if no limits); /// - IUINT: the internal parameter number (or zero if not variable,; /// or negative if undefined).; ///; /// Note also: If IUEXT is negative, then it is -internal parameter; /// number, and IUINT is returned as the EXTERNAL number.; /// Except for IUINT, this is exactly the inverse of MNPARM; /// User-called",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:265,Availability,error,errors,265,"////////////////////////////////////////////////////////////////////////////////; /// Prints the values of the parameters at the time of the call; ///; /// also prints other relevant information such as function value,; /// estimated distance to minimum, parameter errors, step sizes.; ///; /// According to the value of IKODE, the printout is:; /// IKODE=INKODE=; /// - 0 only info about function value; /// - 1 parameter values, errors, limits; /// - 2 values, errors, step sizes, internal values; /// - 3 values, errors, step sizes, first derivs.; /// - 4 values, parabolic errors, MINOS errors; ///; /// when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:431,Availability,error,errors,431,"////////////////////////////////////////////////////////////////////////////////; /// Prints the values of the parameters at the time of the call; ///; /// also prints other relevant information such as function value,; /// estimated distance to minimum, parameter errors, step sizes.; ///; /// According to the value of IKODE, the printout is:; /// IKODE=INKODE=; /// - 0 only info about function value; /// - 1 parameter values, errors, limits; /// - 2 values, errors, step sizes, internal values; /// - 3 values, errors, step sizes, first derivs.; /// - 4 values, parabolic errors, MINOS errors; ///; /// when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:463,Availability,error,errors,463,"////////////////////////////////////////////////////////////////////////////////; /// Prints the values of the parameters at the time of the call; ///; /// also prints other relevant information such as function value,; /// estimated distance to minimum, parameter errors, step sizes.; ///; /// According to the value of IKODE, the printout is:; /// IKODE=INKODE=; /// - 0 only info about function value; /// - 1 parameter values, errors, limits; /// - 2 values, errors, step sizes, internal values; /// - 3 values, errors, step sizes, first derivs.; /// - 4 values, parabolic errors, MINOS errors; ///; /// when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:516,Availability,error,errors,516,"////////////////////////////////////////////////////////////////////////////////; /// Prints the values of the parameters at the time of the call; ///; /// also prints other relevant information such as function value,; /// estimated distance to minimum, parameter errors, step sizes.; ///; /// According to the value of IKODE, the printout is:; /// IKODE=INKODE=; /// - 0 only info about function value; /// - 1 parameter values, errors, limits; /// - 2 values, errors, step sizes, internal values; /// - 3 values, errors, step sizes, first derivs.; /// - 4 values, parabolic errors, MINOS errors; ///; /// when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:577,Availability,error,errors,577,"////////////////////////////////////////////////////////////////////////////////; /// Prints the values of the parameters at the time of the call; ///; /// also prints other relevant information such as function value,; /// estimated distance to minimum, parameter errors, step sizes.; ///; /// According to the value of IKODE, the printout is:; /// IKODE=INKODE=; /// - 0 only info about function value; /// - 1 parameter values, errors, limits; /// - 2 values, errors, step sizes, internal values; /// - 3 values, errors, step sizes, first derivs.; /// - 4 values, parabolic errors, MINOS errors; ///; /// when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:591,Availability,error,errors,591,"////////////////////////////////////////////////////////////////////////////////; /// Prints the values of the parameters at the time of the call; ///; /// also prints other relevant information such as function value,; /// estimated distance to minimum, parameter errors, step sizes.; ///; /// According to the value of IKODE, the printout is:; /// IKODE=INKODE=; /// - 0 only info about function value; /// - 1 parameter values, errors, limits; /// - 2 values, errors, step sizes, internal values; /// - 3 values, errors, step sizes, first derivs.; /// - 4 values, parabolic errors, MINOS errors; ///; /// when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1]",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:24,Availability,error,errors,24,"// print title if Minos errors, and title exists.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Modifiability,variab,variable,3,"// variable parameter.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:189,Usability,simpl,simplex,189,"////////////////////////////////////////////////////////////////////////////////; /// Called only by MNSIMP (and MNIMPR) to add a new point; ///; /// and remove an old one from the current simplex, and get the; /// estimated distance to minimum.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:102,Modifiability,portab,portable,102,"////////////////////////////////////////////////////////////////////////////////; /// This is a super-portable random number generator; ///; /// It should not overflow on any 32-bit machine.; /// The cycle is only ~10**9, so use with care!; /// Note especially that VAL must not be undefined on input.; ///; /// Set Default Starting Seed",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:58,Deployability,update,update,58,"// If more than one thread gets here, one will manage the update; // of g_iseed the other we go for at least one more round.; // This is not reproduceable",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:112,Availability,error,errors,112,"////////////////////////////////////////////////////////////////////////////////; /// Resets function value and errors to UNDEFINED; ///; /// - If IOPT=1,; /// - If IOPT=0, sets only MINOS errors to undefined; /// Called from MNCLER and whenever problem changes, for example; /// after SET LIMITS, SET PARAM, CALL FCN 6",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:189,Availability,error,errors,189,"////////////////////////////////////////////////////////////////////////////////; /// Resets function value and errors to UNDEFINED; ///; /// - If IOPT=1,; /// - If IOPT=0, sets only MINOS errors to undefined; /// Called from MNCLER and whenever problem changes, for example; /// after SET LIMITS, SET PARAM, CALL FCN 6",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:86,Performance,Perform,Performs,86,"////////////////////////////////////////////////////////////////////////////////; /// Performs a rough (but global) minimization by monte carlo search; ///; /// Each time a new minimum is found, the search area is shifted; /// to be centered at the best value. Random points are chosen; /// uniformly over a hypercube determined by current step sizes.; /// The Metropolis algorithm accepts a worse point with probability; /// exp(-d/UP), where d is the degradation. Improved points; /// are of course always accepted. Actual steps are random; /// multiples of the nominal steps (DIRIN).",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:59,Modifiability,variab,variables,59,/* System generated locals */; //Int_t f_inqu();; /* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:14,Availability,error,errors,14,"// show minos errors",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:153,Performance,Perform,Performs,153,"////////////////////////////////////////////////////////////////////////////////; /// Minimization using the simplex method of Nelder and Mead; ///; /// Performs a minimization using the simplex method of Nelder; /// and Mead (ref. -- Comp. J. 7,308 (1965)).",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:109,Usability,simpl,simplex,109,"////////////////////////////////////////////////////////////////////////////////; /// Minimization using the simplex method of Nelder and Mead; ///; /// Performs a minimization using the simplex method of Nelder; /// and Mead (ref. -- Comp. J. 7,308 (1965)).",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:187,Usability,simpl,simplex,187,"////////////////////////////////////////////////////////////////////////////////; /// Minimization using the simplex method of Nelder and Mead; ///; /// Performs a minimization using the simplex method of Nelder; /// and Mead (ref. -- Comp. J. 7,308 (1965)).",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:22,Usability,simpl,simplex,22,"// choose the initial simplex using single-parameter searches",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,failure,failure,3,"// failure",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:409,Modifiability,variab,variable,409,"////////////////////////////////////////////////////////////////////////////////; /// Returns concerning the current status of the minimization; ///; /// User-called; /// Namely, it returns:; /// - FMIN: the best function value found so far; /// - FEDM: the estimated vertical distance remaining to minimum; /// - ERRDEF: the value of UP defining parameter uncertainties; /// - NPARI: the number of currently variable parameters; /// - NPARX: the highest (external) parameter number defined by user; /// - ISTAT: a status integer indicating how good is the covariance; /// matrix:; /// - 0= not calculated at all; /// - 1= approximation only, not accurate; /// - 2= full matrix, but forced positive-definite; /// - 3= full accurate covariance matrix",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:241,Safety,safe,safely,241,"////////////////////////////////////////////////////////////////////////////////; /// To find the machine precision; ///; /// Compares its argument with the value 1.0, and returns; /// the value .TRUE. if they are equal. To find EPSMAC; /// safely by foiling the Fortran optimiser",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:3,Availability,failure,failure,3,"// failure return",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:101,Integrability,message,messages,101,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:153,Integrability,message,message,153,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:208,Integrability,message,message,208,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:283,Integrability,rout,routine,283,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:315,Integrability,message,message,315,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:397,Integrability,message,message,397,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:513,Integrability,message,messages,513,"////////////////////////////////////////////////////////////////////////////////; /// Prints Warning messages; ///; /// - If COPT='W', CMES is a WARning message from CORG.; /// - If COPT='D', CMES is a DEBug message from CORG.; /// - If SET WARnings is in effect (the default), this routine; /// prints the warning message CMES coming from CORG.; /// - If SET NOWarnings is in effect, the warning message is; /// stored in a circular buffer of length kMAXMES.; /// - If called with CORG=CMES='SHO', it prints the messages in; /// the circular buffer, FIFO, and empties the buffer.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:126,Availability,error,errors,126,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the WERR, external parameter errors; ///; /// and the global correlation coefficients, to be called; /// whenever a new covariance matrix is available.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:238,Availability,avail,available,238,"////////////////////////////////////////////////////////////////////////////////; /// Calculates the WERR, external parameter errors; ///; /// and the global correlation coefficients, to be called; /// whenever a new covariance matrix is available.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx:22,Availability,error,error,22,"// calculate external error if v exists",MatchSource.CODE_COMMENT,math/minuit/src/TMinuit.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuit.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:229,Integrability,interface,interface,229,"////////////////////////////////////////////////////////////////////////////////; /// \class TMinuitMinimizer; /// \see Minuit2 for a newer version of this class; /// TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface; /// using TMinuit. This class is normally instantiated using the plug-in manager; /// (plug-in with name Minuit or TMinuit).; /// In addition the user can choose the minimizer algorithm:; /// Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); ////////////////////////////////////////////////////////////////////////////////; // initialize the static instances; // Implement a thread local static member",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:305,Modifiability,plug-in,plug-in,305,"////////////////////////////////////////////////////////////////////////////////; /// \class TMinuitMinimizer; /// \see Minuit2 for a newer version of this class; /// TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface; /// using TMinuit. This class is normally instantiated using the plug-in manager; /// (plug-in with name Minuit or TMinuit).; /// In addition the user can choose the minimizer algorithm:; /// Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); ////////////////////////////////////////////////////////////////////////////////; // initialize the static instances; // Implement a thread local static member",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:327,Modifiability,plug-in,plug-in,327,"////////////////////////////////////////////////////////////////////////////////; /// \class TMinuitMinimizer; /// \see Minuit2 for a newer version of this class; /// TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface; /// using TMinuit. This class is normally instantiated using the plug-in manager; /// (plug-in with name Minuit or TMinuit).; /// In addition the user can choose the minimizer algorithm:; /// Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); ////////////////////////////////////////////////////////////////////////////////; // initialize the static instances; // Implement a thread local static member",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:458,Usability,Simpl,Simplex,458,"////////////////////////////////////////////////////////////////////////////////; /// \class TMinuitMinimizer; /// \see Minuit2 for a newer version of this class; /// TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface; /// using TMinuit. This class is normally instantiated using the plug-in manager; /// (plug-in with name Minuit or TMinuit).; /// In addition the user can choose the minimizer algorithm:; /// Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); ////////////////////////////////////////////////////////////////////////////////; // initialize the static instances; // Implement a thread local static member",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:498,Usability,Simpl,Simplex,498,"////////////////////////////////////////////////////////////////////////////////; /// \class TMinuitMinimizer; /// \see Minuit2 for a newer version of this class; /// TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface; /// using TMinuit. This class is normally instantiated using the plug-in manager; /// (plug-in with name Minuit or TMinuit).; /// In addition the user can choose the minimizer algorithm:; /// Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex); ////////////////////////////////////////////////////////////////////////////////; // initialize the static instances; // Implement a thread local static member",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:184,Usability,Simpl,Simplex,184,"// Constructor for TMinuitMinimier class via an enumeration specifying the minimization; // algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; // Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; // improved search for global minima). The default type is Migrad (kMigrad).; // initialize if npar is given",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:65,Modifiability,plug-in,plug-in,65,"// constructor from a char * for the algorithm type, used by the plug-in manager; // The names supported (case unsensitive) are:; // Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp; // select type from the string",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:151,Usability,Simpl,Simplex,151,"// constructor from a char * for the algorithm type, used by the plug-in manager; // The names supported (case unsensitive) are:; // Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp; // select type from the string",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:195,Usability,Simpl,Simplex,195,"// constructor from a char * for the algorithm type, used by the plug-in manager; // The names supported (case unsensitive) are:; // Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp; // select type from the string",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:406,Safety,avoid,avoid,406,"// re-use gMinuit as static instance of TMinuit; // which can be accessed by the user after minimization; // check if fgMinuit is different than gMinuit; // case 1: fgMinuit not zero but fgMinuit has been deleted (not in gROOT): set to zero; // case 2: fgMinuit not zero and exists in global list : set fgMinuit to gMinuit; // case 3: fgMinuit zero - and gMinuit not zero: create a new instance locally to avoid conflict",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:65,Security,access,accessed,65,"// re-use gMinuit as static instance of TMinuit; // which can be accessed by the user after minimization; // check if fgMinuit is different than gMinuit; // case 1: fgMinuit not zero but fgMinuit has been deleted (not in gROOT): set to zero; // case 2: fgMinuit not zero and exists in global list : set fgMinuit to gMinuit; // case 3: fgMinuit zero - and gMinuit not zero: create a new instance locally to avoid conflict",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:42,Safety,avoid,avoid,42,"// if object exists in gROOT remove it to avoid a memory leak",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:11,Safety,avoid,avoid,11,"// case 3: avoid reusing existing one - maintain fgMinuit to zero; // otherwise we will get a double delete if user deletes externally gMinuit; // in this case we will loose gMinuit instance; // fgMinuit = gMinuit;; // fgUsed = true; // need to reset in case other gMinuit instance is later used",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:119,Integrability,interface,interface,119,"// Set the objective function to be minimized, by passing a function object implement the; // basic multi-dim Function interface. In this case the derivatives will be; // calculated by Minuit; // Here a TMinuit instance is created since only at this point we know the number of parameters",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:43,Safety,safe,safety,43,"// assign to the static pointer (NO Thread safety here)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:73,Energy Efficiency,Adapt,Adapt,73,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGenFunction interface to TMinuit FCN static function",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:97,Integrability,interface,interface,97,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGenFunction interface to TMinuit FCN static function",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:73,Modifiability,Adapt,Adapt,73,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGenFunction interface to TMinuit FCN static function",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:73,Energy Efficiency,Adapt,Adapt,73,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; // provided gradient.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:98,Integrability,interface,interface,98,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; // provided gradient.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:73,Modifiability,Adapt,Adapt,73,"// implementation of FCN static function used internally by TMinuit.; // Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; // provided gradient.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:14,Modifiability,variab,variable,14,"// set a free variable.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Usability,clear,clear,3,"// clear after minimization when setting params",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:60,Deployability,release,release,60,"// check if parameter was defined and in case it was fixed, release it",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:17,Modifiability,variab,variable,17,"// set a limited variable.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Usability,clear,clear,3,"// clear after minimization when setting params",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:60,Deployability,release,release,60,"// check if parameter was defined and in case it was fixed, release it",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:23,Modifiability,variab,variable,23,"// set a lower limited variable; // since is not supported in TMinuit , just use a artificial large value",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:23,Modifiability,variab,variable,23,"// set a upper limited variable; // since is not supported in TMinuit , just use a artificial large negative value",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:18,Modifiability,Variab,Variable,18,"// check index of Variable (assume fMinuit exists)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:15,Modifiability,variab,variable,15,"// set a fixed variable.",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Usability,clear,clear,3,"// clear after minimization when setting params",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Usability,clear,clear,3,"// clear after minimization when setting params",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:32,Modifiability,variab,variable,32,"// set the value of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:36,Modifiability,variab,variable,36,"// set the step-size of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:33,Modifiability,variab,variable,33,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:33,Modifiability,variab,variable,33,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:33,Modifiability,variab,variable,33,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:19,Modifiability,variab,variable,19,"// Fix an existing variable",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:19,Modifiability,variab,variable,19,"// Fix an existing variable",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:12,Modifiability,variab,variable,12,"// query if variable is fixed",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:12,Modifiability,variab,variable,12,"// retrieve variable settings (all set info on the variable)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:51,Modifiability,variab,variable,51,"// retrieve variable settings (all set info on the variable)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:14,Modifiability,variab,variable,14,"// return the variable name",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:10,Modifiability,variab,variable,10,"// return variable index",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:212,Availability,error,errors,212,"// perform the minimization using the algorithm chosen previously by the user; // By default Migrad is used.; // Return true if the found minimum is valid and update internal cached values of; // minimum values, errors and covariance matrix.; // Status of minimizer is set to:; // migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:159,Deployability,update,update,159,"// perform the minimization using the algorithm chosen previously by the user; // By default Migrad is used.; // Return true if the found minimum is valid and update internal cached values of; // minimum values, errors and covariance matrix.; // Status of minimizer is set to:; // migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Performance,perform,perform,3,"// perform the minimization using the algorithm chosen previously by the user; // By default Migrad is used.; // Return true if the found minimum is valid and update internal cached values of; // minimum values, errors and covariance matrix.; // Status of minimizer is set to:; // migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:175,Performance,cache,cached,175,"// perform the minimization using the algorithm chosen previously by the user; // By default Migrad is used.; // Return true if the found minimum is valid and update internal cached values of; // minimum values, errors and covariance matrix.; // Status of minimizer is set to:; // migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:7,Availability,error,error,7,"// set error and print level",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:29,Usability,simpl,simplex,29,"// case of combined (Migrad+ simplex)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:92,Availability,Toler,Tolerance,92,"// case of Seek (random find minimum in a hypercube around current parameter values; // use Tolerance as measures for standard deviation (if < 1) used default value in Minuit ( supposed to be 3)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:249,Availability,error,error,249,"// check if Hesse needs to be run; // Migrad runs inside it automatically for strategy >=1. Do also; // in case improve or other minimizers are used; // run Hesse also in case cov matrix has not been computed or has been made pos-def; // or a valid error analysis is requested (when IsValidError() == true)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:54,Availability,error,error,54,"// should check here cov matrix status??? (if <3 flag error ?)",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:27,Availability,error,errors,27,"// retrieve parameters and errors from TMinuit",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:103,Availability,error,error,103,"// store global min results (only if minimization is OK); // ignore cases when Hesse or IMprove return error different than zero",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:58,Availability,error,errors,58,"// retrieve from TMinuit minimum parameter values; // and errors",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:18,Availability,error,error,18,"// get covariance error matrix from TMinuit; // when some parameters are fixed filled the corresponding rows and column with zero's",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:105,Safety,avoid,avoid,105,"// get Hessian - inverse of covariance matrix; // just invert it; // but need to get the compact form to avoid the zero for the fixed parameters",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Performance,Perform,Perform,3,"// Perform Minos analysis for the given parameter i",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:7,Availability,error,error,7,"// set error, print level, precision and strategy if they have changed",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:15,Availability,error,errors,15,"// do not flag errors case of PROBLEMS or UNCHANGED (",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:60,Deployability,release,released,60,"// check if a parameter is defined and in case it was fixed released; // TMinuit is not able to release free parameters by redefining them; // so we need to force the release",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:96,Deployability,release,release,96,"// check if a parameter is defined and in case it was fixed released; // TMinuit is not able to release free parameters by redefining them; // so we need to force the release",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:167,Deployability,release,release,167,"// check if a parameter is defined and in case it was fixed released; // TMinuit is not able to release free parameters by redefining them; // so we need to force the release",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:7,Availability,error,error,7,"// set error and print level",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:166,Availability,error,error,166,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range; // (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); // (force in that case to use errors); // scan is not implemented for TMinuit, the way to return the array is only via the graph",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:183,Availability,error,errors,183,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range; // (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); // (force in that case to use errors); // scan is not implemented for TMinuit, the way to return the array is only via the graph",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:372,Availability,error,errors,372,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range; // (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); // (force in that case to use errors); // scan is not implemented for TMinuit, the way to return the array is only via the graph",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:21,Modifiability,variab,variable,21,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range; // (if parameters are limited Minuit scan from min and max instead of 2 sigma by default); // (force in that case to use errors); // scan is not implemented for TMinuit, the way to return the array is only via the graph",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:3,Performance,perform,perform,3,"// perform calculation of Hessian",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:7,Availability,error,error,7,"// set error and print level",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx:35,Availability,error,error,35,"// retrieve results (parameter and error matrix); // only if result is OK",MatchSource.CODE_COMMENT,math/minuit/src/TMinuitMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit/src/TMinuitMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/BFGSErrorUpdator.h:5,Deployability,Update,Update,5,/**; Update of the covariance matrix for the Variable Metric minimizer (MIGRAD); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/BFGSErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/BFGSErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/BFGSErrorUpdator.h:45,Modifiability,Variab,Variable,45,/**; Update of the covariance matrix for the Variable Metric minimizer (MIGRAD); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/BFGSErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/BFGSErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h:213,Performance,perform,performed,213,"//__________________________________________________________________________; /**; Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/CombinedMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h:129,Usability,Simpl,Simplex,129,"//__________________________________________________________________________; /**; Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/CombinedMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h:188,Usability,simpl,simplex,188,"//__________________________________________________________________________; /**; Combined minimizer: combination of Migrad and Simplex. I; If the Migrad method fails at first attempt, a simplex; minimization is performed and then migrad is tried again. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/CombinedMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/CombinedMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/DavidonErrorUpdator.h:5,Deployability,Update,Update,5,/**; Update of the covariance matrix for the Variable Metric minimizer (MIGRAD); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/DavidonErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/DavidonErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/DavidonErrorUpdator.h:45,Modifiability,Variab,Variable,45,/**; Update of the covariance matrix for the Variable Metric minimizer (MIGRAD); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/DavidonErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/DavidonErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ExternalInternalGradientCalculator.h:404,Safety,avoid,avoids,404,"/// Similar to the AnalyticalGradientCalculator, the ExternalInternalGradientCalculator; /// supplies Minuit with an externally calculated gradient. The main difference is that; /// ExternalInternalGradientCalculator expects that the external gradient calculator does; /// things in Minuit2-internal parameter space, which means many int2ext and ext2int; /// transformation steps are not necessary. This avoids loss of precision in some cases,; /// where trigonometrically transforming parameters back and forth can lose a few bits of; /// floating point precision on every pass.",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ExternalInternalGradientCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ExternalInternalGradientCalculator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNAdapter.h:32,Energy Efficiency,adapt,adapting,32,/**. template wrapped class for adapting to FCNBase signature. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNAdapter.h:14,Integrability,wrap,wrapped,14,/**. template wrapped class for adapting to FCNBase signature. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNAdapter.h:32,Modifiability,adapt,adapting,32,/**. template wrapped class for adapting to FCNBase signature. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:144,Availability,avail,available,144,"/**. \defgroup Minuit Minuit2 Minimization Library. New Object-oriented implementation of the MINUIT minimization package.; More information is available at the home page of the \ref Minuit2Page ""Minuit2"" minimization package"". \ingroup Math; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:87,Integrability,Interface,Interface,87,"//______________________________________________________________________________; /**. Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. @author Fred James and Matthias Winkler; modified by Andras Zsenei and Lorenzo Moneta. \ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:462,Modifiability,Variab,VariableMetricMinimizer,462,"/**. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param v function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:742,Modifiability,Variab,VariableMetricMinimizer,742,"/**. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param v function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:572,Performance,perform,performs,572,"/**. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param v function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:5,Availability,Error,Error,5,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:64,Availability,error,errors,64,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:280,Availability,error,errors,280,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:207,Testability,log,log,207,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:5,Availability,Error,Error,5,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:64,Availability,error,errors,64,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:280,Availability,error,errors,280,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:430,Availability,Error,ErrorDef,430,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:207,Testability,log,log,207,"/**. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:44,Availability,error,error,44,/**; add interface to set dynamically a new error definition; Re-implement this function if needed.; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h:9,Integrability,interface,interface,9,/**; add interface to set dynamically a new error definition; Re-implement this function if needed.; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNGradAdapter.h:32,Energy Efficiency,adapt,adapting,32,/**. template wrapped class for adapting to FCNBase signature a IGradFunction. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNGradAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNGradAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNGradAdapter.h:14,Integrability,wrap,wrapped,14,/**. template wrapped class for adapting to FCNBase signature a IGradFunction. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNGradAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNGradAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNGradAdapter.h:32,Modifiability,adapt,adapting,32,/**. template wrapped class for adapting to FCNBase signature a IGradFunction. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FCNGradAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FCNGradAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h:80,Integrability,depend,depending,80,/**. Class the member function calculating the Minimum and verifies the result; depending on the strategy. @param fMnFcn the function to be minimized. @param fGradienCalculator not used in Fumili. @param fMinimumSeed the seed generator. @param fMnStrategy the strategy describing the number of function calls; allowed for Gradient calculations. @param maxfcn maximum number of function calls after which the calculation; will be stopped even if it has not yet converged. @param edmval expected vertical distance to the Minimum. @return Returns the function Minimum found. \todo Complete the documentation by understanding what is the reason to; have two Minimum methods. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h:5,Security,Access,Accessor,5,/**. Accessor to the EDM (expected vertical distance to the Minimum) estimator. @return The EDM estimator used in the builder. \todo Maybe a little explanation concerning EDM in all relevant classes. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h:21,Availability,Error,Error,21,/**. Accessor to the Error updator of the builder. @return The FumiliErrorUpdator used by the FumiliBuilder. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h:5,Security,Access,Accessor,5,/**. Accessor to the Error updator of the builder. @return The FumiliErrorUpdator used by the FumiliBuilder. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:898,Availability,Error,Errors,898,"/**. Extension of the FCNBase for the Fumili method. Fumili applies only to; minimization problems used for fitting. The method is based on a; linearization of the model function negleting second derivatives.; User needs to provide the model function. The figure-of-merit describing; the difference between the model function and the actual measurements in; the case of chi-square is the sum of the squares of the figures-of-merit; calculated for each measurement point, which is implemented by the; operator() member function. The user still has to implement the calculation; of the individual figures-of-merit (which in the majority of the cases; will be the (measured Value - the Value predicted by the model)/standard deviation; implemented by the FumiliStandardChi2FCN;; however this form can become more complicated (see for an example Numerical Recipes'; section on ""Straight-Line Data with Errors in Both Coordinates"")). @author Andras Zsenei and Lorenzo Moneta, Creation date: 24 Aug 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see FumiliStandardChi2FCN. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:689,Safety,predict,predicted,689,"/**. Extension of the FCNBase for the Fumili method. Fumili applies only to; minimization problems used for fitting. The method is based on a; linearization of the model function negleting second derivatives.; User needs to provide the model function. The figure-of-merit describing; the difference between the model function and the actual measurements in; the case of chi-square is the sum of the squares of the figures-of-merit; calculated for each measurement point, which is implemented by the; operator() member function. The user still has to implement the calculation; of the individual figures-of-merit (which in the majority of the cases; will be the (measured Value - the Value predicted by the model)/standard deviation; implemented by the FumiliStandardChi2FCN;; however this form can become more complicated (see for an example Numerical Recipes'; section on ""Straight-Line Data with Errors in Both Coordinates"")). @author Andras Zsenei and Lorenzo Moneta, Creation date: 24 Aug 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see FumiliStandardChi2FCN. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:5,Security,Access,Accessor,5,"/**. Accessor to the parameters of a given measurement. For example in the; case of a chi-square fit with a one-dimensional Gaussian, the Parameter; characterizing the measurement will be the position. It is the Parameter; that is passed to the model function. @param Index Index of the measueremnt the parameters of which to return; @return A reference to a vector containing the values characterizing a measurement. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:5,Security,Access,Accessor,5,/**. Accessor to the number of measurements used for calculating the; present figure of merit. @return the number of measurements. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h:106,Modifiability,inherit,inherits,106,"/**. Calculates the sum of Elements squared, ie the chi-square. The user must; implement in a class which inherits from FumiliChi2FCN the member function; Elements() which will supply the Elements for the sum. @param par vector containing the Parameter values for the model function. @return The sum of Elements squared. @see FumiliFCNBase#elements. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:45,Availability,Error,Error,45,"/**. In the case of the Fumili algorithm the Error matrix (or the Hessian; matrix containing the (approximate) second derivatives) is calculated; using a linearization of the model function negleting second; derivatives. (In some sense the Name Updator is a little bit misleading; as the Error matrix is not calculated by iteratively updating, like; in Davidon's or other similar variable metric methods, but by; recalculating each time). @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see DavidonErrorUpdator. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:288,Availability,Error,Error,288,"/**. In the case of the Fumili algorithm the Error matrix (or the Hessian; matrix containing the (approximate) second derivatives) is calculated; using a linearization of the model function negleting second; derivatives. (In some sense the Name Updator is a little bit misleading; as the Error matrix is not calculated by iteratively updating, like; in Davidon's or other similar variable metric methods, but by; recalculating each time). @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see DavidonErrorUpdator. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:380,Modifiability,variab,variable,380,"/**. In the case of the Fumili algorithm the Error matrix (or the Hessian; matrix containing the (approximate) second derivatives) is calculated; using a linearization of the model function negleting second; derivatives. (In some sense the Name Updator is a little bit misleading; as the Error matrix is not calculated by iteratively updating, like; in Davidon's or other similar variable metric methods, but by; recalculating each time). @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see DavidonErrorUpdator. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:41,Availability,Error,Error,41,/**. Member function that calculates the Error matrix (or the Hessian; matrix containing the (approximate) second derivatives) using a; linearization of the model function negleting second derivatives. @param fMinimumState used to calculate the change in the covariance; matrix between the two iterations. @param fMinimumParameters the parameters at the present iteration. @param fGradientCalculator the Gradient calculator used to retrieved the Parameter transformation. @param lambda the Marquard lambda factor. \todo Some nice latex mathematical formuli... */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:127,Availability,Error,Error,127,"/**. Member function which is only present due to the design already in place; of the software. As all classes calculating the Error matrix are supposed; inherit from the MinimumErrorUpdator they must inherit this method. In some; methods calculating the aforementioned matrix some of these parameters are; not needed and other parameters are necessary... Hopefully, a more elegant; solution will be found in the future. \todo How to get rid of this dummy method which is only due to the inheritance. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:154,Modifiability,inherit,inherit,154,"/**. Member function which is only present due to the design already in place; of the software. As all classes calculating the Error matrix are supposed; inherit from the MinimumErrorUpdator they must inherit this method. In some; methods calculating the aforementioned matrix some of these parameters are; not needed and other parameters are necessary... Hopefully, a more elegant; solution will be found in the future. \todo How to get rid of this dummy method which is only due to the inheritance. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:201,Modifiability,inherit,inherit,201,"/**. Member function which is only present due to the design already in place; of the software. As all classes calculating the Error matrix are supposed; inherit from the MinimumErrorUpdator they must inherit this method. In some; methods calculating the aforementioned matrix some of these parameters are; not needed and other parameters are necessary... Hopefully, a more elegant; solution will be found in the future. \todo How to get rid of this dummy method which is only due to the inheritance. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h:488,Modifiability,inherit,inheritance,488,"/**. Member function which is only present due to the design already in place; of the software. As all classes calculating the Error matrix are supposed; inherit from the MinimumErrorUpdator they must inherit this method. In some; methods calculating the aforementioned matrix some of these parameters are; not needed and other parameters are necessary... Hopefully, a more elegant; solution will be found in the future. \todo How to get rid of this dummy method which is only due to the inheritance. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliErrorUpdator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliErrorUpdator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h:32,Energy Efficiency,adapt,adapting,32,/**. template wrapped class for adapting to FumiliFCNBase signature. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h:14,Integrability,wrap,wrapped,14,/**. template wrapped class for adapting to FumiliFCNBase signature. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h:32,Modifiability,adapt,adapting,32,/**. template wrapped class for adapting to FumiliFCNBase signature. @author Lorenzo Moneta. @ingroup Minuit. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h:88,Integrability,interface,interface,88,"// virtual std::vector<double> Gradient(std::vector<double> const &) const;; // forward interface; // virtual double operator()(int npar, double* params,int iflag = 4) const;; /**; evaluate gradient hessian and function value needed by fumili; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h:62,Testability,log,log,62,"// calculate data element and gradient: returns derivative of log(pdf)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNAdapter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNAdapter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h:121,Performance,cache,cached,121,"/**. Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The result is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. **/",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h:12,Performance,cache,cached,12,/**; Return cached Value of objective function estimated previously using the FumiliFCNBase::EvaluateAll method. **/,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h:12,Performance,cache,cached,12,/**; Return cached Value of function Gradient estimated previously using the FumiliFCNBase::EvaluateAll method; **/,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h:31,Modifiability,variab,variable,31,"/**; return number of function variable (parameters) , i.e. function dimension; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliFCNBase.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliFCNBase.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:314,Testability,log,logarithms,314,"/**. Extension of the FCNBase for the Fumili method. Fumili applies only to; minimization problems used for fitting. The method is based on a; linearization of the model function negleting second derivatives.; User needs to provide the model function. In this cased the function; to be minimized is the sum of the logarithms of the model function; for the different measurements times -1. @author Andras Zsenei and Lorenzo Moneta, Creation date: 3 Sep 2004. @see <A HREF=""http://www.cern.ch/winkler/minuit/tutorial/mntutorial.pdf"">MINUIT Tutorial</A> on function minimization,; section 5. @see FumiliStandardMaximumLikelihoodFCN. @ingroup Minuit. \todo Insert a nice latex formula... */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:5,Security,Access,Accessor,5,"/**. Accessor to the parameters of a given measurement. For example in the; case of a chi-square fit with a one-dimensional Gaussian, the Parameter; characterizing the measurement will be the position. It is the Parameter; that is passed to the model function. @param Index Index of the measueremnt the parameters of which to return; @return A vector containing the values characterizing a measurement. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:5,Security,Access,Accessor,5,/**. Accessor to the number of measurements used for calculating the; present figure of merit. @return the number of measurements. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:106,Modifiability,inherit,inherits,106,/**. Calculates the function for the maximum likelihood method. The user must; implement in a class which inherits from FumiliChi2FCN the member function; Elements() which will supply the Elements for the sum. @param par vector containing the Parameter values for the model function. @return The sum of the natural logarithm of the Elements multiplied by -1. @see FumiliFCNBase#elements. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h:315,Testability,log,logarithm,315,/**. Calculates the function for the maximum likelihood method. The user must; implement in a class which inherits from FumiliChi2FCN the member function; Elements() which will supply the Elements for the sum. @param par vector containing the Parameter values for the model function. @return The sum of the natural logarithm of the Elements multiplied by -1. @see FumiliFCNBase#elements. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h:207,Modifiability,inherit,inherited,207,"//______________________________________________________________; /**. Instantiates the seed generator and Minimum builder for the; Fumili minimization method. Produces the Minimum via the; Minimize methods inherited from ModularFunctionMinimizer. @author Andras Zsenei and Lorenzo Moneta, Creation date: 28 Sep 2004. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h:5,Security,Access,Accessor,5,/**. Accessor to the seed generator of the minimizer. @return A reference to the seed generator used by the minimizer. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h:5,Security,Access,Accessor,5,/**. Accessor to the Minimum builder of the minimizer. @return a reference to the Minimum builder. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:205,Safety,predict,predicted,205,"/**. Class implementing the standard chi square function, which; is the sum of the squares of the figures-of-merit calculated for each measurement; point, the individual figures-of-merit being: (the Value predicted by the; model-measured Value)/standard deviation. @author Andras Zsenei and Lorenzo Moneta, Creation date: 31 Aug 2004. @see FumiliChi2FCN. @ingroup Minuit. \todo nice formula for the documentation... */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:252,Safety,predict,predicted,252,"/**. Evaluates the model function for the different measurement points and; the Parameter values supplied, calculates a figure-of-merit for each; measurement and returns a vector containing the result of this; evaluation. The figure-of-merit is (Value predicted by the model; function-measured Value)/standard deviation. @param par vector of Parameter values to feed to the model function. @return A vector containing the figures-of-merit for the model function evaluated; for each set of measurements. \todo What to do when the variances are 0???!! (right now just pushes back 0...). */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:5,Security,Access,Accessor,5,/**. Accessor to the position of the measurement (x coordinate). @param Index Index of the measuerement the position of which to return. @return the position of the measurement. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:5,Security,Access,Accessor,5,/**. Accessor to the number of measurements used for calculating; the chi-square. @return the number of measurements. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h:121,Performance,cache,cached,121,"/**. Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The result is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. **/",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardChi2FCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h:5,Security,Access,Accessor,5,/**. Accessor to the position of the measurement (x coordinate). @param Index Index of the measuerement the position of which to return. @return the position of the measurement. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h:5,Security,Access,Accessor,5,/**. Accessor to the number of measurements used for calculating; the maximum likelihood. @return the number of measurements. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h:121,Performance,cache,cached,121,"/**. Evaluate function Value, Gradient and Hessian using Fumili approximation, for values of parameters p; The result is cached inside and is return from the FumiliFCNBase::Value , FumiliFCNBase::Gradient and; FumiliFCNBase::Hessian methods. @param par vector of parameters. **/",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FumiliStandardMaximumLikelihoodFCN.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h:220,Availability,avail,available,220,//______________________________________________________________________________________________; /**; class holding the full result of the minimization;; both internal and external (MnUserParameterState) representation available; for the parameters at the Minimum; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FunctionMinimum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h:8,Deployability,update,update,8,"// LM : update also the user state",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FunctionMinimum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h:11,Integrability,interface,interface,11,"// forward interface of last state",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FunctionMinimum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h:53,Availability,error,errors,53,"// update user state for new value of up (scaling of errors)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FunctionMinimum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h:3,Deployability,update,update,3,"// update user state for new value of up (scaling of errors)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/FunctionMinimum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/FunctionMinimum.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/GenericFunction.h:143,Modifiability,inherit,inherit,143,"//_____________________________________________________________________; /**. Class from which all the other classes, representing functions,; inherit. That is why it defines only one method, the operator(),; which allows to call the function. @author Andras Zsenei and Lorenzo Moneta, Creation date: 23 Sep 2004. @ingroup Minuit. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/GenericFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/GenericFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/GradientCalculator.h:5,Integrability,interface,interface,5,/**; interface class for gradient calculators; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/GradientCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/GradientCalculator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h:3,Testability,assert,assert,3,"// assert(fSize>0);",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/LASymMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h:93,Energy Efficiency,allocate,allocate,93,"// std::cout<<""LASymMatrix(const ABObj<sym, LASymMatrix, T>& v)""<<std::endl;; // std::cout<<""allocate ""<<fSize<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/LASymMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h:28,Modifiability,variab,variable,28,"// std::cout<<""creating tmp variable""<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/LASymMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LASymMatrix.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LAVector.h:3,Testability,assert,assert,3,"// assert(fSize>0);",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/LAVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LAVector.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LAVector.h:82,Energy Efficiency,allocate,allocate,82,"// std::cout<<""LAVector(const ABObj<LAVector, T>& v)""<<std::endl;; // std::cout<<""allocate ""<<fSize<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/LAVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LAVector.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LAVector.h:28,Modifiability,variab,variable,28,"// std::cout<<""creating tmp variable""<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/LAVector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/LAVector.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumError.h:147,Availability,Error,ErrorUpdator,147,/** MinimumError keeps the inv. 2nd derivative (inv. Hessian) used for; calculating the Parameter step size (-V*g) and for the covariance Update; (ErrorUpdator). The covariance matrix is equal to twice the inv. Hessian.; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinimumError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumError.h:138,Deployability,Update,Update,138,/** MinimumError keeps the inv. 2nd derivative (inv. Hessian) used for; calculating the Parameter step size (-V*g) and for the covariance Update; (ErrorUpdator). The covariance matrix is equal to twice the inv. Hessian.; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinimumError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumState.h:70,Availability,error,errors,70,"/// Constructor with only parameter values, edm and nfcn, but without errors (covariance).; /// The resulting state it will be considered valid, since it contains the parameter values,; /// although it has not the error matrix (MinimumError) and HasCovariance() returns false.",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinimumState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumState.h:214,Availability,error,error,214,"/// Constructor with only parameter values, edm and nfcn, but without errors (covariance).; /// The resulting state it will be considered valid, since it contains the parameter values,; /// although it has not the error matrix (MinimumError) and HasCovariance() returns false.",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinimumState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumState.h:40,Availability,error,errors,40,"/// Constructor with parameters values, errors and gradient",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinimumState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinimumState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:9,Availability,error,error,9,"// Minos error is value - error - aopt * error where aopt is MnCross.Value(); // If value - error is below the limit, error must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:26,Availability,error,error,26,"// Minos error is value - error - aopt * error where aopt is MnCross.Value(); // If value - error is below the limit, error must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:41,Availability,error,error,41,"// Minos error is value - error - aopt * error where aopt is MnCross.Value(); // If value - error is below the limit, error must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:92,Availability,error,error,92,"// Minos error is value - error - aopt * error where aopt is MnCross.Value(); // If value - error is below the limit, error must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:118,Availability,error,error,118,"// Minos error is value - error - aopt * error where aopt is MnCross.Value(); // If value - error is below the limit, error must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:3,Availability,error,error,3,"// error is truncated if over the limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:18,Availability,Error,Error,18,"// return Hessian Error in case is invalid",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:9,Availability,error,error,9,"// Minos error is value + error + aopt * error where aopt is MnCross.Value(); // If value + error is over the limit, err must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:26,Availability,error,error,26,"// Minos error is value + error + aopt * error where aopt is MnCross.Value(); // If value + error is over the limit, err must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:41,Availability,error,error,41,"// Minos error is value + error + aopt * error where aopt is MnCross.Value(); // If value + error is over the limit, err must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:92,Availability,error,error,92,"// Minos error is value + error + aopt * error where aopt is MnCross.Value(); // If value + error is over the limit, err must be truncated at limit",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h:18,Availability,Error,Error,18,"// return Hessian Error in case is invalid",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinosError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinosError.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:172,Integrability,interface,interface,172,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:261,Modifiability,plug-in,plug-in,261,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:278,Modifiability,plug-in,plug-in,278,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:326,Modifiability,plugin,plugin,326,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:430,Usability,Simpl,Simplex,430,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:481,Usability,guid,guide,481,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:519,Usability,guid,guides,519,"//_____________________________________________________________________________________________________; /**; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for; Minuit2 minimization algorithm.; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2""); Using a string (used by the plugin manager) or via an enumeration; an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili). Refer to the [guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) for an introduction how Minuit; works. @ingroup Minuit; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:3,Usability,clear,clear,3,"// clear resources (parameters) for consecutives minimizations",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:13,Modifiability,variab,variable,13,"/// set free variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:20,Modifiability,variab,variable,20,"/// set lower limit variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:20,Modifiability,variab,variable,20,"/// set upper limit variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:28,Modifiability,variab,variable,28,"/// set upper/lower limited variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:14,Modifiability,variab,variable,14,"/// set fixed variable (override if minimizer supports them )",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:8,Modifiability,variab,variable,8,"/// set variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:7,Modifiability,variab,variable,7,"// set variable values",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:45,Modifiability,variab,variable,45,"/// set the step size of an already existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:47,Modifiability,variab,variable,47,"/// set the lower-limit of an already existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:47,Modifiability,variab,variable,47,"/// set the upper-limit of an already existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:42,Modifiability,variab,variable,42,"/// set the limits of an already existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:20,Modifiability,variab,variable,20,"/// fix an existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:4,Deployability,release,release,4,"/// release an existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:24,Modifiability,variab,variable,24,"/// release an existing variable",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:25,Modifiability,variab,variable,25,"/// query if an existing variable is fixed (i.e. considered constant in the minimization); /// note that by default all variables are not fixed",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:120,Modifiability,variab,variables,120,"/// query if an existing variable is fixed (i.e. considered constant in the minimization); /// note that by default all variables are not fixed",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:8,Modifiability,variab,variable,8,"/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:31,Modifiability,variab,variable,31,"/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:16,Modifiability,variab,variables,16,"/// get name of variables (override if minimizer support storing of variable names)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:68,Modifiability,variab,variable,68,"/// get name of variables (override if minimizer support storing of variable names)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:17,Modifiability,variab,variable,17,"/// get index of variable given a variable given a name; /// return -1 if variable is not found",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:34,Modifiability,variab,variable,34,"/// get index of variable given a variable given a name; /// return -1 if variable is not found",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:74,Modifiability,variab,variable,74,"/// get index of variable given a variable given a name; /// return -1 if variable is not found",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:375,Availability,failure,failure,375,"/**; method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:15,Performance,perform,perform,15,"/**; method to perform the minimization.; Return false in case the minimization did not converge. In this case a; status code different than zero is set; (retrieved by the derived method Minimizer::Status() )"". status = 1 : Covariance was made pos defined; status = 2 : Hesse is invalid; status = 3 : Edm is above max; status = 4 : Reached call limit; status = 5 : Any other failure; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:7,Availability,avail,available,7,"// not available in Minuit2; /// number of function calls to reach the minimum",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:67,Modifiability,variab,variables,67,"/// this is <= Function().NDim() which is the total; /// number of variables (free+ constrained ones)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:19,Modifiability,variab,variables,19,"/// number of free variables (real dimension of the problem); /// this is <= Function().NDim() which is the total",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:23,Availability,error,error,23,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:33,Availability,error,error,33,"/// minimizer provides error and error matrix",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:11,Availability,error,errors,11,"/// return errors at the minimum",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:141,Availability,error,errors,141,/**; return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:204,Integrability,interface,interface,204,/**; return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:47,Modifiability,variab,variable,47,/**; return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:113,Modifiability,variab,variables,113,/**; return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:276,Modifiability,variab,variable,276,/**; return covariance matrix elements; if the variable is fixed or const the value is zero; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:212,Availability,error,errors,212,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:275,Integrability,interface,interface,275,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:71,Modifiability,variab,variable,71,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:184,Modifiability,variab,variables,184,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:347,Modifiability,variab,variable,347,/**; Fill the passed array with the covariance matrix elements; if the variable is fixed or const the value is zero.; The array will be filled as cov[i *ndim + j]; The ordering of the variables is the same as in errors and parameter value.; This is different from the direct interface of Minuit2 or TMinuit where the; values were obtained only to variable parameters; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:173,Modifiability,variab,variable,173,/**; Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:220,Modifiability,variab,variables,220,/**; Fill the passed array with the Hessian matrix elements; The Hessian matrix is the matrix of the second derivatives; and is the inverse of the covariance matrix; If the variable is fixed or const the values for that variables are zero.; The array will be filled as h[i *ndim + j]; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:67,Availability,avail,available,67,/**; return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:126,Availability,avail,available,126,/**; return the status of the covariance matrix; status = -1 : not available (inversion failed or Hesse failed); status = 0 : available but not positive defined; status = 1 : covariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:44,Modifiability,variab,variable,44,/**; return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:70,Modifiability,variab,variable,70,/**; return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:48,Modifiability,variab,variable,48,/**; get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:144,Modifiability,variab,variable,144,/**; get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:194,Modifiability,variab,variables,194,/**; get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:255,Modifiability,variab,variable,255,/**; get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:19,Availability,error,error,19,"/**; get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus.; The Minos status of last Minos run can also be retrieved by calling MinosStatus(); */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:194,Availability,error,error,194,"/**; get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus.; The Minos status of last Minos run can also be retrieved by calling MinosStatus(); */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:203,Deployability,update,updated,203,"/**; get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus.; The Minos status of last Minos run can also be retrieved by calling MinosStatus(); */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:95,Performance,perform,performed,95,"/**; get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus.; The Minos status of last Minos run can also be retrieved by calling MinosStatus(); */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:75,Availability,error,error,75,/**; MINOS status code of last Minos run; `status & 1 > 0` : invalid lower error; `status & 2 > 0` : invalid upper error; `status & 4 > 0` : invalid because maximum number of function calls exceeded; `status & 8 > 0` : a new minimum has been found; `status & 16 > 0` : error is truncated because parameter is at lower/upper limit; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:115,Availability,error,error,115,/**; MINOS status code of last Minos run; `status & 1 > 0` : invalid lower error; `status & 2 > 0` : invalid upper error; `status & 4 > 0` : invalid because maximum number of function calls exceeded; `status & 8 > 0` : a new minimum has been found; `status & 16 > 0` : error is truncated because parameter is at lower/upper limit; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:269,Availability,error,error,269,/**; MINOS status code of last Minos run; `status & 1 > 0` : invalid lower error; `status & 2 > 0` : invalid upper error; `status & 4 > 0` : invalid because maximum number of function calls exceeded; `status & 8 > 0` : a new minimum has been found; `status & 16 > 0` : error is truncated because parameter is at lower/upper limit; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:154,Availability,Error,ErrorUp,154,"/**; find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:58,Availability,error,error,58,/**; perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:241,Deployability,update,updated,241,/**; perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:5,Performance,perform,perform,5,/**; perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:161,Performance,perform,performed,161,/**; perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; Status code of minimizer is updated according to the following convention (in case Hesse failed); status += 100*hesseStatus where hesse status is:; status = 1 : hesse failed; status = 2 : matrix inversion failed; status = 3 : matrix is not pos defined; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:86,Modifiability,inherit,inherit,86,"/// set an object to trace operation for each iteration; /// The object must be a (or inherit from) ROOT::Minuit2::MnTraceObject and implement operator() (int, const; /// MinimumState & state)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:26,Security,access,accessing,26,"// protected function for accessing the internal Minuit2 object. Needed for derived classes",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h:38,Availability,error,errors,38,"// internal function to compute Minos errors",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Minuit2Minimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Minuit2Minimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:305,Availability,error,error,305,"//____________________________________________________________________________; /**; class for the individual Minuit Parameter with Name and number;; contains the input numbers for the minimization or the output result; from minimization;; possible interactions: Fix/release, set/remove limits, set Value/error;. From version 5.20: use string to store the name to avoid limitation of; name length of 20 characters; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinuitParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:267,Deployability,release,release,267,"//____________________________________________________________________________; /**; class for the individual Minuit Parameter with Name and number;; contains the input numbers for the minimization or the output result; from minimization;; possible interactions: Fix/release, set/remove limits, set Value/error;. From version 5.20: use string to store the name to avoid limitation of; name length of 20 characters; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinuitParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:364,Safety,avoid,avoid,364,"//____________________________________________________________________________; /**; class for the individual Minuit Parameter with Name and number;; contains the input numbers for the minimization or the output result; from minimization;; possible interactions: Fix/release, set/remove limits, set Value/error;. From version 5.20: use string to store the name to avoid limitation of; name length of 20 characters; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinuitParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:43,Availability,error,error,43,"// default constructor standard with value/error = 0",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinuitParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h:3,Security,access,access,3,"// access methods",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MinuitParameter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MinuitParameter.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:96,Integrability,interface,interface,96,"//___________________________________________________________________________; /**; application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:136,Usability,simpl,simplex,136,"//___________________________________________________________________________; /**; application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:154,Availability,toler,tolerance,154,"/**; Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:313,Availability,toler,tolerance,313,"/**; Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:350,Availability,toler,tolerance,350,"/**; Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:19,Integrability,interface,interface,19,"// facade: forward interface of MnUserParameters and MnUserTransformation; // via MnUserParameterState; // access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:107,Security,access,access,107,"// facade: forward interface of MnUserParameters and MnUserTransformation; // via MnUserParameterState; // access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:28,Availability,error,errors,28,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:3,Security,access,access,3,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h:3,Security,access,access,3,"// access to single Parameter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnApplication.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnApplication.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnContours.h:93,Availability,Error,Error,93,//_____________________________________________________________; /**; API class for Contours Error analysis (2-dim errors);; minimization has to be done before and Minimum must be valid;; possibility to ask only for the points or the points and associated Minos; errors;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnContours.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnContours.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnContours.h:115,Availability,error,errors,115,//_____________________________________________________________; /**; API class for Contours Error analysis (2-dim errors);; minimization has to be done before and Minimum must be valid;; possibility to ask only for the points or the points and associated Minos; errors;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnContours.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnContours.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnContours.h:263,Availability,error,errors,263,//_____________________________________________________________; /**; API class for Contours Error analysis (2-dim errors);; minimization has to be done before and Minimum must be valid;; possibility to ask only for the points or the points and associated Minos; errors;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnContours.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnContours.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnCovarianceSqueeze.h:14,Energy Efficiency,reduce,reduce,14,/**; class to reduce the covariance matrix when a parameter is fixed by; removing the corresponding row and index; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnCovarianceSqueeze.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnCovarianceSqueeze.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h:5,Integrability,Wrap,Wrapper,5,"/**; Wrapper class to FCNBase interface used internally by Minuit.; Apply conversion from calling the function from a Minuit Vector (MnAlgebraicVector) to a std::vector for; the function coordinates.; The class counts also the number of function calls. By default counter start from zero, but a different value; might be given if the class is instantiated later on, for example for a set of different minimizaitons; Normally the derived class MnUserFCN should be instantiated with performs in addition the transformatiopn; internal-> external parameters; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h:30,Integrability,interface,interface,30,"/**; Wrapper class to FCNBase interface used internally by Minuit.; Apply conversion from calling the function from a Minuit Vector (MnAlgebraicVector) to a std::vector for; the function coordinates.; The class counts also the number of function calls. By default counter start from zero, but a different value; might be given if the class is instantiated later on, for example for a set of different minimizaitons; Normally the derived class MnUserFCN should be instantiated with performs in addition the transformatiopn; internal-> external parameters; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h:481,Performance,perform,performs,481,"/**; Wrapper class to FCNBase interface used internally by Minuit.; Apply conversion from calling the function from a Minuit Vector (MnAlgebraicVector) to a std::vector for; the function coordinates.; The class counts also the number of function calls. By default counter start from zero, but a different value; might be given if the class is instantiated later on, for example for a set of different minimizaitons; Normally the derived class MnUserFCN should be instantiated with performs in addition the transformatiopn; internal-> external parameters; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h:15,Integrability,interface,interface,15,"//; // forward interface; //",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnFcn.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h:256,Deployability,update,updated,256,"///; /// API to use MnHesse after minimization when function minimum is avalilable, otherwise information on the last; /// state will be lost. (It would be needed to re-call the gradient and spend extra useless function calls) The; /// Function Minimum is updated (modified) by adding the Hesse results as last state of minimization; ///",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnHesse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h:13,Integrability,interface,interface,13,"/// internal interface; ///",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnHesse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h:12,Integrability,interface,interface,12,"/// forward interface of MnStrategy",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnHesse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnHesse.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMatrix.h:62,Integrability,depend,dependent,62,"// add MnConfig file to define before everything compiler; // dependent macros",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMatrix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMatrix.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMigrad.h:119,Modifiability,Variab,Variable,119,"//_____________________________________________________________________________; /**; API class for minimization using Variable Metric technology (""MIGRAD"");; allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; also used by MnMinos and MnContours;; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMigrad.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMigrad.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinimize.h:37,Modifiability,Variab,Variable,37,"/** API class for minimization using Variable Metric technology (""MIGRAD"");; allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; also used by MnMinos and MnContours;; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinimize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinimize.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h:95,Availability,Error,Error,95,//__________________________________________________________________; /**; API class for Minos Error analysis (asymmetric errors);; minimization has to be done before and Minimum must be valid;; possibility to ask only for one side of the Minos Error;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinos.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h:122,Availability,error,errors,122,//__________________________________________________________________; /**; API class for Minos Error analysis (asymmetric errors);; minimization has to be done before and Minimum must be valid;; possibility to ask only for one side of the Minos Error;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinos.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h:245,Availability,Error,Error,245,//__________________________________________________________________; /**; API class for Minos Error analysis (asymmetric errors);; minimization has to be done before and Minimum must be valid;; possibility to ask only for one side of the Minos Error;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinos.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h:80,Availability,Error,Error,80,"/// returns the negative (pair.first) and the positive (pair.second); /// Minos Error of the Parameter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinos.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h:45,Availability,Error,Error,45,"/// calculate one side (negative or positive Error) of the Parameter; /// give as input (optionally) maxcalls and tolerance",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinos.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h:114,Availability,toler,tolerance,114,"/// calculate one side (negative or positive Error) of the Parameter; /// give as input (optionally) maxcalls and tolerance",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnMinos.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnMinos.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:34,Performance,perform,performance,34,// maybe it is worth to check the performance improvement with the below formula??; // double X_pos(double y) const {return (std::sqrt(y/fA + fB*fB/(4.*fA*fA) - fC/fA) - fB/(2.*fA));}; /**. Calculates the smaller of the two x values corresponding to the; given y Value. <p>. ???????!!!!!!!!! And when there is none?? it looks like it will; crash?? what is sqrt (-1.0) ?. @param y the y Value for which the x Value is to be calculated. @return the smaller one of the two corresponding values. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabola.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:5,Security,Access,Accessor,5,/**. Accessor to the coefficient of the quadratic term. @return the coefficient of the quadratic term. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabola.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:5,Security,Access,Accessor,5,/**. Accessor to the coefficient of the linear term. @return the coefficient of the linear term. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabola.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h:5,Security,Access,Accessor,5,/**. Accessor to the coefficient of the constant term. @return the coefficient of the constant term. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabola.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabola.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h:196,Usability,simpl,simply,196,"/**. A point of a parabola. <p>. ????!!!! in reality it is just a general point in two dimensional space,; there is nothing that would indicate, that it belongs to a parabola.; This class defines simply an (x,y) pair!!!!. @author Fred James and Matthias Winkler; comments added by Andras Zsenei; and Lorenzo Moneta. @ingroup Minuit. \todo Should it be called MnParabolaPoint or just Point?. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabolaPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h:5,Security,Access,Accessor,5,/**. Accessor to the x (first) coordinate. @return the x (first) coordinate of the point. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabolaPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h:5,Security,Access,Accessor,5,/**. Accessor to the y (second) coordinate. @return the y (second) coordinate of the point. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnParabolaPoint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnParabolaPoint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:456,Integrability,message,messages,456,"/* Design notes: 1) We want to delay the costly conversion from object references to; strings to a point after we have decided whether or not to; show that string to the user at all. 2) We want to offer a customization point for; external libraries that want to replace the MnPrint logging. The actual; implementation is in a separate file, MnPrintImpl.cxx file that external libraries; can replace with their own implementation.; */; // logging class for messages of varying severity",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:282,Testability,log,logging,282,"/* Design notes: 1) We want to delay the costly conversion from object references to; strings to a point after we have decided whether or not to; show that string to the user at all. 2) We want to offer a customization point for; external libraries that want to replace the MnPrint logging. The actual; implementation is in a separate file, MnPrintImpl.cxx file that external libraries; can replace with their own implementation.; */; // logging class for messages of varying severity",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:438,Testability,log,logging,438,"/* Design notes: 1) We want to delay the costly conversion from object references to; strings to a point after we have decided whether or not to; show that string to the user at all. 2) We want to offer a customization point for; external libraries that want to replace the MnPrint logging. The actual; implementation is in a separate file, MnPrintImpl.cxx file that external libraries; can replace with their own implementation.; */; // logging class for messages of varying severity",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:31,Security,access,accessible,31,"// ...but also want the values accessible from MnPrint scope for convenience",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:13,Testability,log,logging,13,"// low level logging",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:31,Deployability,install,installed,31,"// returns true if filters are installed and message is not selected by any filter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h:45,Integrability,message,message,45,"// returns true if filters are installed and message is not selected by any filter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnPrint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnPrint.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSeedGenerator.h:56,Integrability,interface,interface,56,/** concrete implementation of the MinimumSeedGenerator interface; used within; ModularFunctionMinimizer;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnSeedGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSeedGenerator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSimplex.h:271,Availability,avail,available,271,"//_________________________________________________________________________; /**; API class for minimization using the Simplex method, which does not need and use; the derivatives of the function, but only function values.; More information on the minimization method is available; <A HREF=""http://seal.web.cern.ch/mathlibs/documents/minuit/mntutorial.pdf"">here</A>. It allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnSimplex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSimplex.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSimplex.h:119,Usability,Simpl,Simplex,119,"//_________________________________________________________________________; /**; API class for minimization using the Simplex method, which does not need and use; the derivatives of the function, but only function values.; More information on the minimization method is available; <A HREF=""http://seal.web.cern.ch/mathlibs/documents/minuit/mntutorial.pdf"">here</A>. It allows for user interaction: set/change parameters, do minimization,; change parameters, re-do minimization etc.;; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnSimplex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnSimplex.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserCovariance.h:3,Safety,safe,safe,3,"// safe constructor using std::vector",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserCovariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserCovariance.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserCovariance.h:3,Safety,unsafe,unsafe,3,"// unsafe constructor using just a pointer",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserCovariance.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserCovariance.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserFcn.h:5,Integrability,Wrap,Wrapper,5,/**; Wrapper used by Minuit of FCN interface; containing a reference to the transformation object; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserFcn.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserFcn.h:35,Integrability,interface,interface,35,/**; Wrapper used by Minuit of FCN interface; containing a reference to the transformation object; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserFcn.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:181,Availability,error,errors,181,"/** API class for the user interaction with the parameters;; serves as input to the minimizer as well as output from it;; users can interact: Fix/release parameters, set values and errors, etc.;; parameters can be accessed via their Parameter number (determined; internally by Minuit and followed the order how the parameters are created); or via their user-specified Name (10 character string).; Minuit has also an internal parameter number which is used during the minimization; (the fix parameter are skipped). The parameter number used in this class is the external; one. The class ROOT::Minuit2::MnUserTransformation is used to keep the; internal <-> external transformation; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:146,Deployability,release,release,146,"/** API class for the user interaction with the parameters;; serves as input to the minimizer as well as output from it;; users can interact: Fix/release parameters, set values and errors, etc.;; parameters can be accessed via their Parameter number (determined; internally by Minuit and followed the order how the parameters are created); or via their user-specified Name (10 character string).; Minuit has also an internal parameter number which is used during the minimization; (the fix parameter are skipped). The parameter number used in this class is the external; one. The class ROOT::Minuit2::MnUserTransformation is used to keep the; internal <-> external transformation; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:214,Security,access,accessed,214,"/** API class for the user interaction with the parameters;; serves as input to the minimizer as well as output from it;; users can interact: Fix/release parameters, set values and errors, etc.;; parameters can be accessed via their Parameter number (determined; internally by Minuit and followed the order how the parameters are created); or via their user-specified Name (10 character string).; Minuit has also an internal parameter number which is used during the minimization; (the fix parameter are skipped). The parameter number used in this class is the external; one. The class ROOT::Minuit2::MnUserTransformation is used to keep the; internal <-> external transformation; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:4,Security,access,access,4,"/// access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:29,Availability,error,errors,29,"/// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:4,Security,access,access,4,"/// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:4,Security,access,access,4,"/// access to single Parameter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:36,Availability,Error,Error,36,"/// Add free Parameter Name, Value, Error",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h:12,Integrability,interface,interface,12,"// maintain interface with const char * for backward compatibility",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:183,Availability,error,errors,183,//_____________________________________________________________________________; /**; class which holds the external user and/or internal Minuit representation; of the parameters and errors;; transformation internal <-> external on demand;; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:20,Integrability,interface,interface,20,"/** facade: forward interface of MnUserParameters and MnUserTransformation */; // access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:82,Security,access,access,82,"/** facade: forward interface of MnUserParameters and MnUserTransformation */; // access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:28,Availability,error,errors,28,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:3,Security,access,access,3,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:3,Security,access,access,3,"// access to single Parameter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h:12,Integrability,interface,interface,12,"// maintain interface with const char * for backward compatibility",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserParameterState.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserParameterState.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:65,Performance,cache,cache,65,"//#ifdef MINUIT2_THREAD_SAFE; // thread-safe version (do not use cache)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:40,Safety,safe,safe,40,"//#ifdef MINUIT2_THREAD_SAFE; // thread-safe version (do not use cache)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:22,Safety,safe,safe,22,"//#else // not thread safe; // const std::vector<double>& operator()(const MnAlgebraicVector&) const;; //#endif; // Index = internal Parameter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:14,Integrability,interface,interface,14,/** forwarded interface */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:29,Availability,error,errors,29,"/// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:4,Security,access,access,4,"/// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:3,Security,access,access,3,"// access to single Parameter",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:56,Testability,assert,assert,56,"// convert Name into external number of Parameter (will assert if parameter is not found)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:56,Testability,assert,assert,56,"// convert external number into Name of Parameter (will assert if index is out of range)",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h:12,Integrability,interface,interface,12,"// maintain interface with const char * for backward compatibility",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/MnUserTransformation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/MnUserTransformation.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Numerical2PGradientCalculator.h:11,Performance,perform,performing,11,/**; class performing the numerical gradient calculation; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/Numerical2PGradientCalculator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/Numerical2PGradientCalculator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:272,Modifiability,INHERIT,INHERITS,272,"/**. Function which has parameters. For example, one could define; a one-dimensional Gaussian, by considering x as an input coordinate; for the evaluation of the function, and the mean and the square root; of the variance as parameters.; <p>; AS OF NOW PARAMETRICFUNCTION INHERITS FROM FCNBASE INSTEAD OF; GENERICFUNCTION. THIS IS ONLY BECAUSE NUMERICAL2PGRADIENTCALCULATOR; NEEDS AN FCNBASE OBJECT AND WILL BE CHANGED!!!!!!!!!!!!!!!!. @ingroup Minuit. \todo ParametricFunction and all the classes that inherit from it; are inheriting also FCNBase so that the Gradient calculation has; the Up() member function. That is not really good... */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:503,Modifiability,inherit,inherit,503,"/**. Function which has parameters. For example, one could define; a one-dimensional Gaussian, by considering x as an input coordinate; for the evaluation of the function, and the mean and the square root; of the variance as parameters.; <p>; AS OF NOW PARAMETRICFUNCTION INHERITS FROM FCNBASE INSTEAD OF; GENERICFUNCTION. THIS IS ONLY BECAUSE NUMERICAL2PGRADIENTCALCULATOR; NEEDS AN FCNBASE OBJECT AND WILL BE CHANGED!!!!!!!!!!!!!!!!. @ingroup Minuit. \todo ParametricFunction and all the classes that inherit from it; are inheriting also FCNBase so that the Gradient calculation has; the Up() member function. That is not really good... */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:524,Modifiability,inherit,inheriting,524,"/**. Function which has parameters. For example, one could define; a one-dimensional Gaussian, by considering x as an input coordinate; for the evaluation of the function, and the mean and the square root; of the variance as parameters.; <p>; AS OF NOW PARAMETRICFUNCTION INHERITS FROM FCNBASE INSTEAD OF; GENERICFUNCTION. THIS IS ONLY BECAUSE NUMERICAL2PGRADIENTCALCULATOR; NEEDS AN FCNBASE OBJECT AND WILL BE CHANGED!!!!!!!!!!!!!!!!. @ingroup Minuit. \todo ParametricFunction and all the classes that inherit from it; are inheriting also FCNBase so that the Gradient calculation has; the Up() member function. That is not really good... */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:5,Security,Access,Accessor,5,/**. Accessor for the state of the parameters. @return vector containing the present Parameter settings. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:5,Security,Access,Accessor,5,/**. Accessor for the number of parameters. @return the number of function parameters. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:50,Modifiability,inherit,inherited,50,"// Why do I need to declare it here, it should be inherited without; // any problems, no?; /**. Evaluates the function with the given coordinates. @param x vector containing the input coordinates. @return the result of the function evaluation with the given; coordinates. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:81,Modifiability,variab,variables,81,/**. Member function returning the Gradient of the function with respect; to its variables (but without including gradients with respect to; its internal parameters). @param x vector containing the coordinates of the point where the; Gradient is to be calculated. @return the Gradient vector of the function at the given point. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h:218,Usability,clear,clear,218,"/**. The vector containing the parameters of the function; It is mutable for ""historical reasons"" as in the hierarchy; methods and classes are const and all the implications of changing; them back to non-const are not clear. */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ParametricFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ParametricFunction.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ScanBuilder.h:4,Performance,Perform,Performs,4,"/** Performs a minimization using the simplex method of Nelder and Mead; (ref. Comp. J. 7, 308 (1965)).; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ScanBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ScanBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ScanBuilder.h:38,Usability,simpl,simplex,38,"/** Performs a minimization using the simplex method of Nelder and Mead; (ref. Comp. J. 7, 308 (1965)).; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/ScanBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/ScanBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexBuilder.h:4,Performance,Perform,Performs,4,"/** Performs a minimization using the simplex method of Nelder and Mead; (ref. Comp. J. 7, 308 (1965)).; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/SimplexBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexBuilder.h:38,Usability,simpl,simplex,38,"/** Performs a minimization using the simplex method of Nelder and Mead; (ref. Comp. J. 7, 308 (1965)).; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/SimplexBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexMinimizer.h:135,Usability,Simpl,Simplex,135,//_____________________________________________________________; /**; Class implementing the required methods for a minimization using Simplex.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class; */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/SimplexMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexParameters.h:65,Modifiability,evolve,evolve,65,"/**; class describing the simplex set of points (f(x), x ) which evolve during the minimization; iteration process.; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/SimplexParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexParameters.h:26,Usability,simpl,simplex,26,"/**; class describing the simplex set of points (f(x), x ) which evolve during the minimization; iteration process.; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/SimplexParameters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexParameters.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexSeedGenerator.h:14,Usability,Simpl,Simplex,14,/**; generate Simplex starting point (state); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/SimplexSeedGenerator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/SimplexSeedGenerator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h:74,Performance,perform,performance,74,"// comment out this line and recompile if you want to gain additional; // performance (the gain is mainly for ""simple"" functions which are easy; // to calculate and vanishes quickly if going to cost-intensive functions); // the library is no longer thread save however",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/StackAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h:111,Usability,simpl,simple,111,"// comment out this line and recompile if you want to gain additional; // performance (the gain is mainly for ""simple"" functions which are easy; // to calculate and vanishes quickly if going to cost-intensive functions); // the library is no longer thread save however",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/StackAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h:137,Energy Efficiency,allocate,allocated,137,"/** StackAllocator controls the memory allocation/deallocation of Minuit. If; _MN_NO_THREAD_SAVE_ is defined, memory is taken from a pre-allocated piece; of heap memory which is then used like a stack, otherwise via standard; malloc/free. Note that defining _MN_NO_THREAD_SAVE_ makes the code thread-; unsave. The gain in performance is mainly for cost-cheap FCN functions.; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/StackAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h:322,Performance,perform,performance,322,"/** StackAllocator controls the memory allocation/deallocation of Minuit. If; _MN_NO_THREAD_SAVE_ is defined, memory is taken from a pre-allocated piece; of heap memory which is then used like a stack, otherwise via standard; malloc/free. Note that defining _MN_NO_THREAD_SAVE_ makes the code thread-; unsave. The gain in performance is mainly for cost-cheap FCN functions.; */",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/StackAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h:30,Energy Efficiency,Allocate,Allocate,30,"// std::cout<<""StackAllocator Allocate ""<<default_size<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/StackAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h:21,Energy Efficiency,allocate,allocated,21,"// deallocating last allocated",MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/StackAllocator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/StackAllocator.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/VariableMetricBuilder.h:91,Availability,error,error,91,/**; Build (find) function minimum using the Variable Metric method (MIGRAD); Two possible error updators can be chosen; - Davidon : this is the standard formula used in Migrad; - BFGS this is the new formula based on BFGS algorithm; (see Broyden–Fletcher–Goldfarb–Shanno algorithm; https://en.wikipedia.org/wiki/Broyden–Fletcher–Goldfarb–Shanno_algorithm ); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/VariableMetricBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/VariableMetricBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/VariableMetricBuilder.h:45,Modifiability,Variab,Variable,45,/**; Build (find) function minimum using the Variable Metric method (MIGRAD); Two possible error updators can be chosen; - Davidon : this is the standard formula used in Migrad; - BFGS this is the new formula based on BFGS algorithm; (see Broyden–Fletcher–Goldfarb–Shanno algorithm; https://en.wikipedia.org/wiki/Broyden–Fletcher–Goldfarb–Shanno_algorithm ); */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/VariableMetricBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/VariableMetricBuilder.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/VariableMetricMinimizer.h:142,Modifiability,Variab,Variable,142,//______________________________________________________________________________; /**; Instantiates the SeedGenerator and MinimumBuilder for; Variable Metric Minimization method.; API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. */,MatchSource.CODE_COMMENT,math/minuit2/inc/Minuit2/VariableMetricMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/inc/Minuit2/VariableMetricMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx:72,Deployability,update,update,72,"// define here a square matrix that it is needed for computing the BFGS update; // define just the class, no need for defining operations as done for the Symmetric matrices; // since the square matrix will be converted in a symmetric one afterwards",MatchSource.CODE_COMMENT,math/minuit2/src/BFGSErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx:3,Deployability,update,update,3,"// update of the covarianze matrix (BFGS formula, see Tutorial, par. 4.8 pag 26); // in case of delgam > gvg (PHI > 1) use rank one formula; // see par 4.10 pag 30",MatchSource.CODE_COMMENT,math/minuit2/src/BFGSErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx:13,Availability,Error,Error,13,"// return s0.Error();",MatchSource.CODE_COMMENT,math/minuit2/src/BFGSErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx:11,Deployability,update,update,11,"// compute update formula for BFGS; // see wikipedia https://en.wikipedia.org/wiki/Broyden–Fletcher–Goldfarb–Shanno_algorithm; // need to compute outer product dg . dx and it is not symmetric anymore",MatchSource.CODE_COMMENT,math/minuit2/src/BFGSErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/BFGSErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CombinedMinimumBuilder.cxx:68,Usability,Simpl,Simplex,68,"// find minimum using combined method; // (Migrad then if fails try Simplex and then Migrad again)",MatchSource.CODE_COMMENT,math/minuit2/src/CombinedMinimumBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/CombinedMinimumBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:3,Deployability,update,update,3,"// update of the covarianze matrix (Davidon formula, see Tutorial, par. 4.8 pag 26); // in case of delgam > gvg (PHI > 1) use rank one formula; // see par 4.10 pag 30; // ( Tutorial: https://seal.web.cern.ch/seal/documents/minuit/mntutorial.pdf )",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:173,Availability,Error,Error,173,"/*; MinimumError DavidonErrorUpdator::Update(const MinimumState& s0,; const MinimumParameters& p1,; const FunctionGradient& g1) const {. const MnAlgebraicSymMatrix& v0 = s0.Error().InvHessian();; MnAlgebraicVector dx = p1.Vec() - s0.Vec();; MnAlgebraicVector dg = g1.Vec() - s0.Gradient().Vec();. double delgam = inner_product(dx, dg);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( ",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:2241,Availability,Error,Error,2241,"g);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_productn(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; //. double sum_upd = sum_of_elements(vUpd);; vUpd += v0;. // MnAlgebraicSymMatrix V1 = v0 + vUpd;. double dcov =; 0.5*(s0.Error().Dcovar() + sum_upd/sum_of_elements(vUpd));. return MinimumError(vUpd, dcov);; }; */",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:38,Deployability,Update,Update,38,"/*; MinimumError DavidonErrorUpdator::Update(const MinimumState& s0,; const MinimumParameters& p1,; const FunctionGradient& g1) const {. const MnAlgebraicSymMatrix& v0 = s0.Error().InvHessian();; MnAlgebraicVector dx = p1.Vec() - s0.Vec();; MnAlgebraicVector dg = g1.Vec() - s0.Gradient().Vec();. double delgam = inner_product(dx, dg);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( ",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:1419,Deployability,Update,Update,1419,"g);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_productn(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; //. double sum_upd = sum_of_elements(vUpd);; vUpd += v0;. // MnAlgebraicSymMatrix V1 = v0 + vUpd;. double dcov =; 0.5*(s0.Error().Dcovar() + sum_upd/sum_of_elements(vUpd));. return MinimumError(vUpd, dcov);; }; */",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:1635,Deployability,Update,Update,1635,"g);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_productn(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; //. double sum_upd = sum_of_elements(vUpd);; vUpd += v0;. // MnAlgebraicSymMatrix V1 = v0 + vUpd;. double dcov =; 0.5*(s0.Error().Dcovar() + sum_upd/sum_of_elements(vUpd));. return MinimumError(vUpd, dcov);; }; */",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:1796,Deployability,Update,Update,1796,"g);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_productn(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; //. double sum_upd = sum_of_elements(vUpd);; vUpd += v0;. // MnAlgebraicSymMatrix V1 = v0 + vUpd;. double dcov =; 0.5*(s0.Error().Dcovar() + sum_upd/sum_of_elements(vUpd));. return MinimumError(vUpd, dcov);; }; */",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx:1933,Deployability,Update,Update,1933,"g);; double gvg = similarity(dg, v0);. // std::cout<<""delgam= ""<<delgam<<"" gvg= ""<<gvg<<std::endl;; MnAlgebraicVector vg = v0*dg;; // MnAlgebraicSymMatrix vUpd(v0.Nrow());. // MnAlgebraicSymMatrix dd = ( 1./delgam )*outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = ( 1./gvg )*outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // MnAlgebraicSymMatrix vUpd = ( 1./delgam )*outer_product(dx) - ( 1./gvg )*outer_product(vg);; MnAlgebraicSymMatrix vUpd = Outer_product(dx)/delgam - Outer_product(vg)/gvg;. if(delgam > gvg) {; // dx *= ( 1./delgam );; // vg *= ( 1./gvg );; // MnAlgebraicVector flnu = dx - vg;; // MnAlgebraicSymMatrix tmp = Outer_product(flnu);; // tmp *= gvg;; // vUpd = vUpd + tmp;; vUpd += gvg*outer_product(dx/delgam - vg/gvg);; }. //; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; //; //; // double phi = delgam/(delgam - gvg);. // MnAlgebraicSymMatrix vUpd(v0.Nrow());; // if(phi < 0) {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_product(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; // if(phi > 1) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // }; //. //; // if(delgam > gvg) {; // // rank-1 Update; // MnAlgebraicVector tmp = dx - vg;; // vUpd = Outer_product(tmp);; // vUpd *= ( 1./(delgam - gvg) );; // } else {; // // rank-2 Update; // MnAlgebraicSymMatrix dd = Outer_product(dx);; // dd *= ( 1./delgam );; // MnAlgebraicSymMatrix VggV = Outer_productn(vg);; // VggV *= ( 1./gvg );; // vUpd = dd - VggV;; // }; //. double sum_upd = sum_of_elements(vUpd);; vUpd += v0;. // MnAlgebraicSymMatrix V1 = v0 + vUpd;. double dcov =; 0.5*(s0.Error().Dcovar() + sum_upd/sum_of_elements(vUpd));. return MinimumError(vUpd, dcov);; }; */",MatchSource.CODE_COMMENT,math/minuit2/src/DavidonErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/DavidonErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:59,Availability,Error,Error,59,"// double edm = Estimator().Estimate(seed.Gradient(), seed.Error());",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:22,Availability,error,error,22,"// call always Hesse (error matrix from Fumili is never accurate since is approximate)",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:264,Availability,Error,Error,264,"// // recalculate the gradient using the numerical gradient calculator; // Numerical2PGradientCalculator ngc(fcn, min.Seed().Trafo(), strategy);; // FunctionGradient ng = ngc( min.State().Parameters() );; // MinimumState tmp( min.State().Parameters(), min.State().Error(), ng, min.State().Edm(),; // min.State().NFcn() );",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:377,Testability,test,tests,377,"// end loop on iterations; // ? need a maximum here (or max of function calls is enough ? ); // continnue iteration (re-calculate function Minimum if edm IS NOT sufficient); // no need to check that hesse calculation is done (if isnot done edm is OK anyway); // count the pass to exit second time when function Minimum is invalid; // increase by 20% maxfcn for doing some more tests",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:1050,Availability,Error,Error-prone,1050,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:402,Modifiability,inherit,inherit,402,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:466,Modifiability,inherit,inherit,466,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:510,Modifiability,inherit,inheritance,510,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:12,Performance,perform,performing,12,"// function performing the minimum searches using the FUMILI algorithm; // after the modification when I iterate on this functions, so it can be called many times,; // the seed is used here only to get precision and construct the returned FunctionMinimum object; /*; Three options were possible:. 1) create two parallel and completely separate hierarchies, in which case; the FumiliMinimizer would NOT inherit from ModularFunctionMinimizer,; FumiliBuilder would not inherit from MinimumBuilder etc. 2) Use the inheritance (base classes of ModularFunctionMinimizer,; MinimumBuilder etc), but recreate the member functions Minimize() and; Minimum() respectively (naming them for example minimize2() and; minimum2()) so that they can take FumiliFCNBase as Parameter instead FCNBase; (otherwise one wouldn't be able to call the Fumili-specific methods). 3) Cast in the daughter classes derived from ModularFunctionMinimizer,; MinimumBuilder. The first two would mean to duplicate all the functionality already existent,; which is a very bad practice and Error-prone. The third one is the most; elegant and effective solution, where the only constraint is that the user; must know that they have to pass a subclass of FumiliFCNBase to the FumiliMinimizer; and not just a subclass of FCNBase.; BTW, the first two solutions would have meant to recreate also a parallel; structure for MnFcn...; **/; // const FumiliFCNBase* tmpfcn = dynamic_cast<const FumiliFCNBase*>(&(fcn.Fcn()));",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:8,Availability,Error,Error,8,"// move Error updator after Gradient since the Value is cached inside",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:56,Performance,cache,cached,56,"// move Error updator after Gradient since the Value is cached inside",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:31,Safety,avoid,avoid,31,"// if close to minimum stop to avoid oscillations around minimum value",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:29,Availability,Error,Error,29,"// std::cout<<""result.back().Error().Dcovar()= ""<<result.back().Error().Dcovar()<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx:64,Availability,Error,Error,64,"// std::cout<<""result.back().Error().Dcovar()= ""<<result.back().Error().Dcovar()<<std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx:36,Modifiability,variab,variable,36,"// dummy methods to suppress unused variable warnings; // this member function should never be called within; // the Fumili method...",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx:17,Availability,error,error,17,"// calculate the error matrix using approximation of Fumili; // use only first derivatives (see tutorial par. 5.1,5.2); // The Fumili Hessian is provided by the FumiliGradientCalculator class; // we apply also the Marquard lambda factor to increase weight of diagonal term; // as suggester in Numerical Receipt for Marquard method; // need to downcast to FumiliGradientCalculator",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx:343,Availability,down,downcast,343,"// calculate the error matrix using approximation of Fumili; // use only first derivatives (see tutorial par. 5.1,5.2); // The Fumili Hessian is provided by the FumiliGradientCalculator class; // we apply also the Marquard lambda factor to increase weight of diagonal term; // as suggester in Numerical Receipt for Marquard method; // need to downcast to FumiliGradientCalculator",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx:43,Safety,avoid,avoid,43,"// should use DBL_MIN; // put a cut off to avoid zero on diagonals",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliErrorUpdator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliErrorUpdator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliGradientCalculator.cxx:14,Integrability,interface,interface,14,"// Needed for interface of base class.",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:51,Availability,down,downcast,51,"// for Fumili implement Minimize here because need downcast",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:3,Availability,down,downcast,3,"// downcast fcn; // std::cout << ""FCN type "" << typeid(&fcn).Name() << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:34,Integrability,interface,interface,34,"// Minimize using Fumili. Case of interface is a function with gradient.; // Normally other method is used - probably this could be removed (t.b.i.); // need MnUserFcn",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx:3,Availability,down,downcast,3,"// downcast fcn",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx:6,Safety,avoid,avoid,6,"// to avoid getting infinity and nan's",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx:6,Safety,avoid,avoid,6,"// to avoid summing infinite and nan later when calculating the Hessian",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx:3,Safety,avoid,avoid,3,"// avoid that dfk*dfj are one small and one huge so I get a nan; // to avoid summing infinite and nan later when calculating the Hessian",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx:71,Safety,avoid,avoid,71,"// avoid that dfk*dfj are one small and one huge so I get a nan; // to avoid summing infinite and nan later when calculating the Hessian",MatchSource.CODE_COMMENT,math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/FumiliStandardMaximumLikelihoodFCN.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/HessianGradientCalculator.cxx:3,Integrability,interface,interface,3,"// interface of the base class. Use DeltaGradient for op.",MatchSource.CODE_COMMENT,math/minuit2/src/HessianGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/HessianGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/HessianGradientCalculator.cxx:58,Deployability,update,update,58,"// const MnAlgebraicVector& gstep = Gradient.Gstep();; // update also gradient step sizes",MatchSource.CODE_COMMENT,math/minuit2/src/HessianGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/HessianGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/HessianGradientCalculator.cxx:8,Deployability,update,update,8,"// LM : update also the step sizes",MatchSource.CODE_COMMENT,math/minuit2/src/HessianGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/HessianGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/InitialGradientCalculator.cxx:14,Integrability,interface,interface,14,"// Base class interface",MatchSource.CODE_COMMENT,math/minuit2/src/InitialGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/InitialGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/LaOuterProduct.cxx:57,Integrability,rout,routine,57,"// function performing outer product using mndspr (DSPR) routine from BLAS",MatchSource.CODE_COMMENT,math/minuit2/src/LaOuterProduct.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/LaOuterProduct.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/LaOuterProduct.cxx:12,Performance,perform,performing,12,"// function performing outer product using mndspr (DSPR) routine from BLAS",MatchSource.CODE_COMMENT,math/minuit2/src/LaOuterProduct.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/LaOuterProduct.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:39,Integrability,message,message,39,"// switch off Minuit2 printing of INFO message (cut off is 1001)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:38,Integrability,depend,depending,38,"// Default constructor implementation depending on minimizer type",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:50,Usability,SIMPL,SIMPLEX,50,"// std::cout << ""Minuit2Minimizer: minimize using SIMPLEX "" << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:3,Usability,clear,clear,3,"// clear also the function minimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:7,Modifiability,variab,variables,7,"// set variables",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:14,Modifiability,variab,variable,14,"// set a free variable.; // Add the variable if not existing otherwise set value if exists already; // this is implemented in MnUserParameterState::Add; // if index is wrong (i.e. variable already exists but with a different index return false) but; // value is set for corresponding variable name; // std::cout << "" add parameter "" << name << "" "" << val << "" step "" << step << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:36,Modifiability,variab,variable,36,"// set a free variable.; // Add the variable if not existing otherwise set value if exists already; // this is implemented in MnUserParameterState::Add; // if index is wrong (i.e. variable already exists but with a different index return false) but; // value is set for corresponding variable name; // std::cout << "" add parameter "" << name << "" "" << val << "" step "" << step << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:180,Modifiability,variab,variable,180,"// set a free variable.; // Add the variable if not existing otherwise set value if exists already; // this is implemented in MnUserParameterState::Add; // if index is wrong (i.e. variable already exists but with a different index return false) but; // value is set for corresponding variable name; // std::cout << "" add parameter "" << name << "" "" << val << "" step "" << step << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:284,Modifiability,variab,variable,284,"// set a free variable.; // Add the variable if not existing otherwise set value if exists already; // this is implemented in MnUserParameterState::Add; // if index is wrong (i.e. variable already exists but with a different index return false) but; // value is set for corresponding variable name; // std::cout << "" add parameter "" << name << "" "" << val << "" step "" << step << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:23,Modifiability,variab,variable,23,"// add a lower bounded variable",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:23,Modifiability,variab,variable,23,"// add a upper bounded variable",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:22,Modifiability,variab,variable,22,"// add a double bound variable",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:15,Modifiability,variab,variable,15,"// add a fixed variable; // need a step size otherwise treated as a constant; // use 10%",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:14,Modifiability,variab,variable,14,"// return the variable name",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:14,Modifiability,variab,variable,14,"// return the variable index; // check if variable exist",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:42,Modifiability,variab,variable,42,"// return the variable index; // check if variable exist",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:17,Modifiability,variab,variable,17,"// set value for variable ivar (only for existing parameters)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:17,Modifiability,variab,variable,17,"// set value for variable ivar (only for existing parameters)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:36,Modifiability,variab,variable,36,"// set the step-size of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,Modifiability,variab,variable,33,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,Modifiability,variab,variable,33,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,Modifiability,variab,variable,33,"// set the limits of an existing variable; // parameter must exist or return false",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:19,Modifiability,variab,variable,19,"// Fix an existing variable",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:3,Deployability,Release,Release,3,"// Release an existing variable",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:23,Modifiability,variab,variable,23,"// Release an existing variable",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:12,Modifiability,variab,variable,12,"// query if variable is fixed",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:12,Modifiability,variab,variable,12,"// retrieve variable settings (all set info on the variable)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:51,Modifiability,variab,variable,51,"// retrieve variable settings (all set info on the variable)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:38,Integrability,interface,interface,38,"// for Fumili the fit method function interface is required",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:38,Integrability,interface,interface,38,"// for Fumili the fit method function interface is required",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:3,Performance,perform,perform,3,"// perform the minimization; // store a copy of FunctionMinimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:19,Integrability,message,messages,19,"// internal minuit messages",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:179,Availability,error,error,179,"// check if Hesse needs to be run. We do it when is requested (IsValidError() == true , set by SetParabError(true) in fitConfig); // (IsValidError() means the flag to get correct error from the Minimizer is set (Minimizer::SetValidError()); // AND when we have a valid minimum,; // AND when the the current covariance matrix is estimated using the iterative approximation (Dcovar != 0 , i.e. Hesse has not computed before)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:44,Availability,error,errors,44,"// copy minimum state (parameter values and errors)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:19,Integrability,message,message,19,"// print a warning message in case something is not ok; // this for example is case when Covar was made posdef and fStatus=3",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:10,Availability,error,error,10,"// return error at minimum (set to zero for fixed and constant params)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,Availability,avail,available,11,"// no info available when minimization has failed",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,Availability,avail,available,11,"// no info available when minimization has failed",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,Availability,avail,available,11,"// no info available when minimization has failed",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,Availability,avail,available,11,"// no info available when minimization has failed",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:11,Availability,avail,available,11,"// no info available when minimization has failed or has some problems",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:20,Availability,error,error,20,"// return the minos error for parameter i; // if a minimum does not exist an error is returned; // runopt is a flag which specifies if only lower or upper error needs to be run; // if runopt = 0 both, = 1 only lower, + 2 only upper errors",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:77,Availability,error,error,77,"// return the minos error for parameter i; // if a minimum does not exist an error is returned; // runopt is a flag which specifies if only lower or upper error needs to be run; // if runopt = 0 both, = 1 only lower, + 2 only upper errors",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:155,Availability,error,error,155,"// return the minos error for parameter i; // if a minimum does not exist an error is returned; // runopt is a flag which specifies if only lower or upper error needs to be run; // if runopt = 0 both, = 1 only lower, + 2 only upper errors",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:232,Availability,error,errors,232,"// return the minos error for parameter i; // if a minimum does not exist an error is returned; // runopt is a flag which specifies if only lower or upper error needs to be run; // if runopt = 0 both, = 1 only lower, + 2 only upper errors",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:236,Availability,Toler,Tolerance,236,"// to run minos I need function minimum class; // redo minimization from current state; // ROOT::Minuit2::FunctionMinimum min =; // GetMinimizer()->Minimize(*GetFCN(),fState, ROOT::Minuit2::MnStrategy(strategy), MaxFunctionCalls(),; // Tolerance());; // fState = min.UserState();",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:6,Availability,error,error,6,"// if error def has been changed update it in FunctionMinimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,Deployability,update,update,33,"// if error def has been changed update it in FunctionMinimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:3,Deployability,release,release,3,"// release parameter that was fixed in the returned state from Minos",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:48,Availability,error,error,48,"// run again Minos from new Minimum (also lower error needs to be re-computed)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:13,Availability,toler,tolerance,13,"// now input tolerance for migrad calls inside Minos (MnFunctionCross); // before it was fixed to 0.05; // cut off too small tolerance (they are not needed)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:125,Availability,toler,tolerance,125,"// now input tolerance for migrad calls inside Minos (MnFunctionCross); // before it was fixed to 0.05; // cut off too small tolerance (they are not needed)",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:35,Availability,error,error,35,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:155,Availability,error,error,155,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:302,Availability,error,error,302,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:337,Availability,error,error,337,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:367,Availability,error,error,367,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:388,Availability,error,error,388,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:41,Integrability,message,message,41,"// debug result of Minos; // print error message in Minos; // Note that the only invalid condition can happen when the (npar-1) minimization fails; // The error is also invalid when the maximum number of calls is reached or a new function minimum is found; // in case of the parameter at the limit the error is not invalid.; // When the error is invalid the returned error is the Hessian error.",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:36,Availability,error,error,36,"// print message in case of invalid error also in printLevel0",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:9,Integrability,message,message,9,"// print message in case of invalid error also in printLevel0",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:62,Availability,error,errors,62,"// set status according to bit; // bit 1: lower invalid Minos errors; // bit 2: upper invalid Minos error; // bit 3: invalid because max FCN; // bit 4 : invalid because a new minimum has been found",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:100,Availability,error,error,100,"// set status according to bit; // bit 1: lower invalid Minos errors; // bit 2: upper invalid Minos error; // bit 3: invalid because max FCN; // bit 4 : invalid because a new minimum has been found",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:32,Deployability,update,update,32,"// in case of new minimum found update also the minimum state",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:166,Availability,error,error,166,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:183,Availability,error,errors,183,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:21,Modifiability,variab,variable,21,"// scan a parameter (variable) around the minimum value; // the parameters must have been set before; // if xmin=0 && xmax == 0 by default scan around 2 sigma of the error; // if the errors are also zero then scan from min and max of parameter range",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:6,Availability,error,error,6,"// if error def has been changed update it in FunctionMinimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,Deployability,update,update,33,"// if error def has been changed update it in FunctionMinimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:33,Availability,toler,tolerance,33,"// eventually one should specify tolerance in contours",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:86,Deployability,update,updated,86,"// find Hessian (full second derivative calculations); // the contained state will be updated with the Hessian result; // in case a function minimum exists and is valid the result will be; // appended in the function minimum",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:202,Deployability,update,updated,202,"// if (PrintLevel() >= 3) {; // std::cout << ""Minuit2Minimizer::Hesse - State before running Hesse "" << std::endl;; // std::cout << fState << std::endl;; // }; // run hesse and function minimum will be updated with Hesse result",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:3,Deployability,update,update,3,"// update user state",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:18,Availability,error,error,18,"// if false means error is not valid and this is due to a failure in Hesse; // update minimizer error status",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:58,Availability,failure,failure,58,"// if false means error is not valid and this is due to a failure in Hesse; // update minimizer error status",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:96,Availability,error,error,96,"// if false means error is not valid and this is due to a failure in Hesse; // update minimizer error status",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:79,Deployability,update,update,79,"// if false means error is not valid and this is due to a failure in Hesse; // update minimizer error status",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:18,Availability,error,error,18,"// information on error state can be retrieved only if fMinimum is available",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:67,Availability,avail,available,67,"// information on error state can be retrieved only if fMinimum is available",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:50,Availability,avail,available,50,"// return status of covariance matrix; //-1 - not available (inversion failed or Hesse failed); // 0 - available but not positive defined; // 1 - covariance only approximate; // 2 full matrix but forced pos def; // 3 full accurate matrix",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:103,Availability,avail,available,103,"// return status of covariance matrix; //-1 - not available (inversion failed or Hesse failed); // 0 - available but not positive defined; // 1 - covariance only approximate; // 2 full matrix but forced pos def; // 3 full accurate matrix",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:30,Availability,avail,available,30,"// case a function minimum is available",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx:24,Availability,avail,available,24,"// case fMinimum is not available - use state information",MatchSource.CODE_COMMENT,math/minuit2/src/Minuit2Minimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Minuit2Minimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:37,Availability,toler,tolerance,37,"// constructor from macfcn calls and tolerance",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:3,Testability,assert,assert,3,"// assert(npar > 0);",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:19,Integrability,interface,interface,19,"// facade: forward interface of MnUserParameters and MnUserTransformation; // via MnUserParameterState",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:3,Security,access,access,3,"// access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:28,Availability,error,errors,28,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:3,Security,access,access,3,"// access to parameters and errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:3,Security,access,access,3,"// access to single Parameter",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:17,Availability,error,error,17,"// set parameter error",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx:17,Modifiability,variab,variable,17,"// get number of variable parameters",MatchSource.CODE_COMMENT,math/minuit2/src/MnApplication.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnApplication.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnbins.cxx:497,Modifiability,variab,variables,497,"//*-*-*-*-*-*-*-*-*-*-*Compute reasonable histogram intervals*-*-*-*-*-*-*-*-*; //*-* ======================================; //*-* Function TO DETERMINE REASONABLE HISTOGRAM INTERVALS; //*-* GIVEN ABSOLUTE UPPER AND LOWER BOUNDS A1 AND A2; //*-* AND DESIRED MAXIMUM NUMBER OF BINS NAA; //*-* PROGRAM MAKES REASONABLE BINNING FROM BL TO BH OF WIDTH BWID; //*-* F. JAMES, AUGUST, 1974 , stolen for Minuit, 1988; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; /* Local variables */",MatchSource.CODE_COMMENT,math/minuit2/src/mnbins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnbins.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnbins.cxx:61,Integrability,ROUT,ROUTINE,61,"//*-*- IF NAA .EQ. -1 , PROGRAM USES BWID INPUT FROM CALLING ROUTINE",MatchSource.CODE_COMMENT,math/minuit2/src/mnbins.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnbins.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx:180,Availability,error,errors,180,"// calculate the contour passing the parameter index (px, py) and the number of requested points (>=4); // the fcn.UP() has to be set to the required value (see Minuit document on errors)",MatchSource.CODE_COMMENT,math/minuit2/src/MnContours.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx:56,Availability,toler,toler,56,"// double edmmax = 0.5*0.05*fFCN.Up()*1.e-3;; // double toler = 0.05;",MatchSource.CODE_COMMENT,math/minuit2/src/MnContours.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnContours.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx:68,Availability,error,error,68,"// squeeze MnUserCovariance class; // MnUserCovariance contains the error matrix. Need to invert first to get the hessian, then; // after having squeezed the hessian, need to invert again to get the new error matrix",MatchSource.CODE_COMMENT,math/minuit2/src/MnCovarianceSqueeze.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx:203,Availability,error,error,203,"// squeeze MnUserCovariance class; // MnUserCovariance contains the error matrix. Need to invert first to get the hessian, then; // after having squeezed the hessian, need to invert again to get the new error matrix",MatchSource.CODE_COMMENT,math/minuit2/src/MnCovarianceSqueeze.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx:23,Availability,error,error,23,"// squeeze the minimum error class; // Remove index-row on the Hessian matrix and the get the new correct error matrix; // (inverse of new Hessian)",MatchSource.CODE_COMMENT,math/minuit2/src/MnCovarianceSqueeze.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx:106,Availability,error,error,106,"// squeeze the minimum error class; // Remove index-row on the Hessian matrix and the get the new correct error matrix; // (inverse of new Hessian)",MatchSource.CODE_COMMENT,math/minuit2/src/MnCovarianceSqueeze.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnCovarianceSqueeze.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndasum.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mndasum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndasum.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndaxpy.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mndaxpy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndaxpy.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnddot.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mnddot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnddot.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndscal.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mndscal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndscal.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mndspmv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:2429,Deployability,update,updated,2429," with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* BETA - DOUBLE PRECISION. */; /* On entry, BETA specifies the scalar beta. When BETA is */; /* supplied as zero then Y need not be set on input. */; /* Unchanged on exit. */; /* Y - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCY ) ). */; /* Before entry, the incremented array Y must contain the n */; /* element vector y. On exit, Y is overwritten by the updated */; /* vector y. */; /* INCY - INTEGER. */; /* On entry, INCY specifies the increment for the Elements of */; /* Y. INCY must not be zero. */; /* Unchanged on exit. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspmv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:2622,Integrability,rout,routine,2622," with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* BETA - DOUBLE PRECISION. */; /* On entry, BETA specifies the scalar beta. When BETA is */; /* supplied as zero then Y need not be set on input. */; /* Unchanged on exit. */; /* Y - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCY ) ). */; /* Before entry, the incremented array Y must contain the n */; /* element vector y. On exit, Y is overwritten by the updated */; /* vector y. */; /* INCY - INTEGER. */; /* On entry, INCY specifies the increment for the Elements of */; /* Y. INCY must not be zero. */; /* Unchanged on exit. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspmv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:108,Performance,perform,performs,108,"/* .. Scalar Arguments .. */; /* .. Array Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* DSPMV performs the matrix-vector operation */; /* y := alpha*A*x + beta*y, */; /* where alpha and beta are scalars, x and y are n element vectors and */; /* A is an n by n symmetric matrix, supplied in packed form. */; /* Parameters */; /* ========== */; /* UPLO - CHARACTER*1. */; /* On entry, UPLO specifies whether the Upper or Lower */; /* triangular part of the matrix A is supplied in the packed */; /* array AP as follows: */; /* UPLO = 'U' or 'u' The Upper triangular part of A is */; /* supplied in AP. */; /* UPLO = 'L' or 'l' The Lower triangular part of A is */; /* supplied in AP. */; /* Unchanged on exit. */; /* N - INTEGER. */; /* On entry, N specifies the order of the matrix A. */; /* N must be at least zero. */; /* Unchanged on exit. */; /* ALPHA - DOUBLE PRECISION. */; /* On entry, ALPHA specifies the scalar alpha. */; /* Unchanged on exit. */; /* AP - DOUBLE PRECISION array of DIMENSION at least */; /* ( ( n*( n + 1 ) )/2 ). */; /* Before entry with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not ",MatchSource.CODE_COMMENT,math/minuit2/src/mndspmv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:3014,Testability,Test,Test,3014," with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* BETA - DOUBLE PRECISION. */; /* On entry, BETA specifies the scalar beta. When BETA is */; /* supplied as zero then Y need not be set on input. */; /* Unchanged on exit. */; /* Y - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCY ) ). */; /* Before entry, the incremented array Y must contain the n */; /* element vector y. On exit, Y is overwritten by the updated */; /* vector y. */; /* INCY - INTEGER. */; /* On entry, INCY specifies the increment for the Elements of */; /* Y. INCY must not be zero. */; /* Unchanged on exit. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspmv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx:81,Security,access,accessed,81,/* Start the operations. In this version the Elements of the array AP */; /* are accessed sequentially with one pass through AP. */; /* First form y := beta*y. */,MatchSource.CODE_COMMENT,math/minuit2/src/mndspmv.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspmv.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:1786,Deployability,update,updated,1786,"ed in AP. */; /* Unchanged on exit. */; /* N - INTEGER. */; /* On entry, N specifies the order of the matrix A. */; /* N must be at least zero. */; /* Unchanged on exit. */; /* ALPHA - DOUBLE PRECISION. */; /* On entry, ALPHA specifies the scalar alpha. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* AP - DOUBLE PRECISION array of DIMENSION at least */; /* ( ( n*( n + 1 ) )/2 ). */; /* Before entry with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Upper triangular part of the */; /* updated matrix. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Lower triangular part of the */; /* updated matrix. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:2189,Deployability,update,updated,2189,"ed in AP. */; /* Unchanged on exit. */; /* N - INTEGER. */; /* On entry, N specifies the order of the matrix A. */; /* N must be at least zero. */; /* Unchanged on exit. */; /* ALPHA - DOUBLE PRECISION. */; /* On entry, ALPHA specifies the scalar alpha. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* AP - DOUBLE PRECISION array of DIMENSION at least */; /* ( ( n*( n + 1 ) )/2 ). */; /* Before entry with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Upper triangular part of the */; /* updated matrix. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Lower triangular part of the */; /* updated matrix. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:2225,Integrability,rout,routine,2225,"ed in AP. */; /* Unchanged on exit. */; /* N - INTEGER. */; /* On entry, N specifies the order of the matrix A. */; /* N must be at least zero. */; /* Unchanged on exit. */; /* ALPHA - DOUBLE PRECISION. */; /* On entry, ALPHA specifies the scalar alpha. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* AP - DOUBLE PRECISION array of DIMENSION at least */; /* ( ( n*( n + 1 ) )/2 ). */; /* Before entry with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Upper triangular part of the */; /* updated matrix. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Lower triangular part of the */; /* updated matrix. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:107,Performance,perform,performs,107,"/* .. Scalar Arguments .. */; /* .. Array Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* DSPR performs the symmetric rank 1 operation */; /* A := alpha*x*x' + A, */; /* where alpha is a real scalar, x is an n element vector and A is an */; /* n by n symmetric matrix, supplied in packed form. */; /* Parameters */; /* ========== */; /* UPLO - CHARACTER*1. */; /* On entry, UPLO specifies whether the Upper or Lower */; /* triangular part of the matrix A is supplied in the packed */; /* array AP as follows: */; /* UPLO = 'U' or 'u' The Upper triangular part of A is */; /* supplied in AP. */; /* UPLO = 'L' or 'l' The Lower triangular part of A is */; /* supplied in AP. */; /* Unchanged on exit. */; /* N - INTEGER. */; /* On entry, N specifies the order of the matrix A. */; /* N must be at least zero. */; /* Unchanged on exit. */; /* ALPHA - DOUBLE PRECISION. */; /* On entry, ALPHA specifies the scalar alpha. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* AP - DOUBLE PRECISION array of DIMENSION at least */; /* ( ( n*( n + 1 ) )/2 ). */; /* Before entry with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Upper triangular part of the */; /* updated matrix. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* con",MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:2617,Testability,Test,Test,2617,"ed in AP. */; /* Unchanged on exit. */; /* N - INTEGER. */; /* On entry, N specifies the order of the matrix A. */; /* N must be at least zero. */; /* Unchanged on exit. */; /* ALPHA - DOUBLE PRECISION. */; /* On entry, ALPHA specifies the scalar alpha. */; /* Unchanged on exit. */; /* X - DOUBLE PRECISION array of dimension at least */; /* ( 1 + ( n - 1 )*abs( INCX ) ). */; /* Before entry, the incremented array X must contain the n */; /* element vector x. */; /* Unchanged on exit. */; /* INCX - INTEGER. */; /* On entry, INCX specifies the increment for the Elements of */; /* X. INCX must not be zero. */; /* Unchanged on exit. */; /* AP - DOUBLE PRECISION array of DIMENSION at least */; /* ( ( n*( n + 1 ) )/2 ). */; /* Before entry with UPLO = 'U' or 'u', the array AP must */; /* contain the Upper triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 ) */; /* and a( 2, 2 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Upper triangular part of the */; /* updated matrix. */; /* Before entry with UPLO = 'L' or 'l', the array AP must */; /* contain the Lower triangular part of the symmetric matrix */; /* packed sequentially, column by column, so that AP( 1 ) */; /* contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 ) */; /* and a( 3, 1 ) respectively, and so on. On exit, the array */; /* AP is overwritten by the Lower triangular part of the */; /* updated matrix. */; /* Level 2 Blas routine. */; /* -- Written on 22-October-1986. */; /* Jack Dongarra, Argonne National Lab. */; /* Jeremy Du Croz, Nag Central Office. */; /* Sven Hammarling, Nag Central Office. */; /* Richard Hanson, Sandia National Labs. */; /* .. Parameters .. */; /* .. Local Scalars .. */; /* .. External Functions .. */; /* .. External Subroutines .. */; /* .. */; /* .. Executable Statements .. */; /* Test the input parameters. */; /* Parameter adjustments */",MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx:81,Security,access,accessed,81,/* Start the operations. In this version the Elements of the array AP */; /* are accessed sequentially with one pass through AP. */,MatchSource.CODE_COMMENT,math/minuit2/src/mndspr.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mndspr.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnEigen.cxx:3,Integrability,wrap,wrapper,3,"// wrapper to calculate eigenvalues of the covariance matrix using mneigen function",MatchSource.CODE_COMMENT,math/minuit2/src/MnEigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnEigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFumiliMinimize.cxx:3,Testability,assert,assert,3,"// assert(npar > 0);",MatchSource.CODE_COMMENT,math/minuit2/src/MnFumiliMinimize.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFumiliMinimize.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:122,Availability,toler,tolerance,122,"// evaluate crossing point where function is equal to MIN + UP,; // with direction pdir from values pmid; // tlr indicate tolerance and maxcalls maximum number of calls; // double edmmax = 0.5*0.001*toler*fFCN.Up();",MatchSource.CODE_COMMENT,math/minuit2/src/MnFunctionCross.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:199,Availability,toler,toler,199,"// evaluate crossing point where function is equal to MIN + UP,; // with direction pdir from values pmid; // tlr indicate tolerance and maxcalls maximum number of calls; // double edmmax = 0.5*0.001*toler*fFCN.Up();",MatchSource.CODE_COMMENT,math/minuit2/src/MnFunctionCross.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:3,Availability,toler,tolerance,3,"// tolerance used when calling Migrad",MatchSource.CODE_COMMENT,math/minuit2/src/MnFunctionCross.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:52,Safety,predict,prediction,52,"// convergence when F is within tlf of aim and next prediction; // of aopt is within tla of previous value of aopt",MatchSource.CODE_COMMENT,math/minuit2/src/MnFunctionCross.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx:3,Safety,avoid,avoid,3,"// avoid keeping a bad point nest time around",MatchSource.CODE_COMMENT,math/minuit2/src/MnFunctionCross.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnFunctionCross.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:3,Integrability,interface,interface,3,"// interface from MnUserParameterState; // create a new Minimum state and use that interface",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:83,Integrability,interface,interface,83,"// interface from MnUserParameterState; // create a new Minimum state and use that interface",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:3,Integrability,interface,interface,3,"// interface from FunctionMinimum to be used after minimization; // use last state from the minimization without the need to re-create a new state; // do not reset function calls and keep updating them",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:3,Deployability,update,update,3,"// update Function gradient with new G2 found",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:26,Availability,error,errors,26,"// calculate edm for good errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:12,Integrability,interface,interface,12,"// internal interface from MinimumState and MnUserTransformation; // Function who does the real Hessian calculations",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:72,Availability,error,error,72,"// get parameter name for i; // (need separate scope for avoiding compl error when declaring name)",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:57,Safety,avoid,avoiding,57,"// get parameter name for i; // (need separate scope for avoiding compl error when declaring name)",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:3,Deployability,update,update,3,"// update gradient and step values",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:26,Availability,error,errors,26,"// calculate edm for good errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx:2184,Availability,Toler,Tolerstp,2184,"ient().Grad();; MnAlgebraicVector dirin = st.Gradient().Gstep();; MnAlgebraicVector yy(n);; MnAlgebraicVector x = st.Parameters().Vec();. for(unsigned int i = 0; i < n; i++) {. double xtf = x(i);; double dmin = 8.*prec.Eps2()*std::fabs(xtf);; double d = std::fabs(gst(i));; if(d < dmin) d = dmin;; for(int icyc = 0; icyc < Ncycles(); icyc++) {; double sag = 0.;; double fs1 = 0.;; double fs2 = 0.;; for(int multpy = 0; multpy < 5; multpy++) {; x(i) = xtf + d;; fs1 = mfcn(x);; x(i) = xtf - d;; fs2 = mfcn(x);; x(i) = xtf;; sag = 0.5*(fs1+fs2-2.*amin);; if(sag > prec.Eps2()) break;; if(trafo.Parameter(i).HasLimits()) {; if(d > 0.5) {; std::cout<<""second derivative zero for Parameter ""<<i<<std::endl;; std::cout<<""return diagonal matrix ""<<std::endl;; for(unsigned int j = 0; j < n; j++) {; vhmat(j,j) = (g2(j) < prec.Eps2() ? 1. : 1./g2(j));; return MinimumError(vhmat, 1., false);; }; }; d *= 10.;; if(d > 0.5) d = 0.51;; continue;; }; d *= 10.;; }; if(sag < prec.Eps2()) {; std::cout<<""MnHesse: internal loop exhausted, return diagonal matrix.""<<std::endl;; for(unsigned int i = 0; i < n; i++); vhmat(i,i) = (g2(i) < prec.Eps2() ? 1. : 1./g2(i));; return MinimumError(vhmat, 1., false);; }; double g2bfor = g2(i);; g2(i) = 2.*sag/(d*d);; grd(i) = (fs1-fs2)/(2.*d);; gst(i) = d;; dirin(i) = d;; yy(i) = fs1;; double dlast = d;; d = std::sqrt(2.*aimsag/std::fabs(g2(i)));; if(trafo.Parameter(i).HasLimits()) d = std::min(0.5, d);; if(d < dmin) d = dmin;. // see if converged; if(std::fabs((d-dlast)/d) < Tolerstp()) break;; if(std::fabs((g2(i)-g2bfor)/g2(i)) < TolerG2()) break;; d = std::min(d, 10.*dlast);; d = std::max(d, 0.1*dlast);; }; vhmat(i,i) = g2(i);; }. //off-diagonal Elements; for(unsigned int i = 0; i < n; i++) {; x(i) += dirin(i);; for(unsigned int j = i+1; j < n; j++) {; x(j) += dirin(j);; double fs1 = mfcn(x);; double elem = (fs1 + amin - yy(i) - yy(j))/(dirin(i)*dirin(j));; vhmat(i,j) = elem;; x(j) -= dirin(j);; }; x(i) -= dirin(i);; }. return MinimumError(vhmat, 0.);; }; */",MatchSource.CODE_COMMENT,math/minuit2/src/MnHesse.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnHesse.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx:4,Performance,Perform,Perform,4,"/** Perform a line search from position defined by the vector st; along the direction step, where the length of vector step; gives the expected position of Minimum.; fcn is Value of function at the starting position ,; gdel (if non-zero) is df/dx along step at st.; Return a parabola point containing Minimum x position and y (function Value); - add a flag to control the debug; */",MatchSource.CODE_COMMENT,math/minuit2/src/MnLineSearch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx:21,Performance,Perform,Perform,21,"//*-*-*-*-*-*-*-*-*-*Perform a line search from position st along step *-*-*-*-*-*-*-*; //*-* =========================================; //*-* SLAMBG and ALPHA control the maximum individual steps allowed.; //*-* The first step is always =1. The max length of second step is SLAMBG.; //*-* The max size of subsequent steps is the maximum previous successful; //*-* step multiplied by ALPHA + the size of most recent successful step,; //*-* but cannot be smaller than SLAMBG.; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-",MatchSource.CODE_COMMENT,math/minuit2/src/MnLineSearch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx:4,Performance,Perform,Perform,4,"/** Perform a line search using a cubic interpolation using x0, x1 , df/dx(x0) and d2/dx(x0) (second derivative); This is used at the beginning when the second derivative is known to be negative; */",MatchSource.CODE_COMMENT,math/minuit2/src/MnLineSearch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx:19,Availability,toler,toler,19,"// double toler8 = toler;; // double slamax = slambg;; // double flast = f1;",MatchSource.CODE_COMMENT,math/minuit2/src/MnLineSearch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnLineSearch.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx:77,Integrability,rout,routine,77,"/* Local variables */; // integer inta, intb, zcode;; /* -- LAPACK auxiliary routine (version 2.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* January 31, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* LSAME returns .TRUE. if CA is the same letter as CB regardless of */; /* case. */; /* Arguments */; /* ========= */; /* CA (input) CHARACTER*1 */; /* CB (input) CHARACTER*1 */; /* CA and CB specify the single characters to be compared. */; /* ===================================================================== */; /* .. Intrinsic Functions .. */; /* .. */; /* .. Local Scalars .. */; /* .. */; /* .. Executable Statements .. */; /* Test if the characters are equal */",MatchSource.CODE_COMMENT,math/minuit2/src/mnlsame.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx:9,Modifiability,variab,variables,9,"/* Local variables */; // integer inta, intb, zcode;; /* -- LAPACK auxiliary routine (version 2.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* January 31, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* LSAME returns .TRUE. if CA is the same letter as CB regardless of */; /* case. */; /* Arguments */; /* ========= */; /* CA (input) CHARACTER*1 */; /* CB (input) CHARACTER*1 */; /* CA and CB specify the single characters to be compared. */; /* ===================================================================== */; /* .. Intrinsic Functions .. */; /* .. */; /* .. Local Scalars .. */; /* .. */; /* .. Executable Statements .. */; /* Test if the characters are equal */",MatchSource.CODE_COMMENT,math/minuit2/src/mnlsame.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx:773,Testability,Test,Test,773,"/* Local variables */; // integer inta, intb, zcode;; /* -- LAPACK auxiliary routine (version 2.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* January 31, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* LSAME returns .TRUE. if CA is the same letter as CB regardless of */; /* case. */; /* Arguments */; /* ========= */; /* CA (input) CHARACTER*1 */; /* CB (input) CHARACTER*1 */; /* CA and CB specify the single characters to be compared. */; /* ===================================================================== */; /* .. Intrinsic Functions .. */; /* .. */; /* .. Local Scalars .. */; /* .. */; /* .. Executable Statements .. */; /* Test if the characters are equal */",MatchSource.CODE_COMMENT,math/minuit2/src/mnlsame.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnlsame.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:45,Availability,Error,Error,45,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:98,Availability,error,errors,98,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:91,Deployability,update,update,91,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:45,Availability,Error,Error,45,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:98,Availability,error,errors,98,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:91,Deployability,update,update,91,"// construct from FCN + Minimum; // check if Error definition has been changed, in case re-update errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:82,Availability,error,errors,82,"// do Minos analysis given the parameter index returning a pair for (lower,upper) errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:13,Availability,error,error,13,"// get lower error for parameter par",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:9,Availability,error,error,9,"// upper error for parameter par",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:17,Availability,error,error,17,"// do full minos error analysis (lower + upper) for parameter par",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:127,Availability,toler,tolerance,127,"// get crossing value in the parameter direction :; // direction = + 1 upper value; // direction = -1 lower value; // pass now tolerance used for Migrad minimizations",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:7,Availability,error,error,7,"// get error matrix (methods return a copy)",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx:56,Modifiability,variab,variables,56,"// LM (29/04/08) bug: change should be done in internal variables; // set the initial value for the other parameters that we are going to fit in MnCross",MatchSource.CODE_COMMENT,math/minuit2/src/MnMinos.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnMinos.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPlot.cxx:8,Integrability,rout,routine,8,"// call routine from Fortran minuit (mnplot) to plot the vector of (x,y) points",MatchSource.CODE_COMMENT,math/minuit2/src/MnPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPlot.cxx:8,Integrability,rout,routine,8,"// call routine from Fortran minuit (mnplot) to plot the vector of (x,y) points + minimum values",MatchSource.CODE_COMMENT,math/minuit2/src/MnPlot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPlot.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:3,Integrability,interface,interface,3,"// interface from minimum state",MatchSource.CODE_COMMENT,math/minuit2/src/MnPosDef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:8,Availability,error,error,8,"// make error matrix positive defined returning a new corrected minimum error state",MatchSource.CODE_COMMENT,math/minuit2/src/MnPosDef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:72,Availability,error,error,72,"// make error matrix positive defined returning a new corrected minimum error state",MatchSource.CODE_COMMENT,math/minuit2/src/MnPosDef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:30,Modifiability,config,configurable,30,"// should this lower bound be configurable?",MatchSource.CODE_COMMENT,math/minuit2/src/MnPosDef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx:17,Availability,Error,Error,17,"// std::cout << ""Error matrix "" << err << std::endl;",MatchSource.CODE_COMMENT,math/minuit2/src/MnPosDef.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPosDef.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:96,Energy Efficiency,allocate,allocated,96,"// we don't use a std::vector or std::array here, because we want a mix of the two;; // a stack-allocated container with fixed capacity but dynamic size, i.e. the equivalent; // of static_vector from the Boost Container library",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:135,Availability,failure,failures,135,"// gShowPrefixStack determines how messages are printed, it acts on all threads;; // race conditions when writing to this do not cause failures",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:35,Integrability,message,messages,35,"// gShowPrefixStack determines how messages are printed, it acts on all threads;; // race conditions when writing to this do not cause failures",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:85,Performance,race condition,race conditions,85,"// gShowPrefixStack determines how messages are printed, it acts on all threads;; // race conditions when writing to this do not cause failures",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:42,Safety,safe,safe,42,"// writing to gPrefixFilter is not thread-safe, should be done only from main thread",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:103,Testability,log,logging,103,"// gPrintLevel must be thread-local, because it may be manipulated by a thread to; // temporarily turn logging on or off; Minuit2Minimizer does this, for example",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:39,Energy Efficiency,efficient,efficient,39,"// Filtering is not implemented a very efficient way to keep it simple, but the; // implementation ensures that the performance drop is opt-in. Only when filters are; // used there is a performance loss.; // The intended use case of filtering is for debugging, when highest performance; // does not matter. Filtering is only every attempted if the message passes the; // threshold level.; // Filtering is very fast when the filter is empty.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:348,Integrability,message,message,348,"// Filtering is not implemented a very efficient way to keep it simple, but the; // implementation ensures that the performance drop is opt-in. Only when filters are; // used there is a performance loss.; // The intended use case of filtering is for debugging, when highest performance; // does not matter. Filtering is only every attempted if the message passes the; // threshold level.; // Filtering is very fast when the filter is empty.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:116,Performance,perform,performance,116,"// Filtering is not implemented a very efficient way to keep it simple, but the; // implementation ensures that the performance drop is opt-in. Only when filters are; // used there is a performance loss.; // The intended use case of filtering is for debugging, when highest performance; // does not matter. Filtering is only every attempted if the message passes the; // threshold level.; // Filtering is very fast when the filter is empty.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:186,Performance,perform,performance,186,"// Filtering is not implemented a very efficient way to keep it simple, but the; // implementation ensures that the performance drop is opt-in. Only when filters are; // used there is a performance loss.; // The intended use case of filtering is for debugging, when highest performance; // does not matter. Filtering is only every attempted if the message passes the; // threshold level.; // Filtering is very fast when the filter is empty.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:274,Performance,perform,performance,274,"// Filtering is not implemented a very efficient way to keep it simple, but the; // implementation ensures that the performance drop is opt-in. Only when filters are; // used there is a performance loss.; // The intended use case of filtering is for debugging, when highest performance; // does not matter. Filtering is only every attempted if the message passes the; // threshold level.; // Filtering is very fast when the filter is empty.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:64,Usability,simpl,simple,64,"// Filtering is not implemented a very efficient way to keep it simple, but the; // implementation ensures that the performance drop is opt-in. Only when filters are; // used there is a performance loss.; // The intended use case of filtering is for debugging, when highest performance; // does not matter. Filtering is only every attempted if the message passes the; // threshold level.; // Filtering is very fast when the filter is empty.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:34,Integrability,message,message,34,"// Filtering works like grep, the message is shown if any of the filter strings match.; // To only match the beginning of the prefix, use ""^"". For example ""^MnHesse"" only; // matches direct execution of MnHesse, but not MnHesse called by MnMigrad.",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx:19,Availability,Error,Error,19,"// print the Minos Error",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrint.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrint.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrintImpl.cxx:12,Availability,error,error,12,"// use ROOT error reporting system",MatchSource.CODE_COMMENT,math/minuit2/src/MnPrintImpl.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnPrintImpl.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnScan.cxx:3,Performance,perform,perform,3,"// perform a scan of the function in the parameter par",MatchSource.CODE_COMMENT,math/minuit2/src/MnScan.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnScan.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnSeedGenerator.cxx:3,Deployability,update,update,3,"// update gradient using G2 from Hessian calculation",MatchSource.CODE_COMMENT,math/minuit2/src/MnSeedGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnSeedGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnteigen.cxx:9,Modifiability,variab,variables,9,/* Local variables */,MatchSource.CODE_COMMENT,math/minuit2/src/mnteigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnteigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnteigen.cxx:17,Energy Efficiency,power,power,17,/* Computing 2nd power */,MatchSource.CODE_COMMENT,math/minuit2/src/mnteigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnteigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnteigen.cxx:17,Energy Efficiency,power,power,17,/* Computing 2nd power */,MatchSource.CODE_COMMENT,math/minuit2/src/mnteigen.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnteigen.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mntplot.cxx:532,Modifiability,variab,variables,532,"//*-*-*-*Plots points in array xypt onto one page with labelled axes*-*-*-*-*; //*-* ===========================================================; //*-* NXYPT is the number of points to be plotted; //*-* XPT(I) = x-coord. of ith point; //*-* YPT(I) = y-coord. of ith point; //*-* CHPT(I) = character to be plotted at this position; //*-* the input point arrays XPT, YPT, CHPT are destroyed.; //*-*; //*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*; // char cdot[] = ""."";; // char cslash[] = ""/"";; /* Local variables */",MatchSource.CODE_COMMENT,math/minuit2/src/mntplot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mntplot.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mntplot.cxx:23,Safety,avoid,avoid,23,"// not needed - but to avoid a wrongly reported compiler warning (see ROOT-6496)",MatchSource.CODE_COMMENT,math/minuit2/src/mntplot.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mntplot.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserFcn.cxx:77,Performance,cache,cached,77,"// calling fTransform() like here was not thread safe because it was using a cached vector; // return Fcn()( fTransform(v) );; // make a new thread-safe implementation creating a vector each time; // a bit slower few% in stressFit and 10% in Rosenbrock function but it is negligible in big fits; // get first initial values of parameter (in case some one is fixed)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserFcn.cxx:49,Safety,safe,safe,49,"// calling fTransform() like here was not thread safe because it was using a cached vector; // return Fcn()( fTransform(v) );; // make a new thread-safe implementation creating a vector each time; // a bit slower few% in stressFit and 10% in Rosenbrock function but it is negligible in big fits; // get first initial values of parameter (in case some one is fixed)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserFcn.cxx:148,Safety,safe,safe,148,"// calling fTransform() like here was not thread safe because it was using a cached vector; // return Fcn()( fTransform(v) );; // make a new thread-safe implementation creating a vector each time; // a bit slower few% in stressFit and 10% in Rosenbrock function but it is negligible in big fits; // get first initial values of parameter (in case some one is fixed)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:47,Availability,error,errors,47,"// return std::vector of double with parameter errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:3,Deployability,release,release,3,"// release parameter n",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:7,Availability,error,error,7,"// set error for parameter n",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:7,Availability,error,error,7,"// get error for parameter n",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:3,Integrability,interface,interface,3,"// interface using parameter name",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:3,Deployability,release,release,3,"// release parameter",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:7,Availability,error,error,7,"// set error",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx:17,Availability,error,error,17,"// get parameter error",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:40,Availability,error,errors,40,"//; // construct from user parameters + errors (before minimization); //",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:36,Availability,error,errors,36,"// construct from user parameters + errors (before minimization) using std::vector for parameter error and // an; // std::vector of size n*(n+1)/2 for the covariance matrix and n (rank of cov matrix)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:97,Availability,error,error,97,"// construct from user parameters + errors (before minimization) using std::vector for parameter error and // an; // std::vector of size n*(n+1)/2 for the covariance matrix and n (rank of cov matrix)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:36,Availability,error,errors,36,"// construct from user parameters + errors (before minimization) using std::vector (params) and MnUserCovariance; // class",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:36,Availability,error,errors,36,"// construct from user parameters + errors (before minimization) using; // MnUserParameters and MnUserCovariance objects",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:12,Availability,avail,available,12,"// when not available; // if (st.Error().HesseFailed() || st.Error().InvertFailed() ) fCovStatus = -1;; // when available",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:33,Availability,Error,Error,33,"// when not available; // if (st.Error().HesseFailed() || st.Error().InvertFailed() ) fCovStatus = -1;; // when available",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:61,Availability,Error,Error,61,"// when not available; // if (st.Error().HesseFailed() || st.Error().InvertFailed() ) fCovStatus = -1;; // when available",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:112,Availability,avail,available,112,"// when not available; // if (st.Error().HesseFailed() || st.Error().InvertFailed() ) fCovStatus = -1;; // when available",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:19,Integrability,interface,interface,19,"// facade: forward interface of MnUserParameters and MnUserTransformation; // via MnUserParameterState",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Security,access,access,3,"// access to parameters (row-wise)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Security,access,access,3,"// access to parameters in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:13,Availability,error,errors,13,"// access to errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Security,access,access,3,"// access to errors in column-wise representation",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Security,access,access,3,"// access to single Parameter i",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Deployability,release,release,3,"// release if it was fixed",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Deployability,release,release,3,"// release if it was fixed",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:3,Deployability,release,release,3,"// release parameter e (external index); // no-op if parameter is const or if it is not fixed",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:7,Availability,error,error,7,"// set error for parameter e (external index)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:7,Availability,error,error,7,"// get error for parameter e (external index)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:55,Integrability,interface,interface,55,"// convert external number into name of Parameter (new interface returning a string)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx:20,Modifiability,variab,variable,20,"// return number of variable parameters",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserParameterState.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserParameterState.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:65,Availability,error,errors,65,"// constructor from a vector of parameter values and a vector of errors (step sizes); // class has as data member the transformation objects (all of the types),; // the std::vector of MinuitParameter objects and the vector with the index conversions from; // internal to external (fExtOfInt)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:50,Safety,safe,safe,50,"//#ifdef MINUIT2_THREAD_SAFE; // this if a thread-safe implementation needed if want to share transformation object between the threads",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:241,Performance,Cache,Cache,241,"// #else; // const std::vector<double> & MnUserTransformation::operator()(const MnAlgebraicVector& pstates) const {; // // transform an internal Minuit vector of internal values in a std::vector of external values; // // std::vector<double> Cache(pstates.size() );; // for(unsigned int i = 0; i < pstates.size(); i++) {; // if(fParameters[fExtOfInt[i]].HasLimits()) {; // fCache[fExtOfInt[i]] = Int2ext(i, pstates(i));; // } else {; // fCache[fExtOfInt[i]] = pstates(i);; // }; // }; // return fCache;; // }; // #endif",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:19,Availability,error,error,19,"// return external error from internal error for parameter i; // err = sigma Value == std::sqrt(cov(i,i))",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:39,Availability,error,error,39,"// return external error from internal error for parameter i; // err = sigma Value == std::sqrt(cov(i,i))",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:59,Availability,error,error,59,"// return the external covariance matrix from the internal error matrix and the internal parameter value; // the vector of internal parameter is needed for the derivatives (Jacobian of the transformation); // Vext(i,j) = Vint(i,j) * dPext(i)/dPint(i) * dPext(j)/dPint(j)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:47,Availability,error,errors,47,"// return std::vector of double with parameter errors",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:3,Deployability,release,release,3,"// release parameter n (external index)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:7,Availability,error,error,7,"// set error for parameter n (external index)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:7,Availability,error,error,7,"// get error for parameter n (external index)",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:3,Integrability,interface,interface,3,"// interface by parameter name",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:3,Deployability,release,release,3,"// release parameter",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:7,Availability,error,error,7,"// set error",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx:17,Availability,error,error,17,"// get parameter error",MatchSource.CODE_COMMENT,math/minuit2/src/MnUserTransformation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/MnUserTransformation.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:460,Availability,Error,Error,460,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:640,Deployability,Install,Installers,640,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:184,Integrability,rout,routine,184,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:489,Integrability,rout,routines,489,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:532,Integrability,rout,routine,532,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:593,Integrability,message,message,593,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:855,Integrability,rout,routine,855,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx:1001,Integrability,rout,routine,1001,"/* Format strings */; // static char fmt_9999[] = ""(\002 ** On entry to \002,a6,\002 Parameter nu\// mber \002,i2,\002 had \002,\002an; // illegal Value\002)"";; /* -- LAPACK auxiliary routine (version 3.0) -- */; /* Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd., */; /* Courant Institute, Argonne National Lab, and Rice University */; /* September 30, 1994 */; /* .. Scalar Arguments .. */; /* .. */; /* Purpose */; /* ======= */; /* XERBLA is an Error handler for the LAPACK routines. */; /* It is called by an LAPACK routine if an input Parameter has an */; /* invalid Value. A message is printed and execution stops. */; /* Installers may consider modifying the STOP statement in order to */; /* call system-specific exception-handling facilities. */; /* Arguments */; /* ========= */; /* SRNAME (input) CHARACTER*6 */; /* The Name of the routine which called XERBLA. */; /* INFO (input) INTEGER */; /* The position of the invalid Parameter in the Parameter list */; /* of the calling routine. */; /* ===================================================================== */; /* .. Executable Statements .. */",MatchSource.CODE_COMMENT,math/minuit2/src/mnxerbla.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/mnxerbla.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:56,Integrability,interface,interface,56,"// minimize from a FCNBase and a MnUserparameterState - interface used by all the previous ones; // based on FCNBase. Create in this case a NumericalGradient calculator; // Create the minuit FCN wrapper (MnUserFcn) containing the transformation (int<->ext); // need MnUserFcn for difference int-ext parameters",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:195,Integrability,wrap,wrapper,195,"// minimize from a FCNBase and a MnUserparameterState - interface used by all the previous ones; // based on FCNBase. Create in this case a NumericalGradient calculator; // Create the minuit FCN wrapper (MnUserFcn) containing the transformation (int<->ext); // need MnUserFcn for difference int-ext parameters",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:75,Integrability,interface,interface,75,"// minimize from a function with gradient and a MnUserParameterState -; // interface based on function with gradient (external/analytical gradients); // Create in this case an AnalyticalGradient calculator; // Create the minuit FCN wrapper (MnUserFcn) containing the transformation (int<->ext)",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:232,Integrability,wrap,wrapper,232,"// minimize from a function with gradient and a MnUserParameterState -; // interface based on function with gradient (external/analytical gradients); // Create in this case an AnalyticalGradient calculator; // Create the minuit FCN wrapper (MnUserFcn) containing the transformation (int<->ext)",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:3,Integrability,Interface,Interface,3,"// Interface used by all the others for the minimization using the base MinimumBuilder class; // According to the contained type of MinimumBuilder the right type will be used",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:9,Availability,toler,tolerance,9,"// scale tolerance with Up(); // avoid tolerance too smalls (than limits)",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:39,Availability,toler,tolerance,39,"// scale tolerance with Up(); // avoid tolerance too smalls (than limits)",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx:33,Safety,avoid,avoid,33,"// scale tolerance with Up(); // avoid tolerance too smalls (than limits)",MatchSource.CODE_COMMENT,math/minuit2/src/ModularFunctionMinimizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ModularFunctionMinimizer.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NegativeG2LineSearch.cxx:44,Performance,perform,perform,44,"// when the second derivatives are negative perform a line search along Parameter which gives; // negative second derivative and magnitude equal to the Gradient step size.; // Recalculate the gradients for all the Parameter after the correction and; // continue iteration in case the second derivatives are still negative; //",MatchSource.CODE_COMMENT,math/minuit2/src/NegativeG2LineSearch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NegativeG2LineSearch.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NegativeG2LineSearch.cxx:138,Testability,test,tested,138,"// when using analytical gradient use as step size a dummy value of 1; // maybe could do better using user given parameter step sizes; // tested using inverse of G2() gives worse behaviour",MatchSource.CODE_COMMENT,math/minuit2/src/NegativeG2LineSearch.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NegativeG2LineSearch.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx:44,Integrability,synchroniz,synchronization,44,"// print after parallel processing to avoid synchronization issues",MatchSource.CODE_COMMENT,math/minuit2/src/Numerical2PGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx:38,Safety,avoid,avoid,38,"// print after parallel processing to avoid synchronization issues",MatchSource.CODE_COMMENT,math/minuit2/src/Numerical2PGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx:24,Availability,toler,tolerance,24,"// return gradient step tolerance (set in strategy object)",MatchSource.CODE_COMMENT,math/minuit2/src/Numerical2PGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx:19,Availability,toler,tolerance,19,"// return gradient tolerance (set in strategy object)",MatchSource.CODE_COMMENT,math/minuit2/src/Numerical2PGradientCalculator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/Numerical2PGradientCalculator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NumericalDerivator.cxx:23,Availability,Error,Error,23,"// What Minuit2 calls ""Error"" is stepsize on the ROOT side.",MatchSource.CODE_COMMENT,math/minuit2/src/NumericalDerivator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/NumericalDerivator.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ParametricFunction.cxx:109,Energy Efficiency,efficient,efficient,109,"// calculate the numerical gradient (using Numerical2PGradientCalculator); // LM: this I believe is not very efficient",MatchSource.CODE_COMMENT,math/minuit2/src/ParametricFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ParametricFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ScanBuilder.cxx:29,Performance,perform,performing,29,"// find the function minimum performing a parameter scan (using MnParameterScan class); // function gradient is not used",MatchSource.CODE_COMMENT,math/minuit2/src/ScanBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/ScanBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:247,Integrability,synchroniz,synchronize,247,"// find the minimum using the Simplex method of Nelder and Mead (does not use function gradient); // method to find initial simplex is slightly different than in the original Fortran; // Minuit since has not been proofed that one to be better; // synchronize print levels",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:30,Usability,Simpl,Simplex,30,"// find the minimum using the Simplex method of Nelder and Mead (does not use function gradient); // method to find initial simplex is slightly different than in the original Fortran; // Minuit since has not been proofed that one to be better; // synchronize print levels",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:124,Usability,simpl,simplex,124,"// find the minimum using the Simplex method of Nelder and Mead (does not use function gradient); // method to find initial simplex is slightly different than in the original Fortran; // Minuit since has not been proofed that one to be better; // synchronize print levels",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:302,Availability,error,errors,302,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:21,Usability,SIMPL,SIMPLEX,21,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:89,Usability,simpl,simplex,89,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:97,Usability,Simpl,Simplex,97,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:164,Usability,simpl,simplex,164,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx:202,Usability,simpl,simplex,202,"// std::cout << ""ALL SIMPLEX PARAMETERS: ""<< std::endl;; // for (unsigned int i = 0; i < simplex.Simplex().size(); ++i); // std::cout << "" i = "" << i << "" x = "" << simplex(i).second << "" fval(x) = "" << simplex(i).first <<; // std::endl;; // trace the iterations (need to create a MinimumState although errors and gradient are not existing)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexBuilder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexBuilder.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexParameters.cxx:3,Deployability,update,update,3,"// update the SimplexParameter object with a new value y = FCN(p)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexParameters.cxx:14,Usability,Simpl,SimplexParameter,14,"// update the SimplexParameter object with a new value y = FCN(p)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexParameters.cxx
https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexParameters.cxx:8,Usability,simpl,simplex,8,"// find simplex direction (vector from big to smaller parameter points)",MatchSource.CODE_COMMENT,math/minuit2/src/SimplexParameters.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/src/SimplexParameters.cxx
